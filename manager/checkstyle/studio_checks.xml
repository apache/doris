<?xml version="1.0"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one
  ~ or more contributor license agreements.  See the NOTICE file
  ~ distributed with this work for additional information
  ~ regarding copyright ownership.  The ASF licenses this file
  ~ to you under the Apache License, Version 2.0 (the
  ~ "License"); you may not use this file except in compliance
  ~ with the License.  You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied. See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->

<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
    Checkstyle configuration that checks the Google coding conventions from:
    -  Google Java Style
       https://google-styleguide.googlecode.com/svn-history/r130/trunk/javaguide.html
    Checkstyle is very configurable. Be sure to read the documentation at
    http://checkstyle.sf.net (or in your downloaded distribution).
    Most Checks are configurable, be sure to consult the documentation.
    To completely disable a check, just comment it out or delete it from the file.
    Copied from https://github.com/checkstyle/checkstyle/blob/master/google_checks.xml
 -->

<module name = "Checker">
    <property name="charset" value="UTF-8"/>

    <property name="severity" value="error"/>

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="@throw.*\.$"/>
        <property name="message" value="Period is not needed at the end of the @throw tag."/>
        <property name="fileExtensions" value=".java"/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="@return.*\.$"/>
        <property name="message" value="Period is not needed at the end of the @return tag."/>
        <property name="fileExtensions" value=".java"/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="@param.*\.$"/>
        <property name="message" value="Period is not needed at the end of the @param tag."/>
        <property name="fileExtensions" value=".java"/>
    </module>
    <module name="RegexpSingleline">
<!--        <property name="format" value="TODO[^\(]"/>-->
<!--        <property name="message" value="TODO must be annotated with the author in the format TODO(author)"/>-->
        <property name="fileExtensions" value=".java"/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="&gt;&gt;&gt;&gt;&gt;&gt;&gt;"/>
        <property name="message" value="Merge conflicts unresolved."/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="&lt;&lt;&lt;&lt;&lt;&lt;&lt;"/>
        <property name="message" value="Merge conflicts unresolved."/>
    </module>
    <module name="RegexpMultiline">
<!--        <property name="format" value="\{\n\s*\n"/>-->
        <property name="format" value="\n{3}"/>
        <property name="fileExtensions" value=".java"/>
        <property name="message" value="Extra newline"/>
    </module>
<!--    <module name="RegexpMultiline">-->
<!--        <property name="format" value="\n\s*\n\s*}"/>-->
<!--        <property name="fileExtensions" value=".java"/>-->
<!--        <property name="message" value="Extra newline at end of block"/>-->
<!--    </module>-->

    <!-- All Java AST specific tests live under TreeWalker module. -->
    <module name="TreeWalker">
        <module name="OuterTypeFilename"/>
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format"
                      value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message" value="Avoid using corresponding octal or Unicode escape."/>
        </module>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>
        <module name="LineLength">
            <property name="max" value="120"/>
            <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://|^ ([\s\S]*)"/>
        </module>
        <module name="AvoidStarImport"/>
        <module name="UnusedImports">
            <property name="processJavadoc" value="true"/>
        </module>
        <module name="OneTopLevelClass"/>
        <module name="NoLineWrap"/>
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF,
        LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>
        <module name="NeedBraces"/>
        <module name="LeftCurly">
<!--            <property name="maxLineLength" value="100"/>-->
        </module>
        <module name="RightCurly"/>
        <module name="RightCurly">
            <property name="option" value="alone"/>
            <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE,
        LITERAL_DO, STATIC_INIT, INSTANCE_INIT"/>
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="OneStatementPerLine"/>
        <module name="EmptyStatement"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="ArrayTypeStyle"/>
        <module name="MissingSwitchDefault"/>
        <module name="FallThrough"/>
        <module name="UpperEll"/>
        <module name="ModifierOrder"/>
        <module name="EmptyLineSeparator">
<!--            <property name="allowNoEmptyLineBetweenFields" value="true"/>-->
            <property name="tokens" value="PACKAGE_DEF , IMPORT , STATIC_IMPORT , CLASS_DEF , INTERFACE_DEF , ENUM_DEF , STATIC_INIT , INSTANCE_INIT , METHOD_DEF , CTOR_DEF"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="PackageName">
            <!-- https://docs.oracle.com/javase/tutorial/java/package/namingpkgs.html -->
            <property name="format" value="^[a-z]+(\.[a-z_][a-z0-9_]*)*$"/>
            <message key="name.invalidPattern"
                     value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="TypeName">
            <message key="name.invalidPattern"
                     value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>
<!--        <module name="MemberName">-->
<!--            <property name="format" value="^m[A-Z][a-zA-Z0-9]*$"/>-->
<!--            <message key="name.invalidPattern"-->
<!--                     value="Member name ''{0}'' must match pattern ''{1}''."/>-->
<!--        </module>-->
        <module name="ConstantName"/>
        <module name="ParameterName">
            <property name="format" value="[a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="allowOneCharVarInForLoop" value="true"/>
            <message key="name.invalidPattern"
                     value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="NoFinalizer"/>
        <module name="GenericWhitespace">
            <message key="ws.followed"
                     value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                     value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>
<!--        <module name="Indentation">-->
<!--            <property name="basicOffset" value="2"/>-->
<!--            <property name="braceAdjustment" value="0"/>-->
<!--            <property name="caseIndent" value="2"/>-->
<!--            <property name="throwsIndent" value="4"/>-->
<!--            <property name="lineWrappingIndentation" value="4"/>-->
<!--            <property name="arrayInitIndent" value="16"/>-->
<!--        </module>-->
<!--        <module name="OverloadMethodsDeclarationOrder"/>-->
        <!-- Checks that our import order rules are followed. -->
        <module name="CustomImportOrder">
            <property name="specialImportsRegExp" value="alluxio"/>
            <property name="customImportOrderRules" value="STATIC###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE###STANDARD_JAVA_PACKAGE"/>
        </module>
        <module name="MethodParamPad"/>
        <module name="ParenPad">
            <property name="option" value="nospace"/>
        </module>
        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property name="tokens" value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE,
        LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>
        </module>
        <module name="StaticVariableName">
<!--            <property name="format" value="^s[A-Z][a-zA-Z0-9]*$"/>-->
            <message key="name.invalidPattern"
                     value="Static member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="RegexpSinglelineJava">
<!--            <property name="format" value="^\s*this\."/>-->
<!--            <property name="message" value="keyword this is not needed"/>-->
        </module>
        <module name="MissingDeprecated"/>
        <module name="EqualsHashCode"/>

        <!-- Checks the Javadoc of a public method or constructor. Only applies to production code. -->
        <module name="JavadocMethod">
            <property name="id" value="ProductionScope"/>
            <property name="scope" value="public"/>
            <property name="allowMissingThrowsTags" value="true"/>
            <property name="allowMissingPropertyJavadoc" value="true"/>
<!--            <property name="allowMissingParamTags" value="true"/>-->
<!--            <property name="allowMissingReturnTag" value="true"/>-->
            <property name="tokens" value="ANNOTATION_FIELD_DEF"/>
        </module>
        <!-- Checks Javadoc comments for public class and interface definitions. Only applies to
             production code -->
<!--        <module name="JavadocType">-->
<!--            <property name="id" value="ProductionScope"/>-->
<!--            <property name="scope" value="public"/>-->
<!--        </module>-->
        <!-- Checks that Javadoc is properly formatted -->
<!--        <module name="JavadocStyle"/>-->

        <!-- Checks that there is no whitespace before various unary operators. -->
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="POST_DEC, POST_INC"/>
            <property name="severity" value="error"/>
        </module>

        <!-- Checks that there is no whitespace before dot and semicolon, except line-breaks. -->
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="DOT, SEMI"/>
            <property name="allowLineBreaks" value="true"/>
            <property name="severity" value="error"/>
        </module>

        <!-- Checks that there is no whitespace after various unary operators. -->
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
            <property name="severity" value="error"/>
        </module>

        <!-- Checks that there is whitespace after various tokens. -->
        <module name="WhitespaceAfter"/>

        <!-- Allows SuppressionCommentFilter to access module contents. -->
<!--        <module name="FileContentsHolder"/>-->
    </module>

    <!-- always use Unix-style line separators -->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="message" value="Trailing whitespace found."/>
        <property name="fileExtensions" value=".java"/>
    </module>

    <!-- Disables checkstyle for particular lines of codes. -->
<!--    <module name="SuppressionCommentFilter">-->
<!--        <property name="offCommentFormat" value="CHECKSTYLE.OFF\: ([\w\|]+)"/>-->
<!--        <property name="onCommentFormat" value="CHECKSTYLE.ON\: ([\w\|]+)"/>-->
<!--    </module>-->
</module>
