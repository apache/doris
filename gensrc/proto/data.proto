// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax="proto2";

package doris;
option java_package = "org.apache.doris.proto";

message PQueryStatistics {
    optional int64 scan_rows = 1;
    optional int64 scan_bytes = 2;
    optional int64 returned_rows = 3;
    optional int64 cpu_ms = 4;
}

message PRowBatch {
    required int32 num_rows = 1;
    repeated int32 row_tuples = 2;
    repeated int32 tuple_offsets = 3;
    required bytes tuple_data = 4;
    required bool is_compressed = 5;
}

message PColumn {
    enum DataType {
        UINT8 = 0;
        UINT16 = 1;
        UINT32 = 2;
        UINT64 = 3;
        UINT128 = 4;
        UINT256 = 5;
        INT16 = 6;
        INT8 = 7;
        INT32 = 8;
        INT64 = 9;
        INT128 = 10;
        INT256 = 11;
        FLOAT32 = 12;
        FLOAT64 = 13;
        BOOLEAN = 14;
        DATE = 15;
        DATETIME = 16;
        HLL = 17;
        BITMAP = 18;
        ARRAY = 19;
        MAP = 20;
        STRUCT =21;
        STRING = 22;
        DECIMAL32 = 23;
        DECIMAL64 = 24;
        DECIMAL128 = 25;
        BYTES = 26;
        NOTHING = 27;
        UNKNOWN = 999;
    }
    message Decimal {
        optional uint32 precision = 1;
        optional uint32 scale = 2;
    }
    required string name = 1;
    // origin column data_type
    required DataType type = 2;
    // serialized data type
    repeated bool is_null = 3;
    // store in plain text or in binary data
    optional bytes binary = 4;
    optional bool compressed = 5 [default = false];
    optional Decimal decimal_param = 6;
}

message PBlock {
    optional uint64 num_rows = 1;
    optional uint32 num_columns = 2;
    repeated PColumn columns = 3;
}
