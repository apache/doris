/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-06-14")
public class TPaimonFileDesc implements org.apache.thrift.TBase<TPaimonFileDesc, TPaimonFileDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TPaimonFileDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPaimonFileDesc");

  private static final org.apache.thrift.protocol.TField PAIMON_SPLIT_FIELD_DESC = new org.apache.thrift.protocol.TField("paimon_split", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PAIMON_COLUMN_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("paimon_column_ids", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAIMON_COLUMN_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("paimon_column_types", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PAIMON_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("paimon_column_names", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField HIVE_METASTORE_URIS_FIELD_DESC = new org.apache.thrift.protocol.TField("hive_metastore_uris", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField WAREHOUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("warehouse", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LENGTH_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("length_byte", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPaimonFileDescStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPaimonFileDescTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer paimon_split; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String paimon_column_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String paimon_column_types; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String paimon_column_names; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String hive_metastore_uris; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String warehouse; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String db_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String length_byte; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAIMON_SPLIT((short)1, "paimon_split"),
    PAIMON_COLUMN_IDS((short)2, "paimon_column_ids"),
    PAIMON_COLUMN_TYPES((short)3, "paimon_column_types"),
    PAIMON_COLUMN_NAMES((short)4, "paimon_column_names"),
    HIVE_METASTORE_URIS((short)5, "hive_metastore_uris"),
    WAREHOUSE((short)6, "warehouse"),
    DB_NAME((short)7, "db_name"),
    TABLE_NAME((short)8, "table_name"),
    LENGTH_BYTE((short)9, "length_byte");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAIMON_SPLIT
          return PAIMON_SPLIT;
        case 2: // PAIMON_COLUMN_IDS
          return PAIMON_COLUMN_IDS;
        case 3: // PAIMON_COLUMN_TYPES
          return PAIMON_COLUMN_TYPES;
        case 4: // PAIMON_COLUMN_NAMES
          return PAIMON_COLUMN_NAMES;
        case 5: // HIVE_METASTORE_URIS
          return HIVE_METASTORE_URIS;
        case 6: // WAREHOUSE
          return WAREHOUSE;
        case 7: // DB_NAME
          return DB_NAME;
        case 8: // TABLE_NAME
          return TABLE_NAME;
        case 9: // LENGTH_BYTE
          return LENGTH_BYTE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PAIMON_SPLIT,_Fields.PAIMON_COLUMN_IDS,_Fields.PAIMON_COLUMN_TYPES,_Fields.PAIMON_COLUMN_NAMES,_Fields.HIVE_METASTORE_URIS,_Fields.WAREHOUSE,_Fields.DB_NAME,_Fields.TABLE_NAME,_Fields.LENGTH_BYTE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAIMON_SPLIT, new org.apache.thrift.meta_data.FieldMetaData("paimon_split", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PAIMON_COLUMN_IDS, new org.apache.thrift.meta_data.FieldMetaData("paimon_column_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAIMON_COLUMN_TYPES, new org.apache.thrift.meta_data.FieldMetaData("paimon_column_types", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAIMON_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("paimon_column_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIVE_METASTORE_URIS, new org.apache.thrift.meta_data.FieldMetaData("hive_metastore_uris", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WAREHOUSE, new org.apache.thrift.meta_data.FieldMetaData("warehouse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LENGTH_BYTE, new org.apache.thrift.meta_data.FieldMetaData("length_byte", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPaimonFileDesc.class, metaDataMap);
  }

  public TPaimonFileDesc() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPaimonFileDesc(TPaimonFileDesc other) {
    if (other.isSetPaimonSplit()) {
      this.paimon_split = org.apache.thrift.TBaseHelper.copyBinary(other.paimon_split);
    }
    if (other.isSetPaimonColumnIds()) {
      this.paimon_column_ids = other.paimon_column_ids;
    }
    if (other.isSetPaimonColumnTypes()) {
      this.paimon_column_types = other.paimon_column_types;
    }
    if (other.isSetPaimonColumnNames()) {
      this.paimon_column_names = other.paimon_column_names;
    }
    if (other.isSetHiveMetastoreUris()) {
      this.hive_metastore_uris = other.hive_metastore_uris;
    }
    if (other.isSetWarehouse()) {
      this.warehouse = other.warehouse;
    }
    if (other.isSetDbName()) {
      this.db_name = other.db_name;
    }
    if (other.isSetTableName()) {
      this.table_name = other.table_name;
    }
    if (other.isSetLengthByte()) {
      this.length_byte = other.length_byte;
    }
  }

  public TPaimonFileDesc deepCopy() {
    return new TPaimonFileDesc(this);
  }

  @Override
  public void clear() {
    this.paimon_split = null;
    this.paimon_column_ids = null;
    this.paimon_column_types = null;
    this.paimon_column_names = null;
    this.hive_metastore_uris = null;
    this.warehouse = null;
    this.db_name = null;
    this.table_name = null;
    this.length_byte = null;
  }

  public byte[] getPaimonSplit() {
    setPaimonSplit(org.apache.thrift.TBaseHelper.rightSize(paimon_split));
    return paimon_split == null ? null : paimon_split.array();
  }

  public java.nio.ByteBuffer bufferForPaimonSplit() {
    return org.apache.thrift.TBaseHelper.copyBinary(paimon_split);
  }

  public TPaimonFileDesc setPaimonSplit(byte[] paimon_split) {
    this.paimon_split = paimon_split == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(paimon_split.clone());
    return this;
  }

  public TPaimonFileDesc setPaimonSplit(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer paimon_split) {
    this.paimon_split = org.apache.thrift.TBaseHelper.copyBinary(paimon_split);
    return this;
  }

  public void unsetPaimonSplit() {
    this.paimon_split = null;
  }

  /** Returns true if field paimon_split is set (has been assigned a value) and false otherwise */
  public boolean isSetPaimonSplit() {
    return this.paimon_split != null;
  }

  public void setPaimonSplitIsSet(boolean value) {
    if (!value) {
      this.paimon_split = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPaimonColumnIds() {
    return this.paimon_column_ids;
  }

  public TPaimonFileDesc setPaimonColumnIds(@org.apache.thrift.annotation.Nullable java.lang.String paimon_column_ids) {
    this.paimon_column_ids = paimon_column_ids;
    return this;
  }

  public void unsetPaimonColumnIds() {
    this.paimon_column_ids = null;
  }

  /** Returns true if field paimon_column_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetPaimonColumnIds() {
    return this.paimon_column_ids != null;
  }

  public void setPaimonColumnIdsIsSet(boolean value) {
    if (!value) {
      this.paimon_column_ids = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPaimonColumnTypes() {
    return this.paimon_column_types;
  }

  public TPaimonFileDesc setPaimonColumnTypes(@org.apache.thrift.annotation.Nullable java.lang.String paimon_column_types) {
    this.paimon_column_types = paimon_column_types;
    return this;
  }

  public void unsetPaimonColumnTypes() {
    this.paimon_column_types = null;
  }

  /** Returns true if field paimon_column_types is set (has been assigned a value) and false otherwise */
  public boolean isSetPaimonColumnTypes() {
    return this.paimon_column_types != null;
  }

  public void setPaimonColumnTypesIsSet(boolean value) {
    if (!value) {
      this.paimon_column_types = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPaimonColumnNames() {
    return this.paimon_column_names;
  }

  public TPaimonFileDesc setPaimonColumnNames(@org.apache.thrift.annotation.Nullable java.lang.String paimon_column_names) {
    this.paimon_column_names = paimon_column_names;
    return this;
  }

  public void unsetPaimonColumnNames() {
    this.paimon_column_names = null;
  }

  /** Returns true if field paimon_column_names is set (has been assigned a value) and false otherwise */
  public boolean isSetPaimonColumnNames() {
    return this.paimon_column_names != null;
  }

  public void setPaimonColumnNamesIsSet(boolean value) {
    if (!value) {
      this.paimon_column_names = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHiveMetastoreUris() {
    return this.hive_metastore_uris;
  }

  public TPaimonFileDesc setHiveMetastoreUris(@org.apache.thrift.annotation.Nullable java.lang.String hive_metastore_uris) {
    this.hive_metastore_uris = hive_metastore_uris;
    return this;
  }

  public void unsetHiveMetastoreUris() {
    this.hive_metastore_uris = null;
  }

  /** Returns true if field hive_metastore_uris is set (has been assigned a value) and false otherwise */
  public boolean isSetHiveMetastoreUris() {
    return this.hive_metastore_uris != null;
  }

  public void setHiveMetastoreUrisIsSet(boolean value) {
    if (!value) {
      this.hive_metastore_uris = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getWarehouse() {
    return this.warehouse;
  }

  public TPaimonFileDesc setWarehouse(@org.apache.thrift.annotation.Nullable java.lang.String warehouse) {
    this.warehouse = warehouse;
    return this;
  }

  public void unsetWarehouse() {
    this.warehouse = null;
  }

  /** Returns true if field warehouse is set (has been assigned a value) and false otherwise */
  public boolean isSetWarehouse() {
    return this.warehouse != null;
  }

  public void setWarehouseIsSet(boolean value) {
    if (!value) {
      this.warehouse = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDbName() {
    return this.db_name;
  }

  public TPaimonFileDesc setDbName(@org.apache.thrift.annotation.Nullable java.lang.String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDbName() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDbName() {
    return this.db_name != null;
  }

  public void setDbNameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTableName() {
    return this.table_name;
  }

  public TPaimonFileDesc setTableName(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTableName() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.table_name != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLengthByte() {
    return this.length_byte;
  }

  public TPaimonFileDesc setLengthByte(@org.apache.thrift.annotation.Nullable java.lang.String length_byte) {
    this.length_byte = length_byte;
    return this;
  }

  public void unsetLengthByte() {
    this.length_byte = null;
  }

  /** Returns true if field length_byte is set (has been assigned a value) and false otherwise */
  public boolean isSetLengthByte() {
    return this.length_byte != null;
  }

  public void setLengthByteIsSet(boolean value) {
    if (!value) {
      this.length_byte = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PAIMON_SPLIT:
      if (value == null) {
        unsetPaimonSplit();
      } else {
        if (value instanceof byte[]) {
          setPaimonSplit((byte[])value);
        } else {
          setPaimonSplit((java.nio.ByteBuffer)value);
        }
      }
      break;

    case PAIMON_COLUMN_IDS:
      if (value == null) {
        unsetPaimonColumnIds();
      } else {
        setPaimonColumnIds((java.lang.String)value);
      }
      break;

    case PAIMON_COLUMN_TYPES:
      if (value == null) {
        unsetPaimonColumnTypes();
      } else {
        setPaimonColumnTypes((java.lang.String)value);
      }
      break;

    case PAIMON_COLUMN_NAMES:
      if (value == null) {
        unsetPaimonColumnNames();
      } else {
        setPaimonColumnNames((java.lang.String)value);
      }
      break;

    case HIVE_METASTORE_URIS:
      if (value == null) {
        unsetHiveMetastoreUris();
      } else {
        setHiveMetastoreUris((java.lang.String)value);
      }
      break;

    case WAREHOUSE:
      if (value == null) {
        unsetWarehouse();
      } else {
        setWarehouse((java.lang.String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDbName();
      } else {
        setDbName((java.lang.String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((java.lang.String)value);
      }
      break;

    case LENGTH_BYTE:
      if (value == null) {
        unsetLengthByte();
      } else {
        setLengthByte((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PAIMON_SPLIT:
      return getPaimonSplit();

    case PAIMON_COLUMN_IDS:
      return getPaimonColumnIds();

    case PAIMON_COLUMN_TYPES:
      return getPaimonColumnTypes();

    case PAIMON_COLUMN_NAMES:
      return getPaimonColumnNames();

    case HIVE_METASTORE_URIS:
      return getHiveMetastoreUris();

    case WAREHOUSE:
      return getWarehouse();

    case DB_NAME:
      return getDbName();

    case TABLE_NAME:
      return getTableName();

    case LENGTH_BYTE:
      return getLengthByte();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PAIMON_SPLIT:
      return isSetPaimonSplit();
    case PAIMON_COLUMN_IDS:
      return isSetPaimonColumnIds();
    case PAIMON_COLUMN_TYPES:
      return isSetPaimonColumnTypes();
    case PAIMON_COLUMN_NAMES:
      return isSetPaimonColumnNames();
    case HIVE_METASTORE_URIS:
      return isSetHiveMetastoreUris();
    case WAREHOUSE:
      return isSetWarehouse();
    case DB_NAME:
      return isSetDbName();
    case TABLE_NAME:
      return isSetTableName();
    case LENGTH_BYTE:
      return isSetLengthByte();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TPaimonFileDesc)
      return this.equals((TPaimonFileDesc)that);
    return false;
  }

  public boolean equals(TPaimonFileDesc that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_paimon_split = true && this.isSetPaimonSplit();
    boolean that_present_paimon_split = true && that.isSetPaimonSplit();
    if (this_present_paimon_split || that_present_paimon_split) {
      if (!(this_present_paimon_split && that_present_paimon_split))
        return false;
      if (!this.paimon_split.equals(that.paimon_split))
        return false;
    }

    boolean this_present_paimon_column_ids = true && this.isSetPaimonColumnIds();
    boolean that_present_paimon_column_ids = true && that.isSetPaimonColumnIds();
    if (this_present_paimon_column_ids || that_present_paimon_column_ids) {
      if (!(this_present_paimon_column_ids && that_present_paimon_column_ids))
        return false;
      if (!this.paimon_column_ids.equals(that.paimon_column_ids))
        return false;
    }

    boolean this_present_paimon_column_types = true && this.isSetPaimonColumnTypes();
    boolean that_present_paimon_column_types = true && that.isSetPaimonColumnTypes();
    if (this_present_paimon_column_types || that_present_paimon_column_types) {
      if (!(this_present_paimon_column_types && that_present_paimon_column_types))
        return false;
      if (!this.paimon_column_types.equals(that.paimon_column_types))
        return false;
    }

    boolean this_present_paimon_column_names = true && this.isSetPaimonColumnNames();
    boolean that_present_paimon_column_names = true && that.isSetPaimonColumnNames();
    if (this_present_paimon_column_names || that_present_paimon_column_names) {
      if (!(this_present_paimon_column_names && that_present_paimon_column_names))
        return false;
      if (!this.paimon_column_names.equals(that.paimon_column_names))
        return false;
    }

    boolean this_present_hive_metastore_uris = true && this.isSetHiveMetastoreUris();
    boolean that_present_hive_metastore_uris = true && that.isSetHiveMetastoreUris();
    if (this_present_hive_metastore_uris || that_present_hive_metastore_uris) {
      if (!(this_present_hive_metastore_uris && that_present_hive_metastore_uris))
        return false;
      if (!this.hive_metastore_uris.equals(that.hive_metastore_uris))
        return false;
    }

    boolean this_present_warehouse = true && this.isSetWarehouse();
    boolean that_present_warehouse = true && that.isSetWarehouse();
    if (this_present_warehouse || that_present_warehouse) {
      if (!(this_present_warehouse && that_present_warehouse))
        return false;
      if (!this.warehouse.equals(that.warehouse))
        return false;
    }

    boolean this_present_db_name = true && this.isSetDbName();
    boolean that_present_db_name = true && that.isSetDbName();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTableName();
    boolean that_present_table_name = true && that.isSetTableName();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_length_byte = true && this.isSetLengthByte();
    boolean that_present_length_byte = true && that.isSetLengthByte();
    if (this_present_length_byte || that_present_length_byte) {
      if (!(this_present_length_byte && that_present_length_byte))
        return false;
      if (!this.length_byte.equals(that.length_byte))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPaimonSplit()) ? 131071 : 524287);
    if (isSetPaimonSplit())
      hashCode = hashCode * 8191 + paimon_split.hashCode();

    hashCode = hashCode * 8191 + ((isSetPaimonColumnIds()) ? 131071 : 524287);
    if (isSetPaimonColumnIds())
      hashCode = hashCode * 8191 + paimon_column_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetPaimonColumnTypes()) ? 131071 : 524287);
    if (isSetPaimonColumnTypes())
      hashCode = hashCode * 8191 + paimon_column_types.hashCode();

    hashCode = hashCode * 8191 + ((isSetPaimonColumnNames()) ? 131071 : 524287);
    if (isSetPaimonColumnNames())
      hashCode = hashCode * 8191 + paimon_column_names.hashCode();

    hashCode = hashCode * 8191 + ((isSetHiveMetastoreUris()) ? 131071 : 524287);
    if (isSetHiveMetastoreUris())
      hashCode = hashCode * 8191 + hive_metastore_uris.hashCode();

    hashCode = hashCode * 8191 + ((isSetWarehouse()) ? 131071 : 524287);
    if (isSetWarehouse())
      hashCode = hashCode * 8191 + warehouse.hashCode();

    hashCode = hashCode * 8191 + ((isSetDbName()) ? 131071 : 524287);
    if (isSetDbName())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTableName()) ? 131071 : 524287);
    if (isSetTableName())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetLengthByte()) ? 131071 : 524287);
    if (isSetLengthByte())
      hashCode = hashCode * 8191 + length_byte.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TPaimonFileDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetPaimonSplit(), other.isSetPaimonSplit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaimonSplit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paimon_split, other.paimon_split);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPaimonColumnIds(), other.isSetPaimonColumnIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaimonColumnIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paimon_column_ids, other.paimon_column_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPaimonColumnTypes(), other.isSetPaimonColumnTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaimonColumnTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paimon_column_types, other.paimon_column_types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPaimonColumnNames(), other.isSetPaimonColumnNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaimonColumnNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paimon_column_names, other.paimon_column_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHiveMetastoreUris(), other.isSetHiveMetastoreUris());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHiveMetastoreUris()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hive_metastore_uris, other.hive_metastore_uris);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWarehouse(), other.isSetWarehouse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarehouse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.warehouse, other.warehouse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDbName(), other.isSetDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTableName(), other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLengthByte(), other.isSetLengthByte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLengthByte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length_byte, other.length_byte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPaimonFileDesc(");
    boolean first = true;

    if (isSetPaimonSplit()) {
      sb.append("paimon_split:");
      if (this.paimon_split == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.paimon_split, sb);
      }
      first = false;
    }
    if (isSetPaimonColumnIds()) {
      if (!first) sb.append(", ");
      sb.append("paimon_column_ids:");
      if (this.paimon_column_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.paimon_column_ids);
      }
      first = false;
    }
    if (isSetPaimonColumnTypes()) {
      if (!first) sb.append(", ");
      sb.append("paimon_column_types:");
      if (this.paimon_column_types == null) {
        sb.append("null");
      } else {
        sb.append(this.paimon_column_types);
      }
      first = false;
    }
    if (isSetPaimonColumnNames()) {
      if (!first) sb.append(", ");
      sb.append("paimon_column_names:");
      if (this.paimon_column_names == null) {
        sb.append("null");
      } else {
        sb.append(this.paimon_column_names);
      }
      first = false;
    }
    if (isSetHiveMetastoreUris()) {
      if (!first) sb.append(", ");
      sb.append("hive_metastore_uris:");
      if (this.hive_metastore_uris == null) {
        sb.append("null");
      } else {
        sb.append(this.hive_metastore_uris);
      }
      first = false;
    }
    if (isSetWarehouse()) {
      if (!first) sb.append(", ");
      sb.append("warehouse:");
      if (this.warehouse == null) {
        sb.append("null");
      } else {
        sb.append(this.warehouse);
      }
      first = false;
    }
    if (isSetDbName()) {
      if (!first) sb.append(", ");
      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
    }
    if (isSetTableName()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetLengthByte()) {
      if (!first) sb.append(", ");
      sb.append("length_byte:");
      if (this.length_byte == null) {
        sb.append("null");
      } else {
        sb.append(this.length_byte);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPaimonFileDescStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPaimonFileDescStandardScheme getScheme() {
      return new TPaimonFileDescStandardScheme();
    }
  }

  private static class TPaimonFileDescStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPaimonFileDesc> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPaimonFileDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAIMON_SPLIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paimon_split = iprot.readBinary();
              struct.setPaimonSplitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAIMON_COLUMN_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paimon_column_ids = iprot.readString();
              struct.setPaimonColumnIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAIMON_COLUMN_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paimon_column_types = iprot.readString();
              struct.setPaimonColumnTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAIMON_COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paimon_column_names = iprot.readString();
              struct.setPaimonColumnNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HIVE_METASTORE_URIS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hive_metastore_uris = iprot.readString();
              struct.setHiveMetastoreUrisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WAREHOUSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.warehouse = iprot.readString();
              struct.setWarehouseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LENGTH_BYTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.length_byte = iprot.readString();
              struct.setLengthByteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPaimonFileDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.paimon_split != null) {
        if (struct.isSetPaimonSplit()) {
          oprot.writeFieldBegin(PAIMON_SPLIT_FIELD_DESC);
          oprot.writeBinary(struct.paimon_split);
          oprot.writeFieldEnd();
        }
      }
      if (struct.paimon_column_ids != null) {
        if (struct.isSetPaimonColumnIds()) {
          oprot.writeFieldBegin(PAIMON_COLUMN_IDS_FIELD_DESC);
          oprot.writeString(struct.paimon_column_ids);
          oprot.writeFieldEnd();
        }
      }
      if (struct.paimon_column_types != null) {
        if (struct.isSetPaimonColumnTypes()) {
          oprot.writeFieldBegin(PAIMON_COLUMN_TYPES_FIELD_DESC);
          oprot.writeString(struct.paimon_column_types);
          oprot.writeFieldEnd();
        }
      }
      if (struct.paimon_column_names != null) {
        if (struct.isSetPaimonColumnNames()) {
          oprot.writeFieldBegin(PAIMON_COLUMN_NAMES_FIELD_DESC);
          oprot.writeString(struct.paimon_column_names);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hive_metastore_uris != null) {
        if (struct.isSetHiveMetastoreUris()) {
          oprot.writeFieldBegin(HIVE_METASTORE_URIS_FIELD_DESC);
          oprot.writeString(struct.hive_metastore_uris);
          oprot.writeFieldEnd();
        }
      }
      if (struct.warehouse != null) {
        if (struct.isSetWarehouse()) {
          oprot.writeFieldBegin(WAREHOUSE_FIELD_DESC);
          oprot.writeString(struct.warehouse);
          oprot.writeFieldEnd();
        }
      }
      if (struct.db_name != null) {
        if (struct.isSetDbName()) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.db_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTableName()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.length_byte != null) {
        if (struct.isSetLengthByte()) {
          oprot.writeFieldBegin(LENGTH_BYTE_FIELD_DESC);
          oprot.writeString(struct.length_byte);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPaimonFileDescTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPaimonFileDescTupleScheme getScheme() {
      return new TPaimonFileDescTupleScheme();
    }
  }

  private static class TPaimonFileDescTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPaimonFileDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPaimonFileDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPaimonSplit()) {
        optionals.set(0);
      }
      if (struct.isSetPaimonColumnIds()) {
        optionals.set(1);
      }
      if (struct.isSetPaimonColumnTypes()) {
        optionals.set(2);
      }
      if (struct.isSetPaimonColumnNames()) {
        optionals.set(3);
      }
      if (struct.isSetHiveMetastoreUris()) {
        optionals.set(4);
      }
      if (struct.isSetWarehouse()) {
        optionals.set(5);
      }
      if (struct.isSetDbName()) {
        optionals.set(6);
      }
      if (struct.isSetTableName()) {
        optionals.set(7);
      }
      if (struct.isSetLengthByte()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPaimonSplit()) {
        oprot.writeBinary(struct.paimon_split);
      }
      if (struct.isSetPaimonColumnIds()) {
        oprot.writeString(struct.paimon_column_ids);
      }
      if (struct.isSetPaimonColumnTypes()) {
        oprot.writeString(struct.paimon_column_types);
      }
      if (struct.isSetPaimonColumnNames()) {
        oprot.writeString(struct.paimon_column_names);
      }
      if (struct.isSetHiveMetastoreUris()) {
        oprot.writeString(struct.hive_metastore_uris);
      }
      if (struct.isSetWarehouse()) {
        oprot.writeString(struct.warehouse);
      }
      if (struct.isSetDbName()) {
        oprot.writeString(struct.db_name);
      }
      if (struct.isSetTableName()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetLengthByte()) {
        oprot.writeString(struct.length_byte);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPaimonFileDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.paimon_split = iprot.readBinary();
        struct.setPaimonSplitIsSet(true);
      }
      if (incoming.get(1)) {
        struct.paimon_column_ids = iprot.readString();
        struct.setPaimonColumnIdsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.paimon_column_types = iprot.readString();
        struct.setPaimonColumnTypesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.paimon_column_names = iprot.readString();
        struct.setPaimonColumnNamesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.hive_metastore_uris = iprot.readString();
        struct.setHiveMetastoreUrisIsSet(true);
      }
      if (incoming.get(5)) {
        struct.warehouse = iprot.readString();
        struct.setWarehouseIsSet(true);
      }
      if (incoming.get(6)) {
        struct.db_name = iprot.readString();
        struct.setDbNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.table_name = iprot.readString();
        struct.setTableNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.length_byte = iprot.readString();
        struct.setLengthByteIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

