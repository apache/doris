/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-06-14")
public class TPlanFragmentExecParams implements org.apache.thrift.TBase<TPlanFragmentExecParams, TPlanFragmentExecParams._Fields>, java.io.Serializable, Cloneable, Comparable<TPlanFragmentExecParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPlanFragmentExecParams");

  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("query_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FRAGMENT_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_instance_id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PER_NODE_SCAN_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("per_node_scan_ranges", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField PER_EXCH_NUM_SENDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("per_exch_num_senders", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField DESTINATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("destinations", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField SENDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sender_id", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField NUM_SENDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_senders", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField SEND_QUERY_STATISTICS_WITH_EVERY_BATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("send_query_statistics_with_every_batch", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_params", org.apache.thrift.protocol.TType.STRUCT, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPlanFragmentExecParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPlanFragmentExecParamsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId query_id; // required
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId fragment_instance_id; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>> per_node_scan_ranges; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> per_exch_num_senders; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TPlanFragmentDestination> destinations; // required
  public int sender_id; // optional
  public int num_senders; // optional
  public boolean send_query_statistics_with_every_batch; // optional
  public @org.apache.thrift.annotation.Nullable TRuntimeFilterParams runtime_filter_params; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY_ID((short)1, "query_id"),
    FRAGMENT_INSTANCE_ID((short)2, "fragment_instance_id"),
    PER_NODE_SCAN_RANGES((short)3, "per_node_scan_ranges"),
    PER_EXCH_NUM_SENDERS((short)4, "per_exch_num_senders"),
    DESTINATIONS((short)5, "destinations"),
    SENDER_ID((short)9, "sender_id"),
    NUM_SENDERS((short)10, "num_senders"),
    SEND_QUERY_STATISTICS_WITH_EVERY_BATCH((short)11, "send_query_statistics_with_every_batch"),
    RUNTIME_FILTER_PARAMS((short)12, "runtime_filter_params");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_ID
          return QUERY_ID;
        case 2: // FRAGMENT_INSTANCE_ID
          return FRAGMENT_INSTANCE_ID;
        case 3: // PER_NODE_SCAN_RANGES
          return PER_NODE_SCAN_RANGES;
        case 4: // PER_EXCH_NUM_SENDERS
          return PER_EXCH_NUM_SENDERS;
        case 5: // DESTINATIONS
          return DESTINATIONS;
        case 9: // SENDER_ID
          return SENDER_ID;
        case 10: // NUM_SENDERS
          return NUM_SENDERS;
        case 11: // SEND_QUERY_STATISTICS_WITH_EVERY_BATCH
          return SEND_QUERY_STATISTICS_WITH_EVERY_BATCH;
        case 12: // RUNTIME_FILTER_PARAMS
          return RUNTIME_FILTER_PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SENDER_ID_ISSET_ID = 0;
  private static final int __NUM_SENDERS_ISSET_ID = 1;
  private static final int __SEND_QUERY_STATISTICS_WITH_EVERY_BATCH_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SENDER_ID,_Fields.NUM_SENDERS,_Fields.SEND_QUERY_STATISTICS_WITH_EVERY_BATCH,_Fields.RUNTIME_FILTER_PARAMS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("query_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.FRAGMENT_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("fragment_instance_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.PER_NODE_SCAN_RANGES, new org.apache.thrift.meta_data.FieldMetaData("per_node_scan_ranges", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TScanRangeParams.class)))));
    tmpMap.put(_Fields.PER_EXCH_NUM_SENDERS, new org.apache.thrift.meta_data.FieldMetaData("per_exch_num_senders", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DESTINATIONS, new org.apache.thrift.meta_data.FieldMetaData("destinations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TPlanFragmentDestination.class))));
    tmpMap.put(_Fields.SENDER_ID, new org.apache.thrift.meta_data.FieldMetaData("sender_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_SENDERS, new org.apache.thrift.meta_data.FieldMetaData("num_senders", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEND_QUERY_STATISTICS_WITH_EVERY_BATCH, new org.apache.thrift.meta_data.FieldMetaData("send_query_statistics_with_every_batch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RUNTIME_FILTER_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRuntimeFilterParams.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPlanFragmentExecParams.class, metaDataMap);
  }

  public TPlanFragmentExecParams() {
  }

  public TPlanFragmentExecParams(
    org.apache.doris.thrift.TUniqueId query_id,
    org.apache.doris.thrift.TUniqueId fragment_instance_id,
    java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>> per_node_scan_ranges,
    java.util.Map<java.lang.Integer,java.lang.Integer> per_exch_num_senders,
    java.util.List<org.apache.doris.thrift.TPlanFragmentDestination> destinations)
  {
    this();
    this.query_id = query_id;
    this.fragment_instance_id = fragment_instance_id;
    this.per_node_scan_ranges = per_node_scan_ranges;
    this.per_exch_num_senders = per_exch_num_senders;
    this.destinations = destinations;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPlanFragmentExecParams(TPlanFragmentExecParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetQueryId()) {
      this.query_id = new org.apache.doris.thrift.TUniqueId(other.query_id);
    }
    if (other.isSetFragmentInstanceId()) {
      this.fragment_instance_id = new org.apache.doris.thrift.TUniqueId(other.fragment_instance_id);
    }
    if (other.isSetPerNodeScanRanges()) {
      java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>> __this__per_node_scan_ranges = new java.util.HashMap<java.lang.Integer,java.util.List<TScanRangeParams>>(other.per_node_scan_ranges.size());
      for (java.util.Map.Entry<java.lang.Integer, java.util.List<TScanRangeParams>> other_element : other.per_node_scan_ranges.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        java.util.List<TScanRangeParams> other_element_value = other_element.getValue();

        java.lang.Integer __this__per_node_scan_ranges_copy_key = other_element_key;

        java.util.List<TScanRangeParams> __this__per_node_scan_ranges_copy_value = new java.util.ArrayList<TScanRangeParams>(other_element_value.size());
        for (TScanRangeParams other_element_value_element : other_element_value) {
          __this__per_node_scan_ranges_copy_value.add(new TScanRangeParams(other_element_value_element));
        }

        __this__per_node_scan_ranges.put(__this__per_node_scan_ranges_copy_key, __this__per_node_scan_ranges_copy_value);
      }
      this.per_node_scan_ranges = __this__per_node_scan_ranges;
    }
    if (other.isSetPerExchNumSenders()) {
      java.util.Map<java.lang.Integer,java.lang.Integer> __this__per_exch_num_senders = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other.per_exch_num_senders.size());
      for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> other_element : other.per_exch_num_senders.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        java.lang.Integer other_element_value = other_element.getValue();

        java.lang.Integer __this__per_exch_num_senders_copy_key = other_element_key;

        java.lang.Integer __this__per_exch_num_senders_copy_value = other_element_value;

        __this__per_exch_num_senders.put(__this__per_exch_num_senders_copy_key, __this__per_exch_num_senders_copy_value);
      }
      this.per_exch_num_senders = __this__per_exch_num_senders;
    }
    if (other.isSetDestinations()) {
      java.util.List<org.apache.doris.thrift.TPlanFragmentDestination> __this__destinations = new java.util.ArrayList<org.apache.doris.thrift.TPlanFragmentDestination>(other.destinations.size());
      for (org.apache.doris.thrift.TPlanFragmentDestination other_element : other.destinations) {
        __this__destinations.add(new org.apache.doris.thrift.TPlanFragmentDestination(other_element));
      }
      this.destinations = __this__destinations;
    }
    this.sender_id = other.sender_id;
    this.num_senders = other.num_senders;
    this.send_query_statistics_with_every_batch = other.send_query_statistics_with_every_batch;
    if (other.isSetRuntimeFilterParams()) {
      this.runtime_filter_params = new TRuntimeFilterParams(other.runtime_filter_params);
    }
  }

  public TPlanFragmentExecParams deepCopy() {
    return new TPlanFragmentExecParams(this);
  }

  @Override
  public void clear() {
    this.query_id = null;
    this.fragment_instance_id = null;
    this.per_node_scan_ranges = null;
    this.per_exch_num_senders = null;
    this.destinations = null;
    setSenderIdIsSet(false);
    this.sender_id = 0;
    setNumSendersIsSet(false);
    this.num_senders = 0;
    setSendQueryStatisticsWithEveryBatchIsSet(false);
    this.send_query_statistics_with_every_batch = false;
    this.runtime_filter_params = null;
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TUniqueId getQueryId() {
    return this.query_id;
  }

  public TPlanFragmentExecParams setQueryId(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId query_id) {
    this.query_id = query_id;
    return this;
  }

  public void unsetQueryId() {
    this.query_id = null;
  }

  /** Returns true if field query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryId() {
    return this.query_id != null;
  }

  public void setQueryIdIsSet(boolean value) {
    if (!value) {
      this.query_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TUniqueId getFragmentInstanceId() {
    return this.fragment_instance_id;
  }

  public TPlanFragmentExecParams setFragmentInstanceId(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId fragment_instance_id) {
    this.fragment_instance_id = fragment_instance_id;
    return this;
  }

  public void unsetFragmentInstanceId() {
    this.fragment_instance_id = null;
  }

  /** Returns true if field fragment_instance_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFragmentInstanceId() {
    return this.fragment_instance_id != null;
  }

  public void setFragmentInstanceIdIsSet(boolean value) {
    if (!value) {
      this.fragment_instance_id = null;
    }
  }

  public int getPerNodeScanRangesSize() {
    return (this.per_node_scan_ranges == null) ? 0 : this.per_node_scan_ranges.size();
  }

  public void putToPerNodeScanRanges(int key, java.util.List<TScanRangeParams> val) {
    if (this.per_node_scan_ranges == null) {
      this.per_node_scan_ranges = new java.util.HashMap<java.lang.Integer,java.util.List<TScanRangeParams>>();
    }
    this.per_node_scan_ranges.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>> getPerNodeScanRanges() {
    return this.per_node_scan_ranges;
  }

  public TPlanFragmentExecParams setPerNodeScanRanges(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>> per_node_scan_ranges) {
    this.per_node_scan_ranges = per_node_scan_ranges;
    return this;
  }

  public void unsetPerNodeScanRanges() {
    this.per_node_scan_ranges = null;
  }

  /** Returns true if field per_node_scan_ranges is set (has been assigned a value) and false otherwise */
  public boolean isSetPerNodeScanRanges() {
    return this.per_node_scan_ranges != null;
  }

  public void setPerNodeScanRangesIsSet(boolean value) {
    if (!value) {
      this.per_node_scan_ranges = null;
    }
  }

  public int getPerExchNumSendersSize() {
    return (this.per_exch_num_senders == null) ? 0 : this.per_exch_num_senders.size();
  }

  public void putToPerExchNumSenders(int key, int val) {
    if (this.per_exch_num_senders == null) {
      this.per_exch_num_senders = new java.util.HashMap<java.lang.Integer,java.lang.Integer>();
    }
    this.per_exch_num_senders.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Integer> getPerExchNumSenders() {
    return this.per_exch_num_senders;
  }

  public TPlanFragmentExecParams setPerExchNumSenders(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> per_exch_num_senders) {
    this.per_exch_num_senders = per_exch_num_senders;
    return this;
  }

  public void unsetPerExchNumSenders() {
    this.per_exch_num_senders = null;
  }

  /** Returns true if field per_exch_num_senders is set (has been assigned a value) and false otherwise */
  public boolean isSetPerExchNumSenders() {
    return this.per_exch_num_senders != null;
  }

  public void setPerExchNumSendersIsSet(boolean value) {
    if (!value) {
      this.per_exch_num_senders = null;
    }
  }

  public int getDestinationsSize() {
    return (this.destinations == null) ? 0 : this.destinations.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TPlanFragmentDestination> getDestinationsIterator() {
    return (this.destinations == null) ? null : this.destinations.iterator();
  }

  public void addToDestinations(org.apache.doris.thrift.TPlanFragmentDestination elem) {
    if (this.destinations == null) {
      this.destinations = new java.util.ArrayList<org.apache.doris.thrift.TPlanFragmentDestination>();
    }
    this.destinations.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TPlanFragmentDestination> getDestinations() {
    return this.destinations;
  }

  public TPlanFragmentExecParams setDestinations(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TPlanFragmentDestination> destinations) {
    this.destinations = destinations;
    return this;
  }

  public void unsetDestinations() {
    this.destinations = null;
  }

  /** Returns true if field destinations is set (has been assigned a value) and false otherwise */
  public boolean isSetDestinations() {
    return this.destinations != null;
  }

  public void setDestinationsIsSet(boolean value) {
    if (!value) {
      this.destinations = null;
    }
  }

  public int getSenderId() {
    return this.sender_id;
  }

  public TPlanFragmentExecParams setSenderId(int sender_id) {
    this.sender_id = sender_id;
    setSenderIdIsSet(true);
    return this;
  }

  public void unsetSenderId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SENDER_ID_ISSET_ID);
  }

  /** Returns true if field sender_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SENDER_ID_ISSET_ID);
  }

  public void setSenderIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SENDER_ID_ISSET_ID, value);
  }

  public int getNumSenders() {
    return this.num_senders;
  }

  public TPlanFragmentExecParams setNumSenders(int num_senders) {
    this.num_senders = num_senders;
    setNumSendersIsSet(true);
    return this;
  }

  public void unsetNumSenders() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_SENDERS_ISSET_ID);
  }

  /** Returns true if field num_senders is set (has been assigned a value) and false otherwise */
  public boolean isSetNumSenders() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_SENDERS_ISSET_ID);
  }

  public void setNumSendersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_SENDERS_ISSET_ID, value);
  }

  public boolean isSendQueryStatisticsWithEveryBatch() {
    return this.send_query_statistics_with_every_batch;
  }

  public TPlanFragmentExecParams setSendQueryStatisticsWithEveryBatch(boolean send_query_statistics_with_every_batch) {
    this.send_query_statistics_with_every_batch = send_query_statistics_with_every_batch;
    setSendQueryStatisticsWithEveryBatchIsSet(true);
    return this;
  }

  public void unsetSendQueryStatisticsWithEveryBatch() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEND_QUERY_STATISTICS_WITH_EVERY_BATCH_ISSET_ID);
  }

  /** Returns true if field send_query_statistics_with_every_batch is set (has been assigned a value) and false otherwise */
  public boolean isSetSendQueryStatisticsWithEveryBatch() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEND_QUERY_STATISTICS_WITH_EVERY_BATCH_ISSET_ID);
  }

  public void setSendQueryStatisticsWithEveryBatchIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEND_QUERY_STATISTICS_WITH_EVERY_BATCH_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TRuntimeFilterParams getRuntimeFilterParams() {
    return this.runtime_filter_params;
  }

  public TPlanFragmentExecParams setRuntimeFilterParams(@org.apache.thrift.annotation.Nullable TRuntimeFilterParams runtime_filter_params) {
    this.runtime_filter_params = runtime_filter_params;
    return this;
  }

  public void unsetRuntimeFilterParams() {
    this.runtime_filter_params = null;
  }

  /** Returns true if field runtime_filter_params is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntimeFilterParams() {
    return this.runtime_filter_params != null;
  }

  public void setRuntimeFilterParamsIsSet(boolean value) {
    if (!value) {
      this.runtime_filter_params = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case QUERY_ID:
      if (value == null) {
        unsetQueryId();
      } else {
        setQueryId((org.apache.doris.thrift.TUniqueId)value);
      }
      break;

    case FRAGMENT_INSTANCE_ID:
      if (value == null) {
        unsetFragmentInstanceId();
      } else {
        setFragmentInstanceId((org.apache.doris.thrift.TUniqueId)value);
      }
      break;

    case PER_NODE_SCAN_RANGES:
      if (value == null) {
        unsetPerNodeScanRanges();
      } else {
        setPerNodeScanRanges((java.util.Map<java.lang.Integer,java.util.List<TScanRangeParams>>)value);
      }
      break;

    case PER_EXCH_NUM_SENDERS:
      if (value == null) {
        unsetPerExchNumSenders();
      } else {
        setPerExchNumSenders((java.util.Map<java.lang.Integer,java.lang.Integer>)value);
      }
      break;

    case DESTINATIONS:
      if (value == null) {
        unsetDestinations();
      } else {
        setDestinations((java.util.List<org.apache.doris.thrift.TPlanFragmentDestination>)value);
      }
      break;

    case SENDER_ID:
      if (value == null) {
        unsetSenderId();
      } else {
        setSenderId((java.lang.Integer)value);
      }
      break;

    case NUM_SENDERS:
      if (value == null) {
        unsetNumSenders();
      } else {
        setNumSenders((java.lang.Integer)value);
      }
      break;

    case SEND_QUERY_STATISTICS_WITH_EVERY_BATCH:
      if (value == null) {
        unsetSendQueryStatisticsWithEveryBatch();
      } else {
        setSendQueryStatisticsWithEveryBatch((java.lang.Boolean)value);
      }
      break;

    case RUNTIME_FILTER_PARAMS:
      if (value == null) {
        unsetRuntimeFilterParams();
      } else {
        setRuntimeFilterParams((TRuntimeFilterParams)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_ID:
      return getQueryId();

    case FRAGMENT_INSTANCE_ID:
      return getFragmentInstanceId();

    case PER_NODE_SCAN_RANGES:
      return getPerNodeScanRanges();

    case PER_EXCH_NUM_SENDERS:
      return getPerExchNumSenders();

    case DESTINATIONS:
      return getDestinations();

    case SENDER_ID:
      return getSenderId();

    case NUM_SENDERS:
      return getNumSenders();

    case SEND_QUERY_STATISTICS_WITH_EVERY_BATCH:
      return isSendQueryStatisticsWithEveryBatch();

    case RUNTIME_FILTER_PARAMS:
      return getRuntimeFilterParams();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case QUERY_ID:
      return isSetQueryId();
    case FRAGMENT_INSTANCE_ID:
      return isSetFragmentInstanceId();
    case PER_NODE_SCAN_RANGES:
      return isSetPerNodeScanRanges();
    case PER_EXCH_NUM_SENDERS:
      return isSetPerExchNumSenders();
    case DESTINATIONS:
      return isSetDestinations();
    case SENDER_ID:
      return isSetSenderId();
    case NUM_SENDERS:
      return isSetNumSenders();
    case SEND_QUERY_STATISTICS_WITH_EVERY_BATCH:
      return isSetSendQueryStatisticsWithEveryBatch();
    case RUNTIME_FILTER_PARAMS:
      return isSetRuntimeFilterParams();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TPlanFragmentExecParams)
      return this.equals((TPlanFragmentExecParams)that);
    return false;
  }

  public boolean equals(TPlanFragmentExecParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_query_id = true && this.isSetQueryId();
    boolean that_present_query_id = true && that.isSetQueryId();
    if (this_present_query_id || that_present_query_id) {
      if (!(this_present_query_id && that_present_query_id))
        return false;
      if (!this.query_id.equals(that.query_id))
        return false;
    }

    boolean this_present_fragment_instance_id = true && this.isSetFragmentInstanceId();
    boolean that_present_fragment_instance_id = true && that.isSetFragmentInstanceId();
    if (this_present_fragment_instance_id || that_present_fragment_instance_id) {
      if (!(this_present_fragment_instance_id && that_present_fragment_instance_id))
        return false;
      if (!this.fragment_instance_id.equals(that.fragment_instance_id))
        return false;
    }

    boolean this_present_per_node_scan_ranges = true && this.isSetPerNodeScanRanges();
    boolean that_present_per_node_scan_ranges = true && that.isSetPerNodeScanRanges();
    if (this_present_per_node_scan_ranges || that_present_per_node_scan_ranges) {
      if (!(this_present_per_node_scan_ranges && that_present_per_node_scan_ranges))
        return false;
      if (!this.per_node_scan_ranges.equals(that.per_node_scan_ranges))
        return false;
    }

    boolean this_present_per_exch_num_senders = true && this.isSetPerExchNumSenders();
    boolean that_present_per_exch_num_senders = true && that.isSetPerExchNumSenders();
    if (this_present_per_exch_num_senders || that_present_per_exch_num_senders) {
      if (!(this_present_per_exch_num_senders && that_present_per_exch_num_senders))
        return false;
      if (!this.per_exch_num_senders.equals(that.per_exch_num_senders))
        return false;
    }

    boolean this_present_destinations = true && this.isSetDestinations();
    boolean that_present_destinations = true && that.isSetDestinations();
    if (this_present_destinations || that_present_destinations) {
      if (!(this_present_destinations && that_present_destinations))
        return false;
      if (!this.destinations.equals(that.destinations))
        return false;
    }

    boolean this_present_sender_id = true && this.isSetSenderId();
    boolean that_present_sender_id = true && that.isSetSenderId();
    if (this_present_sender_id || that_present_sender_id) {
      if (!(this_present_sender_id && that_present_sender_id))
        return false;
      if (this.sender_id != that.sender_id)
        return false;
    }

    boolean this_present_num_senders = true && this.isSetNumSenders();
    boolean that_present_num_senders = true && that.isSetNumSenders();
    if (this_present_num_senders || that_present_num_senders) {
      if (!(this_present_num_senders && that_present_num_senders))
        return false;
      if (this.num_senders != that.num_senders)
        return false;
    }

    boolean this_present_send_query_statistics_with_every_batch = true && this.isSetSendQueryStatisticsWithEveryBatch();
    boolean that_present_send_query_statistics_with_every_batch = true && that.isSetSendQueryStatisticsWithEveryBatch();
    if (this_present_send_query_statistics_with_every_batch || that_present_send_query_statistics_with_every_batch) {
      if (!(this_present_send_query_statistics_with_every_batch && that_present_send_query_statistics_with_every_batch))
        return false;
      if (this.send_query_statistics_with_every_batch != that.send_query_statistics_with_every_batch)
        return false;
    }

    boolean this_present_runtime_filter_params = true && this.isSetRuntimeFilterParams();
    boolean that_present_runtime_filter_params = true && that.isSetRuntimeFilterParams();
    if (this_present_runtime_filter_params || that_present_runtime_filter_params) {
      if (!(this_present_runtime_filter_params && that_present_runtime_filter_params))
        return false;
      if (!this.runtime_filter_params.equals(that.runtime_filter_params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetQueryId()) ? 131071 : 524287);
    if (isSetQueryId())
      hashCode = hashCode * 8191 + query_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetFragmentInstanceId()) ? 131071 : 524287);
    if (isSetFragmentInstanceId())
      hashCode = hashCode * 8191 + fragment_instance_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetPerNodeScanRanges()) ? 131071 : 524287);
    if (isSetPerNodeScanRanges())
      hashCode = hashCode * 8191 + per_node_scan_ranges.hashCode();

    hashCode = hashCode * 8191 + ((isSetPerExchNumSenders()) ? 131071 : 524287);
    if (isSetPerExchNumSenders())
      hashCode = hashCode * 8191 + per_exch_num_senders.hashCode();

    hashCode = hashCode * 8191 + ((isSetDestinations()) ? 131071 : 524287);
    if (isSetDestinations())
      hashCode = hashCode * 8191 + destinations.hashCode();

    hashCode = hashCode * 8191 + ((isSetSenderId()) ? 131071 : 524287);
    if (isSetSenderId())
      hashCode = hashCode * 8191 + sender_id;

    hashCode = hashCode * 8191 + ((isSetNumSenders()) ? 131071 : 524287);
    if (isSetNumSenders())
      hashCode = hashCode * 8191 + num_senders;

    hashCode = hashCode * 8191 + ((isSetSendQueryStatisticsWithEveryBatch()) ? 131071 : 524287);
    if (isSetSendQueryStatisticsWithEveryBatch())
      hashCode = hashCode * 8191 + ((send_query_statistics_with_every_batch) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetRuntimeFilterParams()) ? 131071 : 524287);
    if (isSetRuntimeFilterParams())
      hashCode = hashCode * 8191 + runtime_filter_params.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TPlanFragmentExecParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetQueryId(), other.isSetQueryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_id, other.query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFragmentInstanceId(), other.isSetFragmentInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragmentInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_instance_id, other.fragment_instance_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPerNodeScanRanges(), other.isSetPerNodeScanRanges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerNodeScanRanges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_node_scan_ranges, other.per_node_scan_ranges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPerExchNumSenders(), other.isSetPerExchNumSenders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerExchNumSenders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_exch_num_senders, other.per_exch_num_senders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDestinations(), other.isSetDestinations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestinations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destinations, other.destinations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSenderId(), other.isSetSenderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sender_id, other.sender_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumSenders(), other.isSetNumSenders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumSenders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_senders, other.num_senders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSendQueryStatisticsWithEveryBatch(), other.isSetSendQueryStatisticsWithEveryBatch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendQueryStatisticsWithEveryBatch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.send_query_statistics_with_every_batch, other.send_query_statistics_with_every_batch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRuntimeFilterParams(), other.isSetRuntimeFilterParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntimeFilterParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_params, other.runtime_filter_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPlanFragmentExecParams(");
    boolean first = true;

    sb.append("query_id:");
    if (this.query_id == null) {
      sb.append("null");
    } else {
      sb.append(this.query_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fragment_instance_id:");
    if (this.fragment_instance_id == null) {
      sb.append("null");
    } else {
      sb.append(this.fragment_instance_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("per_node_scan_ranges:");
    if (this.per_node_scan_ranges == null) {
      sb.append("null");
    } else {
      sb.append(this.per_node_scan_ranges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("per_exch_num_senders:");
    if (this.per_exch_num_senders == null) {
      sb.append("null");
    } else {
      sb.append(this.per_exch_num_senders);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("destinations:");
    if (this.destinations == null) {
      sb.append("null");
    } else {
      sb.append(this.destinations);
    }
    first = false;
    if (isSetSenderId()) {
      if (!first) sb.append(", ");
      sb.append("sender_id:");
      sb.append(this.sender_id);
      first = false;
    }
    if (isSetNumSenders()) {
      if (!first) sb.append(", ");
      sb.append("num_senders:");
      sb.append(this.num_senders);
      first = false;
    }
    if (isSetSendQueryStatisticsWithEveryBatch()) {
      if (!first) sb.append(", ");
      sb.append("send_query_statistics_with_every_batch:");
      sb.append(this.send_query_statistics_with_every_batch);
      first = false;
    }
    if (isSetRuntimeFilterParams()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filter_params:");
      if (this.runtime_filter_params == null) {
        sb.append("null");
      } else {
        sb.append(this.runtime_filter_params);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (query_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query_id' was not present! Struct: " + toString());
    }
    if (fragment_instance_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fragment_instance_id' was not present! Struct: " + toString());
    }
    if (per_node_scan_ranges == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'per_node_scan_ranges' was not present! Struct: " + toString());
    }
    if (per_exch_num_senders == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'per_exch_num_senders' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (query_id != null) {
      query_id.validate();
    }
    if (fragment_instance_id != null) {
      fragment_instance_id.validate();
    }
    if (runtime_filter_params != null) {
      runtime_filter_params.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPlanFragmentExecParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPlanFragmentExecParamsStandardScheme getScheme() {
      return new TPlanFragmentExecParamsStandardScheme();
    }
  }

  private static class TPlanFragmentExecParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPlanFragmentExecParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPlanFragmentExecParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_id = new org.apache.doris.thrift.TUniqueId();
              struct.query_id.read(iprot);
              struct.setQueryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAGMENT_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment_instance_id = new org.apache.doris.thrift.TUniqueId();
              struct.fragment_instance_id.read(iprot);
              struct.setFragmentInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PER_NODE_SCAN_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map74 = iprot.readMapBegin();
                struct.per_node_scan_ranges = new java.util.HashMap<java.lang.Integer,java.util.List<TScanRangeParams>>(2*_map74.size);
                int _key75;
                @org.apache.thrift.annotation.Nullable java.util.List<TScanRangeParams> _val76;
                for (int _i77 = 0; _i77 < _map74.size; ++_i77)
                {
                  _key75 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list78 = iprot.readListBegin();
                    _val76 = new java.util.ArrayList<TScanRangeParams>(_list78.size);
                    @org.apache.thrift.annotation.Nullable TScanRangeParams _elem79;
                    for (int _i80 = 0; _i80 < _list78.size; ++_i80)
                    {
                      _elem79 = new TScanRangeParams();
                      _elem79.read(iprot);
                      _val76.add(_elem79);
                    }
                    iprot.readListEnd();
                  }
                  struct.per_node_scan_ranges.put(_key75, _val76);
                }
                iprot.readMapEnd();
              }
              struct.setPerNodeScanRangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PER_EXCH_NUM_SENDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map81 = iprot.readMapBegin();
                struct.per_exch_num_senders = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map81.size);
                int _key82;
                int _val83;
                for (int _i84 = 0; _i84 < _map81.size; ++_i84)
                {
                  _key82 = iprot.readI32();
                  _val83 = iprot.readI32();
                  struct.per_exch_num_senders.put(_key82, _val83);
                }
                iprot.readMapEnd();
              }
              struct.setPerExchNumSendersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESTINATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list85 = iprot.readListBegin();
                struct.destinations = new java.util.ArrayList<org.apache.doris.thrift.TPlanFragmentDestination>(_list85.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TPlanFragmentDestination _elem86;
                for (int _i87 = 0; _i87 < _list85.size; ++_i87)
                {
                  _elem86 = new org.apache.doris.thrift.TPlanFragmentDestination();
                  _elem86.read(iprot);
                  struct.destinations.add(_elem86);
                }
                iprot.readListEnd();
              }
              struct.setDestinationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SENDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sender_id = iprot.readI32();
              struct.setSenderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NUM_SENDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_senders = iprot.readI32();
              struct.setNumSendersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SEND_QUERY_STATISTICS_WITH_EVERY_BATCH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.send_query_statistics_with_every_batch = iprot.readBool();
              struct.setSendQueryStatisticsWithEveryBatchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RUNTIME_FILTER_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.runtime_filter_params = new TRuntimeFilterParams();
              struct.runtime_filter_params.read(iprot);
              struct.setRuntimeFilterParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPlanFragmentExecParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.query_id != null) {
        oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
        struct.query_id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.fragment_instance_id != null) {
        oprot.writeFieldBegin(FRAGMENT_INSTANCE_ID_FIELD_DESC);
        struct.fragment_instance_id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.per_node_scan_ranges != null) {
        oprot.writeFieldBegin(PER_NODE_SCAN_RANGES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.per_node_scan_ranges.size()));
          for (java.util.Map.Entry<java.lang.Integer, java.util.List<TScanRangeParams>> _iter88 : struct.per_node_scan_ranges.entrySet())
          {
            oprot.writeI32(_iter88.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter88.getValue().size()));
              for (TScanRangeParams _iter89 : _iter88.getValue())
              {
                _iter89.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.per_exch_num_senders != null) {
        oprot.writeFieldBegin(PER_EXCH_NUM_SENDERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.per_exch_num_senders.size()));
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter90 : struct.per_exch_num_senders.entrySet())
          {
            oprot.writeI32(_iter90.getKey());
            oprot.writeI32(_iter90.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.destinations != null) {
        oprot.writeFieldBegin(DESTINATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.destinations.size()));
          for (org.apache.doris.thrift.TPlanFragmentDestination _iter91 : struct.destinations)
          {
            _iter91.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetSenderId()) {
        oprot.writeFieldBegin(SENDER_ID_FIELD_DESC);
        oprot.writeI32(struct.sender_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNumSenders()) {
        oprot.writeFieldBegin(NUM_SENDERS_FIELD_DESC);
        oprot.writeI32(struct.num_senders);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSendQueryStatisticsWithEveryBatch()) {
        oprot.writeFieldBegin(SEND_QUERY_STATISTICS_WITH_EVERY_BATCH_FIELD_DESC);
        oprot.writeBool(struct.send_query_statistics_with_every_batch);
        oprot.writeFieldEnd();
      }
      if (struct.runtime_filter_params != null) {
        if (struct.isSetRuntimeFilterParams()) {
          oprot.writeFieldBegin(RUNTIME_FILTER_PARAMS_FIELD_DESC);
          struct.runtime_filter_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPlanFragmentExecParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPlanFragmentExecParamsTupleScheme getScheme() {
      return new TPlanFragmentExecParamsTupleScheme();
    }
  }

  private static class TPlanFragmentExecParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPlanFragmentExecParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentExecParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.query_id.write(oprot);
      struct.fragment_instance_id.write(oprot);
      {
        oprot.writeI32(struct.per_node_scan_ranges.size());
        for (java.util.Map.Entry<java.lang.Integer, java.util.List<TScanRangeParams>> _iter92 : struct.per_node_scan_ranges.entrySet())
        {
          oprot.writeI32(_iter92.getKey());
          {
            oprot.writeI32(_iter92.getValue().size());
            for (TScanRangeParams _iter93 : _iter92.getValue())
            {
              _iter93.write(oprot);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.per_exch_num_senders.size());
        for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter94 : struct.per_exch_num_senders.entrySet())
        {
          oprot.writeI32(_iter94.getKey());
          oprot.writeI32(_iter94.getValue());
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDestinations()) {
        optionals.set(0);
      }
      if (struct.isSetSenderId()) {
        optionals.set(1);
      }
      if (struct.isSetNumSenders()) {
        optionals.set(2);
      }
      if (struct.isSetSendQueryStatisticsWithEveryBatch()) {
        optionals.set(3);
      }
      if (struct.isSetRuntimeFilterParams()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetDestinations()) {
        {
          oprot.writeI32(struct.destinations.size());
          for (org.apache.doris.thrift.TPlanFragmentDestination _iter95 : struct.destinations)
          {
            _iter95.write(oprot);
          }
        }
      }
      if (struct.isSetSenderId()) {
        oprot.writeI32(struct.sender_id);
      }
      if (struct.isSetNumSenders()) {
        oprot.writeI32(struct.num_senders);
      }
      if (struct.isSetSendQueryStatisticsWithEveryBatch()) {
        oprot.writeBool(struct.send_query_statistics_with_every_batch);
      }
      if (struct.isSetRuntimeFilterParams()) {
        struct.runtime_filter_params.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPlanFragmentExecParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.query_id = new org.apache.doris.thrift.TUniqueId();
      struct.query_id.read(iprot);
      struct.setQueryIdIsSet(true);
      struct.fragment_instance_id = new org.apache.doris.thrift.TUniqueId();
      struct.fragment_instance_id.read(iprot);
      struct.setFragmentInstanceIdIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map96 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST); 
        struct.per_node_scan_ranges = new java.util.HashMap<java.lang.Integer,java.util.List<TScanRangeParams>>(2*_map96.size);
        int _key97;
        @org.apache.thrift.annotation.Nullable java.util.List<TScanRangeParams> _val98;
        for (int _i99 = 0; _i99 < _map96.size; ++_i99)
        {
          _key97 = iprot.readI32();
          {
            org.apache.thrift.protocol.TList _list100 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            _val98 = new java.util.ArrayList<TScanRangeParams>(_list100.size);
            @org.apache.thrift.annotation.Nullable TScanRangeParams _elem101;
            for (int _i102 = 0; _i102 < _list100.size; ++_i102)
            {
              _elem101 = new TScanRangeParams();
              _elem101.read(iprot);
              _val98.add(_elem101);
            }
          }
          struct.per_node_scan_ranges.put(_key97, _val98);
        }
      }
      struct.setPerNodeScanRangesIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map103 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32); 
        struct.per_exch_num_senders = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map103.size);
        int _key104;
        int _val105;
        for (int _i106 = 0; _i106 < _map103.size; ++_i106)
        {
          _key104 = iprot.readI32();
          _val105 = iprot.readI32();
          struct.per_exch_num_senders.put(_key104, _val105);
        }
      }
      struct.setPerExchNumSendersIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list107 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.destinations = new java.util.ArrayList<org.apache.doris.thrift.TPlanFragmentDestination>(_list107.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TPlanFragmentDestination _elem108;
          for (int _i109 = 0; _i109 < _list107.size; ++_i109)
          {
            _elem108 = new org.apache.doris.thrift.TPlanFragmentDestination();
            _elem108.read(iprot);
            struct.destinations.add(_elem108);
          }
        }
        struct.setDestinationsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sender_id = iprot.readI32();
        struct.setSenderIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.num_senders = iprot.readI32();
        struct.setNumSendersIsSet(true);
      }
      if (incoming.get(3)) {
        struct.send_query_statistics_with_every_batch = iprot.readBool();
        struct.setSendQueryStatisticsWithEveryBatchIsSet(true);
      }
      if (incoming.get(4)) {
        struct.runtime_filter_params = new TRuntimeFilterParams();
        struct.runtime_filter_params.read(iprot);
        struct.setRuntimeFilterParamsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

