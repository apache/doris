/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-06-14")
public class TGrantParams implements org.apache.thrift.TBase<TGrantParams, TGrantParams._Fields>, java.io.Serializable, Cloneable, Comparable<TGrantParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGrantParams");

  private static final org.apache.thrift.protocol.TField USER_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("user_spec", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRIV_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("priv_types", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TGrantParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TGrantParamsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TUserSpecification user_spec; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String db_name; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<TPrivType> priv_types; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_SPEC((short)1, "user_spec"),
    DB_NAME((short)3, "db_name"),
    PRIV_TYPES((short)4, "priv_types");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_SPEC
          return USER_SPEC;
        case 3: // DB_NAME
          return DB_NAME;
        case 4: // PRIV_TYPES
          return PRIV_TYPES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_SPEC, new org.apache.thrift.meta_data.FieldMetaData("user_spec", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUserSpecification.class)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIV_TYPES, new org.apache.thrift.meta_data.FieldMetaData("priv_types", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPrivType.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGrantParams.class, metaDataMap);
  }

  public TGrantParams() {
  }

  public TGrantParams(
    TUserSpecification user_spec,
    java.lang.String db_name,
    java.util.List<TPrivType> priv_types)
  {
    this();
    this.user_spec = user_spec;
    this.db_name = db_name;
    this.priv_types = priv_types;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGrantParams(TGrantParams other) {
    if (other.isSetUserSpec()) {
      this.user_spec = new TUserSpecification(other.user_spec);
    }
    if (other.isSetDbName()) {
      this.db_name = other.db_name;
    }
    if (other.isSetPrivTypes()) {
      java.util.List<TPrivType> __this__priv_types = new java.util.ArrayList<TPrivType>(other.priv_types.size());
      for (TPrivType other_element : other.priv_types) {
        __this__priv_types.add(other_element);
      }
      this.priv_types = __this__priv_types;
    }
  }

  public TGrantParams deepCopy() {
    return new TGrantParams(this);
  }

  @Override
  public void clear() {
    this.user_spec = null;
    this.db_name = null;
    this.priv_types = null;
  }

  @org.apache.thrift.annotation.Nullable
  public TUserSpecification getUserSpec() {
    return this.user_spec;
  }

  public TGrantParams setUserSpec(@org.apache.thrift.annotation.Nullable TUserSpecification user_spec) {
    this.user_spec = user_spec;
    return this;
  }

  public void unsetUserSpec() {
    this.user_spec = null;
  }

  /** Returns true if field user_spec is set (has been assigned a value) and false otherwise */
  public boolean isSetUserSpec() {
    return this.user_spec != null;
  }

  public void setUserSpecIsSet(boolean value) {
    if (!value) {
      this.user_spec = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDbName() {
    return this.db_name;
  }

  public TGrantParams setDbName(@org.apache.thrift.annotation.Nullable java.lang.String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDbName() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDbName() {
    return this.db_name != null;
  }

  public void setDbNameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  public int getPrivTypesSize() {
    return (this.priv_types == null) ? 0 : this.priv_types.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TPrivType> getPrivTypesIterator() {
    return (this.priv_types == null) ? null : this.priv_types.iterator();
  }

  public void addToPrivTypes(TPrivType elem) {
    if (this.priv_types == null) {
      this.priv_types = new java.util.ArrayList<TPrivType>();
    }
    this.priv_types.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TPrivType> getPrivTypes() {
    return this.priv_types;
  }

  public TGrantParams setPrivTypes(@org.apache.thrift.annotation.Nullable java.util.List<TPrivType> priv_types) {
    this.priv_types = priv_types;
    return this;
  }

  public void unsetPrivTypes() {
    this.priv_types = null;
  }

  /** Returns true if field priv_types is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivTypes() {
    return this.priv_types != null;
  }

  public void setPrivTypesIsSet(boolean value) {
    if (!value) {
      this.priv_types = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case USER_SPEC:
      if (value == null) {
        unsetUserSpec();
      } else {
        setUserSpec((TUserSpecification)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDbName();
      } else {
        setDbName((java.lang.String)value);
      }
      break;

    case PRIV_TYPES:
      if (value == null) {
        unsetPrivTypes();
      } else {
        setPrivTypes((java.util.List<TPrivType>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_SPEC:
      return getUserSpec();

    case DB_NAME:
      return getDbName();

    case PRIV_TYPES:
      return getPrivTypes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER_SPEC:
      return isSetUserSpec();
    case DB_NAME:
      return isSetDbName();
    case PRIV_TYPES:
      return isSetPrivTypes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TGrantParams)
      return this.equals((TGrantParams)that);
    return false;
  }

  public boolean equals(TGrantParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_user_spec = true && this.isSetUserSpec();
    boolean that_present_user_spec = true && that.isSetUserSpec();
    if (this_present_user_spec || that_present_user_spec) {
      if (!(this_present_user_spec && that_present_user_spec))
        return false;
      if (!this.user_spec.equals(that.user_spec))
        return false;
    }

    boolean this_present_db_name = true && this.isSetDbName();
    boolean that_present_db_name = true && that.isSetDbName();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_priv_types = true && this.isSetPrivTypes();
    boolean that_present_priv_types = true && that.isSetPrivTypes();
    if (this_present_priv_types || that_present_priv_types) {
      if (!(this_present_priv_types && that_present_priv_types))
        return false;
      if (!this.priv_types.equals(that.priv_types))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUserSpec()) ? 131071 : 524287);
    if (isSetUserSpec())
      hashCode = hashCode * 8191 + user_spec.hashCode();

    hashCode = hashCode * 8191 + ((isSetDbName()) ? 131071 : 524287);
    if (isSetDbName())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrivTypes()) ? 131071 : 524287);
    if (isSetPrivTypes())
      hashCode = hashCode * 8191 + priv_types.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TGrantParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetUserSpec(), other.isSetUserSpec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserSpec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_spec, other.user_spec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDbName(), other.isSetDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPrivTypes(), other.isSetPrivTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priv_types, other.priv_types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TGrantParams(");
    boolean first = true;

    sb.append("user_spec:");
    if (this.user_spec == null) {
      sb.append("null");
    } else {
      sb.append(this.user_spec);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("db_name:");
    if (this.db_name == null) {
      sb.append("null");
    } else {
      sb.append(this.db_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("priv_types:");
    if (this.priv_types == null) {
      sb.append("null");
    } else {
      sb.append(this.priv_types);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (user_spec == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user_spec' was not present! Struct: " + toString());
    }
    if (db_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'db_name' was not present! Struct: " + toString());
    }
    if (priv_types == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'priv_types' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (user_spec != null) {
      user_spec.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGrantParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TGrantParamsStandardScheme getScheme() {
      return new TGrantParamsStandardScheme();
    }
  }

  private static class TGrantParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TGrantParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TGrantParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_SPEC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user_spec = new TUserSpecification();
              struct.user_spec.read(iprot);
              struct.setUserSpecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRIV_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                struct.priv_types = new java.util.ArrayList<TPrivType>(_list68.size);
                @org.apache.thrift.annotation.Nullable TPrivType _elem69;
                for (int _i70 = 0; _i70 < _list68.size; ++_i70)
                {
                  _elem69 = org.apache.doris.thrift.TPrivType.findByValue(iprot.readI32());
                  if (_elem69 != null)
                  {
                    struct.priv_types.add(_elem69);
                  }
                }
                iprot.readListEnd();
              }
              struct.setPrivTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TGrantParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.user_spec != null) {
        oprot.writeFieldBegin(USER_SPEC_FIELD_DESC);
        struct.user_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.db_name != null) {
        oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
        oprot.writeString(struct.db_name);
        oprot.writeFieldEnd();
      }
      if (struct.priv_types != null) {
        oprot.writeFieldBegin(PRIV_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.priv_types.size()));
          for (TPrivType _iter71 : struct.priv_types)
          {
            oprot.writeI32(_iter71.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGrantParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TGrantParamsTupleScheme getScheme() {
      return new TGrantParamsTupleScheme();
    }
  }

  private static class TGrantParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TGrantParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGrantParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.user_spec.write(oprot);
      oprot.writeString(struct.db_name);
      {
        oprot.writeI32(struct.priv_types.size());
        for (TPrivType _iter72 : struct.priv_types)
        {
          oprot.writeI32(_iter72.getValue());
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGrantParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.user_spec = new TUserSpecification();
      struct.user_spec.read(iprot);
      struct.setUserSpecIsSet(true);
      struct.db_name = iprot.readString();
      struct.setDbNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list73 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
        struct.priv_types = new java.util.ArrayList<TPrivType>(_list73.size);
        @org.apache.thrift.annotation.Nullable TPrivType _elem74;
        for (int _i75 = 0; _i75 < _list73.size; ++_i75)
        {
          _elem74 = org.apache.doris.thrift.TPrivType.findByValue(iprot.readI32());
          if (_elem74 != null)
          {
            struct.priv_types.add(_elem74);
          }
        }
      }
      struct.setPrivTypesIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

