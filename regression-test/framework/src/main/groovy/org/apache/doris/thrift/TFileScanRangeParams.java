/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-06-14")
public class TFileScanRangeParams implements org.apache.thrift.TBase<TFileScanRangeParams, TFileScanRangeParams._Fields>, java.io.Serializable, Cloneable, Comparable<TFileScanRangeParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFileScanRangeParams");

  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("file_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FORMAT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("format_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COMPRESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("compress_type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SRC_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("src_tuple_id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DEST_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dest_tuple_id", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_OF_COLUMNS_FROM_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("num_of_columns_from_file", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField REQUIRED_SLOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("required_slots", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField HDFS_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("hdfs_params", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField EXPR_OF_DEST_SLOT_FIELD_DESC = new org.apache.thrift.protocol.TField("expr_of_dest_slot", org.apache.thrift.protocol.TType.MAP, (short)10);
  private static final org.apache.thrift.protocol.TField DEFAULT_VALUE_OF_SRC_SLOT_FIELD_DESC = new org.apache.thrift.protocol.TField("default_value_of_src_slot", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField DEST_SID_TO_SRC_SID_WITHOUT_TRANS_FIELD_DESC = new org.apache.thrift.protocol.TField("dest_sid_to_src_sid_without_trans", org.apache.thrift.protocol.TType.MAP, (short)12);
  private static final org.apache.thrift.protocol.TField STRICT_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("strict_mode", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField BROKER_ADDRESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("broker_addresses", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField FILE_ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("file_attributes", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField PRE_FILTER_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("pre_filter_exprs", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField TABLE_FORMAT_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("table_format_params", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField COLUMN_IDXS_FIELD_DESC = new org.apache.thrift.protocol.TField("column_idxs", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField SLOT_NAME_TO_SCHEMA_POS_FIELD_DESC = new org.apache.thrift.protocol.TField("slot_name_to_schema_pos", org.apache.thrift.protocol.TType.MAP, (short)19);
  private static final org.apache.thrift.protocol.TField PRE_FILTER_EXPRS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("pre_filter_exprs_list", org.apache.thrift.protocol.TType.LIST, (short)20);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TFileScanRangeParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TFileScanRangeParamsTupleSchemeFactory();

  /**
   * 
   * @see org.apache.doris.thrift.TFileType
   */
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TFileType file_type; // optional
  /**
   * 
   * @see TFileFormatType
   */
  public @org.apache.thrift.annotation.Nullable TFileFormatType format_type; // optional
  /**
   * 
   * @see TFileCompressType
   */
  public @org.apache.thrift.annotation.Nullable TFileCompressType compress_type; // optional
  public int src_tuple_id; // optional
  public int dest_tuple_id; // optional
  public int num_of_columns_from_file; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TFileScanSlotInfo> required_slots; // optional
  public @org.apache.thrift.annotation.Nullable THdfsParams hdfs_params; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,org.apache.doris.thrift.TExpr> expr_of_dest_slot; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,org.apache.doris.thrift.TExpr> default_value_of_src_slot; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> dest_sid_to_src_sid_without_trans; // optional
  public boolean strict_mode; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TNetworkAddress> broker_addresses; // optional
  public @org.apache.thrift.annotation.Nullable TFileAttributes file_attributes; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr pre_filter_exprs; // optional
  public @org.apache.thrift.annotation.Nullable TTableFormatFileDesc table_format_params; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> column_idxs; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> slot_name_to_schema_pos; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TExpr> pre_filter_exprs_list; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see org.apache.doris.thrift.TFileType
     */
    FILE_TYPE((short)1, "file_type"),
    /**
     * 
     * @see TFileFormatType
     */
    FORMAT_TYPE((short)2, "format_type"),
    /**
     * 
     * @see TFileCompressType
     */
    COMPRESS_TYPE((short)3, "compress_type"),
    SRC_TUPLE_ID((short)4, "src_tuple_id"),
    DEST_TUPLE_ID((short)5, "dest_tuple_id"),
    NUM_OF_COLUMNS_FROM_FILE((short)6, "num_of_columns_from_file"),
    REQUIRED_SLOTS((short)7, "required_slots"),
    HDFS_PARAMS((short)8, "hdfs_params"),
    PROPERTIES((short)9, "properties"),
    EXPR_OF_DEST_SLOT((short)10, "expr_of_dest_slot"),
    DEFAULT_VALUE_OF_SRC_SLOT((short)11, "default_value_of_src_slot"),
    DEST_SID_TO_SRC_SID_WITHOUT_TRANS((short)12, "dest_sid_to_src_sid_without_trans"),
    STRICT_MODE((short)13, "strict_mode"),
    BROKER_ADDRESSES((short)14, "broker_addresses"),
    FILE_ATTRIBUTES((short)15, "file_attributes"),
    PRE_FILTER_EXPRS((short)16, "pre_filter_exprs"),
    TABLE_FORMAT_PARAMS((short)17, "table_format_params"),
    COLUMN_IDXS((short)18, "column_idxs"),
    SLOT_NAME_TO_SCHEMA_POS((short)19, "slot_name_to_schema_pos"),
    PRE_FILTER_EXPRS_LIST((short)20, "pre_filter_exprs_list");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILE_TYPE
          return FILE_TYPE;
        case 2: // FORMAT_TYPE
          return FORMAT_TYPE;
        case 3: // COMPRESS_TYPE
          return COMPRESS_TYPE;
        case 4: // SRC_TUPLE_ID
          return SRC_TUPLE_ID;
        case 5: // DEST_TUPLE_ID
          return DEST_TUPLE_ID;
        case 6: // NUM_OF_COLUMNS_FROM_FILE
          return NUM_OF_COLUMNS_FROM_FILE;
        case 7: // REQUIRED_SLOTS
          return REQUIRED_SLOTS;
        case 8: // HDFS_PARAMS
          return HDFS_PARAMS;
        case 9: // PROPERTIES
          return PROPERTIES;
        case 10: // EXPR_OF_DEST_SLOT
          return EXPR_OF_DEST_SLOT;
        case 11: // DEFAULT_VALUE_OF_SRC_SLOT
          return DEFAULT_VALUE_OF_SRC_SLOT;
        case 12: // DEST_SID_TO_SRC_SID_WITHOUT_TRANS
          return DEST_SID_TO_SRC_SID_WITHOUT_TRANS;
        case 13: // STRICT_MODE
          return STRICT_MODE;
        case 14: // BROKER_ADDRESSES
          return BROKER_ADDRESSES;
        case 15: // FILE_ATTRIBUTES
          return FILE_ATTRIBUTES;
        case 16: // PRE_FILTER_EXPRS
          return PRE_FILTER_EXPRS;
        case 17: // TABLE_FORMAT_PARAMS
          return TABLE_FORMAT_PARAMS;
        case 18: // COLUMN_IDXS
          return COLUMN_IDXS;
        case 19: // SLOT_NAME_TO_SCHEMA_POS
          return SLOT_NAME_TO_SCHEMA_POS;
        case 20: // PRE_FILTER_EXPRS_LIST
          return PRE_FILTER_EXPRS_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SRC_TUPLE_ID_ISSET_ID = 0;
  private static final int __DEST_TUPLE_ID_ISSET_ID = 1;
  private static final int __NUM_OF_COLUMNS_FROM_FILE_ISSET_ID = 2;
  private static final int __STRICT_MODE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FILE_TYPE,_Fields.FORMAT_TYPE,_Fields.COMPRESS_TYPE,_Fields.SRC_TUPLE_ID,_Fields.DEST_TUPLE_ID,_Fields.NUM_OF_COLUMNS_FROM_FILE,_Fields.REQUIRED_SLOTS,_Fields.HDFS_PARAMS,_Fields.PROPERTIES,_Fields.EXPR_OF_DEST_SLOT,_Fields.DEFAULT_VALUE_OF_SRC_SLOT,_Fields.DEST_SID_TO_SRC_SID_WITHOUT_TRANS,_Fields.STRICT_MODE,_Fields.BROKER_ADDRESSES,_Fields.FILE_ATTRIBUTES,_Fields.PRE_FILTER_EXPRS,_Fields.TABLE_FORMAT_PARAMS,_Fields.COLUMN_IDXS,_Fields.SLOT_NAME_TO_SCHEMA_POS,_Fields.PRE_FILTER_EXPRS_LIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("file_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.doris.thrift.TFileType.class)));
    tmpMap.put(_Fields.FORMAT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("format_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TFileFormatType.class)));
    tmpMap.put(_Fields.COMPRESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("compress_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TFileCompressType.class)));
    tmpMap.put(_Fields.SRC_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("src_tuple_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.DEST_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("dest_tuple_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.NUM_OF_COLUMNS_FROM_FILE, new org.apache.thrift.meta_data.FieldMetaData("num_of_columns_from_file", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUIRED_SLOTS, new org.apache.thrift.meta_data.FieldMetaData("required_slots", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFileScanSlotInfo.class))));
    tmpMap.put(_Fields.HDFS_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("hdfs_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, THdfsParams.class)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.EXPR_OF_DEST_SLOT, new org.apache.thrift.meta_data.FieldMetaData("expr_of_dest_slot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TExpr.class))));
    tmpMap.put(_Fields.DEFAULT_VALUE_OF_SRC_SLOT, new org.apache.thrift.meta_data.FieldMetaData("default_value_of_src_slot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TExpr.class))));
    tmpMap.put(_Fields.DEST_SID_TO_SRC_SID_WITHOUT_TRANS, new org.apache.thrift.meta_data.FieldMetaData("dest_sid_to_src_sid_without_trans", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"))));
    tmpMap.put(_Fields.STRICT_MODE, new org.apache.thrift.meta_data.FieldMetaData("strict_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BROKER_ADDRESSES, new org.apache.thrift.meta_data.FieldMetaData("broker_addresses", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TNetworkAddress.class))));
    tmpMap.put(_Fields.FILE_ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("file_attributes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFileAttributes.class)));
    tmpMap.put(_Fields.PRE_FILTER_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("pre_filter_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TExpr.class)));
    tmpMap.put(_Fields.TABLE_FORMAT_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("table_format_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTableFormatFileDesc.class)));
    tmpMap.put(_Fields.COLUMN_IDXS, new org.apache.thrift.meta_data.FieldMetaData("column_idxs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SLOT_NAME_TO_SCHEMA_POS, new org.apache.thrift.meta_data.FieldMetaData("slot_name_to_schema_pos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PRE_FILTER_EXPRS_LIST, new org.apache.thrift.meta_data.FieldMetaData("pre_filter_exprs_list", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TExpr.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFileScanRangeParams.class, metaDataMap);
  }

  public TFileScanRangeParams() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFileScanRangeParams(TFileScanRangeParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFileType()) {
      this.file_type = other.file_type;
    }
    if (other.isSetFormatType()) {
      this.format_type = other.format_type;
    }
    if (other.isSetCompressType()) {
      this.compress_type = other.compress_type;
    }
    this.src_tuple_id = other.src_tuple_id;
    this.dest_tuple_id = other.dest_tuple_id;
    this.num_of_columns_from_file = other.num_of_columns_from_file;
    if (other.isSetRequiredSlots()) {
      java.util.List<TFileScanSlotInfo> __this__required_slots = new java.util.ArrayList<TFileScanSlotInfo>(other.required_slots.size());
      for (TFileScanSlotInfo other_element : other.required_slots) {
        __this__required_slots.add(new TFileScanSlotInfo(other_element));
      }
      this.required_slots = __this__required_slots;
    }
    if (other.isSetHdfsParams()) {
      this.hdfs_params = new THdfsParams(other.hdfs_params);
    }
    if (other.isSetProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.properties);
      this.properties = __this__properties;
    }
    if (other.isSetExprOfDestSlot()) {
      java.util.Map<java.lang.Integer,org.apache.doris.thrift.TExpr> __this__expr_of_dest_slot = new java.util.HashMap<java.lang.Integer,org.apache.doris.thrift.TExpr>(other.expr_of_dest_slot.size());
      for (java.util.Map.Entry<java.lang.Integer, org.apache.doris.thrift.TExpr> other_element : other.expr_of_dest_slot.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        org.apache.doris.thrift.TExpr other_element_value = other_element.getValue();

        java.lang.Integer __this__expr_of_dest_slot_copy_key = other_element_key;

        org.apache.doris.thrift.TExpr __this__expr_of_dest_slot_copy_value = new org.apache.doris.thrift.TExpr(other_element_value);

        __this__expr_of_dest_slot.put(__this__expr_of_dest_slot_copy_key, __this__expr_of_dest_slot_copy_value);
      }
      this.expr_of_dest_slot = __this__expr_of_dest_slot;
    }
    if (other.isSetDefaultValueOfSrcSlot()) {
      java.util.Map<java.lang.Integer,org.apache.doris.thrift.TExpr> __this__default_value_of_src_slot = new java.util.HashMap<java.lang.Integer,org.apache.doris.thrift.TExpr>(other.default_value_of_src_slot.size());
      for (java.util.Map.Entry<java.lang.Integer, org.apache.doris.thrift.TExpr> other_element : other.default_value_of_src_slot.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        org.apache.doris.thrift.TExpr other_element_value = other_element.getValue();

        java.lang.Integer __this__default_value_of_src_slot_copy_key = other_element_key;

        org.apache.doris.thrift.TExpr __this__default_value_of_src_slot_copy_value = new org.apache.doris.thrift.TExpr(other_element_value);

        __this__default_value_of_src_slot.put(__this__default_value_of_src_slot_copy_key, __this__default_value_of_src_slot_copy_value);
      }
      this.default_value_of_src_slot = __this__default_value_of_src_slot;
    }
    if (other.isSetDestSidToSrcSidWithoutTrans()) {
      java.util.Map<java.lang.Integer,java.lang.Integer> __this__dest_sid_to_src_sid_without_trans = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other.dest_sid_to_src_sid_without_trans.size());
      for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> other_element : other.dest_sid_to_src_sid_without_trans.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        java.lang.Integer other_element_value = other_element.getValue();

        java.lang.Integer __this__dest_sid_to_src_sid_without_trans_copy_key = other_element_key;

        java.lang.Integer __this__dest_sid_to_src_sid_without_trans_copy_value = other_element_value;

        __this__dest_sid_to_src_sid_without_trans.put(__this__dest_sid_to_src_sid_without_trans_copy_key, __this__dest_sid_to_src_sid_without_trans_copy_value);
      }
      this.dest_sid_to_src_sid_without_trans = __this__dest_sid_to_src_sid_without_trans;
    }
    this.strict_mode = other.strict_mode;
    if (other.isSetBrokerAddresses()) {
      java.util.List<org.apache.doris.thrift.TNetworkAddress> __this__broker_addresses = new java.util.ArrayList<org.apache.doris.thrift.TNetworkAddress>(other.broker_addresses.size());
      for (org.apache.doris.thrift.TNetworkAddress other_element : other.broker_addresses) {
        __this__broker_addresses.add(new org.apache.doris.thrift.TNetworkAddress(other_element));
      }
      this.broker_addresses = __this__broker_addresses;
    }
    if (other.isSetFileAttributes()) {
      this.file_attributes = new TFileAttributes(other.file_attributes);
    }
    if (other.isSetPreFilterExprs()) {
      this.pre_filter_exprs = new org.apache.doris.thrift.TExpr(other.pre_filter_exprs);
    }
    if (other.isSetTableFormatParams()) {
      this.table_format_params = new TTableFormatFileDesc(other.table_format_params);
    }
    if (other.isSetColumnIdxs()) {
      java.util.List<java.lang.Integer> __this__column_idxs = new java.util.ArrayList<java.lang.Integer>(other.column_idxs);
      this.column_idxs = __this__column_idxs;
    }
    if (other.isSetSlotNameToSchemaPos()) {
      java.util.Map<java.lang.String,java.lang.Integer> __this__slot_name_to_schema_pos = new java.util.HashMap<java.lang.String,java.lang.Integer>(other.slot_name_to_schema_pos);
      this.slot_name_to_schema_pos = __this__slot_name_to_schema_pos;
    }
    if (other.isSetPreFilterExprsList()) {
      java.util.List<org.apache.doris.thrift.TExpr> __this__pre_filter_exprs_list = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(other.pre_filter_exprs_list.size());
      for (org.apache.doris.thrift.TExpr other_element : other.pre_filter_exprs_list) {
        __this__pre_filter_exprs_list.add(new org.apache.doris.thrift.TExpr(other_element));
      }
      this.pre_filter_exprs_list = __this__pre_filter_exprs_list;
    }
  }

  public TFileScanRangeParams deepCopy() {
    return new TFileScanRangeParams(this);
  }

  @Override
  public void clear() {
    this.file_type = null;
    this.format_type = null;
    this.compress_type = null;
    setSrcTupleIdIsSet(false);
    this.src_tuple_id = 0;
    setDestTupleIdIsSet(false);
    this.dest_tuple_id = 0;
    setNumOfColumnsFromFileIsSet(false);
    this.num_of_columns_from_file = 0;
    this.required_slots = null;
    this.hdfs_params = null;
    this.properties = null;
    this.expr_of_dest_slot = null;
    this.default_value_of_src_slot = null;
    this.dest_sid_to_src_sid_without_trans = null;
    setStrictModeIsSet(false);
    this.strict_mode = false;
    this.broker_addresses = null;
    this.file_attributes = null;
    this.pre_filter_exprs = null;
    this.table_format_params = null;
    this.column_idxs = null;
    this.slot_name_to_schema_pos = null;
    this.pre_filter_exprs_list = null;
  }

  /**
   * 
   * @see org.apache.doris.thrift.TFileType
   */
  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TFileType getFileType() {
    return this.file_type;
  }

  /**
   * 
   * @see org.apache.doris.thrift.TFileType
   */
  public TFileScanRangeParams setFileType(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TFileType file_type) {
    this.file_type = file_type;
    return this;
  }

  public void unsetFileType() {
    this.file_type = null;
  }

  /** Returns true if field file_type is set (has been assigned a value) and false otherwise */
  public boolean isSetFileType() {
    return this.file_type != null;
  }

  public void setFileTypeIsSet(boolean value) {
    if (!value) {
      this.file_type = null;
    }
  }

  /**
   * 
   * @see TFileFormatType
   */
  @org.apache.thrift.annotation.Nullable
  public TFileFormatType getFormatType() {
    return this.format_type;
  }

  /**
   * 
   * @see TFileFormatType
   */
  public TFileScanRangeParams setFormatType(@org.apache.thrift.annotation.Nullable TFileFormatType format_type) {
    this.format_type = format_type;
    return this;
  }

  public void unsetFormatType() {
    this.format_type = null;
  }

  /** Returns true if field format_type is set (has been assigned a value) and false otherwise */
  public boolean isSetFormatType() {
    return this.format_type != null;
  }

  public void setFormatTypeIsSet(boolean value) {
    if (!value) {
      this.format_type = null;
    }
  }

  /**
   * 
   * @see TFileCompressType
   */
  @org.apache.thrift.annotation.Nullable
  public TFileCompressType getCompressType() {
    return this.compress_type;
  }

  /**
   * 
   * @see TFileCompressType
   */
  public TFileScanRangeParams setCompressType(@org.apache.thrift.annotation.Nullable TFileCompressType compress_type) {
    this.compress_type = compress_type;
    return this;
  }

  public void unsetCompressType() {
    this.compress_type = null;
  }

  /** Returns true if field compress_type is set (has been assigned a value) and false otherwise */
  public boolean isSetCompressType() {
    return this.compress_type != null;
  }

  public void setCompressTypeIsSet(boolean value) {
    if (!value) {
      this.compress_type = null;
    }
  }

  public int getSrcTupleId() {
    return this.src_tuple_id;
  }

  public TFileScanRangeParams setSrcTupleId(int src_tuple_id) {
    this.src_tuple_id = src_tuple_id;
    setSrcTupleIdIsSet(true);
    return this;
  }

  public void unsetSrcTupleId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SRC_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field src_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcTupleId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SRC_TUPLE_ID_ISSET_ID);
  }

  public void setSrcTupleIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SRC_TUPLE_ID_ISSET_ID, value);
  }

  public int getDestTupleId() {
    return this.dest_tuple_id;
  }

  public TFileScanRangeParams setDestTupleId(int dest_tuple_id) {
    this.dest_tuple_id = dest_tuple_id;
    setDestTupleIdIsSet(true);
    return this;
  }

  public void unsetDestTupleId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEST_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field dest_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDestTupleId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEST_TUPLE_ID_ISSET_ID);
  }

  public void setDestTupleIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEST_TUPLE_ID_ISSET_ID, value);
  }

  public int getNumOfColumnsFromFile() {
    return this.num_of_columns_from_file;
  }

  public TFileScanRangeParams setNumOfColumnsFromFile(int num_of_columns_from_file) {
    this.num_of_columns_from_file = num_of_columns_from_file;
    setNumOfColumnsFromFileIsSet(true);
    return this;
  }

  public void unsetNumOfColumnsFromFile() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_OF_COLUMNS_FROM_FILE_ISSET_ID);
  }

  /** Returns true if field num_of_columns_from_file is set (has been assigned a value) and false otherwise */
  public boolean isSetNumOfColumnsFromFile() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_OF_COLUMNS_FROM_FILE_ISSET_ID);
  }

  public void setNumOfColumnsFromFileIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_OF_COLUMNS_FROM_FILE_ISSET_ID, value);
  }

  public int getRequiredSlotsSize() {
    return (this.required_slots == null) ? 0 : this.required_slots.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TFileScanSlotInfo> getRequiredSlotsIterator() {
    return (this.required_slots == null) ? null : this.required_slots.iterator();
  }

  public void addToRequiredSlots(TFileScanSlotInfo elem) {
    if (this.required_slots == null) {
      this.required_slots = new java.util.ArrayList<TFileScanSlotInfo>();
    }
    this.required_slots.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TFileScanSlotInfo> getRequiredSlots() {
    return this.required_slots;
  }

  public TFileScanRangeParams setRequiredSlots(@org.apache.thrift.annotation.Nullable java.util.List<TFileScanSlotInfo> required_slots) {
    this.required_slots = required_slots;
    return this;
  }

  public void unsetRequiredSlots() {
    this.required_slots = null;
  }

  /** Returns true if field required_slots is set (has been assigned a value) and false otherwise */
  public boolean isSetRequiredSlots() {
    return this.required_slots != null;
  }

  public void setRequiredSlotsIsSet(boolean value) {
    if (!value) {
      this.required_slots = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public THdfsParams getHdfsParams() {
    return this.hdfs_params;
  }

  public TFileScanRangeParams setHdfsParams(@org.apache.thrift.annotation.Nullable THdfsParams hdfs_params) {
    this.hdfs_params = hdfs_params;
    return this;
  }

  public void unsetHdfsParams() {
    this.hdfs_params = null;
  }

  /** Returns true if field hdfs_params is set (has been assigned a value) and false otherwise */
  public boolean isSetHdfsParams() {
    return this.hdfs_params != null;
  }

  public void setHdfsParamsIsSet(boolean value) {
    if (!value) {
      this.hdfs_params = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(java.lang.String key, java.lang.String val) {
    if (this.properties == null) {
      this.properties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.properties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getProperties() {
    return this.properties;
  }

  public TFileScanRangeParams setProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public int getExprOfDestSlotSize() {
    return (this.expr_of_dest_slot == null) ? 0 : this.expr_of_dest_slot.size();
  }

  public void putToExprOfDestSlot(int key, org.apache.doris.thrift.TExpr val) {
    if (this.expr_of_dest_slot == null) {
      this.expr_of_dest_slot = new java.util.HashMap<java.lang.Integer,org.apache.doris.thrift.TExpr>();
    }
    this.expr_of_dest_slot.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,org.apache.doris.thrift.TExpr> getExprOfDestSlot() {
    return this.expr_of_dest_slot;
  }

  public TFileScanRangeParams setExprOfDestSlot(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,org.apache.doris.thrift.TExpr> expr_of_dest_slot) {
    this.expr_of_dest_slot = expr_of_dest_slot;
    return this;
  }

  public void unsetExprOfDestSlot() {
    this.expr_of_dest_slot = null;
  }

  /** Returns true if field expr_of_dest_slot is set (has been assigned a value) and false otherwise */
  public boolean isSetExprOfDestSlot() {
    return this.expr_of_dest_slot != null;
  }

  public void setExprOfDestSlotIsSet(boolean value) {
    if (!value) {
      this.expr_of_dest_slot = null;
    }
  }

  public int getDefaultValueOfSrcSlotSize() {
    return (this.default_value_of_src_slot == null) ? 0 : this.default_value_of_src_slot.size();
  }

  public void putToDefaultValueOfSrcSlot(int key, org.apache.doris.thrift.TExpr val) {
    if (this.default_value_of_src_slot == null) {
      this.default_value_of_src_slot = new java.util.HashMap<java.lang.Integer,org.apache.doris.thrift.TExpr>();
    }
    this.default_value_of_src_slot.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,org.apache.doris.thrift.TExpr> getDefaultValueOfSrcSlot() {
    return this.default_value_of_src_slot;
  }

  public TFileScanRangeParams setDefaultValueOfSrcSlot(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,org.apache.doris.thrift.TExpr> default_value_of_src_slot) {
    this.default_value_of_src_slot = default_value_of_src_slot;
    return this;
  }

  public void unsetDefaultValueOfSrcSlot() {
    this.default_value_of_src_slot = null;
  }

  /** Returns true if field default_value_of_src_slot is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultValueOfSrcSlot() {
    return this.default_value_of_src_slot != null;
  }

  public void setDefaultValueOfSrcSlotIsSet(boolean value) {
    if (!value) {
      this.default_value_of_src_slot = null;
    }
  }

  public int getDestSidToSrcSidWithoutTransSize() {
    return (this.dest_sid_to_src_sid_without_trans == null) ? 0 : this.dest_sid_to_src_sid_without_trans.size();
  }

  public void putToDestSidToSrcSidWithoutTrans(int key, int val) {
    if (this.dest_sid_to_src_sid_without_trans == null) {
      this.dest_sid_to_src_sid_without_trans = new java.util.HashMap<java.lang.Integer,java.lang.Integer>();
    }
    this.dest_sid_to_src_sid_without_trans.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Integer> getDestSidToSrcSidWithoutTrans() {
    return this.dest_sid_to_src_sid_without_trans;
  }

  public TFileScanRangeParams setDestSidToSrcSidWithoutTrans(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> dest_sid_to_src_sid_without_trans) {
    this.dest_sid_to_src_sid_without_trans = dest_sid_to_src_sid_without_trans;
    return this;
  }

  public void unsetDestSidToSrcSidWithoutTrans() {
    this.dest_sid_to_src_sid_without_trans = null;
  }

  /** Returns true if field dest_sid_to_src_sid_without_trans is set (has been assigned a value) and false otherwise */
  public boolean isSetDestSidToSrcSidWithoutTrans() {
    return this.dest_sid_to_src_sid_without_trans != null;
  }

  public void setDestSidToSrcSidWithoutTransIsSet(boolean value) {
    if (!value) {
      this.dest_sid_to_src_sid_without_trans = null;
    }
  }

  public boolean isStrictMode() {
    return this.strict_mode;
  }

  public TFileScanRangeParams setStrictMode(boolean strict_mode) {
    this.strict_mode = strict_mode;
    setStrictModeIsSet(true);
    return this;
  }

  public void unsetStrictMode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STRICT_MODE_ISSET_ID);
  }

  /** Returns true if field strict_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetStrictMode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STRICT_MODE_ISSET_ID);
  }

  public void setStrictModeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STRICT_MODE_ISSET_ID, value);
  }

  public int getBrokerAddressesSize() {
    return (this.broker_addresses == null) ? 0 : this.broker_addresses.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TNetworkAddress> getBrokerAddressesIterator() {
    return (this.broker_addresses == null) ? null : this.broker_addresses.iterator();
  }

  public void addToBrokerAddresses(org.apache.doris.thrift.TNetworkAddress elem) {
    if (this.broker_addresses == null) {
      this.broker_addresses = new java.util.ArrayList<org.apache.doris.thrift.TNetworkAddress>();
    }
    this.broker_addresses.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TNetworkAddress> getBrokerAddresses() {
    return this.broker_addresses;
  }

  public TFileScanRangeParams setBrokerAddresses(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TNetworkAddress> broker_addresses) {
    this.broker_addresses = broker_addresses;
    return this;
  }

  public void unsetBrokerAddresses() {
    this.broker_addresses = null;
  }

  /** Returns true if field broker_addresses is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerAddresses() {
    return this.broker_addresses != null;
  }

  public void setBrokerAddressesIsSet(boolean value) {
    if (!value) {
      this.broker_addresses = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TFileAttributes getFileAttributes() {
    return this.file_attributes;
  }

  public TFileScanRangeParams setFileAttributes(@org.apache.thrift.annotation.Nullable TFileAttributes file_attributes) {
    this.file_attributes = file_attributes;
    return this;
  }

  public void unsetFileAttributes() {
    this.file_attributes = null;
  }

  /** Returns true if field file_attributes is set (has been assigned a value) and false otherwise */
  public boolean isSetFileAttributes() {
    return this.file_attributes != null;
  }

  public void setFileAttributesIsSet(boolean value) {
    if (!value) {
      this.file_attributes = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TExpr getPreFilterExprs() {
    return this.pre_filter_exprs;
  }

  public TFileScanRangeParams setPreFilterExprs(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr pre_filter_exprs) {
    this.pre_filter_exprs = pre_filter_exprs;
    return this;
  }

  public void unsetPreFilterExprs() {
    this.pre_filter_exprs = null;
  }

  /** Returns true if field pre_filter_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetPreFilterExprs() {
    return this.pre_filter_exprs != null;
  }

  public void setPreFilterExprsIsSet(boolean value) {
    if (!value) {
      this.pre_filter_exprs = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TTableFormatFileDesc getTableFormatParams() {
    return this.table_format_params;
  }

  public TFileScanRangeParams setTableFormatParams(@org.apache.thrift.annotation.Nullable TTableFormatFileDesc table_format_params) {
    this.table_format_params = table_format_params;
    return this;
  }

  public void unsetTableFormatParams() {
    this.table_format_params = null;
  }

  /** Returns true if field table_format_params is set (has been assigned a value) and false otherwise */
  public boolean isSetTableFormatParams() {
    return this.table_format_params != null;
  }

  public void setTableFormatParamsIsSet(boolean value) {
    if (!value) {
      this.table_format_params = null;
    }
  }

  public int getColumnIdxsSize() {
    return (this.column_idxs == null) ? 0 : this.column_idxs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getColumnIdxsIterator() {
    return (this.column_idxs == null) ? null : this.column_idxs.iterator();
  }

  public void addToColumnIdxs(int elem) {
    if (this.column_idxs == null) {
      this.column_idxs = new java.util.ArrayList<java.lang.Integer>();
    }
    this.column_idxs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getColumnIdxs() {
    return this.column_idxs;
  }

  public TFileScanRangeParams setColumnIdxs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> column_idxs) {
    this.column_idxs = column_idxs;
    return this;
  }

  public void unsetColumnIdxs() {
    this.column_idxs = null;
  }

  /** Returns true if field column_idxs is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnIdxs() {
    return this.column_idxs != null;
  }

  public void setColumnIdxsIsSet(boolean value) {
    if (!value) {
      this.column_idxs = null;
    }
  }

  public int getSlotNameToSchemaPosSize() {
    return (this.slot_name_to_schema_pos == null) ? 0 : this.slot_name_to_schema_pos.size();
  }

  public void putToSlotNameToSchemaPos(java.lang.String key, int val) {
    if (this.slot_name_to_schema_pos == null) {
      this.slot_name_to_schema_pos = new java.util.HashMap<java.lang.String,java.lang.Integer>();
    }
    this.slot_name_to_schema_pos.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.Integer> getSlotNameToSchemaPos() {
    return this.slot_name_to_schema_pos;
  }

  public TFileScanRangeParams setSlotNameToSchemaPos(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> slot_name_to_schema_pos) {
    this.slot_name_to_schema_pos = slot_name_to_schema_pos;
    return this;
  }

  public void unsetSlotNameToSchemaPos() {
    this.slot_name_to_schema_pos = null;
  }

  /** Returns true if field slot_name_to_schema_pos is set (has been assigned a value) and false otherwise */
  public boolean isSetSlotNameToSchemaPos() {
    return this.slot_name_to_schema_pos != null;
  }

  public void setSlotNameToSchemaPosIsSet(boolean value) {
    if (!value) {
      this.slot_name_to_schema_pos = null;
    }
  }

  public int getPreFilterExprsListSize() {
    return (this.pre_filter_exprs_list == null) ? 0 : this.pre_filter_exprs_list.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TExpr> getPreFilterExprsListIterator() {
    return (this.pre_filter_exprs_list == null) ? null : this.pre_filter_exprs_list.iterator();
  }

  public void addToPreFilterExprsList(org.apache.doris.thrift.TExpr elem) {
    if (this.pre_filter_exprs_list == null) {
      this.pre_filter_exprs_list = new java.util.ArrayList<org.apache.doris.thrift.TExpr>();
    }
    this.pre_filter_exprs_list.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TExpr> getPreFilterExprsList() {
    return this.pre_filter_exprs_list;
  }

  public TFileScanRangeParams setPreFilterExprsList(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TExpr> pre_filter_exprs_list) {
    this.pre_filter_exprs_list = pre_filter_exprs_list;
    return this;
  }

  public void unsetPreFilterExprsList() {
    this.pre_filter_exprs_list = null;
  }

  /** Returns true if field pre_filter_exprs_list is set (has been assigned a value) and false otherwise */
  public boolean isSetPreFilterExprsList() {
    return this.pre_filter_exprs_list != null;
  }

  public void setPreFilterExprsListIsSet(boolean value) {
    if (!value) {
      this.pre_filter_exprs_list = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FILE_TYPE:
      if (value == null) {
        unsetFileType();
      } else {
        setFileType((org.apache.doris.thrift.TFileType)value);
      }
      break;

    case FORMAT_TYPE:
      if (value == null) {
        unsetFormatType();
      } else {
        setFormatType((TFileFormatType)value);
      }
      break;

    case COMPRESS_TYPE:
      if (value == null) {
        unsetCompressType();
      } else {
        setCompressType((TFileCompressType)value);
      }
      break;

    case SRC_TUPLE_ID:
      if (value == null) {
        unsetSrcTupleId();
      } else {
        setSrcTupleId((java.lang.Integer)value);
      }
      break;

    case DEST_TUPLE_ID:
      if (value == null) {
        unsetDestTupleId();
      } else {
        setDestTupleId((java.lang.Integer)value);
      }
      break;

    case NUM_OF_COLUMNS_FROM_FILE:
      if (value == null) {
        unsetNumOfColumnsFromFile();
      } else {
        setNumOfColumnsFromFile((java.lang.Integer)value);
      }
      break;

    case REQUIRED_SLOTS:
      if (value == null) {
        unsetRequiredSlots();
      } else {
        setRequiredSlots((java.util.List<TFileScanSlotInfo>)value);
      }
      break;

    case HDFS_PARAMS:
      if (value == null) {
        unsetHdfsParams();
      } else {
        setHdfsParams((THdfsParams)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case EXPR_OF_DEST_SLOT:
      if (value == null) {
        unsetExprOfDestSlot();
      } else {
        setExprOfDestSlot((java.util.Map<java.lang.Integer,org.apache.doris.thrift.TExpr>)value);
      }
      break;

    case DEFAULT_VALUE_OF_SRC_SLOT:
      if (value == null) {
        unsetDefaultValueOfSrcSlot();
      } else {
        setDefaultValueOfSrcSlot((java.util.Map<java.lang.Integer,org.apache.doris.thrift.TExpr>)value);
      }
      break;

    case DEST_SID_TO_SRC_SID_WITHOUT_TRANS:
      if (value == null) {
        unsetDestSidToSrcSidWithoutTrans();
      } else {
        setDestSidToSrcSidWithoutTrans((java.util.Map<java.lang.Integer,java.lang.Integer>)value);
      }
      break;

    case STRICT_MODE:
      if (value == null) {
        unsetStrictMode();
      } else {
        setStrictMode((java.lang.Boolean)value);
      }
      break;

    case BROKER_ADDRESSES:
      if (value == null) {
        unsetBrokerAddresses();
      } else {
        setBrokerAddresses((java.util.List<org.apache.doris.thrift.TNetworkAddress>)value);
      }
      break;

    case FILE_ATTRIBUTES:
      if (value == null) {
        unsetFileAttributes();
      } else {
        setFileAttributes((TFileAttributes)value);
      }
      break;

    case PRE_FILTER_EXPRS:
      if (value == null) {
        unsetPreFilterExprs();
      } else {
        setPreFilterExprs((org.apache.doris.thrift.TExpr)value);
      }
      break;

    case TABLE_FORMAT_PARAMS:
      if (value == null) {
        unsetTableFormatParams();
      } else {
        setTableFormatParams((TTableFormatFileDesc)value);
      }
      break;

    case COLUMN_IDXS:
      if (value == null) {
        unsetColumnIdxs();
      } else {
        setColumnIdxs((java.util.List<java.lang.Integer>)value);
      }
      break;

    case SLOT_NAME_TO_SCHEMA_POS:
      if (value == null) {
        unsetSlotNameToSchemaPos();
      } else {
        setSlotNameToSchemaPos((java.util.Map<java.lang.String,java.lang.Integer>)value);
      }
      break;

    case PRE_FILTER_EXPRS_LIST:
      if (value == null) {
        unsetPreFilterExprsList();
      } else {
        setPreFilterExprsList((java.util.List<org.apache.doris.thrift.TExpr>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FILE_TYPE:
      return getFileType();

    case FORMAT_TYPE:
      return getFormatType();

    case COMPRESS_TYPE:
      return getCompressType();

    case SRC_TUPLE_ID:
      return getSrcTupleId();

    case DEST_TUPLE_ID:
      return getDestTupleId();

    case NUM_OF_COLUMNS_FROM_FILE:
      return getNumOfColumnsFromFile();

    case REQUIRED_SLOTS:
      return getRequiredSlots();

    case HDFS_PARAMS:
      return getHdfsParams();

    case PROPERTIES:
      return getProperties();

    case EXPR_OF_DEST_SLOT:
      return getExprOfDestSlot();

    case DEFAULT_VALUE_OF_SRC_SLOT:
      return getDefaultValueOfSrcSlot();

    case DEST_SID_TO_SRC_SID_WITHOUT_TRANS:
      return getDestSidToSrcSidWithoutTrans();

    case STRICT_MODE:
      return isStrictMode();

    case BROKER_ADDRESSES:
      return getBrokerAddresses();

    case FILE_ATTRIBUTES:
      return getFileAttributes();

    case PRE_FILTER_EXPRS:
      return getPreFilterExprs();

    case TABLE_FORMAT_PARAMS:
      return getTableFormatParams();

    case COLUMN_IDXS:
      return getColumnIdxs();

    case SLOT_NAME_TO_SCHEMA_POS:
      return getSlotNameToSchemaPos();

    case PRE_FILTER_EXPRS_LIST:
      return getPreFilterExprsList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FILE_TYPE:
      return isSetFileType();
    case FORMAT_TYPE:
      return isSetFormatType();
    case COMPRESS_TYPE:
      return isSetCompressType();
    case SRC_TUPLE_ID:
      return isSetSrcTupleId();
    case DEST_TUPLE_ID:
      return isSetDestTupleId();
    case NUM_OF_COLUMNS_FROM_FILE:
      return isSetNumOfColumnsFromFile();
    case REQUIRED_SLOTS:
      return isSetRequiredSlots();
    case HDFS_PARAMS:
      return isSetHdfsParams();
    case PROPERTIES:
      return isSetProperties();
    case EXPR_OF_DEST_SLOT:
      return isSetExprOfDestSlot();
    case DEFAULT_VALUE_OF_SRC_SLOT:
      return isSetDefaultValueOfSrcSlot();
    case DEST_SID_TO_SRC_SID_WITHOUT_TRANS:
      return isSetDestSidToSrcSidWithoutTrans();
    case STRICT_MODE:
      return isSetStrictMode();
    case BROKER_ADDRESSES:
      return isSetBrokerAddresses();
    case FILE_ATTRIBUTES:
      return isSetFileAttributes();
    case PRE_FILTER_EXPRS:
      return isSetPreFilterExprs();
    case TABLE_FORMAT_PARAMS:
      return isSetTableFormatParams();
    case COLUMN_IDXS:
      return isSetColumnIdxs();
    case SLOT_NAME_TO_SCHEMA_POS:
      return isSetSlotNameToSchemaPos();
    case PRE_FILTER_EXPRS_LIST:
      return isSetPreFilterExprsList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TFileScanRangeParams)
      return this.equals((TFileScanRangeParams)that);
    return false;
  }

  public boolean equals(TFileScanRangeParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_file_type = true && this.isSetFileType();
    boolean that_present_file_type = true && that.isSetFileType();
    if (this_present_file_type || that_present_file_type) {
      if (!(this_present_file_type && that_present_file_type))
        return false;
      if (!this.file_type.equals(that.file_type))
        return false;
    }

    boolean this_present_format_type = true && this.isSetFormatType();
    boolean that_present_format_type = true && that.isSetFormatType();
    if (this_present_format_type || that_present_format_type) {
      if (!(this_present_format_type && that_present_format_type))
        return false;
      if (!this.format_type.equals(that.format_type))
        return false;
    }

    boolean this_present_compress_type = true && this.isSetCompressType();
    boolean that_present_compress_type = true && that.isSetCompressType();
    if (this_present_compress_type || that_present_compress_type) {
      if (!(this_present_compress_type && that_present_compress_type))
        return false;
      if (!this.compress_type.equals(that.compress_type))
        return false;
    }

    boolean this_present_src_tuple_id = true && this.isSetSrcTupleId();
    boolean that_present_src_tuple_id = true && that.isSetSrcTupleId();
    if (this_present_src_tuple_id || that_present_src_tuple_id) {
      if (!(this_present_src_tuple_id && that_present_src_tuple_id))
        return false;
      if (this.src_tuple_id != that.src_tuple_id)
        return false;
    }

    boolean this_present_dest_tuple_id = true && this.isSetDestTupleId();
    boolean that_present_dest_tuple_id = true && that.isSetDestTupleId();
    if (this_present_dest_tuple_id || that_present_dest_tuple_id) {
      if (!(this_present_dest_tuple_id && that_present_dest_tuple_id))
        return false;
      if (this.dest_tuple_id != that.dest_tuple_id)
        return false;
    }

    boolean this_present_num_of_columns_from_file = true && this.isSetNumOfColumnsFromFile();
    boolean that_present_num_of_columns_from_file = true && that.isSetNumOfColumnsFromFile();
    if (this_present_num_of_columns_from_file || that_present_num_of_columns_from_file) {
      if (!(this_present_num_of_columns_from_file && that_present_num_of_columns_from_file))
        return false;
      if (this.num_of_columns_from_file != that.num_of_columns_from_file)
        return false;
    }

    boolean this_present_required_slots = true && this.isSetRequiredSlots();
    boolean that_present_required_slots = true && that.isSetRequiredSlots();
    if (this_present_required_slots || that_present_required_slots) {
      if (!(this_present_required_slots && that_present_required_slots))
        return false;
      if (!this.required_slots.equals(that.required_slots))
        return false;
    }

    boolean this_present_hdfs_params = true && this.isSetHdfsParams();
    boolean that_present_hdfs_params = true && that.isSetHdfsParams();
    if (this_present_hdfs_params || that_present_hdfs_params) {
      if (!(this_present_hdfs_params && that_present_hdfs_params))
        return false;
      if (!this.hdfs_params.equals(that.hdfs_params))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_expr_of_dest_slot = true && this.isSetExprOfDestSlot();
    boolean that_present_expr_of_dest_slot = true && that.isSetExprOfDestSlot();
    if (this_present_expr_of_dest_slot || that_present_expr_of_dest_slot) {
      if (!(this_present_expr_of_dest_slot && that_present_expr_of_dest_slot))
        return false;
      if (!this.expr_of_dest_slot.equals(that.expr_of_dest_slot))
        return false;
    }

    boolean this_present_default_value_of_src_slot = true && this.isSetDefaultValueOfSrcSlot();
    boolean that_present_default_value_of_src_slot = true && that.isSetDefaultValueOfSrcSlot();
    if (this_present_default_value_of_src_slot || that_present_default_value_of_src_slot) {
      if (!(this_present_default_value_of_src_slot && that_present_default_value_of_src_slot))
        return false;
      if (!this.default_value_of_src_slot.equals(that.default_value_of_src_slot))
        return false;
    }

    boolean this_present_dest_sid_to_src_sid_without_trans = true && this.isSetDestSidToSrcSidWithoutTrans();
    boolean that_present_dest_sid_to_src_sid_without_trans = true && that.isSetDestSidToSrcSidWithoutTrans();
    if (this_present_dest_sid_to_src_sid_without_trans || that_present_dest_sid_to_src_sid_without_trans) {
      if (!(this_present_dest_sid_to_src_sid_without_trans && that_present_dest_sid_to_src_sid_without_trans))
        return false;
      if (!this.dest_sid_to_src_sid_without_trans.equals(that.dest_sid_to_src_sid_without_trans))
        return false;
    }

    boolean this_present_strict_mode = true && this.isSetStrictMode();
    boolean that_present_strict_mode = true && that.isSetStrictMode();
    if (this_present_strict_mode || that_present_strict_mode) {
      if (!(this_present_strict_mode && that_present_strict_mode))
        return false;
      if (this.strict_mode != that.strict_mode)
        return false;
    }

    boolean this_present_broker_addresses = true && this.isSetBrokerAddresses();
    boolean that_present_broker_addresses = true && that.isSetBrokerAddresses();
    if (this_present_broker_addresses || that_present_broker_addresses) {
      if (!(this_present_broker_addresses && that_present_broker_addresses))
        return false;
      if (!this.broker_addresses.equals(that.broker_addresses))
        return false;
    }

    boolean this_present_file_attributes = true && this.isSetFileAttributes();
    boolean that_present_file_attributes = true && that.isSetFileAttributes();
    if (this_present_file_attributes || that_present_file_attributes) {
      if (!(this_present_file_attributes && that_present_file_attributes))
        return false;
      if (!this.file_attributes.equals(that.file_attributes))
        return false;
    }

    boolean this_present_pre_filter_exprs = true && this.isSetPreFilterExprs();
    boolean that_present_pre_filter_exprs = true && that.isSetPreFilterExprs();
    if (this_present_pre_filter_exprs || that_present_pre_filter_exprs) {
      if (!(this_present_pre_filter_exprs && that_present_pre_filter_exprs))
        return false;
      if (!this.pre_filter_exprs.equals(that.pre_filter_exprs))
        return false;
    }

    boolean this_present_table_format_params = true && this.isSetTableFormatParams();
    boolean that_present_table_format_params = true && that.isSetTableFormatParams();
    if (this_present_table_format_params || that_present_table_format_params) {
      if (!(this_present_table_format_params && that_present_table_format_params))
        return false;
      if (!this.table_format_params.equals(that.table_format_params))
        return false;
    }

    boolean this_present_column_idxs = true && this.isSetColumnIdxs();
    boolean that_present_column_idxs = true && that.isSetColumnIdxs();
    if (this_present_column_idxs || that_present_column_idxs) {
      if (!(this_present_column_idxs && that_present_column_idxs))
        return false;
      if (!this.column_idxs.equals(that.column_idxs))
        return false;
    }

    boolean this_present_slot_name_to_schema_pos = true && this.isSetSlotNameToSchemaPos();
    boolean that_present_slot_name_to_schema_pos = true && that.isSetSlotNameToSchemaPos();
    if (this_present_slot_name_to_schema_pos || that_present_slot_name_to_schema_pos) {
      if (!(this_present_slot_name_to_schema_pos && that_present_slot_name_to_schema_pos))
        return false;
      if (!this.slot_name_to_schema_pos.equals(that.slot_name_to_schema_pos))
        return false;
    }

    boolean this_present_pre_filter_exprs_list = true && this.isSetPreFilterExprsList();
    boolean that_present_pre_filter_exprs_list = true && that.isSetPreFilterExprsList();
    if (this_present_pre_filter_exprs_list || that_present_pre_filter_exprs_list) {
      if (!(this_present_pre_filter_exprs_list && that_present_pre_filter_exprs_list))
        return false;
      if (!this.pre_filter_exprs_list.equals(that.pre_filter_exprs_list))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFileType()) ? 131071 : 524287);
    if (isSetFileType())
      hashCode = hashCode * 8191 + file_type.getValue();

    hashCode = hashCode * 8191 + ((isSetFormatType()) ? 131071 : 524287);
    if (isSetFormatType())
      hashCode = hashCode * 8191 + format_type.getValue();

    hashCode = hashCode * 8191 + ((isSetCompressType()) ? 131071 : 524287);
    if (isSetCompressType())
      hashCode = hashCode * 8191 + compress_type.getValue();

    hashCode = hashCode * 8191 + ((isSetSrcTupleId()) ? 131071 : 524287);
    if (isSetSrcTupleId())
      hashCode = hashCode * 8191 + src_tuple_id;

    hashCode = hashCode * 8191 + ((isSetDestTupleId()) ? 131071 : 524287);
    if (isSetDestTupleId())
      hashCode = hashCode * 8191 + dest_tuple_id;

    hashCode = hashCode * 8191 + ((isSetNumOfColumnsFromFile()) ? 131071 : 524287);
    if (isSetNumOfColumnsFromFile())
      hashCode = hashCode * 8191 + num_of_columns_from_file;

    hashCode = hashCode * 8191 + ((isSetRequiredSlots()) ? 131071 : 524287);
    if (isSetRequiredSlots())
      hashCode = hashCode * 8191 + required_slots.hashCode();

    hashCode = hashCode * 8191 + ((isSetHdfsParams()) ? 131071 : 524287);
    if (isSetHdfsParams())
      hashCode = hashCode * 8191 + hdfs_params.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + properties.hashCode();

    hashCode = hashCode * 8191 + ((isSetExprOfDestSlot()) ? 131071 : 524287);
    if (isSetExprOfDestSlot())
      hashCode = hashCode * 8191 + expr_of_dest_slot.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefaultValueOfSrcSlot()) ? 131071 : 524287);
    if (isSetDefaultValueOfSrcSlot())
      hashCode = hashCode * 8191 + default_value_of_src_slot.hashCode();

    hashCode = hashCode * 8191 + ((isSetDestSidToSrcSidWithoutTrans()) ? 131071 : 524287);
    if (isSetDestSidToSrcSidWithoutTrans())
      hashCode = hashCode * 8191 + dest_sid_to_src_sid_without_trans.hashCode();

    hashCode = hashCode * 8191 + ((isSetStrictMode()) ? 131071 : 524287);
    if (isSetStrictMode())
      hashCode = hashCode * 8191 + ((strict_mode) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBrokerAddresses()) ? 131071 : 524287);
    if (isSetBrokerAddresses())
      hashCode = hashCode * 8191 + broker_addresses.hashCode();

    hashCode = hashCode * 8191 + ((isSetFileAttributes()) ? 131071 : 524287);
    if (isSetFileAttributes())
      hashCode = hashCode * 8191 + file_attributes.hashCode();

    hashCode = hashCode * 8191 + ((isSetPreFilterExprs()) ? 131071 : 524287);
    if (isSetPreFilterExprs())
      hashCode = hashCode * 8191 + pre_filter_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetTableFormatParams()) ? 131071 : 524287);
    if (isSetTableFormatParams())
      hashCode = hashCode * 8191 + table_format_params.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnIdxs()) ? 131071 : 524287);
    if (isSetColumnIdxs())
      hashCode = hashCode * 8191 + column_idxs.hashCode();

    hashCode = hashCode * 8191 + ((isSetSlotNameToSchemaPos()) ? 131071 : 524287);
    if (isSetSlotNameToSchemaPos())
      hashCode = hashCode * 8191 + slot_name_to_schema_pos.hashCode();

    hashCode = hashCode * 8191 + ((isSetPreFilterExprsList()) ? 131071 : 524287);
    if (isSetPreFilterExprsList())
      hashCode = hashCode * 8191 + pre_filter_exprs_list.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TFileScanRangeParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFileType(), other.isSetFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_type, other.file_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFormatType(), other.isSetFormatType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormatType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format_type, other.format_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCompressType(), other.isSetCompressType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompressType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compress_type, other.compress_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrcTupleId(), other.isSetSrcTupleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcTupleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_tuple_id, other.src_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDestTupleId(), other.isSetDestTupleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestTupleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dest_tuple_id, other.dest_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumOfColumnsFromFile(), other.isSetNumOfColumnsFromFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumOfColumnsFromFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_of_columns_from_file, other.num_of_columns_from_file);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRequiredSlots(), other.isSetRequiredSlots());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequiredSlots()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.required_slots, other.required_slots);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHdfsParams(), other.isSetHdfsParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHdfsParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hdfs_params, other.hdfs_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProperties(), other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExprOfDestSlot(), other.isSetExprOfDestSlot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExprOfDestSlot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expr_of_dest_slot, other.expr_of_dest_slot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDefaultValueOfSrcSlot(), other.isSetDefaultValueOfSrcSlot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultValueOfSrcSlot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_value_of_src_slot, other.default_value_of_src_slot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDestSidToSrcSidWithoutTrans(), other.isSetDestSidToSrcSidWithoutTrans());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestSidToSrcSidWithoutTrans()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dest_sid_to_src_sid_without_trans, other.dest_sid_to_src_sid_without_trans);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStrictMode(), other.isSetStrictMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrictMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strict_mode, other.strict_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBrokerAddresses(), other.isSetBrokerAddresses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerAddresses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.broker_addresses, other.broker_addresses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileAttributes(), other.isSetFileAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileAttributes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_attributes, other.file_attributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPreFilterExprs(), other.isSetPreFilterExprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreFilterExprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pre_filter_exprs, other.pre_filter_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTableFormatParams(), other.isSetTableFormatParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableFormatParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_format_params, other.table_format_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnIdxs(), other.isSetColumnIdxs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnIdxs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_idxs, other.column_idxs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSlotNameToSchemaPos(), other.isSetSlotNameToSchemaPos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlotNameToSchemaPos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slot_name_to_schema_pos, other.slot_name_to_schema_pos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPreFilterExprsList(), other.isSetPreFilterExprsList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreFilterExprsList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pre_filter_exprs_list, other.pre_filter_exprs_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TFileScanRangeParams(");
    boolean first = true;

    if (isSetFileType()) {
      sb.append("file_type:");
      if (this.file_type == null) {
        sb.append("null");
      } else {
        sb.append(this.file_type);
      }
      first = false;
    }
    if (isSetFormatType()) {
      if (!first) sb.append(", ");
      sb.append("format_type:");
      if (this.format_type == null) {
        sb.append("null");
      } else {
        sb.append(this.format_type);
      }
      first = false;
    }
    if (isSetCompressType()) {
      if (!first) sb.append(", ");
      sb.append("compress_type:");
      if (this.compress_type == null) {
        sb.append("null");
      } else {
        sb.append(this.compress_type);
      }
      first = false;
    }
    if (isSetSrcTupleId()) {
      if (!first) sb.append(", ");
      sb.append("src_tuple_id:");
      sb.append(this.src_tuple_id);
      first = false;
    }
    if (isSetDestTupleId()) {
      if (!first) sb.append(", ");
      sb.append("dest_tuple_id:");
      sb.append(this.dest_tuple_id);
      first = false;
    }
    if (isSetNumOfColumnsFromFile()) {
      if (!first) sb.append(", ");
      sb.append("num_of_columns_from_file:");
      sb.append(this.num_of_columns_from_file);
      first = false;
    }
    if (isSetRequiredSlots()) {
      if (!first) sb.append(", ");
      sb.append("required_slots:");
      if (this.required_slots == null) {
        sb.append("null");
      } else {
        sb.append(this.required_slots);
      }
      first = false;
    }
    if (isSetHdfsParams()) {
      if (!first) sb.append(", ");
      sb.append("hdfs_params:");
      if (this.hdfs_params == null) {
        sb.append("null");
      } else {
        sb.append(this.hdfs_params);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    if (isSetExprOfDestSlot()) {
      if (!first) sb.append(", ");
      sb.append("expr_of_dest_slot:");
      if (this.expr_of_dest_slot == null) {
        sb.append("null");
      } else {
        sb.append(this.expr_of_dest_slot);
      }
      first = false;
    }
    if (isSetDefaultValueOfSrcSlot()) {
      if (!first) sb.append(", ");
      sb.append("default_value_of_src_slot:");
      if (this.default_value_of_src_slot == null) {
        sb.append("null");
      } else {
        sb.append(this.default_value_of_src_slot);
      }
      first = false;
    }
    if (isSetDestSidToSrcSidWithoutTrans()) {
      if (!first) sb.append(", ");
      sb.append("dest_sid_to_src_sid_without_trans:");
      if (this.dest_sid_to_src_sid_without_trans == null) {
        sb.append("null");
      } else {
        sb.append(this.dest_sid_to_src_sid_without_trans);
      }
      first = false;
    }
    if (isSetStrictMode()) {
      if (!first) sb.append(", ");
      sb.append("strict_mode:");
      sb.append(this.strict_mode);
      first = false;
    }
    if (isSetBrokerAddresses()) {
      if (!first) sb.append(", ");
      sb.append("broker_addresses:");
      if (this.broker_addresses == null) {
        sb.append("null");
      } else {
        sb.append(this.broker_addresses);
      }
      first = false;
    }
    if (isSetFileAttributes()) {
      if (!first) sb.append(", ");
      sb.append("file_attributes:");
      if (this.file_attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.file_attributes);
      }
      first = false;
    }
    if (isSetPreFilterExprs()) {
      if (!first) sb.append(", ");
      sb.append("pre_filter_exprs:");
      if (this.pre_filter_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.pre_filter_exprs);
      }
      first = false;
    }
    if (isSetTableFormatParams()) {
      if (!first) sb.append(", ");
      sb.append("table_format_params:");
      if (this.table_format_params == null) {
        sb.append("null");
      } else {
        sb.append(this.table_format_params);
      }
      first = false;
    }
    if (isSetColumnIdxs()) {
      if (!first) sb.append(", ");
      sb.append("column_idxs:");
      if (this.column_idxs == null) {
        sb.append("null");
      } else {
        sb.append(this.column_idxs);
      }
      first = false;
    }
    if (isSetSlotNameToSchemaPos()) {
      if (!first) sb.append(", ");
      sb.append("slot_name_to_schema_pos:");
      if (this.slot_name_to_schema_pos == null) {
        sb.append("null");
      } else {
        sb.append(this.slot_name_to_schema_pos);
      }
      first = false;
    }
    if (isSetPreFilterExprsList()) {
      if (!first) sb.append(", ");
      sb.append("pre_filter_exprs_list:");
      if (this.pre_filter_exprs_list == null) {
        sb.append("null");
      } else {
        sb.append(this.pre_filter_exprs_list);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (hdfs_params != null) {
      hdfs_params.validate();
    }
    if (file_attributes != null) {
      file_attributes.validate();
    }
    if (pre_filter_exprs != null) {
      pre_filter_exprs.validate();
    }
    if (table_format_params != null) {
      table_format_params.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFileScanRangeParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TFileScanRangeParamsStandardScheme getScheme() {
      return new TFileScanRangeParamsStandardScheme();
    }
  }

  private static class TFileScanRangeParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TFileScanRangeParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TFileScanRangeParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.file_type = org.apache.doris.thrift.TFileType.findByValue(iprot.readI32());
              struct.setFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FORMAT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.format_type = org.apache.doris.thrift.TFileFormatType.findByValue(iprot.readI32());
              struct.setFormatTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPRESS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compress_type = org.apache.doris.thrift.TFileCompressType.findByValue(iprot.readI32());
              struct.setCompressTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SRC_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.src_tuple_id = iprot.readI32();
              struct.setSrcTupleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEST_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dest_tuple_id = iprot.readI32();
              struct.setDestTupleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUM_OF_COLUMNS_FROM_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_of_columns_from_file = iprot.readI32();
              struct.setNumOfColumnsFromFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REQUIRED_SLOTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list166 = iprot.readListBegin();
                struct.required_slots = new java.util.ArrayList<TFileScanSlotInfo>(_list166.size);
                @org.apache.thrift.annotation.Nullable TFileScanSlotInfo _elem167;
                for (int _i168 = 0; _i168 < _list166.size; ++_i168)
                {
                  _elem167 = new TFileScanSlotInfo();
                  _elem167.read(iprot);
                  struct.required_slots.add(_elem167);
                }
                iprot.readListEnd();
              }
              struct.setRequiredSlotsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HDFS_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hdfs_params = new THdfsParams();
              struct.hdfs_params.read(iprot);
              struct.setHdfsParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map169 = iprot.readMapBegin();
                struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map169.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key170;
                @org.apache.thrift.annotation.Nullable java.lang.String _val171;
                for (int _i172 = 0; _i172 < _map169.size; ++_i172)
                {
                  _key170 = iprot.readString();
                  _val171 = iprot.readString();
                  struct.properties.put(_key170, _val171);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXPR_OF_DEST_SLOT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map173 = iprot.readMapBegin();
                struct.expr_of_dest_slot = new java.util.HashMap<java.lang.Integer,org.apache.doris.thrift.TExpr>(2*_map173.size);
                int _key174;
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _val175;
                for (int _i176 = 0; _i176 < _map173.size; ++_i176)
                {
                  _key174 = iprot.readI32();
                  _val175 = new org.apache.doris.thrift.TExpr();
                  _val175.read(iprot);
                  struct.expr_of_dest_slot.put(_key174, _val175);
                }
                iprot.readMapEnd();
              }
              struct.setExprOfDestSlotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DEFAULT_VALUE_OF_SRC_SLOT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map177 = iprot.readMapBegin();
                struct.default_value_of_src_slot = new java.util.HashMap<java.lang.Integer,org.apache.doris.thrift.TExpr>(2*_map177.size);
                int _key178;
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _val179;
                for (int _i180 = 0; _i180 < _map177.size; ++_i180)
                {
                  _key178 = iprot.readI32();
                  _val179 = new org.apache.doris.thrift.TExpr();
                  _val179.read(iprot);
                  struct.default_value_of_src_slot.put(_key178, _val179);
                }
                iprot.readMapEnd();
              }
              struct.setDefaultValueOfSrcSlotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DEST_SID_TO_SRC_SID_WITHOUT_TRANS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map181 = iprot.readMapBegin();
                struct.dest_sid_to_src_sid_without_trans = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map181.size);
                int _key182;
                int _val183;
                for (int _i184 = 0; _i184 < _map181.size; ++_i184)
                {
                  _key182 = iprot.readI32();
                  _val183 = iprot.readI32();
                  struct.dest_sid_to_src_sid_without_trans.put(_key182, _val183);
                }
                iprot.readMapEnd();
              }
              struct.setDestSidToSrcSidWithoutTransIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STRICT_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.strict_mode = iprot.readBool();
              struct.setStrictModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BROKER_ADDRESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list185 = iprot.readListBegin();
                struct.broker_addresses = new java.util.ArrayList<org.apache.doris.thrift.TNetworkAddress>(_list185.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TNetworkAddress _elem186;
                for (int _i187 = 0; _i187 < _list185.size; ++_i187)
                {
                  _elem186 = new org.apache.doris.thrift.TNetworkAddress();
                  _elem186.read(iprot);
                  struct.broker_addresses.add(_elem186);
                }
                iprot.readListEnd();
              }
              struct.setBrokerAddressesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FILE_ATTRIBUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.file_attributes = new TFileAttributes();
              struct.file_attributes.read(iprot);
              struct.setFileAttributesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PRE_FILTER_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pre_filter_exprs = new org.apache.doris.thrift.TExpr();
              struct.pre_filter_exprs.read(iprot);
              struct.setPreFilterExprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TABLE_FORMAT_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_format_params = new TTableFormatFileDesc();
              struct.table_format_params.read(iprot);
              struct.setTableFormatParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // COLUMN_IDXS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list188 = iprot.readListBegin();
                struct.column_idxs = new java.util.ArrayList<java.lang.Integer>(_list188.size);
                int _elem189;
                for (int _i190 = 0; _i190 < _list188.size; ++_i190)
                {
                  _elem189 = iprot.readI32();
                  struct.column_idxs.add(_elem189);
                }
                iprot.readListEnd();
              }
              struct.setColumnIdxsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SLOT_NAME_TO_SCHEMA_POS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map191 = iprot.readMapBegin();
                struct.slot_name_to_schema_pos = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map191.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key192;
                int _val193;
                for (int _i194 = 0; _i194 < _map191.size; ++_i194)
                {
                  _key192 = iprot.readString();
                  _val193 = iprot.readI32();
                  struct.slot_name_to_schema_pos.put(_key192, _val193);
                }
                iprot.readMapEnd();
              }
              struct.setSlotNameToSchemaPosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PRE_FILTER_EXPRS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list195 = iprot.readListBegin();
                struct.pre_filter_exprs_list = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(_list195.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _elem196;
                for (int _i197 = 0; _i197 < _list195.size; ++_i197)
                {
                  _elem196 = new org.apache.doris.thrift.TExpr();
                  _elem196.read(iprot);
                  struct.pre_filter_exprs_list.add(_elem196);
                }
                iprot.readListEnd();
              }
              struct.setPreFilterExprsListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TFileScanRangeParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.file_type != null) {
        if (struct.isSetFileType()) {
          oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.file_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.format_type != null) {
        if (struct.isSetFormatType()) {
          oprot.writeFieldBegin(FORMAT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.format_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.compress_type != null) {
        if (struct.isSetCompressType()) {
          oprot.writeFieldBegin(COMPRESS_TYPE_FIELD_DESC);
          oprot.writeI32(struct.compress_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSrcTupleId()) {
        oprot.writeFieldBegin(SRC_TUPLE_ID_FIELD_DESC);
        oprot.writeI32(struct.src_tuple_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDestTupleId()) {
        oprot.writeFieldBegin(DEST_TUPLE_ID_FIELD_DESC);
        oprot.writeI32(struct.dest_tuple_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNumOfColumnsFromFile()) {
        oprot.writeFieldBegin(NUM_OF_COLUMNS_FROM_FILE_FIELD_DESC);
        oprot.writeI32(struct.num_of_columns_from_file);
        oprot.writeFieldEnd();
      }
      if (struct.required_slots != null) {
        if (struct.isSetRequiredSlots()) {
          oprot.writeFieldBegin(REQUIRED_SLOTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.required_slots.size()));
            for (TFileScanSlotInfo _iter198 : struct.required_slots)
            {
              _iter198.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.hdfs_params != null) {
        if (struct.isSetHdfsParams()) {
          oprot.writeFieldBegin(HDFS_PARAMS_FIELD_DESC);
          struct.hdfs_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter199 : struct.properties.entrySet())
            {
              oprot.writeString(_iter199.getKey());
              oprot.writeString(_iter199.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.expr_of_dest_slot != null) {
        if (struct.isSetExprOfDestSlot()) {
          oprot.writeFieldBegin(EXPR_OF_DEST_SLOT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.expr_of_dest_slot.size()));
            for (java.util.Map.Entry<java.lang.Integer, org.apache.doris.thrift.TExpr> _iter200 : struct.expr_of_dest_slot.entrySet())
            {
              oprot.writeI32(_iter200.getKey());
              _iter200.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.default_value_of_src_slot != null) {
        if (struct.isSetDefaultValueOfSrcSlot()) {
          oprot.writeFieldBegin(DEFAULT_VALUE_OF_SRC_SLOT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.default_value_of_src_slot.size()));
            for (java.util.Map.Entry<java.lang.Integer, org.apache.doris.thrift.TExpr> _iter201 : struct.default_value_of_src_slot.entrySet())
            {
              oprot.writeI32(_iter201.getKey());
              _iter201.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.dest_sid_to_src_sid_without_trans != null) {
        if (struct.isSetDestSidToSrcSidWithoutTrans()) {
          oprot.writeFieldBegin(DEST_SID_TO_SRC_SID_WITHOUT_TRANS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.dest_sid_to_src_sid_without_trans.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter202 : struct.dest_sid_to_src_sid_without_trans.entrySet())
            {
              oprot.writeI32(_iter202.getKey());
              oprot.writeI32(_iter202.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStrictMode()) {
        oprot.writeFieldBegin(STRICT_MODE_FIELD_DESC);
        oprot.writeBool(struct.strict_mode);
        oprot.writeFieldEnd();
      }
      if (struct.broker_addresses != null) {
        if (struct.isSetBrokerAddresses()) {
          oprot.writeFieldBegin(BROKER_ADDRESSES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.broker_addresses.size()));
            for (org.apache.doris.thrift.TNetworkAddress _iter203 : struct.broker_addresses)
            {
              _iter203.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.file_attributes != null) {
        if (struct.isSetFileAttributes()) {
          oprot.writeFieldBegin(FILE_ATTRIBUTES_FIELD_DESC);
          struct.file_attributes.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pre_filter_exprs != null) {
        if (struct.isSetPreFilterExprs()) {
          oprot.writeFieldBegin(PRE_FILTER_EXPRS_FIELD_DESC);
          struct.pre_filter_exprs.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_format_params != null) {
        if (struct.isSetTableFormatParams()) {
          oprot.writeFieldBegin(TABLE_FORMAT_PARAMS_FIELD_DESC);
          struct.table_format_params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_idxs != null) {
        if (struct.isSetColumnIdxs()) {
          oprot.writeFieldBegin(COLUMN_IDXS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.column_idxs.size()));
            for (int _iter204 : struct.column_idxs)
            {
              oprot.writeI32(_iter204);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.slot_name_to_schema_pos != null) {
        if (struct.isSetSlotNameToSchemaPos()) {
          oprot.writeFieldBegin(SLOT_NAME_TO_SCHEMA_POS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.slot_name_to_schema_pos.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter205 : struct.slot_name_to_schema_pos.entrySet())
            {
              oprot.writeString(_iter205.getKey());
              oprot.writeI32(_iter205.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.pre_filter_exprs_list != null) {
        if (struct.isSetPreFilterExprsList()) {
          oprot.writeFieldBegin(PRE_FILTER_EXPRS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.pre_filter_exprs_list.size()));
            for (org.apache.doris.thrift.TExpr _iter206 : struct.pre_filter_exprs_list)
            {
              _iter206.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFileScanRangeParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TFileScanRangeParamsTupleScheme getScheme() {
      return new TFileScanRangeParamsTupleScheme();
    }
  }

  private static class TFileScanRangeParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TFileScanRangeParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFileScanRangeParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFileType()) {
        optionals.set(0);
      }
      if (struct.isSetFormatType()) {
        optionals.set(1);
      }
      if (struct.isSetCompressType()) {
        optionals.set(2);
      }
      if (struct.isSetSrcTupleId()) {
        optionals.set(3);
      }
      if (struct.isSetDestTupleId()) {
        optionals.set(4);
      }
      if (struct.isSetNumOfColumnsFromFile()) {
        optionals.set(5);
      }
      if (struct.isSetRequiredSlots()) {
        optionals.set(6);
      }
      if (struct.isSetHdfsParams()) {
        optionals.set(7);
      }
      if (struct.isSetProperties()) {
        optionals.set(8);
      }
      if (struct.isSetExprOfDestSlot()) {
        optionals.set(9);
      }
      if (struct.isSetDefaultValueOfSrcSlot()) {
        optionals.set(10);
      }
      if (struct.isSetDestSidToSrcSidWithoutTrans()) {
        optionals.set(11);
      }
      if (struct.isSetStrictMode()) {
        optionals.set(12);
      }
      if (struct.isSetBrokerAddresses()) {
        optionals.set(13);
      }
      if (struct.isSetFileAttributes()) {
        optionals.set(14);
      }
      if (struct.isSetPreFilterExprs()) {
        optionals.set(15);
      }
      if (struct.isSetTableFormatParams()) {
        optionals.set(16);
      }
      if (struct.isSetColumnIdxs()) {
        optionals.set(17);
      }
      if (struct.isSetSlotNameToSchemaPos()) {
        optionals.set(18);
      }
      if (struct.isSetPreFilterExprsList()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetFileType()) {
        oprot.writeI32(struct.file_type.getValue());
      }
      if (struct.isSetFormatType()) {
        oprot.writeI32(struct.format_type.getValue());
      }
      if (struct.isSetCompressType()) {
        oprot.writeI32(struct.compress_type.getValue());
      }
      if (struct.isSetSrcTupleId()) {
        oprot.writeI32(struct.src_tuple_id);
      }
      if (struct.isSetDestTupleId()) {
        oprot.writeI32(struct.dest_tuple_id);
      }
      if (struct.isSetNumOfColumnsFromFile()) {
        oprot.writeI32(struct.num_of_columns_from_file);
      }
      if (struct.isSetRequiredSlots()) {
        {
          oprot.writeI32(struct.required_slots.size());
          for (TFileScanSlotInfo _iter207 : struct.required_slots)
          {
            _iter207.write(oprot);
          }
        }
      }
      if (struct.isSetHdfsParams()) {
        struct.hdfs_params.write(oprot);
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter208 : struct.properties.entrySet())
          {
            oprot.writeString(_iter208.getKey());
            oprot.writeString(_iter208.getValue());
          }
        }
      }
      if (struct.isSetExprOfDestSlot()) {
        {
          oprot.writeI32(struct.expr_of_dest_slot.size());
          for (java.util.Map.Entry<java.lang.Integer, org.apache.doris.thrift.TExpr> _iter209 : struct.expr_of_dest_slot.entrySet())
          {
            oprot.writeI32(_iter209.getKey());
            _iter209.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetDefaultValueOfSrcSlot()) {
        {
          oprot.writeI32(struct.default_value_of_src_slot.size());
          for (java.util.Map.Entry<java.lang.Integer, org.apache.doris.thrift.TExpr> _iter210 : struct.default_value_of_src_slot.entrySet())
          {
            oprot.writeI32(_iter210.getKey());
            _iter210.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetDestSidToSrcSidWithoutTrans()) {
        {
          oprot.writeI32(struct.dest_sid_to_src_sid_without_trans.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter211 : struct.dest_sid_to_src_sid_without_trans.entrySet())
          {
            oprot.writeI32(_iter211.getKey());
            oprot.writeI32(_iter211.getValue());
          }
        }
      }
      if (struct.isSetStrictMode()) {
        oprot.writeBool(struct.strict_mode);
      }
      if (struct.isSetBrokerAddresses()) {
        {
          oprot.writeI32(struct.broker_addresses.size());
          for (org.apache.doris.thrift.TNetworkAddress _iter212 : struct.broker_addresses)
          {
            _iter212.write(oprot);
          }
        }
      }
      if (struct.isSetFileAttributes()) {
        struct.file_attributes.write(oprot);
      }
      if (struct.isSetPreFilterExprs()) {
        struct.pre_filter_exprs.write(oprot);
      }
      if (struct.isSetTableFormatParams()) {
        struct.table_format_params.write(oprot);
      }
      if (struct.isSetColumnIdxs()) {
        {
          oprot.writeI32(struct.column_idxs.size());
          for (int _iter213 : struct.column_idxs)
          {
            oprot.writeI32(_iter213);
          }
        }
      }
      if (struct.isSetSlotNameToSchemaPos()) {
        {
          oprot.writeI32(struct.slot_name_to_schema_pos.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter214 : struct.slot_name_to_schema_pos.entrySet())
          {
            oprot.writeString(_iter214.getKey());
            oprot.writeI32(_iter214.getValue());
          }
        }
      }
      if (struct.isSetPreFilterExprsList()) {
        {
          oprot.writeI32(struct.pre_filter_exprs_list.size());
          for (org.apache.doris.thrift.TExpr _iter215 : struct.pre_filter_exprs_list)
          {
            _iter215.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFileScanRangeParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.file_type = org.apache.doris.thrift.TFileType.findByValue(iprot.readI32());
        struct.setFileTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.format_type = org.apache.doris.thrift.TFileFormatType.findByValue(iprot.readI32());
        struct.setFormatTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.compress_type = org.apache.doris.thrift.TFileCompressType.findByValue(iprot.readI32());
        struct.setCompressTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.src_tuple_id = iprot.readI32();
        struct.setSrcTupleIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dest_tuple_id = iprot.readI32();
        struct.setDestTupleIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.num_of_columns_from_file = iprot.readI32();
        struct.setNumOfColumnsFromFileIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list216 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.required_slots = new java.util.ArrayList<TFileScanSlotInfo>(_list216.size);
          @org.apache.thrift.annotation.Nullable TFileScanSlotInfo _elem217;
          for (int _i218 = 0; _i218 < _list216.size; ++_i218)
          {
            _elem217 = new TFileScanSlotInfo();
            _elem217.read(iprot);
            struct.required_slots.add(_elem217);
          }
        }
        struct.setRequiredSlotsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.hdfs_params = new THdfsParams();
        struct.hdfs_params.read(iprot);
        struct.setHdfsParamsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map219 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map219.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key220;
          @org.apache.thrift.annotation.Nullable java.lang.String _val221;
          for (int _i222 = 0; _i222 < _map219.size; ++_i222)
          {
            _key220 = iprot.readString();
            _val221 = iprot.readString();
            struct.properties.put(_key220, _val221);
          }
        }
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map223 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT); 
          struct.expr_of_dest_slot = new java.util.HashMap<java.lang.Integer,org.apache.doris.thrift.TExpr>(2*_map223.size);
          int _key224;
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _val225;
          for (int _i226 = 0; _i226 < _map223.size; ++_i226)
          {
            _key224 = iprot.readI32();
            _val225 = new org.apache.doris.thrift.TExpr();
            _val225.read(iprot);
            struct.expr_of_dest_slot.put(_key224, _val225);
          }
        }
        struct.setExprOfDestSlotIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map227 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT); 
          struct.default_value_of_src_slot = new java.util.HashMap<java.lang.Integer,org.apache.doris.thrift.TExpr>(2*_map227.size);
          int _key228;
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _val229;
          for (int _i230 = 0; _i230 < _map227.size; ++_i230)
          {
            _key228 = iprot.readI32();
            _val229 = new org.apache.doris.thrift.TExpr();
            _val229.read(iprot);
            struct.default_value_of_src_slot.put(_key228, _val229);
          }
        }
        struct.setDefaultValueOfSrcSlotIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TMap _map231 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32); 
          struct.dest_sid_to_src_sid_without_trans = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map231.size);
          int _key232;
          int _val233;
          for (int _i234 = 0; _i234 < _map231.size; ++_i234)
          {
            _key232 = iprot.readI32();
            _val233 = iprot.readI32();
            struct.dest_sid_to_src_sid_without_trans.put(_key232, _val233);
          }
        }
        struct.setDestSidToSrcSidWithoutTransIsSet(true);
      }
      if (incoming.get(12)) {
        struct.strict_mode = iprot.readBool();
        struct.setStrictModeIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list235 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.broker_addresses = new java.util.ArrayList<org.apache.doris.thrift.TNetworkAddress>(_list235.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TNetworkAddress _elem236;
          for (int _i237 = 0; _i237 < _list235.size; ++_i237)
          {
            _elem236 = new org.apache.doris.thrift.TNetworkAddress();
            _elem236.read(iprot);
            struct.broker_addresses.add(_elem236);
          }
        }
        struct.setBrokerAddressesIsSet(true);
      }
      if (incoming.get(14)) {
        struct.file_attributes = new TFileAttributes();
        struct.file_attributes.read(iprot);
        struct.setFileAttributesIsSet(true);
      }
      if (incoming.get(15)) {
        struct.pre_filter_exprs = new org.apache.doris.thrift.TExpr();
        struct.pre_filter_exprs.read(iprot);
        struct.setPreFilterExprsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.table_format_params = new TTableFormatFileDesc();
        struct.table_format_params.read(iprot);
        struct.setTableFormatParamsIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list238 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.column_idxs = new java.util.ArrayList<java.lang.Integer>(_list238.size);
          int _elem239;
          for (int _i240 = 0; _i240 < _list238.size; ++_i240)
          {
            _elem239 = iprot.readI32();
            struct.column_idxs.add(_elem239);
          }
        }
        struct.setColumnIdxsIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TMap _map241 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32); 
          struct.slot_name_to_schema_pos = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map241.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key242;
          int _val243;
          for (int _i244 = 0; _i244 < _map241.size; ++_i244)
          {
            _key242 = iprot.readString();
            _val243 = iprot.readI32();
            struct.slot_name_to_schema_pos.put(_key242, _val243);
          }
        }
        struct.setSlotNameToSchemaPosIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list245 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.pre_filter_exprs_list = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(_list245.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _elem246;
          for (int _i247 = 0; _i247 < _list245.size; ++_i247)
          {
            _elem246 = new org.apache.doris.thrift.TExpr();
            _elem246.read(iprot);
            struct.pre_filter_exprs_list.add(_elem246);
          }
        }
        struct.setPreFilterExprsListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

