-- This file is automatically generated. You should know what you did if you want to edit this
-- !ds_shape_11 --
PhysicalCteAnchor ( cteId=CTEId#0 )
--PhysicalCteProducer ( cteId=CTEId#0 )
----PhysicalProject[customer_email_address, customer_first_name, customer_id, customer_last_name, dyear, sale_type, year_total]
------hashJoin[INNER_JOIN shuffle] hashCondition=((ss_customer_sk = customer.c_customer_sk)) otherCondition=() build RFs:RF2 c_customer_sk->[ss_customer_sk,ws_bill_customer_sk]
--------PhysicalProject[dyear AS `dyear`, sale_type AS `sale_type`, ss_customer_sk, year_total AS `year_total`]
----------PhysicalUnion
------------PhysicalProject['s' AS `sale_type`, d_year AS `dyear`, store_sales.ss_customer_sk, year_total]
--------------hashAgg[GLOBAL]
----------------PhysicalDistribute[DistributionSpecHash]
------------------hashAgg[LOCAL]
--------------------PhysicalProject[(cast(ss_ext_list_price as DECIMALV3(8, 2)) - cast(ss_ext_discount_amt as DECIMALV3(8, 2))) AS `(cast(ss_ext_list_price as DECIMALV3(8, 2)) - cast(ss_ext_discount_amt as DECIMALV3(8, 2)))`, date_dim.d_year, store_sales.ss_customer_sk]
----------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF0 d_date_sk->[ss_sold_date_sk]
------------------------PhysicalProject[store_sales.ss_customer_sk, store_sales.ss_ext_discount_amt, store_sales.ss_ext_list_price, store_sales.ss_sold_date_sk]
--------------------------PhysicalOlapScan[store_sales] apply RFs: RF0 RF2
------------------------PhysicalProject[date_dim.d_date_sk, date_dim.d_year]
--------------------------filter(d_year IN (1998, 1999))
----------------------------PhysicalOlapScan[date_dim]
------------PhysicalProject['w' AS `sale_type`, d_year AS `dyear`, web_sales.ws_bill_customer_sk, year_total]
--------------hashAgg[GLOBAL]
----------------PhysicalDistribute[DistributionSpecHash]
------------------hashAgg[LOCAL]
--------------------PhysicalProject[(cast(ws_ext_list_price as DECIMALV3(8, 2)) - cast(ws_ext_discount_amt as DECIMALV3(8, 2))) AS `(cast(ws_ext_list_price as DECIMALV3(8, 2)) - cast(ws_ext_discount_amt as DECIMALV3(8, 2)))`, date_dim.d_year, web_sales.ws_bill_customer_sk]
----------------------hashJoin[INNER_JOIN broadcast] hashCondition=((web_sales.ws_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF1 d_date_sk->[ws_sold_date_sk]
------------------------PhysicalProject[web_sales.ws_bill_customer_sk, web_sales.ws_ext_discount_amt, web_sales.ws_ext_list_price, web_sales.ws_sold_date_sk]
--------------------------PhysicalOlapScan[web_sales] apply RFs: RF1 RF2
------------------------PhysicalProject[date_dim.d_date_sk, date_dim.d_year]
--------------------------filter(d_year IN (1998, 1999))
----------------------------PhysicalOlapScan[date_dim]
--------PhysicalProject[c_customer_id AS `customer_id`, c_email_address AS `customer_email_address`, c_first_name AS `customer_first_name`, c_last_name AS `customer_last_name`, customer.c_customer_sk]
----------PhysicalOlapScan[customer]
--PhysicalResultSink
----PhysicalTopN[MERGE_SORT]
------PhysicalDistribute[DistributionSpecGather]
--------PhysicalTopN[LOCAL_SORT]
----------PhysicalProject[t_s_secyear.customer_email_address, t_s_secyear.customer_first_name, t_s_secyear.customer_id, t_s_secyear.customer_last_name]
------------hashJoin[INNER_JOIN shuffleBucket] hashCondition=((t_s_firstyear.customer_id = t_w_secyear.customer_id)) otherCondition=((if((year_total > 0.00), (cast(year_total as DECIMALV3(38, 8)) / year_total), 0.000000) > if((year_total > 0.00), (cast(year_total as DECIMALV3(38, 8)) / year_total), 0.000000))) build RFs:RF5 customer_id->[customer_id]
--------------PhysicalProject[t_w_secyear.customer_id, t_w_secyear.year_total]
----------------filter((t_w_secyear.dyear = 1999) and (t_w_secyear.sale_type = 'w'))
------------------PhysicalCteConsumer ( cteId=CTEId#0 ) apply RFs: RF5
--------------PhysicalProject[t_s_firstyear.customer_id, t_s_firstyear.year_total, t_s_secyear.customer_email_address, t_s_secyear.customer_first_name, t_s_secyear.customer_id, t_s_secyear.customer_last_name, t_s_secyear.year_total, t_w_firstyear.year_total]
----------------hashJoin[INNER_JOIN bucketShuffle] hashCondition=((t_s_firstyear.customer_id = t_w_firstyear.customer_id)) otherCondition=() build RFs:RF4 customer_id->[customer_id,customer_id]
------------------hashJoin[INNER_JOIN shuffle] hashCondition=((t_s_secyear.customer_id = t_s_firstyear.customer_id)) otherCondition=() build RFs:RF3 customer_id->[customer_id]
--------------------PhysicalProject[t_s_secyear.customer_email_address, t_s_secyear.customer_first_name, t_s_secyear.customer_id, t_s_secyear.customer_last_name, t_s_secyear.year_total]
----------------------filter((t_s_secyear.dyear = 1999) and (t_s_secyear.sale_type = 's'))
------------------------PhysicalCteConsumer ( cteId=CTEId#0 ) apply RFs: RF3 RF4
--------------------PhysicalProject[t_s_firstyear.customer_id, t_s_firstyear.year_total]
----------------------filter((t_s_firstyear.dyear = 1998) and (t_s_firstyear.sale_type = 's') and (t_s_firstyear.year_total > 0.00))
------------------------PhysicalCteConsumer ( cteId=CTEId#0 ) apply RFs: RF4
------------------PhysicalProject[t_w_firstyear.customer_id, t_w_firstyear.year_total]
--------------------filter((t_w_firstyear.dyear = 1998) and (t_w_firstyear.sale_type = 'w') and (t_w_firstyear.year_total > 0.00))
----------------------PhysicalCteConsumer ( cteId=CTEId#0 )

