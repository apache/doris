-- This file is automatically generated. You should know what you did if you want to edit this
-- !ds_shape_54 --
PhysicalResultSink
--PhysicalTopN[MERGE_SORT]
----PhysicalDistribute[DistributionSpecGather]
------PhysicalTopN[LOCAL_SORT]
--------PhysicalProject[segments.segment, num_customers, (segment * 50) AS `segment_base`]
----------hashAgg[GLOBAL]
------------PhysicalDistribute[DistributionSpecHash]
--------------hashAgg[LOCAL]
----------------PhysicalProject[cast((cast(revenue as DECIMALV3(38, 6)) / 50) as INT) AS `segment`]
------------------hashAgg[GLOBAL]
--------------------PhysicalDistribute[DistributionSpecHash]
----------------------hashAgg[LOCAL]
------------------------PhysicalProject[my_customers.c_customer_sk, store_sales.ss_ext_sales_price]
--------------------------NestedLoopJoin[INNER_JOIN](cast(d_month_seq as BIGINT) <= d_month_seq+3)
----------------------------PhysicalProject[my_customers.c_customer_sk, store_sales.ss_ext_sales_price, cast(d_month_seq as BIGINT) AS `cast(d_month_seq as BIGINT)`]
------------------------------NestedLoopJoin[INNER_JOIN](cast(d_month_seq as BIGINT) >= d_month_seq+1)
--------------------------------PhysicalProject[c_customer_sk, store_sales.ss_ext_sales_price, date_dim.d_month_seq, cast(d_month_seq as BIGINT) AS `cast(d_month_seq as BIGINT)`]
----------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF7 d_date_sk->[ss_sold_date_sk]
------------------------------------PhysicalProject[c_customer_sk, store_sales.ss_sold_date_sk, store_sales.ss_ext_sales_price]
--------------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((my_customers.c_customer_sk = store_sales.ss_customer_sk)) otherCondition=() build RFs:RF6 c_customer_sk->[ss_customer_sk]
----------------------------------------PhysicalProject[store_sales.ss_sold_date_sk, store_sales.ss_customer_sk, store_sales.ss_ext_sales_price]
------------------------------------------PhysicalOlapScan[store_sales] apply RFs: RF6 RF7
----------------------------------------PhysicalProject[c_customer_sk]
------------------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((customer_address.ca_county = store.s_county) and (customer_address.ca_state = store.s_state)) otherCondition=() build RFs:RF4 s_county->[ca_county];RF5 s_state->[ca_state]
--------------------------------------------PhysicalProject[c_customer_sk, customer_address.ca_county, customer_address.ca_state]
----------------------------------------------hashJoin[INNER_JOIN bucketShuffle] hashCondition=((my_customers.c_current_addr_sk = customer_address.ca_address_sk)) otherCondition=() build RFs:RF3 c_current_addr_sk->[ca_address_sk]
------------------------------------------------PhysicalProject[customer_address.ca_address_sk, customer_address.ca_county, customer_address.ca_state]
--------------------------------------------------PhysicalOlapScan[customer_address] apply RFs: RF3 RF4 RF5
------------------------------------------------PhysicalProject[c_customer_sk AS `c_customer_sk`, c_current_addr_sk AS `c_current_addr_sk`]
--------------------------------------------------hashAgg[GLOBAL]
----------------------------------------------------PhysicalDistribute[DistributionSpecHash]
------------------------------------------------------hashAgg[LOCAL]
--------------------------------------------------------PhysicalProject[customer.c_customer_sk, customer.c_current_addr_sk]
----------------------------------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((customer.c_customer_sk = cs_or_ws_sales.customer_sk)) otherCondition=() build RFs:RF2 customer_sk->[c_customer_sk]
------------------------------------------------------------PhysicalProject[customer.c_customer_sk, customer.c_current_addr_sk]
--------------------------------------------------------------PhysicalOlapScan[customer] apply RFs: RF2
------------------------------------------------------------PhysicalProject[cs_or_ws_sales.customer_sk]
--------------------------------------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((cs_or_ws_sales.sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF1 d_date_sk->[cs_sold_date_sk,ws_sold_date_sk]
----------------------------------------------------------------PhysicalProject[cs_or_ws_sales.sold_date_sk, cs_or_ws_sales.customer_sk]
------------------------------------------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((cs_or_ws_sales.item_sk = item.i_item_sk)) otherCondition=() build RFs:RF0 i_item_sk->[cs_item_sk,ws_item_sk]
--------------------------------------------------------------------PhysicalUnion
----------------------------------------------------------------------PhysicalDistribute[DistributionSpecHash]
------------------------------------------------------------------------PhysicalProject[cs_sold_date_sk AS `sold_date_sk`, cs_bill_customer_sk AS `customer_sk`, cs_item_sk AS `item_sk`]
--------------------------------------------------------------------------PhysicalOlapScan[catalog_sales] apply RFs: RF0 RF1
----------------------------------------------------------------------PhysicalDistribute[DistributionSpecHash]
------------------------------------------------------------------------PhysicalProject[ws_sold_date_sk AS `sold_date_sk`, ws_bill_customer_sk AS `customer_sk`, ws_item_sk AS `item_sk`]
--------------------------------------------------------------------------PhysicalOlapScan[web_sales] apply RFs: RF0 RF1
--------------------------------------------------------------------PhysicalProject[item.i_item_sk]
----------------------------------------------------------------------filter((item.i_category = 'Music') and (item.i_class = 'country'))
------------------------------------------------------------------------PhysicalOlapScan[item]
----------------------------------------------------------------PhysicalProject[date_dim.d_date_sk]
------------------------------------------------------------------filter((date_dim.d_moy = 1) and (date_dim.d_year = 1999))
--------------------------------------------------------------------PhysicalOlapScan[date_dim]
--------------------------------------------PhysicalProject[store.s_county, store.s_state]
----------------------------------------------PhysicalOlapScan[store]
------------------------------------PhysicalProject[date_dim.d_date_sk, date_dim.d_month_seq]
--------------------------------------PhysicalOlapScan[date_dim]
--------------------------------PhysicalAssertNumRows
----------------------------------PhysicalDistribute[DistributionSpecGather]
------------------------------------hashAgg[GLOBAL]
--------------------------------------PhysicalDistribute[DistributionSpecHash]
----------------------------------------hashAgg[LOCAL]
------------------------------------------PhysicalProject[(d_month_seq + 1) AS `d_month_seq+1`]
--------------------------------------------filter((date_dim.d_moy = 1) and (date_dim.d_year = 1999))
----------------------------------------------PhysicalOlapScan[date_dim]
----------------------------PhysicalAssertNumRows
------------------------------PhysicalDistribute[DistributionSpecGather]
--------------------------------hashAgg[GLOBAL]
----------------------------------PhysicalDistribute[DistributionSpecHash]
------------------------------------hashAgg[LOCAL]
--------------------------------------PhysicalProject[(d_month_seq + 3) AS `d_month_seq+3`]
----------------------------------------filter((date_dim.d_moy = 1) and (date_dim.d_year = 1999))
------------------------------------------PhysicalOlapScan[date_dim]

