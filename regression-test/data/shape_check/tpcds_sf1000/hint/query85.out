-- This file is automatically generated. You should know what you did if you want to edit this
-- !ds_shape_85 --
PhysicalResultSink
--PhysicalTopN[MERGE_SORT]
----PhysicalDistribute[DistributionSpecGather]
------PhysicalTopN[LOCAL_SORT]
--------PhysicalProject[avg(wr_fee), avg(wr_refunded_cash), avg(ws_quantity), substring(r_reason_desc, 1, 20) AS `substr(r_reason_desc,1,20)`]
----------hashAgg[GLOBAL]
------------PhysicalDistribute[DistributionSpecHash]
--------------hashAgg[LOCAL]
----------------PhysicalProject[cast(wr_fee as DECIMALV3(9, 4)) AS `cast(wr_fee as DECIMALV3(9, 4))`, cast(wr_refunded_cash as DECIMALV3(9, 4)) AS `cast(wr_refunded_cash as DECIMALV3(9, 4))`, reason.r_reason_desc, web_sales.ws_quantity]
------------------hashJoin[INNER_JOIN broadcast] hashCondition=((web_sales.ws_web_page_sk = web_page.wp_web_page_sk)) otherCondition=() build RFs:RF9 ws_web_page_sk->[wp_web_page_sk]
--------------------PhysicalProject[web_page.wp_web_page_sk]
----------------------PhysicalOlapScan[web_page] apply RFs: RF9
--------------------PhysicalProject[reason.r_reason_desc, web_returns.wr_fee, web_returns.wr_refunded_cash, web_sales.ws_quantity, web_sales.ws_web_page_sk]
----------------------hashJoin[INNER_JOIN broadcast] hashCondition=((reason.r_reason_sk = web_returns.wr_reason_sk)) otherCondition=() build RFs:RF8 r_reason_sk->[wr_reason_sk]
------------------------PhysicalProject[web_returns.wr_fee, web_returns.wr_reason_sk, web_returns.wr_refunded_cash, web_sales.ws_quantity, web_sales.ws_web_page_sk]
--------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((cd1.cd_education_status = cd2.cd_education_status) and (cd1.cd_marital_status = cd2.cd_marital_status) and (cd2.cd_demo_sk = web_returns.wr_returning_cdemo_sk)) otherCondition=() build RFs:RF5 wr_returning_cdemo_sk->[cd_demo_sk];RF6 cd_marital_status->[cd_marital_status];RF7 cd_education_status->[cd_education_status]
----------------------------PhysicalProject[cd2.cd_demo_sk, cd2.cd_education_status, cd2.cd_marital_status]
------------------------------filter(cd_education_status IN ('Advanced Degree', 'College', 'Primary') and cd_marital_status IN ('D', 'S', 'U'))
--------------------------------PhysicalOlapScan[customer_demographics] apply RFs: RF5 RF6 RF7
----------------------------PhysicalProject[cd1.cd_education_status, cd1.cd_marital_status, web_returns.wr_fee, web_returns.wr_reason_sk, web_returns.wr_refunded_cash, web_returns.wr_returning_cdemo_sk, web_sales.ws_quantity, web_sales.ws_web_page_sk]
------------------------------hashJoin[INNER_JOIN bucketShuffle] hashCondition=((customer_address.ca_address_sk = web_returns.wr_refunded_addr_sk)) otherCondition=(OR[AND[ca_state IN ('IA', 'NC', 'TX'),(web_sales.ws_net_profit >= 100.00),(web_sales.ws_net_profit <= 200.00)],AND[ca_state IN ('GA', 'WI', 'WV'),(web_sales.ws_net_profit >= 150.00)],AND[ca_state IN ('KY', 'OK', 'VA'),(web_sales.ws_net_profit <= 250.00)]]) build RFs:RF4 wr_refunded_addr_sk->[ca_address_sk]
--------------------------------PhysicalProject[customer_address.ca_address_sk, customer_address.ca_state]
----------------------------------filter((customer_address.ca_country = 'United States') and ca_state IN ('GA', 'IA', 'KY', 'NC', 'OK', 'TX', 'VA', 'WI', 'WV'))
------------------------------------PhysicalOlapScan[customer_address] apply RFs: RF4
--------------------------------PhysicalProject[cd1.cd_education_status, cd1.cd_marital_status, web_returns.wr_fee, web_returns.wr_reason_sk, web_returns.wr_refunded_addr_sk, web_returns.wr_refunded_cash, web_returns.wr_returning_cdemo_sk, web_sales.ws_net_profit, web_sales.ws_quantity, web_sales.ws_web_page_sk]
----------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((cd1.cd_demo_sk = web_returns.wr_refunded_cdemo_sk)) otherCondition=(OR[AND[(cd1.cd_marital_status = 'D'),(cd1.cd_education_status = 'Primary'),(web_sales.ws_sales_price >= 100.00),(web_sales.ws_sales_price <= 150.00)],AND[(cd1.cd_marital_status = 'S'),(cd1.cd_education_status = 'College'),(web_sales.ws_sales_price <= 100.00)],AND[(cd1.cd_marital_status = 'U'),(cd1.cd_education_status = 'Advanced Degree'),(web_sales.ws_sales_price >= 150.00)]]) build RFs:RF3 cd_demo_sk->[wr_refunded_cdemo_sk]
------------------------------------PhysicalProject[web_returns.wr_fee, web_returns.wr_reason_sk, web_returns.wr_refunded_addr_sk, web_returns.wr_refunded_cash, web_returns.wr_refunded_cdemo_sk, web_returns.wr_returning_cdemo_sk, web_sales.ws_net_profit, web_sales.ws_quantity, web_sales.ws_sales_price, web_sales.ws_web_page_sk]
--------------------------------------hashJoin[INNER_JOIN colocated] hashCondition=((web_sales.ws_item_sk = web_returns.wr_item_sk) and (web_sales.ws_order_number = web_returns.wr_order_number)) otherCondition=() build RFs:RF1 ws_item_sk->[wr_item_sk];RF2 ws_order_number->[wr_order_number]
----------------------------------------PhysicalProject[web_returns.wr_fee, web_returns.wr_item_sk, web_returns.wr_order_number, web_returns.wr_reason_sk, web_returns.wr_refunded_addr_sk, web_returns.wr_refunded_cash, web_returns.wr_refunded_cdemo_sk, web_returns.wr_returning_cdemo_sk]
------------------------------------------PhysicalOlapScan[web_returns] apply RFs: RF1 RF2 RF3 RF8
----------------------------------------PhysicalProject[web_sales.ws_item_sk, web_sales.ws_net_profit, web_sales.ws_order_number, web_sales.ws_quantity, web_sales.ws_sales_price, web_sales.ws_web_page_sk]
------------------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((web_sales.ws_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF0 d_date_sk->[ws_sold_date_sk]
--------------------------------------------PhysicalProject[web_sales.ws_item_sk, web_sales.ws_net_profit, web_sales.ws_order_number, web_sales.ws_quantity, web_sales.ws_sales_price, web_sales.ws_sold_date_sk, web_sales.ws_web_page_sk]
----------------------------------------------filter((web_sales.ws_net_profit <= 300.00) and (web_sales.ws_net_profit >= 50.00) and (web_sales.ws_sales_price <= 200.00) and (web_sales.ws_sales_price >= 50.00))
------------------------------------------------PhysicalOlapScan[web_sales] apply RFs: RF0
--------------------------------------------PhysicalProject[date_dim.d_date_sk]
----------------------------------------------filter((date_dim.d_year = 1998))
------------------------------------------------PhysicalOlapScan[date_dim]
------------------------------------PhysicalProject[cd1.cd_demo_sk, cd1.cd_education_status, cd1.cd_marital_status]
--------------------------------------filter(OR[AND[(cd1.cd_marital_status = 'D'),(cd1.cd_education_status = 'Primary')],AND[(cd1.cd_marital_status = 'S'),(cd1.cd_education_status = 'College')],AND[(cd1.cd_marital_status = 'U'),(cd1.cd_education_status = 'Advanced Degree')]] and cd_education_status IN ('Advanced Degree', 'College', 'Primary') and cd_marital_status IN ('D', 'S', 'U'))
----------------------------------------PhysicalOlapScan[customer_demographics]
------------------------PhysicalProject[reason.r_reason_desc, reason.r_reason_sk]
--------------------------PhysicalOlapScan[reason]

Hint log:
Used: leading(web_page broadcast { { cd2 { customer_address { { web_returns { web_sales date_dim } } cd1 } } } reason } ) 
UnUsed: 
SyntaxError:

