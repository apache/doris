-- This file is automatically generated. You should know what you did if you want to edit this
-- !ds_shape_25 --
PhysicalResultSink
--PhysicalTopN[MERGE_SORT]
----PhysicalDistribute[DistributionSpecGather]
------PhysicalTopN[LOCAL_SORT]
--------hashAgg[GLOBAL]
----------PhysicalDistribute[DistributionSpecHash]
------------hashAgg[LOCAL]
--------------PhysicalProject[catalog_sales.cs_net_profit, item.i_item_desc, item.i_item_id, store.s_store_id, store.s_store_name, store_returns.sr_net_loss, store_sales.ss_net_profit]
----------------hashJoin[INNER_JOIN shuffle] hashCondition=((store_returns.sr_customer_sk = catalog_sales.cs_bill_customer_sk) and (store_returns.sr_item_sk = catalog_sales.cs_item_sk)) otherCondition=() build RFs:RF8 sr_customer_sk->[cs_bill_customer_sk];RF9 sr_item_sk->[cs_item_sk]
------------------PhysicalProject[catalog_sales.cs_bill_customer_sk, catalog_sales.cs_item_sk, catalog_sales.cs_net_profit]
--------------------hashJoin[INNER_JOIN broadcast] hashCondition=((catalog_sales.cs_sold_date_sk = d3.d_date_sk)) otherCondition=() build RFs:RF7 d_date_sk->[cs_sold_date_sk]
----------------------PhysicalProject[catalog_sales.cs_bill_customer_sk, catalog_sales.cs_item_sk, catalog_sales.cs_net_profit, catalog_sales.cs_sold_date_sk]
------------------------PhysicalOlapScan[catalog_sales] apply RFs: RF7 RF8 RF9
----------------------PhysicalProject[d3.d_date_sk]
------------------------filter((d3.d_moy <= 10) and (d3.d_moy >= 4) and (d3.d_year = 1999))
--------------------------PhysicalOlapScan[date_dim]
------------------PhysicalProject[item.i_item_desc, item.i_item_id, store.s_store_id, store.s_store_name, store_returns.sr_customer_sk, store_returns.sr_item_sk, store_returns.sr_net_loss, store_sales.ss_net_profit]
--------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store.s_store_sk = store_sales.ss_store_sk)) otherCondition=() build RFs:RF6 s_store_sk->[ss_store_sk]
----------------------PhysicalProject[item.i_item_desc, item.i_item_id, store_returns.sr_customer_sk, store_returns.sr_item_sk, store_returns.sr_net_loss, store_sales.ss_net_profit, store_sales.ss_store_sk]
------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((item.i_item_sk = store_sales.ss_item_sk)) otherCondition=() build RFs:RF5 i_item_sk->[sr_item_sk,ss_item_sk]
--------------------------PhysicalProject[store_returns.sr_customer_sk, store_returns.sr_item_sk, store_returns.sr_net_loss, store_sales.ss_item_sk, store_sales.ss_net_profit, store_sales.ss_store_sk]
----------------------------hashJoin[INNER_JOIN colocated] hashCondition=((store_sales.ss_customer_sk = store_returns.sr_customer_sk) and (store_sales.ss_item_sk = store_returns.sr_item_sk) and (store_sales.ss_ticket_number = store_returns.sr_ticket_number)) otherCondition=() build RFs:RF2 sr_customer_sk->[ss_customer_sk];RF3 sr_item_sk->[ss_item_sk];RF4 sr_ticket_number->[ss_ticket_number]
------------------------------PhysicalProject[store_sales.ss_customer_sk, store_sales.ss_item_sk, store_sales.ss_net_profit, store_sales.ss_store_sk, store_sales.ss_ticket_number]
--------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((d1.d_date_sk = store_sales.ss_sold_date_sk)) otherCondition=() build RFs:RF1 d_date_sk->[ss_sold_date_sk]
----------------------------------PhysicalProject[store_sales.ss_customer_sk, store_sales.ss_item_sk, store_sales.ss_net_profit, store_sales.ss_sold_date_sk, store_sales.ss_store_sk, store_sales.ss_ticket_number]
------------------------------------PhysicalOlapScan[store_sales] apply RFs: RF1 RF2 RF3 RF4 RF5 RF6
----------------------------------PhysicalProject[d1.d_date_sk]
------------------------------------filter((d1.d_moy = 4) and (d1.d_year = 1999))
--------------------------------------PhysicalOlapScan[date_dim]
------------------------------PhysicalProject[store_returns.sr_customer_sk, store_returns.sr_item_sk, store_returns.sr_net_loss, store_returns.sr_ticket_number]
--------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_returns.sr_returned_date_sk = d2.d_date_sk)) otherCondition=() build RFs:RF0 d_date_sk->[sr_returned_date_sk]
----------------------------------PhysicalProject[store_returns.sr_customer_sk, store_returns.sr_item_sk, store_returns.sr_net_loss, store_returns.sr_returned_date_sk, store_returns.sr_ticket_number]
------------------------------------PhysicalOlapScan[store_returns] apply RFs: RF0 RF5
----------------------------------PhysicalProject[d2.d_date_sk]
------------------------------------filter((d2.d_moy <= 10) and (d2.d_moy >= 4) and (d2.d_year = 1999))
--------------------------------------PhysicalOlapScan[date_dim]
--------------------------PhysicalProject[item.i_item_desc, item.i_item_id, item.i_item_sk]
----------------------------PhysicalOlapScan[item]
----------------------PhysicalProject[store.s_store_id, store.s_store_name, store.s_store_sk]
------------------------PhysicalOlapScan[store]

Hint log:
Used: leading(catalog_sales d3 { store_sales d1 { store_returns d2 } item store } )
UnUsed: 
SyntaxError:

