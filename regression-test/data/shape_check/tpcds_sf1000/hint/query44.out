-- This file is automatically generated. You should know what you did if you want to edit this
-- !ds_shape_44 --
PhysicalResultSink
--PhysicalTopN[MERGE_SORT]
----PhysicalDistribute[DistributionSpecGather]
------PhysicalTopN[LOCAL_SORT]
--------PhysicalProject[asceding.rnk, best_performing, worst_performing]
----------hashJoin[INNER_JOIN broadcast] hashCondition=((asceding.rnk = descending.rnk)) otherCondition=()
------------PhysicalProject[rnk, best_performing]
--------------hashJoin[INNER_JOIN bucketShuffle] hashCondition=((i1.i_item_sk = asceding.item_sk)) otherCondition=() build RFs:RF1 item_sk->[i_item_sk]
----------------PhysicalProject[i1.i_item_sk, i_product_name AS `best_performing`]
------------------PhysicalOlapScan[item] apply RFs: RF1
----------------PhysicalProject[asceding.item_sk, rnk]
------------------filter((rnk < 11))
--------------------PhysicalWindow
----------------------PhysicalQuickSort[MERGE_SORT]
------------------------PhysicalDistribute[DistributionSpecGather]
--------------------------PhysicalQuickSort[LOCAL_SORT]
----------------------------PhysicalPartitionTopN
------------------------------PhysicalProject[item_sk, V1.rank_col]
--------------------------------NestedLoopJoin[INNER_JOIN](cast(rank_col as DOUBLE) > cast((0.9 * rank_col) as DOUBLE))
----------------------------------PhysicalProject[rank_col, ss_item_sk AS `item_sk`, cast(rank_col as DOUBLE) AS `cast(rank_col as DOUBLE)`]
------------------------------------hashAgg[GLOBAL]
--------------------------------------PhysicalDistribute[DistributionSpecHash]
----------------------------------------hashAgg[LOCAL]
------------------------------------------PhysicalProject[ss1.ss_item_sk, cast(ss_net_profit as DECIMALV3(9, 4)) AS `cast(ss_net_profit as DECIMALV3(9, 4))`]
--------------------------------------------filter((ss1.ss_store_sk = 4))
----------------------------------------------PhysicalOlapScan[store_sales]
----------------------------------PhysicalProject[cast((0.9 * rank_col) as DOUBLE) AS `cast((0.9 * rank_col) as DOUBLE)`]
------------------------------------PhysicalAssertNumRows
--------------------------------------PhysicalDistribute[DistributionSpecGather]
----------------------------------------PhysicalProject[rank_col]
------------------------------------------hashAgg[GLOBAL]
--------------------------------------------PhysicalDistribute[DistributionSpecHash]
----------------------------------------------hashAgg[LOCAL]
------------------------------------------------PhysicalProject[store_sales.ss_store_sk, cast(ss_net_profit as DECIMALV3(9, 4)) AS `cast(ss_net_profit as DECIMALV3(9, 4))`]
--------------------------------------------------filter((store_sales.ss_store_sk = 4) and ss_hdemo_sk IS NULL)
----------------------------------------------------PhysicalOlapScan[store_sales]
------------PhysicalProject[rnk, worst_performing]
--------------hashJoin[INNER_JOIN bucketShuffle] hashCondition=((i2.i_item_sk = descending.item_sk)) otherCondition=() build RFs:RF0 item_sk->[i_item_sk]
----------------PhysicalProject[i2.i_item_sk, i_product_name AS `worst_performing`]
------------------PhysicalOlapScan[item] apply RFs: RF0
----------------PhysicalProject[descending.item_sk, rnk]
------------------filter((rnk < 11))
--------------------PhysicalWindow
----------------------PhysicalQuickSort[MERGE_SORT]
------------------------PhysicalDistribute[DistributionSpecGather]
--------------------------PhysicalQuickSort[LOCAL_SORT]
----------------------------PhysicalPartitionTopN
------------------------------PhysicalProject[item_sk, V2.rank_col]
--------------------------------NestedLoopJoin[INNER_JOIN](cast(rank_col as DOUBLE) > cast((0.9 * rank_col) as DOUBLE))
----------------------------------PhysicalProject[rank_col, ss_item_sk AS `item_sk`, cast(rank_col as DOUBLE) AS `cast(rank_col as DOUBLE)`]
------------------------------------hashAgg[GLOBAL]
--------------------------------------PhysicalDistribute[DistributionSpecHash]
----------------------------------------hashAgg[LOCAL]
------------------------------------------PhysicalProject[ss1.ss_item_sk, cast(ss_net_profit as DECIMALV3(9, 4)) AS `cast(ss_net_profit as DECIMALV3(9, 4))`]
--------------------------------------------filter((ss1.ss_store_sk = 4))
----------------------------------------------PhysicalOlapScan[store_sales]
----------------------------------PhysicalProject[cast((0.9 * rank_col) as DOUBLE) AS `cast((0.9 * rank_col) as DOUBLE)`]
------------------------------------PhysicalAssertNumRows
--------------------------------------PhysicalDistribute[DistributionSpecGather]
----------------------------------------PhysicalProject[rank_col]
------------------------------------------hashAgg[GLOBAL]
--------------------------------------------PhysicalDistribute[DistributionSpecHash]
----------------------------------------------hashAgg[LOCAL]
------------------------------------------------PhysicalProject[store_sales.ss_store_sk, cast(ss_net_profit as DECIMALV3(9, 4)) AS `cast(ss_net_profit as DECIMALV3(9, 4))`]
--------------------------------------------------filter((store_sales.ss_store_sk = 4) and ss_hdemo_sk IS NULL)
----------------------------------------------------PhysicalOlapScan[store_sales]

Hint log:
Used: leading(i1 asceding { i2 descending } )
UnUsed: 
SyntaxError:

