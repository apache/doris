-- This file is automatically generated. You should know what you did if you want to edit this
-- !ds_shape_61 --
PhysicalResultSink
--PhysicalTopN[GATHER_SORT]
----PhysicalProject[((cast(cast(promotions as DECIMALV3(15, 4)) as DECIMALV3(23, 12)) / cast(total as DECIMALV3(15, 4))) * 100) AS `((cast(cast(promotions as DECIMALV3(15, 4)) as DECIMALV3(23, 12)) / cast(total as DECIMALV3(15, 4))) * 100)`, all_sales.total, promotional_sales.promotions]
------NestedLoopJoin[CROSS_JOIN]
--------PhysicalProject[promotions AS `promotions`]
----------hashAgg[GLOBAL]
------------PhysicalDistribute[DistributionSpecGather]
--------------hashAgg[LOCAL]
----------------PhysicalProject[store_sales.ss_ext_sales_price]
------------------hashJoin[INNER_JOIN bucketShuffle] hashCondition=((customer_address.ca_address_sk = customer.c_current_addr_sk)) otherCondition=() build RFs:RF10 c_current_addr_sk->[ca_address_sk]
--------------------PhysicalProject[customer_address.ca_address_sk]
----------------------filter((customer_address.ca_gmt_offset = -7.00))
------------------------PhysicalOlapScan[customer_address] apply RFs: RF10
--------------------PhysicalProject[customer.c_current_addr_sk, store_sales.ss_ext_sales_price]
----------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_customer_sk = customer.c_customer_sk)) otherCondition=() build RFs:RF9 ss_customer_sk->[c_customer_sk]
------------------------PhysicalProject[customer.c_current_addr_sk, customer.c_customer_sk]
--------------------------PhysicalOlapScan[customer] apply RFs: RF9
------------------------PhysicalProject[store_sales.ss_customer_sk, store_sales.ss_ext_sales_price]
--------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_store_sk = store.s_store_sk)) otherCondition=() build RFs:RF8 s_store_sk->[ss_store_sk]
----------------------------PhysicalProject[store_sales.ss_customer_sk, store_sales.ss_ext_sales_price, store_sales.ss_store_sk]
------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_promo_sk = promotion.p_promo_sk)) otherCondition=() build RFs:RF7 p_promo_sk->[ss_promo_sk]
--------------------------------PhysicalProject[store_sales.ss_customer_sk, store_sales.ss_ext_sales_price, store_sales.ss_promo_sk, store_sales.ss_store_sk]
----------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_item_sk = item.i_item_sk)) otherCondition=() build RFs:RF6 i_item_sk->[ss_item_sk]
------------------------------------PhysicalProject[store_sales.ss_customer_sk, store_sales.ss_ext_sales_price, store_sales.ss_item_sk, store_sales.ss_promo_sk, store_sales.ss_store_sk]
--------------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF5 d_date_sk->[ss_sold_date_sk]
----------------------------------------PhysicalProject[store_sales.ss_customer_sk, store_sales.ss_ext_sales_price, store_sales.ss_item_sk, store_sales.ss_promo_sk, store_sales.ss_sold_date_sk, store_sales.ss_store_sk]
------------------------------------------PhysicalOlapScan[store_sales] apply RFs: RF5 RF6 RF7 RF8
----------------------------------------PhysicalProject[date_dim.d_date_sk]
------------------------------------------filter((date_dim.d_moy = 12) and (date_dim.d_year = 2000))
--------------------------------------------PhysicalOlapScan[date_dim]
------------------------------------PhysicalProject[item.i_item_sk]
--------------------------------------filter((item.i_category = 'Home'))
----------------------------------------PhysicalOlapScan[item]
--------------------------------PhysicalProject[promotion.p_promo_sk]
----------------------------------filter(OR[(promotion.p_channel_dmail = 'Y'),(promotion.p_channel_email = 'Y'),(promotion.p_channel_tv = 'Y')])
------------------------------------PhysicalOlapScan[promotion]
----------------------------PhysicalProject[store.s_store_sk]
------------------------------filter((store.s_gmt_offset = -7.00))
--------------------------------PhysicalOlapScan[store]
--------PhysicalProject[total AS `total`]
----------hashAgg[GLOBAL]
------------PhysicalDistribute[DistributionSpecGather]
--------------hashAgg[LOCAL]
----------------PhysicalProject[store_sales.ss_ext_sales_price]
------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_store_sk = store.s_store_sk)) otherCondition=() build RFs:RF4 s_store_sk->[ss_store_sk]
--------------------PhysicalProject[store_sales.ss_ext_sales_price, store_sales.ss_store_sk]
----------------------hashJoin[INNER_JOIN shuffle] hashCondition=((store_sales.ss_customer_sk = customer.c_customer_sk)) otherCondition=() build RFs:RF3 c_customer_sk->[ss_customer_sk]
------------------------PhysicalProject[store_sales.ss_customer_sk, store_sales.ss_ext_sales_price, store_sales.ss_store_sk]
--------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_item_sk = item.i_item_sk)) otherCondition=() build RFs:RF2 i_item_sk->[ss_item_sk]
----------------------------PhysicalProject[store_sales.ss_customer_sk, store_sales.ss_ext_sales_price, store_sales.ss_item_sk, store_sales.ss_store_sk]
------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF1 d_date_sk->[ss_sold_date_sk]
--------------------------------PhysicalProject[store_sales.ss_customer_sk, store_sales.ss_ext_sales_price, store_sales.ss_item_sk, store_sales.ss_sold_date_sk, store_sales.ss_store_sk]
----------------------------------PhysicalOlapScan[store_sales] apply RFs: RF1 RF2 RF3 RF4
--------------------------------PhysicalProject[date_dim.d_date_sk]
----------------------------------filter((date_dim.d_moy = 12) and (date_dim.d_year = 2000))
------------------------------------PhysicalOlapScan[date_dim]
----------------------------PhysicalProject[item.i_item_sk]
------------------------------filter((item.i_category = 'Home'))
--------------------------------PhysicalOlapScan[item]
------------------------PhysicalProject[customer.c_customer_sk]
--------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((customer_address.ca_address_sk = customer.c_current_addr_sk)) otherCondition=() build RFs:RF0 ca_address_sk->[c_current_addr_sk]
----------------------------PhysicalProject[customer.c_current_addr_sk, customer.c_customer_sk]
------------------------------PhysicalOlapScan[customer] apply RFs: RF0
----------------------------PhysicalProject[customer_address.ca_address_sk]
------------------------------filter((customer_address.ca_gmt_offset = -7.00))
--------------------------------PhysicalOlapScan[customer_address]
--------------------PhysicalProject[store.s_store_sk]
----------------------filter((store.s_gmt_offset = -7.00))
------------------------PhysicalOlapScan[store]

Hint log:
Used: leading(customer_address { customer { store_sales date_dim item promotion store } } ) leading(store_sales date_dim item { customer customer_address } store ) leading(promotional_sales all_sales )
UnUsed: 
SyntaxError:

