-- This file is automatically generated. You should know what you did if you want to edit this
-- !ds_shape_19 --
PhysicalResultSink
--PhysicalTopN[MERGE_SORT]
----PhysicalDistribute[DistributionSpecGather]
------PhysicalTopN[LOCAL_SORT]
--------PhysicalProject[ext_price, i_brand AS `brand`, i_brand_id AS `brand_id`, item.i_manufact, item.i_manufact_id]
----------hashAgg[GLOBAL]
------------PhysicalDistribute[DistributionSpecHash]
--------------hashAgg[LOCAL]
----------------PhysicalProject[item.i_brand, item.i_brand_id, item.i_manufact, item.i_manufact_id, store_sales.ss_ext_sales_price]
------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_store_sk = store.s_store_sk)) otherCondition=(( not (substring(ca_zip, 1, 5) = substring(s_zip, 1, 5)))) build RFs:RF4 s_store_sk->[ss_store_sk]
--------------------PhysicalProject[customer_address.ca_zip, item.i_brand, item.i_brand_id, item.i_manufact, item.i_manufact_id, store_sales.ss_ext_sales_price, store_sales.ss_store_sk]
----------------------hashJoin[INNER_JOIN bucketShuffle] hashCondition=((customer.c_current_addr_sk = customer_address.ca_address_sk)) otherCondition=() build RFs:RF3 c_current_addr_sk->[ca_address_sk]
------------------------PhysicalProject[customer_address.ca_address_sk, customer_address.ca_zip]
--------------------------PhysicalOlapScan[customer_address] apply RFs: RF3
------------------------PhysicalProject[customer.c_current_addr_sk, item.i_brand, item.i_brand_id, item.i_manufact, item.i_manufact_id, store_sales.ss_ext_sales_price, store_sales.ss_store_sk]
--------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_customer_sk = customer.c_customer_sk)) otherCondition=() build RFs:RF2 ss_customer_sk->[c_customer_sk]
----------------------------PhysicalProject[customer.c_current_addr_sk, customer.c_customer_sk]
------------------------------PhysicalOlapScan[customer] apply RFs: RF2
----------------------------PhysicalProject[item.i_brand, item.i_brand_id, item.i_manufact, item.i_manufact_id, store_sales.ss_customer_sk, store_sales.ss_ext_sales_price, store_sales.ss_store_sk]
------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((date_dim.d_date_sk = store_sales.ss_sold_date_sk)) otherCondition=() build RFs:RF1 d_date_sk->[ss_sold_date_sk]
--------------------------------PhysicalProject[item.i_brand, item.i_brand_id, item.i_manufact, item.i_manufact_id, store_sales.ss_customer_sk, store_sales.ss_ext_sales_price, store_sales.ss_sold_date_sk, store_sales.ss_store_sk]
----------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_item_sk = item.i_item_sk)) otherCondition=() build RFs:RF0 i_item_sk->[ss_item_sk]
------------------------------------PhysicalProject[store_sales.ss_customer_sk, store_sales.ss_ext_sales_price, store_sales.ss_item_sk, store_sales.ss_sold_date_sk, store_sales.ss_store_sk]
--------------------------------------PhysicalOlapScan[store_sales] apply RFs: RF0 RF1 RF4
------------------------------------PhysicalProject[item.i_brand, item.i_brand_id, item.i_item_sk, item.i_manufact, item.i_manufact_id]
--------------------------------------filter((item.i_manager_id = 14))
----------------------------------------PhysicalOlapScan[item]
--------------------------------PhysicalProject[date_dim.d_date_sk]
----------------------------------filter((date_dim.d_moy = 11) and (date_dim.d_year = 2002))
------------------------------------PhysicalOlapScan[date_dim]
--------------------PhysicalProject[store.s_store_sk, store.s_zip]
----------------------PhysicalOlapScan[store]

Hint log:
Used: leading(customer_address { customer { store_sales item date_dim } } store )
UnUsed: 
SyntaxError:

