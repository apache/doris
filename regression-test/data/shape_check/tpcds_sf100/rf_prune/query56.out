-- This file is automatically generated. You should know what you did if you want to edit this
-- !ds_shape_56 --
PhysicalResultSink
--PhysicalTopN[MERGE_SORT]
----PhysicalDistribute[DistributionSpecGather]
------PhysicalTopN[LOCAL_SORT]
--------hashAgg[GLOBAL]
----------PhysicalDistribute[DistributionSpecHash]
------------hashAgg[LOCAL]
--------------PhysicalUnion
----------------PhysicalProject[i_item_id AS `i_item_id`, total_sales AS `total_sales`]
------------------hashAgg[GLOBAL]
--------------------PhysicalDistribute[DistributionSpecHash]
----------------------hashAgg[LOCAL]
------------------------PhysicalProject[item.i_item_id, store_sales.ss_ext_sales_price]
--------------------------hashJoin[INNER_JOIN shuffle] hashCondition=((store_sales.ss_addr_sk = customer_address.ca_address_sk)) otherCondition=() build RFs:RF3 ca_address_sk->[ss_addr_sk]
----------------------------PhysicalProject[item.i_item_id, store_sales.ss_addr_sk, store_sales.ss_ext_sales_price]
------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_item_sk = item.i_item_sk)) otherCondition=() build RFs:RF2 i_item_sk->[ss_item_sk]
--------------------------------PhysicalProject[store_sales.ss_addr_sk, store_sales.ss_ext_sales_price, store_sales.ss_item_sk]
----------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF1 d_date_sk->[ss_sold_date_sk]
------------------------------------PhysicalProject[store_sales.ss_addr_sk, store_sales.ss_ext_sales_price, store_sales.ss_item_sk, store_sales.ss_sold_date_sk]
--------------------------------------PhysicalOlapScan[store_sales] apply RFs: RF1 RF2 RF3
------------------------------------PhysicalProject[date_dim.d_date_sk]
--------------------------------------filter((date_dim.d_moy = 2) and (date_dim.d_year = 2000))
----------------------------------------PhysicalOlapScan[date_dim]
--------------------------------hashJoin[LEFT_SEMI_JOIN broadcast] hashCondition=((item.i_item_id = item.i_item_id)) otherCondition=() build RFs:RF0 i_item_id->[i_item_id]
----------------------------------PhysicalProject[item.i_item_id, item.i_item_sk]
------------------------------------PhysicalOlapScan[item] apply RFs: RF0
----------------------------------PhysicalProject[item.i_item_id]
------------------------------------filter(i_color IN ('cyan', 'green', 'powder'))
--------------------------------------PhysicalOlapScan[item]
----------------------------PhysicalProject[customer_address.ca_address_sk]
------------------------------filter((customer_address.ca_gmt_offset = -6.00))
--------------------------------PhysicalOlapScan[customer_address]
----------------PhysicalProject[i_item_id AS `i_item_id`, total_sales AS `total_sales`]
------------------hashAgg[GLOBAL]
--------------------PhysicalDistribute[DistributionSpecHash]
----------------------hashAgg[LOCAL]
------------------------PhysicalProject[catalog_sales.cs_ext_sales_price, item.i_item_id]
--------------------------hashJoin[INNER_JOIN bucketShuffle] hashCondition=((catalog_sales.cs_bill_addr_sk = customer_address.ca_address_sk)) otherCondition=() build RFs:RF7 cs_bill_addr_sk->[ca_address_sk]
----------------------------PhysicalProject[customer_address.ca_address_sk]
------------------------------filter((customer_address.ca_gmt_offset = -6.00))
--------------------------------PhysicalOlapScan[customer_address] apply RFs: RF7
----------------------------PhysicalProject[catalog_sales.cs_bill_addr_sk, catalog_sales.cs_ext_sales_price, item.i_item_id]
------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((catalog_sales.cs_item_sk = item.i_item_sk)) otherCondition=() build RFs:RF6 i_item_sk->[cs_item_sk]
--------------------------------PhysicalProject[catalog_sales.cs_bill_addr_sk, catalog_sales.cs_ext_sales_price, catalog_sales.cs_item_sk]
----------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((catalog_sales.cs_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF5 d_date_sk->[cs_sold_date_sk]
------------------------------------PhysicalProject[catalog_sales.cs_bill_addr_sk, catalog_sales.cs_ext_sales_price, catalog_sales.cs_item_sk, catalog_sales.cs_sold_date_sk]
--------------------------------------PhysicalOlapScan[catalog_sales] apply RFs: RF5 RF6
------------------------------------PhysicalProject[date_dim.d_date_sk]
--------------------------------------filter((date_dim.d_moy = 2) and (date_dim.d_year = 2000))
----------------------------------------PhysicalOlapScan[date_dim]
--------------------------------hashJoin[LEFT_SEMI_JOIN broadcast] hashCondition=((item.i_item_id = item.i_item_id)) otherCondition=() build RFs:RF4 i_item_id->[i_item_id]
----------------------------------PhysicalProject[item.i_item_id, item.i_item_sk]
------------------------------------PhysicalOlapScan[item] apply RFs: RF4
----------------------------------PhysicalProject[item.i_item_id]
------------------------------------filter(i_color IN ('cyan', 'green', 'powder'))
--------------------------------------PhysicalOlapScan[item]
----------------PhysicalProject[i_item_id AS `i_item_id`, total_sales AS `total_sales`]
------------------hashAgg[GLOBAL]
--------------------PhysicalDistribute[DistributionSpecHash]
----------------------hashAgg[LOCAL]
------------------------PhysicalProject[item.i_item_id, web_sales.ws_ext_sales_price]
--------------------------hashJoin[INNER_JOIN bucketShuffle] hashCondition=((web_sales.ws_bill_addr_sk = customer_address.ca_address_sk)) otherCondition=() build RFs:RF11 ws_bill_addr_sk->[ca_address_sk]
----------------------------PhysicalProject[customer_address.ca_address_sk]
------------------------------filter((customer_address.ca_gmt_offset = -6.00))
--------------------------------PhysicalOlapScan[customer_address] apply RFs: RF11
----------------------------PhysicalProject[item.i_item_id, web_sales.ws_bill_addr_sk, web_sales.ws_ext_sales_price]
------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((web_sales.ws_item_sk = item.i_item_sk)) otherCondition=() build RFs:RF10 i_item_sk->[ws_item_sk]
--------------------------------PhysicalProject[web_sales.ws_bill_addr_sk, web_sales.ws_ext_sales_price, web_sales.ws_item_sk]
----------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((web_sales.ws_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF9 d_date_sk->[ws_sold_date_sk]
------------------------------------PhysicalProject[web_sales.ws_bill_addr_sk, web_sales.ws_ext_sales_price, web_sales.ws_item_sk, web_sales.ws_sold_date_sk]
--------------------------------------PhysicalOlapScan[web_sales] apply RFs: RF9 RF10
------------------------------------PhysicalProject[date_dim.d_date_sk]
--------------------------------------filter((date_dim.d_moy = 2) and (date_dim.d_year = 2000))
----------------------------------------PhysicalOlapScan[date_dim]
--------------------------------hashJoin[LEFT_SEMI_JOIN broadcast] hashCondition=((item.i_item_id = item.i_item_id)) otherCondition=() build RFs:RF8 i_item_id->[i_item_id]
----------------------------------PhysicalProject[item.i_item_id, item.i_item_sk]
------------------------------------PhysicalOlapScan[item] apply RFs: RF8
----------------------------------PhysicalProject[item.i_item_id]
------------------------------------filter(i_color IN ('cyan', 'green', 'powder'))
--------------------------------------PhysicalOlapScan[item]

