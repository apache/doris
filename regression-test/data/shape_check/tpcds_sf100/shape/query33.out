-- This file is automatically generated. You should know what you did if you want to edit this
-- !ds_shape_33 --
PhysicalResultSink
--PhysicalTopN[MERGE_SORT]
----PhysicalDistribute[DistributionSpecGather]
------PhysicalTopN[LOCAL_SORT]
--------hashAgg[GLOBAL]
----------PhysicalDistribute[DistributionSpecHash]
------------hashAgg[LOCAL]
--------------PhysicalUnion
----------------PhysicalProject[i_manufact_id AS `i_manufact_id`, total_sales AS `total_sales`]
------------------hashJoin[LEFT_SEMI_JOIN broadcast] hashCondition=((item.i_manufact_id = item.i_manufact_id)) otherCondition=() build RFs:RF3 i_manufact_id->[i_manufact_id]
--------------------hashAgg[GLOBAL]
----------------------PhysicalDistribute[DistributionSpecHash]
------------------------hashAgg[LOCAL]
--------------------------PhysicalProject[store_sales.ss_ext_sales_price, item.i_manufact_id]
----------------------------hashJoin[INNER_JOIN shuffle] hashCondition=((store_sales.ss_item_sk = item.i_item_sk)) otherCondition=() build RFs:RF2 i_item_sk->[ss_item_sk]
------------------------------PhysicalProject[store_sales.ss_item_sk, store_sales.ss_ext_sales_price]
--------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_addr_sk = customer_address.ca_address_sk)) otherCondition=() build RFs:RF1 ca_address_sk->[ss_addr_sk]
----------------------------------PhysicalProject[store_sales.ss_item_sk, store_sales.ss_addr_sk, store_sales.ss_ext_sales_price]
------------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF0 d_date_sk->[ss_sold_date_sk]
--------------------------------------PhysicalProject[store_sales.ss_sold_date_sk, store_sales.ss_item_sk, store_sales.ss_addr_sk, store_sales.ss_ext_sales_price]
----------------------------------------PhysicalOlapScan[store_sales] apply RFs: RF0 RF1 RF2
--------------------------------------PhysicalProject[date_dim.d_date_sk]
----------------------------------------filter((date_dim.d_moy = 1) and (date_dim.d_year = 2002))
------------------------------------------PhysicalOlapScan[date_dim]
----------------------------------PhysicalProject[customer_address.ca_address_sk]
------------------------------------filter((customer_address.ca_gmt_offset = -5.00))
--------------------------------------PhysicalOlapScan[customer_address]
------------------------------PhysicalProject[item.i_item_sk, item.i_manufact_id]
--------------------------------PhysicalOlapScan[item] apply RFs: RF3
--------------------PhysicalProject[item.i_manufact_id]
----------------------filter((item.i_category = 'Home'))
------------------------PhysicalOlapScan[item]
----------------PhysicalProject[i_manufact_id AS `i_manufact_id`, total_sales AS `total_sales`]
------------------hashJoin[LEFT_SEMI_JOIN broadcast] hashCondition=((item.i_manufact_id = item.i_manufact_id)) otherCondition=() build RFs:RF7 i_manufact_id->[i_manufact_id]
--------------------hashAgg[GLOBAL]
----------------------PhysicalDistribute[DistributionSpecHash]
------------------------hashAgg[LOCAL]
--------------------------PhysicalProject[catalog_sales.cs_ext_sales_price, item.i_manufact_id]
----------------------------hashJoin[INNER_JOIN shuffle] hashCondition=((catalog_sales.cs_item_sk = item.i_item_sk)) otherCondition=() build RFs:RF6 i_item_sk->[cs_item_sk]
------------------------------PhysicalProject[catalog_sales.cs_item_sk, catalog_sales.cs_ext_sales_price]
--------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((catalog_sales.cs_bill_addr_sk = customer_address.ca_address_sk)) otherCondition=() build RFs:RF5 ca_address_sk->[cs_bill_addr_sk]
----------------------------------PhysicalProject[catalog_sales.cs_item_sk, catalog_sales.cs_bill_addr_sk, catalog_sales.cs_ext_sales_price]
------------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((catalog_sales.cs_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF4 d_date_sk->[cs_sold_date_sk]
--------------------------------------PhysicalProject[catalog_sales.cs_sold_date_sk, catalog_sales.cs_item_sk, catalog_sales.cs_bill_addr_sk, catalog_sales.cs_ext_sales_price]
----------------------------------------PhysicalOlapScan[catalog_sales] apply RFs: RF4 RF5 RF6
--------------------------------------PhysicalProject[date_dim.d_date_sk]
----------------------------------------filter((date_dim.d_moy = 1) and (date_dim.d_year = 2002))
------------------------------------------PhysicalOlapScan[date_dim]
----------------------------------PhysicalProject[customer_address.ca_address_sk]
------------------------------------filter((customer_address.ca_gmt_offset = -5.00))
--------------------------------------PhysicalOlapScan[customer_address]
------------------------------PhysicalProject[item.i_item_sk, item.i_manufact_id]
--------------------------------PhysicalOlapScan[item] apply RFs: RF7
--------------------PhysicalProject[item.i_manufact_id]
----------------------filter((item.i_category = 'Home'))
------------------------PhysicalOlapScan[item]
----------------PhysicalProject[i_manufact_id AS `i_manufact_id`, total_sales AS `total_sales`]
------------------hashJoin[LEFT_SEMI_JOIN broadcast] hashCondition=((item.i_manufact_id = item.i_manufact_id)) otherCondition=() build RFs:RF11 i_manufact_id->[i_manufact_id]
--------------------hashAgg[GLOBAL]
----------------------PhysicalDistribute[DistributionSpecHash]
------------------------hashAgg[LOCAL]
--------------------------PhysicalProject[web_sales.ws_ext_sales_price, item.i_manufact_id]
----------------------------hashJoin[INNER_JOIN bucketShuffle] hashCondition=((web_sales.ws_item_sk = item.i_item_sk)) otherCondition=() build RFs:RF10 ws_item_sk->[i_item_sk]
------------------------------PhysicalProject[item.i_item_sk, item.i_manufact_id]
--------------------------------PhysicalOlapScan[item] apply RFs: RF10 RF11
------------------------------PhysicalProject[web_sales.ws_item_sk, web_sales.ws_ext_sales_price]
--------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((web_sales.ws_bill_addr_sk = customer_address.ca_address_sk)) otherCondition=() build RFs:RF9 ca_address_sk->[ws_bill_addr_sk]
----------------------------------PhysicalProject[web_sales.ws_item_sk, web_sales.ws_bill_addr_sk, web_sales.ws_ext_sales_price]
------------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((web_sales.ws_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF8 d_date_sk->[ws_sold_date_sk]
--------------------------------------PhysicalProject[web_sales.ws_sold_date_sk, web_sales.ws_item_sk, web_sales.ws_bill_addr_sk, web_sales.ws_ext_sales_price]
----------------------------------------PhysicalOlapScan[web_sales] apply RFs: RF8 RF9
--------------------------------------PhysicalProject[date_dim.d_date_sk]
----------------------------------------filter((date_dim.d_moy = 1) and (date_dim.d_year = 2002))
------------------------------------------PhysicalOlapScan[date_dim]
----------------------------------PhysicalProject[customer_address.ca_address_sk]
------------------------------------filter((customer_address.ca_gmt_offset = -5.00))
--------------------------------------PhysicalOlapScan[customer_address]
--------------------PhysicalProject[item.i_manufact_id]
----------------------filter((item.i_category = 'Home'))
------------------------PhysicalOlapScan[item]

