-- This file is automatically generated. You should know what you did if you want to edit this
-- !ds_shape_4 --
PhysicalCteAnchor ( cteId=CTEId#0 )
--PhysicalCteProducer ( cteId=CTEId#0 )
----PhysicalProject[customer_birth_country, customer_first_name, customer_id, customer_last_name, dyear, sale_type, year_total]
------hashJoin[INNER_JOIN shuffle] hashCondition=((ss_customer_sk = customer.c_customer_sk)) otherCondition=() build RFs:RF3 c_customer_sk->[cs_bill_customer_sk,ss_customer_sk,ws_bill_customer_sk]
--------PhysicalProject[dyear AS `dyear`, sale_type AS `sale_type`, ss_customer_sk, year_total AS `year_total`]
----------PhysicalUnion
------------PhysicalProject['s' AS `sale_type`, d_year AS `dyear`, store_sales.ss_customer_sk, year_total]
--------------hashAgg[GLOBAL]
----------------PhysicalDistribute[DistributionSpecHash]
------------------hashAgg[LOCAL]
--------------------PhysicalProject[(cast((cast((cast((cast(ss_ext_list_price as DECIMALV3(8, 2)) - cast(ss_ext_wholesale_cost as DECIMALV3(8, 2))) as DECIMALV3(9, 2)) - cast(ss_ext_discount_amt as DECIMALV3(9, 2))) as DECIMALV3(10, 2)) + cast(ss_ext_sales_price as DECIMALV3(10, 2))) as DECIMALV3(14, 6)) / 2) AS `(cast((cast((cast((cast(ss_ext_list_price as DECIMALV3(8, 2)) - cast(ss_ext_wholesale_cost as DECIMALV3(8, 2))) as DECIMALV3(9, 2)) - cast(ss_ext_discount_amt as DECIMALV3(9, 2))) as DECIMALV3(10, 2)) + cast(ss_ext_sales_price as DECIMALV3(10, 2))) as DECIMALV3(14, 6)) / 2)`, date_dim.d_year, store_sales.ss_customer_sk]
----------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF0 d_date_sk->[ss_sold_date_sk]
------------------------PhysicalProject[store_sales.ss_customer_sk, store_sales.ss_ext_discount_amt, store_sales.ss_ext_list_price, store_sales.ss_ext_sales_price, store_sales.ss_ext_wholesale_cost, store_sales.ss_sold_date_sk]
--------------------------PhysicalOlapScan[store_sales] apply RFs: RF0 RF3
------------------------PhysicalProject[date_dim.d_date_sk, date_dim.d_year]
--------------------------filter(d_year IN (1999, 2000))
----------------------------PhysicalOlapScan[date_dim]
------------PhysicalProject['c' AS `sale_type`, catalog_sales.cs_bill_customer_sk, d_year AS `dyear`, year_total]
--------------hashAgg[GLOBAL]
----------------PhysicalDistribute[DistributionSpecHash]
------------------hashAgg[LOCAL]
--------------------PhysicalProject[(cast((cast((cast((cast(cs_ext_list_price as DECIMALV3(8, 2)) - cast(cs_ext_wholesale_cost as DECIMALV3(8, 2))) as DECIMALV3(9, 2)) - cast(cs_ext_discount_amt as DECIMALV3(9, 2))) as DECIMALV3(10, 2)) + cast(cs_ext_sales_price as DECIMALV3(10, 2))) as DECIMALV3(14, 6)) / 2) AS `(cast((cast((cast((cast(cs_ext_list_price as DECIMALV3(8, 2)) - cast(cs_ext_wholesale_cost as DECIMALV3(8, 2))) as DECIMALV3(9, 2)) - cast(cs_ext_discount_amt as DECIMALV3(9, 2))) as DECIMALV3(10, 2)) + cast(cs_ext_sales_price as DECIMALV3(10, 2))) as DECIMALV3(14, 6)) / 2)`, catalog_sales.cs_bill_customer_sk, date_dim.d_year]
----------------------hashJoin[INNER_JOIN broadcast] hashCondition=((catalog_sales.cs_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF1 d_date_sk->[cs_sold_date_sk]
------------------------PhysicalProject[catalog_sales.cs_bill_customer_sk, catalog_sales.cs_ext_discount_amt, catalog_sales.cs_ext_list_price, catalog_sales.cs_ext_sales_price, catalog_sales.cs_ext_wholesale_cost, catalog_sales.cs_sold_date_sk]
--------------------------PhysicalOlapScan[catalog_sales] apply RFs: RF1 RF3
------------------------PhysicalProject[date_dim.d_date_sk, date_dim.d_year]
--------------------------filter(d_year IN (1999, 2000))
----------------------------PhysicalOlapScan[date_dim]
------------PhysicalProject['w' AS `sale_type`, d_year AS `dyear`, web_sales.ws_bill_customer_sk, year_total]
--------------hashAgg[GLOBAL]
----------------PhysicalDistribute[DistributionSpecHash]
------------------hashAgg[LOCAL]
--------------------PhysicalProject[(cast((cast((cast((cast(ws_ext_list_price as DECIMALV3(8, 2)) - cast(ws_ext_wholesale_cost as DECIMALV3(8, 2))) as DECIMALV3(9, 2)) - cast(ws_ext_discount_amt as DECIMALV3(9, 2))) as DECIMALV3(10, 2)) + cast(ws_ext_sales_price as DECIMALV3(10, 2))) as DECIMALV3(14, 6)) / 2) AS `(cast((cast((cast((cast(ws_ext_list_price as DECIMALV3(8, 2)) - cast(ws_ext_wholesale_cost as DECIMALV3(8, 2))) as DECIMALV3(9, 2)) - cast(ws_ext_discount_amt as DECIMALV3(9, 2))) as DECIMALV3(10, 2)) + cast(ws_ext_sales_price as DECIMALV3(10, 2))) as DECIMALV3(14, 6)) / 2)`, date_dim.d_year, web_sales.ws_bill_customer_sk]
----------------------hashJoin[INNER_JOIN broadcast] hashCondition=((web_sales.ws_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF2 d_date_sk->[ws_sold_date_sk]
------------------------PhysicalProject[web_sales.ws_bill_customer_sk, web_sales.ws_ext_discount_amt, web_sales.ws_ext_list_price, web_sales.ws_ext_sales_price, web_sales.ws_ext_wholesale_cost, web_sales.ws_sold_date_sk]
--------------------------PhysicalOlapScan[web_sales] apply RFs: RF2 RF3
------------------------PhysicalProject[date_dim.d_date_sk, date_dim.d_year]
--------------------------filter(d_year IN (1999, 2000))
----------------------------PhysicalOlapScan[date_dim]
--------PhysicalProject[c_birth_country AS `customer_birth_country`, c_customer_id AS `customer_id`, c_first_name AS `customer_first_name`, c_last_name AS `customer_last_name`, customer.c_customer_sk]
----------PhysicalOlapScan[customer]
--PhysicalResultSink
----PhysicalTopN[MERGE_SORT]
------PhysicalDistribute[DistributionSpecGather]
--------PhysicalTopN[LOCAL_SORT]
----------PhysicalProject[t_s_secyear.customer_birth_country, t_s_secyear.customer_first_name, t_s_secyear.customer_id, t_s_secyear.customer_last_name]
------------hashJoin[INNER_JOIN shuffleBucket] hashCondition=((t_s_firstyear.customer_id = t_w_secyear.customer_id)) otherCondition=((if((year_total > 0.000000), (cast(year_total as DECIMALV3(38, 16)) / year_total), NULL) > if((year_total > 0.000000), (cast(year_total as DECIMALV3(38, 16)) / year_total), NULL))) build RFs:RF8 customer_id->[customer_id]
--------------PhysicalProject[t_w_secyear.customer_id, t_w_secyear.year_total]
----------------filter((t_w_secyear.dyear = 2000) and (t_w_secyear.sale_type = 'w'))
------------------PhysicalCteConsumer ( cteId=CTEId#0 ) apply RFs: RF8
--------------PhysicalProject[t_c_firstyear.year_total, t_c_secyear.year_total, t_s_firstyear.customer_id, t_s_secyear.customer_birth_country, t_s_secyear.customer_first_name, t_s_secyear.customer_id, t_s_secyear.customer_last_name, t_w_firstyear.year_total]
----------------hashJoin[INNER_JOIN shuffleBucket] hashCondition=((t_s_firstyear.customer_id = t_w_firstyear.customer_id)) otherCondition=() build RFs:RF7 customer_id->[customer_id]
------------------PhysicalProject[t_w_firstyear.customer_id, t_w_firstyear.year_total]
--------------------filter((t_w_firstyear.dyear = 1999) and (t_w_firstyear.sale_type = 'w') and (t_w_firstyear.year_total > 0.000000))
----------------------PhysicalCteConsumer ( cteId=CTEId#0 ) apply RFs: RF7
------------------PhysicalProject[t_c_firstyear.year_total, t_c_secyear.year_total, t_s_firstyear.customer_id, t_s_secyear.customer_birth_country, t_s_secyear.customer_first_name, t_s_secyear.customer_id, t_s_secyear.customer_last_name]
--------------------hashJoin[INNER_JOIN shuffleBucket] hashCondition=((t_s_firstyear.customer_id = t_c_secyear.customer_id)) otherCondition=((if((year_total > 0.000000), (cast(year_total as DECIMALV3(38, 16)) / year_total), NULL) > if((year_total > 0.000000), (cast(year_total as DECIMALV3(38, 16)) / year_total), NULL))) build RFs:RF6 customer_id->[customer_id]
----------------------PhysicalProject[t_c_secyear.customer_id, t_c_secyear.year_total]
------------------------filter((t_c_secyear.dyear = 2000) and (t_c_secyear.sale_type = 'c'))
--------------------------PhysicalCteConsumer ( cteId=CTEId#0 ) apply RFs: RF6
----------------------PhysicalProject[t_c_firstyear.year_total, t_s_firstyear.customer_id, t_s_firstyear.year_total, t_s_secyear.customer_birth_country, t_s_secyear.customer_first_name, t_s_secyear.customer_id, t_s_secyear.customer_last_name, t_s_secyear.year_total]
------------------------hashJoin[INNER_JOIN bucketShuffle] hashCondition=((t_s_firstyear.customer_id = t_c_firstyear.customer_id)) otherCondition=() build RFs:RF5 customer_id->[customer_id,customer_id]
--------------------------hashJoin[INNER_JOIN shuffle] hashCondition=((t_s_secyear.customer_id = t_s_firstyear.customer_id)) otherCondition=() build RFs:RF4 customer_id->[customer_id]
----------------------------PhysicalProject[t_s_secyear.customer_birth_country, t_s_secyear.customer_first_name, t_s_secyear.customer_id, t_s_secyear.customer_last_name, t_s_secyear.year_total]
------------------------------filter((t_s_secyear.dyear = 2000) and (t_s_secyear.sale_type = 's'))
--------------------------------PhysicalCteConsumer ( cteId=CTEId#0 ) apply RFs: RF4 RF5
----------------------------PhysicalProject[t_s_firstyear.customer_id, t_s_firstyear.year_total]
------------------------------filter((t_s_firstyear.dyear = 1999) and (t_s_firstyear.sale_type = 's') and (t_s_firstyear.year_total > 0.000000))
--------------------------------PhysicalCteConsumer ( cteId=CTEId#0 ) apply RFs: RF5
--------------------------PhysicalProject[t_c_firstyear.customer_id, t_c_firstyear.year_total]
----------------------------filter((t_c_firstyear.dyear = 1999) and (t_c_firstyear.sale_type = 'c') and (t_c_firstyear.year_total > 0.000000))
------------------------------PhysicalCteConsumer ( cteId=CTEId#0 )

