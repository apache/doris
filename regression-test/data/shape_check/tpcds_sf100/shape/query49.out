-- This file is automatically generated. You should know what you did if you want to edit this
-- !ds_shape_49 --
PhysicalResultSink
--PhysicalTopN[MERGE_SORT]
----PhysicalDistribute[DistributionSpecGather]
------PhysicalTopN[LOCAL_SORT]
--------hashAgg[GLOBAL]
----------PhysicalDistribute[DistributionSpecHash]
------------hashAgg[LOCAL]
--------------PhysicalUnion
----------------PhysicalDistribute[DistributionSpecExecutionAny]
------------------PhysicalTopN[MERGE_SORT]
--------------------PhysicalDistribute[DistributionSpecGather]
----------------------PhysicalTopN[LOCAL_SORT]
------------------------hashAgg[GLOBAL]
--------------------------PhysicalDistribute[DistributionSpecHash]
----------------------------hashAgg[LOCAL]
------------------------------PhysicalProject['web' AS `channel`, web.item, web.return_ratio, web.return_rank, web.currency_rank]
--------------------------------filter(OR[(return_rank <= 10),(currency_rank <= 10)])
----------------------------------PhysicalWindow
------------------------------------PhysicalQuickSort[LOCAL_SORT]
--------------------------------------PhysicalWindow
----------------------------------------PhysicalQuickSort[MERGE_SORT]
------------------------------------------PhysicalDistribute[DistributionSpecGather]
--------------------------------------------PhysicalQuickSort[LOCAL_SORT]
----------------------------------------------PhysicalProject[ws_item_sk AS `item`, (cast(cast(sum(coalesce(wr_return_quantity, 0)) as DECIMALV3(15, 4)) as DECIMALV3(23, 12)) / cast(sum(coalesce(ws_quantity, 0)) as DECIMALV3(15, 4))) AS `return_ratio`, (cast(cast(sum(coalesce(wr_return_amt, cast(0 as DECIMALV3(7, 2)))) as DECIMALV3(15, 4)) as DECIMALV3(23, 12)) / cast(sum(coalesce(ws_net_paid, cast(0 as DECIMALV3(7, 2)))) as DECIMALV3(15, 4))) AS `currency_ratio`]
------------------------------------------------hashAgg[GLOBAL]
--------------------------------------------------PhysicalDistribute[DistributionSpecHash]
----------------------------------------------------hashAgg[LOCAL]
------------------------------------------------------PhysicalProject[ws.ws_item_sk, coalesce(ws_quantity, 0) AS `coalesce(ws_quantity, 0)`, coalesce(ws_net_paid, 0.00) AS `coalesce(ws_net_paid, 0.00)`, coalesce(wr_return_quantity, 0) AS `coalesce(wr_return_quantity, 0)`, coalesce(wr_return_amt, 0.00) AS `coalesce(wr_return_amt, 0.00)`]
--------------------------------------------------------hashJoin[INNER_JOIN colocated] hashCondition=((ws.ws_item_sk = wr.wr_item_sk) and (ws.ws_order_number = wr.wr_order_number)) otherCondition=() build RFs:RF1 ws_order_number->[wr_order_number];RF2 ws_item_sk->[wr_item_sk]
----------------------------------------------------------PhysicalProject[wr.wr_item_sk, wr.wr_order_number, wr.wr_return_quantity, wr.wr_return_amt]
------------------------------------------------------------filter((wr.wr_return_amt > 10000.00))
--------------------------------------------------------------PhysicalOlapScan[web_returns] apply RFs: RF1 RF2
----------------------------------------------------------PhysicalProject[ws.ws_item_sk, ws.ws_order_number, ws.ws_quantity, ws.ws_net_paid]
------------------------------------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((ws.ws_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF0 d_date_sk->[ws_sold_date_sk]
--------------------------------------------------------------PhysicalProject[ws.ws_sold_date_sk, ws.ws_item_sk, ws.ws_order_number, ws.ws_quantity, ws.ws_net_paid]
----------------------------------------------------------------filter((ws.ws_net_paid > 0.00) and (ws.ws_net_profit > 1.00) and (ws.ws_quantity > 0))
------------------------------------------------------------------PhysicalOlapScan[web_sales] apply RFs: RF0
--------------------------------------------------------------PhysicalProject[date_dim.d_date_sk]
----------------------------------------------------------------filter((date_dim.d_moy = 12) and (date_dim.d_year = 1999))
------------------------------------------------------------------PhysicalOlapScan[date_dim]
----------------PhysicalDistribute[DistributionSpecExecutionAny]
------------------PhysicalTopN[MERGE_SORT]
--------------------PhysicalDistribute[DistributionSpecGather]
----------------------PhysicalTopN[LOCAL_SORT]
------------------------hashAgg[GLOBAL]
--------------------------PhysicalDistribute[DistributionSpecHash]
----------------------------hashAgg[LOCAL]
------------------------------PhysicalProject['catalog' AS `channel`, catalog.item, catalog.return_ratio, catalog.return_rank, catalog.currency_rank]
--------------------------------filter(OR[(return_rank <= 10),(currency_rank <= 10)])
----------------------------------PhysicalWindow
------------------------------------PhysicalQuickSort[LOCAL_SORT]
--------------------------------------PhysicalWindow
----------------------------------------PhysicalQuickSort[MERGE_SORT]
------------------------------------------PhysicalDistribute[DistributionSpecGather]
--------------------------------------------PhysicalQuickSort[LOCAL_SORT]
----------------------------------------------PhysicalProject[cs_item_sk AS `item`, (cast(cast(sum(coalesce(cr_return_quantity, 0)) as DECIMALV3(15, 4)) as DECIMALV3(23, 12)) / cast(sum(coalesce(cs_quantity, 0)) as DECIMALV3(15, 4))) AS `return_ratio`, (cast(cast(sum(coalesce(cr_return_amount, cast(0 as DECIMALV3(7, 2)))) as DECIMALV3(15, 4)) as DECIMALV3(23, 12)) / cast(sum(coalesce(cs_net_paid, cast(0 as DECIMALV3(7, 2)))) as DECIMALV3(15, 4))) AS `currency_ratio`]
------------------------------------------------hashAgg[GLOBAL]
--------------------------------------------------PhysicalDistribute[DistributionSpecHash]
----------------------------------------------------hashAgg[LOCAL]
------------------------------------------------------PhysicalProject[cs.cs_item_sk, coalesce(cs_net_paid, 0.00) AS `coalesce(cs_net_paid, 0.00)`, coalesce(cs_quantity, 0) AS `coalesce(cs_quantity, 0)`, coalesce(cr_return_amount, 0.00) AS `coalesce(cr_return_amount, 0.00)`, coalesce(cr_return_quantity, 0) AS `coalesce(cr_return_quantity, 0)`]
--------------------------------------------------------hashJoin[INNER_JOIN colocated] hashCondition=((cs.cs_item_sk = cr.cr_item_sk) and (cs.cs_order_number = cr.cr_order_number)) otherCondition=() build RFs:RF4 cs_order_number->[cr_order_number];RF5 cs_item_sk->[cr_item_sk]
----------------------------------------------------------PhysicalProject[cr.cr_item_sk, cr.cr_order_number, cr.cr_return_quantity, cr.cr_return_amount]
------------------------------------------------------------filter((cr.cr_return_amount > 10000.00))
--------------------------------------------------------------PhysicalOlapScan[catalog_returns] apply RFs: RF4 RF5
----------------------------------------------------------PhysicalProject[cs.cs_item_sk, cs.cs_order_number, cs.cs_quantity, cs.cs_net_paid]
------------------------------------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((cs.cs_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF3 d_date_sk->[cs_sold_date_sk]
--------------------------------------------------------------PhysicalProject[cs.cs_sold_date_sk, cs.cs_item_sk, cs.cs_order_number, cs.cs_quantity, cs.cs_net_paid]
----------------------------------------------------------------filter((cs.cs_net_paid > 0.00) and (cs.cs_net_profit > 1.00) and (cs.cs_quantity > 0))
------------------------------------------------------------------PhysicalOlapScan[catalog_sales] apply RFs: RF3
--------------------------------------------------------------PhysicalProject[date_dim.d_date_sk]
----------------------------------------------------------------filter((date_dim.d_moy = 12) and (date_dim.d_year = 1999))
------------------------------------------------------------------PhysicalOlapScan[date_dim]
----------------PhysicalDistribute[DistributionSpecExecutionAny]
------------------PhysicalTopN[MERGE_SORT]
--------------------PhysicalDistribute[DistributionSpecGather]
----------------------PhysicalTopN[LOCAL_SORT]
------------------------hashAgg[GLOBAL]
--------------------------PhysicalDistribute[DistributionSpecHash]
----------------------------hashAgg[LOCAL]
------------------------------PhysicalProject['store' AS `channel`, store.item, store.return_ratio, store.return_rank, store.currency_rank]
--------------------------------filter(OR[(return_rank <= 10),(currency_rank <= 10)])
----------------------------------PhysicalWindow
------------------------------------PhysicalQuickSort[LOCAL_SORT]
--------------------------------------PhysicalWindow
----------------------------------------PhysicalQuickSort[MERGE_SORT]
------------------------------------------PhysicalDistribute[DistributionSpecGather]
--------------------------------------------PhysicalQuickSort[LOCAL_SORT]
----------------------------------------------PhysicalProject[ss_item_sk AS `item`, (cast(cast(sum(coalesce(sr_return_quantity, 0)) as DECIMALV3(15, 4)) as DECIMALV3(23, 12)) / cast(sum(coalesce(ss_quantity, 0)) as DECIMALV3(15, 4))) AS `return_ratio`, (cast(cast(sum(coalesce(sr_return_amt, cast(0 as DECIMALV3(7, 2)))) as DECIMALV3(15, 4)) as DECIMALV3(23, 12)) / cast(sum(coalesce(ss_net_paid, cast(0 as DECIMALV3(7, 2)))) as DECIMALV3(15, 4))) AS `currency_ratio`]
------------------------------------------------hashAgg[GLOBAL]
--------------------------------------------------PhysicalDistribute[DistributionSpecHash]
----------------------------------------------------hashAgg[LOCAL]
------------------------------------------------------PhysicalProject[sts.ss_item_sk, coalesce(ss_net_paid, 0.00) AS `coalesce(ss_net_paid, 0.00)`, coalesce(ss_quantity, 0) AS `coalesce(ss_quantity, 0)`, coalesce(sr_return_quantity, 0) AS `coalesce(sr_return_quantity, 0)`, coalesce(sr_return_amt, 0.00) AS `coalesce(sr_return_amt, 0.00)`]
--------------------------------------------------------hashJoin[INNER_JOIN colocated] hashCondition=((sts.ss_item_sk = sr.sr_item_sk) and (sts.ss_ticket_number = sr.sr_ticket_number)) otherCondition=() build RFs:RF7 ss_ticket_number->[sr_ticket_number];RF8 ss_item_sk->[sr_item_sk]
----------------------------------------------------------PhysicalProject[sr.sr_item_sk, sr.sr_ticket_number, sr.sr_return_quantity, sr.sr_return_amt]
------------------------------------------------------------filter((sr.sr_return_amt > 10000.00))
--------------------------------------------------------------PhysicalOlapScan[store_returns] apply RFs: RF7 RF8
----------------------------------------------------------PhysicalProject[sts.ss_item_sk, sts.ss_ticket_number, sts.ss_quantity, sts.ss_net_paid]
------------------------------------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((sts.ss_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF6 d_date_sk->[ss_sold_date_sk]
--------------------------------------------------------------PhysicalProject[sts.ss_sold_date_sk, sts.ss_item_sk, sts.ss_ticket_number, sts.ss_quantity, sts.ss_net_paid]
----------------------------------------------------------------filter((sts.ss_net_paid > 0.00) and (sts.ss_net_profit > 1.00) and (sts.ss_quantity > 0))
------------------------------------------------------------------PhysicalOlapScan[store_sales] apply RFs: RF6
--------------------------------------------------------------PhysicalProject[date_dim.d_date_sk]
----------------------------------------------------------------filter((date_dim.d_moy = 12) and (date_dim.d_year = 1999))
------------------------------------------------------------------PhysicalOlapScan[date_dim]

