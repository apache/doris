-- This file is automatically generated. You should know what you did if you want to edit this
-- !ds_shape_17 --
PhysicalResultSink
--PhysicalTopN[MERGE_SORT]
----PhysicalDistribute[DistributionSpecGather]
------PhysicalTopN[LOCAL_SORT]
--------PhysicalProject[item.i_item_id, item.i_item_desc, store.s_state, store_sales_quantitycount, store_sales_quantityave, store_sales_quantitystdev, (store_sales_quantitystdev / store_sales_quantityave) AS `store_sales_quantitycov`, store_returns_quantitycount, store_returns_quantityave, store_returns_quantitystdev, (store_returns_quantitystdev / store_returns_quantityave) AS `store_returns_quantitycov`, catalog_sales_quantitycount, catalog_sales_quantityave, catalog_sales_quantitystdev, (catalog_sales_quantitystdev / catalog_sales_quantityave) AS `catalog_sales_quantitycov`]
----------hashAgg[GLOBAL]
------------PhysicalDistribute[DistributionSpecHash]
--------------hashAgg[LOCAL]
----------------PhysicalProject[item.i_item_id, item.i_item_desc, store.s_state, store_returns.sr_return_quantity, store_sales.ss_quantity, catalog_sales.cs_quantity]
------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_returns.sr_customer_sk = catalog_sales.cs_bill_customer_sk) and (store_returns.sr_item_sk = catalog_sales.cs_item_sk)) otherCondition=() build RFs:RF8 sr_customer_sk->[cs_bill_customer_sk];RF9 sr_item_sk->[cs_item_sk]
--------------------PhysicalProject[catalog_sales.cs_item_sk, catalog_sales.cs_bill_customer_sk, catalog_sales.cs_quantity]
----------------------hashJoin[INNER_JOIN broadcast] hashCondition=((catalog_sales.cs_sold_date_sk = d3.d_date_sk)) otherCondition=() build RFs:RF7 d_date_sk->[cs_sold_date_sk]
------------------------PhysicalProject[catalog_sales.cs_sold_date_sk, catalog_sales.cs_item_sk, catalog_sales.cs_bill_customer_sk, catalog_sales.cs_quantity]
--------------------------PhysicalOlapScan[catalog_sales] apply RFs: RF7 RF8 RF9
------------------------PhysicalProject[d3.d_date_sk]
--------------------------filter(d_quarter_name IN ('2001Q1', '2001Q2', '2001Q3'))
----------------------------PhysicalOlapScan[date_dim]
--------------------PhysicalProject[store_sales.ss_quantity, store_returns.sr_item_sk, store_returns.sr_customer_sk, store_returns.sr_return_quantity, store.s_state, item.i_item_id, item.i_item_desc]
----------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store.s_store_sk = store_sales.ss_store_sk)) otherCondition=() build RFs:RF6 s_store_sk->[ss_store_sk]
------------------------PhysicalProject[store_sales.ss_store_sk, store_sales.ss_quantity, store_returns.sr_item_sk, store_returns.sr_customer_sk, store_returns.sr_return_quantity, item.i_item_id, item.i_item_desc]
--------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((item.i_item_sk = store_sales.ss_item_sk)) otherCondition=() build RFs:RF5 i_item_sk->[sr_item_sk,ss_item_sk]
----------------------------PhysicalProject[store_sales.ss_item_sk, store_sales.ss_store_sk, store_sales.ss_quantity, store_returns.sr_item_sk, store_returns.sr_customer_sk, store_returns.sr_return_quantity]
------------------------------hashJoin[INNER_JOIN colocated] hashCondition=((store_sales.ss_customer_sk = store_returns.sr_customer_sk) and (store_sales.ss_item_sk = store_returns.sr_item_sk) and (store_sales.ss_ticket_number = store_returns.sr_ticket_number)) otherCondition=() build RFs:RF2 sr_customer_sk->[ss_customer_sk];RF3 sr_item_sk->[ss_item_sk];RF4 sr_ticket_number->[ss_ticket_number]
--------------------------------PhysicalProject[store_sales.ss_item_sk, store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_store_sk, store_sales.ss_quantity]
----------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((d1.d_date_sk = store_sales.ss_sold_date_sk)) otherCondition=() build RFs:RF1 d_date_sk->[ss_sold_date_sk]
------------------------------------PhysicalProject[store_sales.ss_sold_date_sk, store_sales.ss_item_sk, store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_store_sk, store_sales.ss_quantity]
--------------------------------------PhysicalOlapScan[store_sales] apply RFs: RF1 RF2 RF3 RF4 RF5 RF6
------------------------------------PhysicalProject[d1.d_date_sk]
--------------------------------------filter((d1.d_quarter_name = '2001Q1'))
----------------------------------------PhysicalOlapScan[date_dim]
--------------------------------PhysicalProject[store_returns.sr_item_sk, store_returns.sr_ticket_number, store_returns.sr_customer_sk, store_returns.sr_return_quantity]
----------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_returns.sr_returned_date_sk = d2.d_date_sk)) otherCondition=() build RFs:RF0 d_date_sk->[sr_returned_date_sk]
------------------------------------PhysicalProject[store_returns.sr_item_sk, store_returns.sr_ticket_number, store_returns.sr_returned_date_sk, store_returns.sr_customer_sk, store_returns.sr_return_quantity]
--------------------------------------PhysicalOlapScan[store_returns] apply RFs: RF0 RF5
------------------------------------PhysicalProject[d2.d_date_sk]
--------------------------------------filter(d_quarter_name IN ('2001Q1', '2001Q2', '2001Q3'))
----------------------------------------PhysicalOlapScan[date_dim]
----------------------------PhysicalProject[item.i_item_sk, item.i_item_id, item.i_item_desc]
------------------------------PhysicalOlapScan[item]
------------------------PhysicalProject[store.s_store_sk, store.s_state]
--------------------------PhysicalOlapScan[store]

