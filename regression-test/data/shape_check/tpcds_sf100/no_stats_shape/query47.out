-- This file is automatically generated. You should know what you did if you want to edit this
-- !ds_shape_47 --
PhysicalCteAnchor ( cteId=CTEId#0 )
--PhysicalCteProducer ( cteId=CTEId#0 )
----PhysicalProject[avg_monthly_sales AS `avg_monthly_sales`, rn AS `rn`, v1.d_year, v1.i_brand, v1.i_category, v1.s_company_name, v1.s_store_name, v1.sum_sales]
------PhysicalWindow
--------PhysicalQuickSort[LOCAL_SORT]
----------PhysicalWindow
------------PhysicalQuickSort[LOCAL_SORT]
--------------PhysicalDistribute[DistributionSpecHash]
----------------PhysicalProject[cast(sum_sales as DECIMALV3(38, 4)) AS `cast(sum_sales as DECIMALV3(38, 4))`, date_dim.d_moy, v1.d_year, v1.i_brand, v1.i_category, v1.s_company_name, v1.s_store_name, v1.sum_sales]
------------------hashAgg[GLOBAL]
--------------------PhysicalDistribute[DistributionSpecHash]
----------------------hashAgg[LOCAL]
------------------------PhysicalProject[date_dim.d_moy, date_dim.d_year, item.i_brand, item.i_category, store.s_company_name, store.s_store_name, store_sales.ss_sales_price]
--------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_store_sk = store.s_store_sk)) otherCondition=() build RFs:RF2 s_store_sk->[ss_store_sk]
----------------------------PhysicalProject[date_dim.d_moy, date_dim.d_year, item.i_brand, item.i_category, store_sales.ss_sales_price, store_sales.ss_store_sk]
------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF1 d_date_sk->[ss_sold_date_sk]
--------------------------------PhysicalProject[item.i_brand, item.i_category, store_sales.ss_sales_price, store_sales.ss_sold_date_sk, store_sales.ss_store_sk]
----------------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_item_sk = item.i_item_sk)) otherCondition=() build RFs:RF0 i_item_sk->[ss_item_sk]
------------------------------------PhysicalProject[store_sales.ss_item_sk, store_sales.ss_sales_price, store_sales.ss_sold_date_sk, store_sales.ss_store_sk]
--------------------------------------PhysicalOlapScan[store_sales] apply RFs: RF0 RF1 RF2
------------------------------------PhysicalProject[item.i_brand, item.i_category, item.i_item_sk]
--------------------------------------PhysicalOlapScan[item]
--------------------------------PhysicalProject[date_dim.d_date_sk, date_dim.d_moy, date_dim.d_year]
----------------------------------filter(OR[(date_dim.d_year = 2001),AND[(date_dim.d_year = 2000),(date_dim.d_moy = 12)],AND[(date_dim.d_year = 2002),(date_dim.d_moy = 1)]] and d_year IN (2000, 2001, 2002))
------------------------------------PhysicalOlapScan[date_dim]
----------------------------PhysicalProject[store.s_company_name, store.s_store_name, store.s_store_sk]
------------------------------PhysicalOlapScan[store]
--PhysicalResultSink
----PhysicalProject[avg_monthly_sales, d_year, nsum, psum, s_store_name, sum_sales]
------PhysicalTopN[MERGE_SORT]
--------PhysicalDistribute[DistributionSpecGather]
----------PhysicalTopN[LOCAL_SORT]
------------PhysicalProject[(sum_sales - cast(avg_monthly_sales as DECIMALV3(38, 2))) AS `(sum_sales - cast(avg_monthly_sales as DECIMALV3(38, 2)))`, avg_monthly_sales AS `avg_monthly_sales`, d_year AS `d_year`, s_store_name AS `s_store_name`, sum_sales AS `nsum`, sum_sales AS `psum`, sum_sales AS `sum_sales`]
--------------hashJoin[INNER_JOIN bucketShuffle] hashCondition=((v1.i_brand = v1_lead.i_brand) and (v1.i_category = v1_lead.i_category) and (v1.rn = expr_(rn - 1)) and (v1.s_company_name = v1_lead.s_company_name) and (v1.s_store_name = v1_lead.s_store_name)) otherCondition=() build RFs:RF8 i_category->[i_category,i_category];RF9 i_brand->[i_brand,i_brand];RF10 s_store_name->[s_store_name,s_store_name];RF11 s_company_name->[s_company_name,s_company_name];RF12 expr_(rn - 1)->[(rn + 1),rn]
----------------PhysicalProject[v1.avg_monthly_sales, v1.d_year, v1.i_brand, v1.i_category, v1.rn, v1.s_company_name, v1.s_store_name, v1.sum_sales, v1_lag.sum_sales]
------------------hashJoin[INNER_JOIN shuffle] hashCondition=((v1.i_brand = v1_lag.i_brand) and (v1.i_category = v1_lag.i_category) and (v1.rn = expr_(rn + 1)) and (v1.s_company_name = v1_lag.s_company_name) and (v1.s_store_name = v1_lag.s_store_name)) otherCondition=() build RFs:RF3 i_category->[i_category];RF4 i_brand->[i_brand];RF5 s_store_name->[s_store_name];RF6 s_company_name->[s_company_name];RF7 rn->[(rn + 1)]
--------------------PhysicalProject[(rn + 1) AS `expr_(rn + 1)`, v1_lag.i_brand, v1_lag.i_category, v1_lag.s_company_name, v1_lag.s_store_name, v1_lag.sum_sales]
----------------------PhysicalCteConsumer ( cteId=CTEId#0 ) apply RFs: RF3 RF4 RF5 RF6 RF7 RF8 RF9 RF10 RF11 RF12
--------------------filter((if((avg_monthly_sales > 0.0000), (cast(abs((sum_sales - cast(avg_monthly_sales as DECIMALV3(38, 2)))) as DECIMALV3(38, 10)) / avg_monthly_sales), NULL) > 0.100000) and (v2.avg_monthly_sales > 0.0000) and (v2.d_year = 2001))
----------------------PhysicalCteConsumer ( cteId=CTEId#0 ) apply RFs: RF8 RF9 RF10 RF11 RF12
----------------PhysicalProject[(rn - 1) AS `expr_(rn - 1)`, v1_lead.i_brand, v1_lead.i_category, v1_lead.s_company_name, v1_lead.s_store_name, v1_lead.sum_sales]
------------------PhysicalCteConsumer ( cteId=CTEId#0 )

