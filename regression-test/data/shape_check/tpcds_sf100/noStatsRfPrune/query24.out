-- This file is automatically generated. You should know what you did if you want to edit this
-- !ds_shape_24 --
PhysicalCteAnchor ( cteId=CTEId#0 )
--PhysicalCteProducer ( cteId=CTEId#0 )
----PhysicalProject[ssales.c_last_name, ssales.c_first_name, ssales.s_store_name, ssales.i_color, ssales.netpaid]
------hashAgg[GLOBAL]
--------PhysicalDistribute[DistributionSpecHash]
----------hashAgg[LOCAL]
------------PhysicalProject[customer.c_last_name, customer.c_first_name, store.s_store_name, customer_address.ca_state, store.s_state, item.i_color, item.i_current_price, item.i_manager_id, item.i_units, item.i_size, store_sales.ss_net_profit]
--------------hashJoin[INNER_JOIN broadcast] hashCondition=((store.s_zip = customer_address.ca_zip) and (store_sales.ss_store_sk = store.s_store_sk)) otherCondition=() build RFs:RF5 s_zip->[ca_zip];RF6 s_store_sk->[ss_store_sk]
----------------PhysicalProject[store_sales.ss_store_sk, store_sales.ss_net_profit, item.i_current_price, item.i_size, item.i_color, item.i_units, item.i_manager_id, customer.c_first_name, customer.c_last_name, customer_address.ca_state, customer_address.ca_zip]
------------------hashJoin[INNER_JOIN broadcast] hashCondition=((customer.c_current_addr_sk = customer_address.ca_address_sk)) otherCondition=(( not (c_birth_country = upper(ca_country)))) build RFs:RF4 ca_address_sk->[c_current_addr_sk]
--------------------PhysicalProject[store_sales.ss_store_sk, store_sales.ss_net_profit, item.i_current_price, item.i_size, item.i_color, item.i_units, item.i_manager_id, customer.c_current_addr_sk, customer.c_first_name, customer.c_last_name, customer.c_birth_country]
----------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_customer_sk = customer.c_customer_sk)) otherCondition=() build RFs:RF3 c_customer_sk->[ss_customer_sk]
------------------------PhysicalProject[store_sales.ss_customer_sk, store_sales.ss_store_sk, store_sales.ss_net_profit, item.i_current_price, item.i_size, item.i_color, item.i_units, item.i_manager_id]
--------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_item_sk = item.i_item_sk)) otherCondition=()
----------------------------PhysicalProject[store_sales.ss_item_sk, store_sales.ss_customer_sk, store_sales.ss_store_sk, store_sales.ss_net_profit]
------------------------------hashJoin[INNER_JOIN colocated] hashCondition=((store_sales.ss_item_sk = store_returns.sr_item_sk) and (store_sales.ss_ticket_number = store_returns.sr_ticket_number)) otherCondition=()
--------------------------------PhysicalProject[store_sales.ss_item_sk, store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_store_sk, store_sales.ss_net_profit]
----------------------------------PhysicalOlapScan[store_sales] apply RFs: RF3 RF6
--------------------------------PhysicalProject[store_returns.sr_item_sk, store_returns.sr_ticket_number]
----------------------------------PhysicalOlapScan[store_returns]
----------------------------PhysicalProject[item.i_item_sk, item.i_current_price, item.i_size, item.i_color, item.i_units, item.i_manager_id]
------------------------------PhysicalOlapScan[item]
------------------------PhysicalProject[customer.c_customer_sk, customer.c_current_addr_sk, customer.c_first_name, customer.c_last_name, customer.c_birth_country]
--------------------------PhysicalOlapScan[customer] apply RFs: RF4
--------------------PhysicalProject[customer_address.ca_address_sk, customer_address.ca_state, customer_address.ca_zip, customer_address.ca_country]
----------------------PhysicalOlapScan[customer_address] apply RFs: RF5
----------------PhysicalProject[store.s_store_sk, store.s_store_name, store.s_state, store.s_zip]
------------------filter((store.s_market_id = 8))
--------------------PhysicalOlapScan[store]
--PhysicalResultSink
----PhysicalQuickSort[MERGE_SORT]
------PhysicalDistribute[DistributionSpecGather]
--------PhysicalQuickSort[LOCAL_SORT]
----------PhysicalProject[ssales.c_last_name, ssales.c_first_name, ssales.s_store_name, paid]
------------NestedLoopJoin[INNER_JOIN](cast(paid as DOUBLE) > cast((0.05 * avg(cast(netpaid as DECIMALV3(38, 4)))) as DOUBLE))
--------------PhysicalProject[ssales.c_last_name, ssales.c_first_name, ssales.s_store_name, paid, cast(paid as DOUBLE) AS `cast(paid as DOUBLE)`]
----------------hashAgg[GLOBAL]
------------------PhysicalDistribute[DistributionSpecHash]
--------------------hashAgg[LOCAL]
----------------------PhysicalDistribute[DistributionSpecExecutionAny]
------------------------PhysicalProject[ssales.c_last_name, ssales.c_first_name, ssales.s_store_name, ssales.netpaid]
--------------------------filter((ssales.i_color = 'beige'))
----------------------------PhysicalCteConsumer ( cteId=CTEId#0 )
--------------PhysicalProject[cast((0.05 * avg(cast(netpaid as DECIMALV3(38, 4)))) as DOUBLE) AS `cast((0.05 * avg(cast(netpaid as DECIMALV3(38, 4)))) as DOUBLE)`]
----------------hashAgg[GLOBAL]
------------------PhysicalDistribute[DistributionSpecGather]
--------------------hashAgg[LOCAL]
----------------------PhysicalDistribute[DistributionSpecExecutionAny]
------------------------PhysicalCteConsumer ( cteId=CTEId#0 )

