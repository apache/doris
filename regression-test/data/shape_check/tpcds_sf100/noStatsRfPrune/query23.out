-- This file is automatically generated. You should know what you did if you want to edit this
-- !ds_shape_23 --
PhysicalCteAnchor ( cteId=CTEId#0 )
--PhysicalCteProducer ( cteId=CTEId#0 )
----PhysicalProject[i_item_sk AS `item_sk`]
------filter((cnt > 4))
--------hashAgg[GLOBAL]
----------PhysicalDistribute[DistributionSpecHash]
------------hashAgg[LOCAL]
--------------PhysicalProject[substring(i_item_desc, 1, 30) AS `itemdesc`, item.i_item_sk, date_dim.d_date]
----------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF1 d_date_sk->[ss_sold_date_sk]
------------------PhysicalProject[store_sales.ss_sold_date_sk, item.i_item_sk, item.i_item_desc]
--------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_item_sk = item.i_item_sk)) otherCondition=()
----------------------PhysicalProject[store_sales.ss_sold_date_sk, store_sales.ss_item_sk]
------------------------PhysicalOlapScan[store_sales] apply RFs: RF1
----------------------PhysicalProject[item.i_item_sk, item.i_item_desc]
------------------------PhysicalOlapScan[item]
------------------PhysicalProject[date_dim.d_date_sk, date_dim.d_date]
--------------------filter(d_year IN (2000, 2001, 2002, 2003))
----------------------PhysicalOlapScan[date_dim]
--PhysicalCteAnchor ( cteId=CTEId#2 )
----PhysicalCteProducer ( cteId=CTEId#2 )
------PhysicalProject[best_ss_customer.c_customer_sk]
--------NestedLoopJoin[INNER_JOIN](cast(ssales as DOUBLE) > cast((0.9500 * tpcds_cmax) as DOUBLE))
----------PhysicalProject[customer.c_customer_sk, cast(ssales as DOUBLE) AS `cast(ssales as DOUBLE)`]
------------hashAgg[GLOBAL]
--------------PhysicalDistribute[DistributionSpecHash]
----------------hashAgg[LOCAL]
------------------PhysicalProject[ss_customer_sk AS `c_customer_sk`, (cast(ss_quantity as DECIMALV3(10, 0)) * ss_sales_price) AS `(cast(ss_quantity as DECIMALV3(10, 0)) * ss_sales_price)`]
--------------------filter(( not ss_customer_sk IS NULL))
----------------------PhysicalOlapScan[store_sales]
----------PhysicalProject[cast((0.9500 * tpcds_cmax) as DOUBLE) AS `cast((0.9500 * tpcds_cmax) as DOUBLE)`]
------------hashAgg[GLOBAL]
--------------PhysicalDistribute[DistributionSpecGather]
----------------hashAgg[LOCAL]
------------------PhysicalProject[t.csales]
--------------------hashAgg[GLOBAL]
----------------------PhysicalDistribute[DistributionSpecHash]
------------------------hashAgg[LOCAL]
--------------------------PhysicalProject[customer.c_customer_sk, (cast(ss_quantity as DECIMALV3(10, 0)) * ss_sales_price) AS `(cast(ss_quantity as DECIMALV3(10, 0)) * ss_sales_price)`]
----------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((store_sales.ss_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF2 d_date_sk->[ss_sold_date_sk]
------------------------------PhysicalProject[store_sales.ss_sold_date_sk, store_sales.ss_quantity, store_sales.ss_sales_price, ss_customer_sk AS `c_customer_sk`]
--------------------------------filter(( not ss_customer_sk IS NULL))
----------------------------------PhysicalOlapScan[store_sales] apply RFs: RF2
------------------------------PhysicalProject[date_dim.d_date_sk]
--------------------------------filter(d_year IN (2000, 2001, 2002, 2003))
----------------------------------PhysicalOlapScan[date_dim]
----PhysicalResultSink
------PhysicalLimit[GLOBAL]
--------PhysicalLimit[LOCAL]
----------hashAgg[GLOBAL]
------------PhysicalDistribute[DistributionSpecGather]
--------------hashAgg[LOCAL]
----------------PhysicalUnion
------------------PhysicalProject[(cast(cs_quantity as DECIMALV3(10, 0)) * cs_list_price) AS `sales`]
--------------------hashJoin[INNER_JOIN broadcast] hashCondition=((catalog_sales.cs_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF5 d_date_sk->[cs_sold_date_sk]
----------------------PhysicalProject[catalog_sales.cs_sold_date_sk, catalog_sales.cs_quantity, catalog_sales.cs_list_price]
------------------------hashJoin[LEFT_SEMI_JOIN shuffle] hashCondition=((catalog_sales.cs_item_sk = frequent_ss_items.item_sk)) otherCondition=()
--------------------------PhysicalProject[catalog_sales.cs_sold_date_sk, catalog_sales.cs_item_sk, catalog_sales.cs_quantity, catalog_sales.cs_list_price]
----------------------------hashJoin[LEFT_SEMI_JOIN shuffle] hashCondition=((catalog_sales.cs_bill_customer_sk = best_ss_customer.c_customer_sk)) otherCondition=()
------------------------------PhysicalProject[catalog_sales.cs_sold_date_sk, catalog_sales.cs_item_sk, catalog_sales.cs_bill_customer_sk, catalog_sales.cs_quantity, catalog_sales.cs_list_price]
--------------------------------PhysicalOlapScan[catalog_sales] apply RFs: RF5
------------------------------PhysicalCteConsumer ( cteId=CTEId#2 )
--------------------------PhysicalCteConsumer ( cteId=CTEId#0 )
----------------------PhysicalProject[date_dim.d_date_sk]
------------------------filter((date_dim.d_moy = 5) and (date_dim.d_year = 2000))
--------------------------PhysicalOlapScan[date_dim]
------------------PhysicalProject[(cast(ws_quantity as DECIMALV3(10, 0)) * ws_list_price) AS `sales`]
--------------------hashJoin[INNER_JOIN broadcast] hashCondition=((web_sales.ws_sold_date_sk = date_dim.d_date_sk)) otherCondition=() build RFs:RF8 d_date_sk->[ws_sold_date_sk]
----------------------PhysicalProject[web_sales.ws_sold_date_sk, web_sales.ws_quantity, web_sales.ws_list_price]
------------------------hashJoin[RIGHT_SEMI_JOIN shuffle] hashCondition=((web_sales.ws_item_sk = frequent_ss_items.item_sk)) otherCondition=() build RFs:RF7 ws_item_sk->[item_sk]
--------------------------PhysicalCteConsumer ( cteId=CTEId#0 ) apply RFs: RF7
--------------------------PhysicalProject[web_sales.ws_sold_date_sk, web_sales.ws_item_sk, web_sales.ws_quantity, web_sales.ws_list_price]
----------------------------hashJoin[LEFT_SEMI_JOIN shuffle] hashCondition=((web_sales.ws_bill_customer_sk = best_ss_customer.c_customer_sk)) otherCondition=()
------------------------------PhysicalProject[web_sales.ws_sold_date_sk, web_sales.ws_item_sk, web_sales.ws_bill_customer_sk, web_sales.ws_quantity, web_sales.ws_list_price]
--------------------------------PhysicalOlapScan[web_sales] apply RFs: RF8
------------------------------PhysicalCteConsumer ( cteId=CTEId#2 )
----------------------PhysicalProject[date_dim.d_date_sk]
------------------------filter((date_dim.d_moy = 5) and (date_dim.d_year = 2000))
--------------------------PhysicalOlapScan[date_dim]

