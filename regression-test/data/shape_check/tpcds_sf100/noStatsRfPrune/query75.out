-- This file is automatically generated. You should know what you did if you want to edit this
-- !ds_shape_75 --
PhysicalCteAnchor ( cteId=CTEId#0 )
--PhysicalCteProducer ( cteId=CTEId#0 )
----hashAgg[GLOBAL]
------PhysicalDistribute[DistributionSpecHash]
--------hashAgg[LOCAL]
----------hashAgg[GLOBAL]
------------hashAgg[LOCAL]
--------------PhysicalUnion
----------------hashAgg[GLOBAL]
------------------PhysicalDistribute[DistributionSpecHash]
--------------------hashAgg[LOCAL]
----------------------PhysicalProject[(cast(cs_ext_sales_price as DECIMALV3(8, 2)) - cast(coalesce(cr_return_amount, 0.00) as DECIMALV3(8, 2))) AS `sales_amt`, (cs_quantity - coalesce(cr_return_quantity, 0)) AS `sales_cnt`, date_dim.d_year, item.i_brand_id, item.i_category_id, item.i_class_id, item.i_manufact_id]
------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((date_dim.d_date_sk = catalog_sales.cs_sold_date_sk)) otherCondition=() build RFs:RF1 d_date_sk->[cs_sold_date_sk]
--------------------------PhysicalProject[catalog_returns.cr_return_amount, catalog_returns.cr_return_quantity, catalog_sales.cs_ext_sales_price, catalog_sales.cs_quantity, catalog_sales.cs_sold_date_sk, item.i_brand_id, item.i_category_id, item.i_class_id, item.i_manufact_id]
----------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((item.i_item_sk = catalog_sales.cs_item_sk)) otherCondition=() build RFs:RF0 i_item_sk->[cs_item_sk]
------------------------------PhysicalProject[catalog_returns.cr_return_amount, catalog_returns.cr_return_quantity, catalog_sales.cs_ext_sales_price, catalog_sales.cs_item_sk, catalog_sales.cs_quantity, catalog_sales.cs_sold_date_sk]
--------------------------------hashJoin[LEFT_OUTER_JOIN colocated] hashCondition=((catalog_sales.cs_item_sk = catalog_returns.cr_item_sk) and (catalog_sales.cs_order_number = catalog_returns.cr_order_number)) otherCondition=()
----------------------------------PhysicalProject[catalog_sales.cs_ext_sales_price, catalog_sales.cs_item_sk, catalog_sales.cs_order_number, catalog_sales.cs_quantity, catalog_sales.cs_sold_date_sk]
------------------------------------PhysicalOlapScan[catalog_sales] apply RFs: RF0 RF1
----------------------------------PhysicalProject[catalog_returns.cr_item_sk, catalog_returns.cr_order_number, catalog_returns.cr_return_amount, catalog_returns.cr_return_quantity]
------------------------------------PhysicalOlapScan[catalog_returns]
------------------------------PhysicalProject[item.i_brand_id, item.i_category_id, item.i_class_id, item.i_item_sk, item.i_manufact_id]
--------------------------------filter((item.i_category = 'Home'))
----------------------------------PhysicalOlapScan[item]
--------------------------PhysicalProject[date_dim.d_date_sk, date_dim.d_year]
----------------------------filter(d_year IN (1998, 1999))
------------------------------PhysicalOlapScan[date_dim]
----------------hashAgg[GLOBAL]
------------------PhysicalDistribute[DistributionSpecHash]
--------------------hashAgg[LOCAL]
----------------------PhysicalProject[(cast(ss_ext_sales_price as DECIMALV3(8, 2)) - cast(coalesce(sr_return_amt, 0.00) as DECIMALV3(8, 2))) AS `sales_amt`, (ss_quantity - coalesce(sr_return_quantity, 0)) AS `sales_cnt`, date_dim.d_year, item.i_brand_id, item.i_category_id, item.i_class_id, item.i_manufact_id]
------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((date_dim.d_date_sk = store_sales.ss_sold_date_sk)) otherCondition=() build RFs:RF3 d_date_sk->[ss_sold_date_sk]
--------------------------PhysicalProject[item.i_brand_id, item.i_category_id, item.i_class_id, item.i_manufact_id, store_returns.sr_return_amt, store_returns.sr_return_quantity, store_sales.ss_ext_sales_price, store_sales.ss_quantity, store_sales.ss_sold_date_sk]
----------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((item.i_item_sk = store_sales.ss_item_sk)) otherCondition=() build RFs:RF2 i_item_sk->[ss_item_sk]
------------------------------PhysicalProject[store_returns.sr_return_amt, store_returns.sr_return_quantity, store_sales.ss_ext_sales_price, store_sales.ss_item_sk, store_sales.ss_quantity, store_sales.ss_sold_date_sk]
--------------------------------hashJoin[LEFT_OUTER_JOIN colocated] hashCondition=((store_sales.ss_item_sk = store_returns.sr_item_sk) and (store_sales.ss_ticket_number = store_returns.sr_ticket_number)) otherCondition=()
----------------------------------PhysicalProject[store_sales.ss_ext_sales_price, store_sales.ss_item_sk, store_sales.ss_quantity, store_sales.ss_sold_date_sk, store_sales.ss_ticket_number]
------------------------------------PhysicalOlapScan[store_sales] apply RFs: RF2 RF3
----------------------------------PhysicalProject[store_returns.sr_item_sk, store_returns.sr_return_amt, store_returns.sr_return_quantity, store_returns.sr_ticket_number]
------------------------------------PhysicalOlapScan[store_returns]
------------------------------PhysicalProject[item.i_brand_id, item.i_category_id, item.i_class_id, item.i_item_sk, item.i_manufact_id]
--------------------------------filter((item.i_category = 'Home'))
----------------------------------PhysicalOlapScan[item]
--------------------------PhysicalProject[date_dim.d_date_sk, date_dim.d_year]
----------------------------filter(d_year IN (1998, 1999))
------------------------------PhysicalOlapScan[date_dim]
----------------hashAgg[GLOBAL]
------------------PhysicalDistribute[DistributionSpecHash]
--------------------hashAgg[LOCAL]
----------------------PhysicalProject[(cast(ws_ext_sales_price as DECIMALV3(8, 2)) - cast(coalesce(wr_return_amt, 0.00) as DECIMALV3(8, 2))) AS `sales_amt`, (ws_quantity - coalesce(wr_return_quantity, 0)) AS `sales_cnt`, date_dim.d_year, item.i_brand_id, item.i_category_id, item.i_class_id, item.i_manufact_id]
------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((date_dim.d_date_sk = web_sales.ws_sold_date_sk)) otherCondition=() build RFs:RF5 d_date_sk->[ws_sold_date_sk]
--------------------------PhysicalProject[item.i_brand_id, item.i_category_id, item.i_class_id, item.i_manufact_id, web_returns.wr_return_amt, web_returns.wr_return_quantity, web_sales.ws_ext_sales_price, web_sales.ws_quantity, web_sales.ws_sold_date_sk]
----------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((item.i_item_sk = web_sales.ws_item_sk)) otherCondition=() build RFs:RF4 i_item_sk->[ws_item_sk]
------------------------------PhysicalProject[web_returns.wr_return_amt, web_returns.wr_return_quantity, web_sales.ws_ext_sales_price, web_sales.ws_item_sk, web_sales.ws_quantity, web_sales.ws_sold_date_sk]
--------------------------------hashJoin[LEFT_OUTER_JOIN colocated] hashCondition=((web_sales.ws_item_sk = web_returns.wr_item_sk) and (web_sales.ws_order_number = web_returns.wr_order_number)) otherCondition=()
----------------------------------PhysicalProject[web_sales.ws_ext_sales_price, web_sales.ws_item_sk, web_sales.ws_order_number, web_sales.ws_quantity, web_sales.ws_sold_date_sk]
------------------------------------PhysicalOlapScan[web_sales] apply RFs: RF4 RF5
----------------------------------PhysicalProject[web_returns.wr_item_sk, web_returns.wr_order_number, web_returns.wr_return_amt, web_returns.wr_return_quantity]
------------------------------------PhysicalOlapScan[web_returns]
------------------------------PhysicalProject[item.i_brand_id, item.i_category_id, item.i_class_id, item.i_item_sk, item.i_manufact_id]
--------------------------------filter((item.i_category = 'Home'))
----------------------------------PhysicalOlapScan[item]
--------------------------PhysicalProject[date_dim.d_date_sk, date_dim.d_year]
----------------------------filter(d_year IN (1998, 1999))
------------------------------PhysicalOlapScan[date_dim]
--PhysicalResultSink
----PhysicalTopN[MERGE_SORT]
------PhysicalDistribute[DistributionSpecGather]
--------PhysicalTopN[LOCAL_SORT]
----------PhysicalProject[(sales_amt - sales_amt) AS `sales_amt_diff`, (sales_cnt - sales_cnt) AS `sales_cnt_diff`, curr_yr.i_brand_id, curr_yr.i_category_id, curr_yr.i_class_id, curr_yr.i_manufact_id, d_year AS `prev_year`, d_year AS `year`, sales_cnt AS `curr_yr_cnt`, sales_cnt AS `prev_yr_cnt`]
------------hashJoin[INNER_JOIN shuffle] hashCondition=((curr_yr.i_brand_id = prev_yr.i_brand_id) and (curr_yr.i_category_id = prev_yr.i_category_id) and (curr_yr.i_class_id = prev_yr.i_class_id) and (curr_yr.i_manufact_id = prev_yr.i_manufact_id)) otherCondition=(((cast(cast(sales_cnt as DECIMALV3(17, 2)) as DECIMALV3(23, 8)) / cast(sales_cnt as DECIMALV3(17, 2))) < 0.900000)) build RFs:RF6 i_brand_id->[i_brand_id];RF7 i_class_id->[i_class_id];RF8 i_category_id->[i_category_id];RF9 i_manufact_id->[i_manufact_id]
--------------filter((curr_yr.d_year = 1999))
----------------PhysicalCteConsumer ( cteId=CTEId#0 ) apply RFs: RF6 RF7 RF8 RF9
--------------filter((prev_yr.d_year = 1998))
----------------PhysicalCteConsumer ( cteId=CTEId#0 )

