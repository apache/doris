-- This file is automatically generated. You should know what you did if you want to edit this
-- !select --
PhysicalResultSink
--PhysicalQuickSort[MERGE_SORT]
----PhysicalDistribute[DistributionSpecGather]
------PhysicalQuickSort[LOCAL_SORT]
--------hashAgg[GLOBAL]
----------PhysicalDistribute[DistributionSpecHash]
------------hashAgg[LOCAL]
--------------PhysicalProject[n_name AS `nation`, year(o_orderdate) AS `o_year`, (cast((l_extendedprice * (1.00 - cast(l_discount as DECIMALV3(16, 2)))) as DECIMALV3(32, 4)) - cast((ps_supplycost * l_quantity) as DECIMALV3(32, 4))) AS `amount`]
----------------hashJoin[INNER_JOIN bucketShuffle] hashCondition=((partsupp.ps_partkey = lineitem.l_partkey) and (partsupp.ps_suppkey = lineitem.l_suppkey)) otherCondition=() build RFs:RF4 ps_suppkey->[l_suppkey,s_suppkey];RF5 ps_partkey->[l_partkey,p_partkey]
------------------PhysicalProject[lineitem.l_partkey, lineitem.l_suppkey, lineitem.l_quantity, lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate, nation.n_name]
--------------------hashJoin[INNER_JOIN shuffle] hashCondition=((supplier.s_suppkey = lineitem.l_suppkey)) otherCondition=() build RFs:RF3 s_suppkey->[l_suppkey]
----------------------PhysicalProject[lineitem.l_partkey, lineitem.l_suppkey, lineitem.l_quantity, lineitem.l_extendedprice, lineitem.l_discount, orders.o_orderdate]
------------------------hashJoin[INNER_JOIN bucketShuffle] hashCondition=((orders.o_orderkey = lineitem.l_orderkey)) otherCondition=() build RFs:RF2 l_orderkey->[o_orderkey]
--------------------------PhysicalProject[orders.o_orderkey, orders.o_orderdate]
----------------------------PhysicalOlapScan[orders] apply RFs: RF2
--------------------------PhysicalProject[lineitem.l_orderkey, lineitem.l_partkey, lineitem.l_suppkey, lineitem.l_quantity, lineitem.l_extendedprice, lineitem.l_discount]
----------------------------hashJoin[INNER_JOIN shuffle] hashCondition=((part.p_partkey = lineitem.l_partkey)) otherCondition=() build RFs:RF1 p_partkey->[l_partkey]
------------------------------PhysicalProject[lineitem.l_orderkey, lineitem.l_partkey, lineitem.l_suppkey, lineitem.l_quantity, lineitem.l_extendedprice, lineitem.l_discount]
--------------------------------PhysicalOlapScan[lineitem] apply RFs: RF1 RF3 RF4 RF5
------------------------------PhysicalProject[part.p_partkey]
--------------------------------filter((p_name like '%green%'))
----------------------------------PhysicalOlapScan[part] apply RFs: RF5
----------------------PhysicalProject[supplier.s_suppkey, nation.n_name]
------------------------hashJoin[INNER_JOIN broadcast] hashCondition=((supplier.s_nationkey = nation.n_nationkey)) otherCondition=() build RFs:RF0 n_nationkey->[s_nationkey]
--------------------------PhysicalProject[supplier.s_suppkey, supplier.s_nationkey]
----------------------------PhysicalOlapScan[supplier] apply RFs: RF0 RF4
--------------------------PhysicalProject[nation.n_nationkey, nation.n_name]
----------------------------PhysicalOlapScan[nation]
------------------PhysicalProject[partsupp.ps_partkey, partsupp.ps_suppkey, partsupp.ps_supplycost]
--------------------PhysicalOlapScan[partsupp]

