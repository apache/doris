-- This file is automatically generated. You should know what you did if you want to edit this
-- !string_1_shape --
PhysicalResultSink
--PhysicalProject['helloa' AS `concat("hello", d_char10)`, 'helloab' AS `concat("hello", d_char100)`, 'helloabc' AS `concat("hello", d_varchar)`, 'helloabcd' AS `concat("hello", d_string)`, t1.d_char10, t1.d_char100, t1.d_string, t1.d_varchar]
----filter((t1.d_char10 = 'a') and (t1.d_char100 = 'ab') and (t1.d_string = 'abcd') and (t1.d_varchar = 'abc'))
------PhysicalOlapScan[t1]

-- !string_1_result --

-- !datetime_1_shape --
PhysicalResultSink
--PhysicalProject['2020-10-11 01:02:03' AS `date_add(d_datetimev2, interval 1 DAY)`, '2020-10-11 01:02:03.456' AS `date_add(d_datetime3, interval 1 DAY)`, '2023-01-02' AS `date_add(d_date, interval 1 day)`]
----filter((t1.d_date = '2023-01-01') and (t1.d_datetime3 = '2020-10-10 01:02:03.456') and (t1.d_datetimev2 = '2020-10-10 01:02:03'))
------PhysicalOlapScan[t1]

-- !datetime_1_result --

-- !project_1_shape --
PhysicalResultSink
--PhysicalProject[40 AS `(d_int + 10) * 2`, d_int AS `a`, t1.d_int]
----filter((t1.d_int = 10))
------PhysicalOlapScan[t1]

-- !project_1_result --

-- !project_2_shape --
PhysicalResultSink
--PhysicalProject[300 AS `d_int * (20 - 10)`, 450 AS `(10 + 5) * d_int`, t1.d_int]
----filter((t1.d_int = 30))
------PhysicalOlapScan[t1]

-- !project_2_result --

-- !filter_1_shape --
PhysicalResultSink
--PhysicalProject[1 AS `1`]
----filter((t1.a = 1) and (t1.b = 2) and (t1.c = 3) and (t1.d = 4))
------PhysicalOlapScan[t1]

-- !filter_1_result --
1

-- !sort_1_shape --
PhysicalResultSink
--PhysicalProject[t1.a, t1.b, t1.c]
----filter((t1.a = 1) and (t1.b = 2) and (t1.c = 3))
------PhysicalOlapScan[t1]

-- !sort_1_result --
1	2	3

-- !sort_2_shape --
PhysicalResultSink
--PhysicalProject[t1.a, t1.b, t1.c]
----PhysicalQuickSort[MERGE_SORT, orderKeys=((cast(b as BIGINT) + cast(c as BIGINT)) asc null first)]
------PhysicalQuickSort[LOCAL_SORT, orderKeys=((cast(b as BIGINT) + cast(c as BIGINT)) asc null first)]
--------PhysicalProject[(cast(c as BIGINT) + 2) AS `(cast(b as BIGINT) + cast(c as BIGINT))`, t1.a, t1.b, t1.c]
----------filter((t1.a = 1) and (t1.b = 2))
------------PhysicalOlapScan[t1]

-- !sort_2_result --
1	2	3

-- !sort_3_shape --
PhysicalResultSink
--PhysicalProject[t1.a, t1.b, t1.c]
----PhysicalQuickSort[MERGE_SORT, orderKeys=((cast(a as BIGINT) + cast(b as BIGINT)) asc null first)]
------PhysicalQuickSort[LOCAL_SORT, orderKeys=((cast(a as BIGINT) + cast(b as BIGINT)) asc null first)]
--------PhysicalProject[(cast(a as BIGINT) + 2) AS `(cast(a as BIGINT) + cast(b as BIGINT))`, t1.a, t1.b, t1.c]
----------filter((t1.b = 2) and (t1.c = 3))
------------PhysicalOlapScan[t1]

-- !sort_3_result --
1	2	3

-- !sort_4_shape --
PhysicalResultSink
--PhysicalProject[t1.a, t1.b, t1.c]
----filter((t1.a = 1))
------PhysicalOlapScan[t1]

-- !sort_4_result --
1	2	3

-- !join_1_shape --
PhysicalResultSink
--NestedLoopJoin[CROSS_JOIN]
----PhysicalProject[t2.x, t2.y, t2.z]
------filter(((cast(x as BIGINT) + cast(y as BIGINT)) = 1))
--------PhysicalOlapScan[t2]
----PhysicalProject[t1.a, t1.b, t1.c]
------filter((t1.a = 1) and (t1.b = 1))
--------PhysicalOlapScan[t1]

-- !join_1_result --

-- !join_2_shape --
PhysicalResultSink
--NestedLoopJoin[LEFT_OUTER_JOIN]
----PhysicalProject[t1.a]
------PhysicalOlapScan[t1]
----PhysicalEmptyRelation

-- !join_2_result --
1	\N
10	\N

-- !join_3_shape --
PhysicalResultSink
--NestedLoopJoin[FULL_OUTER_JOIN]FALSE
----PhysicalProject[t1.a]
------PhysicalOlapScan[t1]
----PhysicalProject[t2.x]
------PhysicalOlapScan[t2]

-- !join_3_result --
\N	1
\N	10
1	\N
10	\N

-- !join_4_shape --
PhysicalResultSink
--NestedLoopJoin[CROSS_JOIN]
----PhysicalProject[t1.a]
------filter((t1.a = 10))
--------PhysicalOlapScan[t1]
----PhysicalProject[t2.x]
------filter((t2.x = 1))
--------PhysicalOlapScan[t2]

-- !join_4_result --
10	1

-- !join_5_shape --
PhysicalResultSink
--PhysicalProject[t1.a, t2.x]
----NestedLoopJoin[LEFT_OUTER_JOIN](a = 10)
------PhysicalProject[(a = 10) AS `(a = 10)`, t1.a]
--------PhysicalOlapScan[t1]
------PhysicalProject[t2.x]
--------filter((t2.x = 1))
----------PhysicalOlapScan[t2]

-- !join_5_result --
1	\N
10	1

-- !join_6_shape --
PhysicalResultSink
--PhysicalProject[t1.a, t2.x]
----NestedLoopJoin[FULL_OUTER_JOIN](a = 10)(x = 1)
------PhysicalProject[(a = 10) AS `(a = 10)`, t1.a]
--------PhysicalOlapScan[t1]
------PhysicalProject[(x = 1) AS `(x = 1)`, t2.x]
--------PhysicalOlapScan[t2]

-- !join_6_result --
\N	10
1	\N
10	1

-- !join_7_shape --
PhysicalResultSink
--NestedLoopJoin[LEFT_SEMI_JOIN]
----PhysicalProject[t1.a]
------filter((t1.a = 10))
--------PhysicalOlapScan[t1]
----PhysicalProject[1 AS `1`]
------filter((t2.x = 1))
--------PhysicalOlapScan[t2]

-- !join_7_result --
10

-- !join_8_shape --
PhysicalResultSink
--PhysicalProject[t1.a]
----NestedLoopJoin[LEFT_ANTI_JOIN](a = 10)
------PhysicalProject[(a = 10) AS `(a = 10)`, t1.a]
--------PhysicalOlapScan[t1]
------PhysicalProject[1 AS `1`]
--------filter((t2.x = 1))
----------PhysicalOlapScan[t2]

-- !join_8_result --
1

-- !join_9_shape --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t2.x = t3.a)) otherCondition=() build RFs:RF0 a->[x]
----NestedLoopJoin[CROSS_JOIN]
------PhysicalProject[t2.x]
--------filter(((cast(x as BIGINT) * 10) = 10))
----------PhysicalOlapScan[t2] apply RFs: RF0
------PhysicalProject[t1.a]
--------filter((t1.a = 10))
----------PhysicalOlapScan[t1]
----PhysicalProject[t3.a]
------filter(((cast(a as BIGINT) * 10) = 10) and (t3.__DORIS_DELETE_SIGN__ = 0))
--------PhysicalOlapScan[t3]

-- !join_9_result --
10	1	1

-- !subquery_1_shape --
PhysicalResultSink
--PhysicalEmptyRelation

-- !subquery_1_result --

-- !subquery_2_shape --
PhysicalResultSink
--NestedLoopJoin[INNER_JOIN]
----PhysicalProject[s1.a]
------filter((t1.a = 1))
--------PhysicalOlapScan[t1]
----PhysicalProject[s2.x]
------filter((s2.x = 1))
--------PhysicalOlapScan[t2]

-- !subquery_2_result --
1	1

-- !subquery_3_shape --
PhysicalResultSink
--PhysicalEmptyRelation

-- !subquery_3_result --

-- !subquery_4_shape --
PhysicalResultSink
--NestedLoopJoin[LEFT_SEMI_JOIN]
----PhysicalProject[t1.a, t1.b, t1.c]
------filter((t1.a = 1))
--------PhysicalOlapScan[t1]
----PhysicalProject[t2.x]
------filter((t2.x = 1))
--------PhysicalOlapScan[t2]

-- !subquery_4_result --
1	2	3

-- !subquery_5_shape --
PhysicalResultSink
--PhysicalEmptyRelation

-- !subquery_5_result --

-- !subquery_6_shape --
PhysicalResultSink
--NestedLoopJoin[LEFT_SEMI_JOIN]
----PhysicalProject[t1.a, t1.b, t1.c]
------filter((t1.a = 1))
--------PhysicalOlapScan[t1]
----PhysicalProject[1 AS `1`]
------filter((t2.x = 1) and (t2.y = 2))
--------PhysicalOlapScan[t2]

-- !subquery_6_result --
1	2	3

-- !subquery_7_shape --
PhysicalResultSink
--NestedLoopJoin[CROSS_JOIN]
----PhysicalProject[t2.x]
------filter(((cast(x as BIGINT) * 10) = 10))
--------PhysicalOlapScan[t2]
----PhysicalProject[t.a]
------filter((t1.a = 10))
--------PhysicalOlapScan[t1]

-- !subquery_7_result --
10	1

-- !subquery_8_shape --
PhysicalResultSink
--NestedLoopJoin[CROSS_JOIN]
----PhysicalUnion
------PhysicalProject[(cast(a as BIGINT) * 10) AS `k`, t1.b]
--------filter(((cast(a as BIGINT) * 10) = 10))
----------PhysicalOlapScan[t1]
------PhysicalProject[cast(x as BIGINT) AS `k`, y AS `b`]
--------filter((t2.x = 10))
----------PhysicalOlapScan[t2]
----PhysicalProject[t3.a]
------filter((t3.__DORIS_DELETE_SIGN__ = 0) and (t3.a = 2))
--------PhysicalOlapScan[t3]

-- !subquery_8_result --
10	2	2
10	20	2

-- !subquery_9_shape --
PhysicalResultSink
--NestedLoopJoin[CROSS_JOIN]
----PhysicalExcept RFV2: RF0[k->cast(x as BIGINT)]
------PhysicalProject[(cast(a as BIGINT) * 10) AS `k`, t1.b]
--------filter(((cast(a as BIGINT) * 10) = 10))
----------PhysicalOlapScan[t1]
------PhysicalProject[cast(x as BIGINT) AS `k`, y AS `b`]
--------filter((t2.x = 10))
----------PhysicalOlapScan[t2] RFV2: RF0
----PhysicalProject[t3.a]
------filter((t3.__DORIS_DELETE_SIGN__ = 0) and (t3.a = 2))
--------PhysicalOlapScan[t3]

-- !subquery_9_result --
10	2	2

-- !subquery_10_shape --
PhysicalResultSink
--NestedLoopJoin[CROSS_JOIN]
----PhysicalIntersect RFV2: RF0[k->(cast(a as BIGINT) * 10)]
------PhysicalProject[cast(x as BIGINT) AS `k`, y AS `b`]
--------filter((t2.x = 10))
----------PhysicalOlapScan[t2]
------PhysicalProject[(cast(a as BIGINT) * 10) AS `k`, t1.b]
--------filter(((cast(a as BIGINT) * 10) = 10))
----------PhysicalOlapScan[t1] RFV2: RF0
----PhysicalProject[t3.a]
------filter((t3.__DORIS_DELETE_SIGN__ = 0) and (t3.a = 2))
--------PhysicalOlapScan[t3]

-- !subquery_10_result --

-- !subquery_10_shape --
PhysicalResultSink
--NestedLoopJoin[LEFT_SEMI_JOIN]
----PhysicalProject[t1.a]
------filter((t1.a = 10))
--------PhysicalOlapScan[t1]
----PhysicalProject[1 AS `1`]
------filter((t2.x = 1))
--------PhysicalOlapScan[t2]

-- !subquery_10_result --
10

-- !subquery_11_shape --
PhysicalResultSink
--NestedLoopJoin[LEFT_SEMI_JOIN]
----PhysicalProject[t1.a]
------filter((t1.a = 10))
--------PhysicalOlapScan[t1]
----PhysicalProject[1 AS `1`]
------filter((t2.x = 20))
--------PhysicalOlapScan[t2]

-- !subquery_11_result --

-- !subquery_12_shape --
PhysicalResultSink
--NestedLoopJoin[LEFT_SEMI_JOIN]
----PhysicalProject[t1.a]
------filter((t1.a = 10))
--------PhysicalOlapScan[t1]
----PhysicalProject[1 AS `1`]
------filter((t2.x = 1))
--------PhysicalOlapScan[t2]

-- !subquery_12_result --
10

-- !subquery_13_shape --
PhysicalResultSink
--NestedLoopJoin[LEFT_SEMI_JOIN]
----PhysicalProject[t1.a]
------filter((t1.a = 10))
--------PhysicalOlapScan[t1]
----PhysicalProject[1 AS `1`]
------filter((t2.x = 20))
--------PhysicalOlapScan[t2]

-- !subquery_13_result --

-- !subquery_14_shape --
PhysicalResultSink
--PhysicalProject[t1.a]
----NestedLoopJoin[LEFT_ANTI_JOIN](a = 10)
------PhysicalProject[(a = 10) AS `(a = 10)`, t1.a]
--------PhysicalOlapScan[t1]
------PhysicalProject[1 AS `1`]
--------filter((t2.x = 1))
----------PhysicalOlapScan[t2]

-- !subquery_14_result --
1

-- !subquery_15_shape --
PhysicalResultSink
--PhysicalProject[t1.a]
----NestedLoopJoin[LEFT_ANTI_JOIN](a = 10)
------PhysicalProject[(a = 10) AS `(a = 10)`, t1.a]
--------PhysicalOlapScan[t1]
------PhysicalProject[1 AS `1`]
--------filter((t2.x = 20))
----------PhysicalOlapScan[t2]

-- !subquery_15_result --
1
10

-- !agg_1_shape --
PhysicalResultSink
--PhysicalLimit[GLOBAL]
----PhysicalProject[13 AS `k`, 3 AS `a + b`]
------filter((t1.a = 1) and (t1.b = 2))
--------PhysicalOlapScan[t1]

-- !agg_1_result --
3	13

-- !agg_2_shape --
PhysicalResultSink
--PhysicalProject[1 AS `a`, t1.b]
----hashAgg[GLOBAL, groupByExpr=(t1.b), outputExpr=(t1.b)]
------hashAgg[LOCAL, groupByExpr=(t1.b), outputExpr=(t1.b)]
--------PhysicalProject[t1.b]
----------filter((t1.a = 1))
------------PhysicalOlapScan[t1]

-- !agg_2_result --
1	2

-- !agg_3_shape --
PhysicalResultSink
--PhysicalLimit[GLOBAL]
----PhysicalProject[1 AS `a`, 2 AS `b`]
------filter((t1.a = 1) and (t1.b = 2))
--------PhysicalOlapScan[t1]

-- !agg_3_result --
1	2

-- !agg_4_shape --
PhysicalResultSink
--PhysicalProject[1 AS `a`, 2 AS `b`, 3 AS `k`, t1.c]
----hashAgg[GLOBAL, groupByExpr=(t1.c), outputExpr=(t1.c)]
------hashAgg[LOCAL, groupByExpr=(t1.c), outputExpr=(t1.c)]
--------PhysicalProject[t1.c]
----------filter((t1.a = 1) and (t1.b = 2))
------------PhysicalOlapScan[t1]

-- !agg_4_result --
1	2	3	3

-- !agg_5_shape --
PhysicalResultSink
--PhysicalEmptyRelation

-- !agg_5_result --

-- !agg_6_shape --
PhysicalResultSink
--PhysicalProject[10 AS `a`, count(a)]
----filter((sum(b) > 10))
------hashAgg[GLOBAL, groupByExpr=(t1.a), outputExpr=(count(10) AS `count(a)`, sum(b) AS `sum(b)`, t1.a)]
--------hashAgg[LOCAL, groupByExpr=(t1.a), outputExpr=(partial_count(10) AS `partial_count(10)`, partial_sum(b) AS `partial_sum(b)`, t1.a)]
----------PhysicalProject[t1.a, t1.b]
------------filter((t1.a = 10))
--------------PhysicalOlapScan[t1]

-- !agg_6_result --
10	1

-- !agg_7_shape --
PhysicalResultSink
--PhysicalEmptyRelation

-- !agg_7_result --

-- !union_1_shape --
PhysicalResultSink
--PhysicalLimit[GLOBAL]
----PhysicalUnion

-- !union_1_result --
1

-- !union_2_shape --
PhysicalResultSink
--PhysicalUnion

-- !union_2_result --
1
1

-- !union_3_shape --
PhysicalResultSink
--PhysicalLimit[GLOBAL]
----PhysicalUnion
------PhysicalProject[-1 AS `k2`, 3 AS `k1`, c AS `k3`]
--------filter((t1.a = 1) and (t1.b = 2) and (t1.c = 3))
----------PhysicalOlapScan[t1]
------PhysicalProject[-1 AS `k2`, 3 AS `k1`, z AS `k3`]
--------filter((t2.x = 1) and (t2.y = 2) and (t2.z = 3))
----------PhysicalOlapScan[t2]

-- !union_3_result --
3	-1	3

-- !union_4_shape --
PhysicalResultSink
--PhysicalUnion
----PhysicalProject[-1 AS `k2`, 3 AS `k1`, c AS `k3`]
------filter((t1.a = 1) and (t1.b = 2) and (t1.c = 3))
--------PhysicalOlapScan[t1]
----PhysicalProject[-1 AS `k2`, 3 AS `k1`, z AS `k3`]
------filter((t2.x = 1) and (t2.y = 2) and (t2.z = 3))
--------PhysicalOlapScan[t2]

-- !union_4_result --
3	-1	3
3	-1	3

-- !union_5_shape --
PhysicalResultSink
--PhysicalProject[3 AS `k3`, t.k1, t.k2]
----hashAgg[GLOBAL, groupByExpr=(t.k1, t.k2), outputExpr=(t.k1, t.k2)]
------hashAgg[LOCAL, groupByExpr=(t.k1, t.k2), outputExpr=(t.k1, t.k2)]
--------PhysicalUnion
----------PhysicalProject[(cast(a as BIGINT) + cast(b as BIGINT)) AS `k1`, (cast(a as BIGINT) - cast(b as BIGINT)) AS `k2`]
------------filter(((cast(a as BIGINT) + cast(b as BIGINT)) = 3) and ((cast(a as BIGINT) - cast(b as BIGINT)) = -1) and (t1.c = 3))
--------------PhysicalOlapScan[t1]
----------PhysicalProject[(cast(x as BIGINT) + cast(y as BIGINT)) AS `k1`, (cast(x as BIGINT) - cast(y as BIGINT)) AS `k2`]
------------filter(((cast(x as BIGINT) + cast(y as BIGINT)) = 3) and ((cast(x as BIGINT) - cast(y as BIGINT)) = -1) and (t2.z = 3))
--------------PhysicalOlapScan[t2]

-- !union_5_result --
3	-1	3

-- !union_6_shape --
PhysicalResultSink
--PhysicalUnion
----PhysicalProject[(cast(a as BIGINT) + cast(b as BIGINT)) AS `k1`, (cast(a as BIGINT) - cast(b as BIGINT)) AS `k2`, c AS `k3`]
------filter(((cast(a as BIGINT) + cast(b as BIGINT)) = 3) and ((cast(a as BIGINT) - cast(b as BIGINT)) = -1) and (t1.c = 3))
--------PhysicalOlapScan[t1]
----PhysicalProject[(cast(x as BIGINT) + cast(y as BIGINT)) AS `k1`, (cast(x as BIGINT) - cast(y as BIGINT)) AS `k2`, z AS `k3`]
------filter(((cast(x as BIGINT) + cast(y as BIGINT)) = 3) and ((cast(x as BIGINT) - cast(y as BIGINT)) = -1) and (t2.z = 3))
--------PhysicalOlapScan[t2]

-- !union_6_result --
3	-1	3
3	-1	3

-- !union_7_shape --
PhysicalResultSink
--PhysicalLimit[GLOBAL]
----PhysicalUnion

-- !union_7_result --
10

-- !union_8_shape --
PhysicalResultSink
--PhysicalUnion

-- !union_8_result --
10
10

-- !union_9_shape --
PhysicalResultSink
--PhysicalLimit[GLOBAL]
----PhysicalUnion
------PhysicalProject[a AS `a`]
--------filter((t1.a = 10))
----------PhysicalOlapScan[t1]

-- !union_9_result --
10

-- !union_10_shape --
PhysicalResultSink
--PhysicalUnion
----PhysicalProject[a AS `a`]
------filter((t1.a = 10))
--------PhysicalOlapScan[t1]

-- !union_10_result --
10
10

-- !union_11_shape --
PhysicalResultSink
--PhysicalLimit[GLOBAL]
----PhysicalUnion
------PhysicalProject[10 AS `a`]
--------filter((t1.b = 9))
----------PhysicalOlapScan[t1]

-- !union_11_result --
10

-- !union_12_shape --
PhysicalResultSink
--PhysicalLimit[GLOBAL]
----PhysicalUnion
------PhysicalProject[10 AS `a`]
--------filter((t1.b = 9))
----------PhysicalOlapScan[t1]

-- !union_12_result --
10

-- !union_13_shape --
PhysicalResultSink
--PhysicalLimit[GLOBAL]
----PhysicalProject[a AS `a`]
------filter((t1.a = 1))
--------PhysicalOlapScan[t1]

-- !union_13_result --
1

-- !union_14_shape --
PhysicalResultSink
--PhysicalProject[a AS `a`]
----filter((t1.a = 1))
------PhysicalOlapScan[t1]

-- !union_14_result --
1

-- !union_15_shape --
PhysicalResultSink
--PhysicalLimit[GLOBAL]
----PhysicalUnion
------PhysicalProject[a AS `a`]
--------filter((t1.a = 1))
----------PhysicalOlapScan[t1]

-- !union_15_result --
1

-- !union_16_shape --
PhysicalResultSink
--PhysicalUnion
----PhysicalProject[a AS `a`]
------filter((t1.a = 1))
--------PhysicalOlapScan[t1]

-- !union_16_result --
1
1

-- !union_17_shape --
PhysicalResultSink
--PhysicalLimit[GLOBAL]
----PhysicalUnion
------PhysicalProject[3 AS `a + b`, t1.a]
--------filter((t1.a = 1) and (t1.b = 2))
----------PhysicalOlapScan[t1]

-- !union_17_result --
1	3

-- !union_18_shape --
PhysicalResultSink
--PhysicalUnion
----PhysicalLimit[GLOBAL]
------PhysicalUnion
----PhysicalProject[3 AS `a + b`, t1.a]
------filter((t1.a = 1) and (t1.b = 2))
--------PhysicalOlapScan[t1]

-- !union_18_result --
1	3
1	3

-- !union_19_shape --
PhysicalResultSink
--PhysicalUnion
----PhysicalProject[10 AS `a`]
------filter((t1.b = 9))
--------PhysicalOlapScan[t1]

-- !union_19_result --
10

-- !intersect_1_shape --
PhysicalResultSink
--PhysicalEmptyRelation

-- !intersect_1_result --

-- !intersect_2_shape --
PhysicalResultSink
--PhysicalIntersect
----PhysicalProject[3 AS `k`, t1.a]
------filter((t1.a = 1) and (t1.b = 2))
--------PhysicalOlapScan[t1]
----PhysicalProject[3 AS `k`, t2.x]
------filter((t2.x = 1) and (t2.y = 2))
--------PhysicalOlapScan[t2]

-- !intersect_2_result --
1	3

-- !update_1_shape --
PhysicalOlapTableSink
--PhysicalProject[0 AS `__DORIS_DELETE_SIGN__`, 0 AS `__DORIS_VERSION_COL__`, 11 AS `d`, a AS `a`, cast((cast(b as BIGINT) + 1) as INT) AS `b`, cast((cast(b as BIGINT) + 1) as SMALLINT) AS `c`]
----filter((t3.__DORIS_DELETE_SIGN__ = 0) and (t3.a = 1))
------PhysicalOlapScan[t3]

-- !update_1_result --
1	11	11	11
2	20	200	2000
3	30	300	3000

-- !update_2_shape --
PhysicalOlapTableSink
--PhysicalProject[0 AS `__DORIS_DELETE_SIGN__`, 0 AS `__DORIS_VERSION_COL__`, a AS `a`, a AS `b`, cast(a as BIGINT) AS `d`, cast(a as SMALLINT) AS `c`]
----filter((t3.__DORIS_DELETE_SIGN__ = 0) and (t3.a = 1))
------PhysicalOlapScan[t3]

-- !update_2_result --
1	1	1	1
2	20	200	2000
3	30	300	3000

-- !no_replace_1_shape --
PhysicalResultSink
--hashAgg[GLOBAL, groupByExpr=(), outputExpr=(count(*) AS `count(1)`)]
----hashAgg[LOCAL, groupByExpr=(), outputExpr=(partial_count(*) AS `partial_count(*)`)]
------PhysicalProject[1 AS `1`]
--------filter((t1.d_string = '012345') and (t1.d_string MATCH_ANY '012345'))
----------PhysicalOlapScan[t1]

-- !no_replace_1_result --
1

