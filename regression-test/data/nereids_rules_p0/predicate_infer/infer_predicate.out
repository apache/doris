-- This file is automatically generated. You should know what you did if you want to edit this
-- !infer_predicate_basic_join --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
------filter((t1.score > 10))
--------PhysicalOlapScan[t]
------PhysicalOlapScan[t]

-- !infer_predicate_join_with_filter --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
------filter((t1.score > 10))
--------PhysicalOlapScan[t] apply RFs: RF0
------filter((t2.name = 'Alice'))
--------PhysicalOlapScan[t]

-- !infer_predicate_left_join --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
------filter((t1.score > 20))
--------PhysicalOlapScan[t]
------PhysicalOlapScan[t]

-- !infer_predicate_right_join --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[RIGHT_OUTER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
------PhysicalOlapScan[t] apply RFs: RF0
------filter((t2.score > 20))
--------PhysicalOlapScan[t]

-- !infer_predicate_full_outer_join --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----filter(((t1.name = 'Test') OR (t2.name = 'Test')))
------hashJoin[FULL_OUTER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
--------PhysicalOlapScan[t]
--------PhysicalOlapScan[t]

-- !infer_predicate_left_semi_join --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_SEMI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
------filter((t1.score > 20))
--------PhysicalOlapScan[t]
------PhysicalOlapScan[t]

-- !infer_predicate_left_anti_join --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_SEMI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
------filter((t1.score > 20))
--------PhysicalOlapScan[t]
------PhysicalOlapScan[t]

-- !infer_predicate_from_subquery --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((t.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
------filter((t1.id = 1))
--------PhysicalOlapScan[t] apply RFs: RF0
------filter((t2.id = 1))
--------PhysicalOlapScan[t]

-- !infer_predicate_multi_level_join --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((t2.id = t3.id)) otherCondition=() build RFs:RF1 id->[id]
------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
--------PhysicalOlapScan[t] apply RFs: RF0
--------PhysicalOlapScan[t] apply RFs: RF1
------filter((t3.name = 'Test'))
--------PhysicalOlapScan[t]

-- !infer_predicate_join_with_project_limit --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
----PhysicalLimit[GLOBAL]
------PhysicalDistribute[DistributionSpecGather]
--------PhysicalLimit[LOCAL]
----------PhysicalOlapScan[t] apply RFs: RF0
----PhysicalDistribute[DistributionSpecReplicated]
------filter((t2.score > 20))
--------PhysicalOlapScan[t]

-- !infer_predicate_with_union --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((t.id = t3.id)) otherCondition=()
------hashAgg[GLOBAL]
--------PhysicalDistribute[DistributionSpecHash]
----------hashAgg[LOCAL]
------------PhysicalUnion
--------------PhysicalDistribute[DistributionSpecExecutionAny]
----------------filter((t1.id = 1))
------------------PhysicalOlapScan[t]
--------------PhysicalDistribute[DistributionSpecExecutionAny]
----------------PhysicalOlapScan[t]
------PhysicalDistribute[DistributionSpecReplicated]
--------PhysicalOlapScan[t]

-- !infer_predicate_with_except --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((t.id = t3.id)) otherCondition=()
------PhysicalExcept
--------PhysicalDistribute[DistributionSpecHash]
----------PhysicalOlapScan[t]
--------PhysicalDistribute[DistributionSpecHash]
----------PhysicalOlapScan[t]
------PhysicalDistribute[DistributionSpecReplicated]
--------PhysicalOlapScan[t]

-- !infer_predicate_with_subquery --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_SEMI_JOIN] hashCondition=((t1.id = t.id)) otherCondition=() build RFs:RF0 id->[id]
------PhysicalOlapScan[t] apply RFs: RF0
------filter((t.score > 60))
--------PhysicalOlapScan[t]

-- !infer_predicate_complex_condition --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=((t1.score > t2.score))
------filter((t1.name = 'Test'))
--------PhysicalOlapScan[t]
------PhysicalOlapScan[t]

-- !infer_predicate_with_window_function --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----PhysicalWindow
------PhysicalQuickSort[LOCAL_SORT]
--------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
----------PhysicalOlapScan[t] apply RFs: RF0
----------filter((t2.name = 'Charlie'))
------------PhysicalOlapScan[t]

-- !infer_predicate_with_aggregate --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashAgg[LOCAL]
------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
--------filter((t1.id > 70))
----------PhysicalOlapScan[t] apply RFs: RF0
--------filter((t2.id > 70))
----------PhysicalOlapScan[t]

-- !infer_predicate_complex_and_or_logic --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=(((t1.score > 80) OR ((t2.name = 'Dave') AND (t1.id < 50))))
------filter(((t1.score > 80) OR (t1.id < 50)))
--------PhysicalOlapScan[t]
------PhysicalOlapScan[t]

-- !infer_predicate_multiple_join_filter --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id) and (t1.name = t2.name)) otherCondition=() build RFs:RF0 id->[id];RF1 name->[name]
------filter((t1.score > 90))
--------PhysicalOlapScan[t] apply RFs: RF0 RF1
------filter((t2.score < 60))
--------PhysicalOlapScan[t]

-- !infer_predicate_join_with_not_exists --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_ANTI_JOIN] hashCondition=((t2.id = t1.id)) otherCondition=()
------PhysicalOlapScan[t]
------filter((t2.score > 100))
--------PhysicalOlapScan[t]

-- !infer_predicate_complex_subquery --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_SEMI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
------PhysicalOlapScan[t] apply RFs: RF0
------filter((t2.name = 'Frank') and (t2.score > 110))
--------PhysicalOlapScan[t]

-- !infer_predicate_join_with_function_processed --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((expr_length(name) = expr_length(name))) otherCondition=()
------filter((t1.score > 120))
--------PhysicalOlapScan[t]
------PhysicalDistribute[DistributionSpecReplicated]
--------PhysicalOlapScan[t]

-- !infer_predicate_nested_subqueries --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----filter((t.score > 130) and (t1.id < 70) and (t2.name = 'George'))
------PhysicalOlapScan[t]

-- !infer_predicate_join_with_aggregate_having --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----filter((sum(score) > 140))
------hashAgg[LOCAL]
--------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
----------PhysicalOlapScan[t]
----------PhysicalOlapScan[t]

-- !infer_predicate_mixed_join_types --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[RIGHT_OUTER_JOIN] hashCondition=((t1.id = t3.id)) otherCondition=() build RFs:RF0 id->[id]
------hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
--------PhysicalOlapScan[t] apply RFs: RF0
--------PhysicalOlapScan[t]
------filter((t3.score > 150))
--------PhysicalOlapScan[t]

-- !infer_predicate_join_with_distinct --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashAgg[LOCAL]
------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
--------filter((t1.score > 160))
----------PhysicalOlapScan[t]
--------PhysicalOlapScan[t]

-- !infer_predicate_join_with_case_when --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
------filter((if((score > 170), 'high', 'low') = 'high'))
--------PhysicalOlapScan[t]
------PhysicalOlapScan[t]

-- !infer_predicate_self_join --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
------filter((t1.score > 10))
--------PhysicalOlapScan[t]
------PhysicalOlapScan[t]

-- !infer_predicate_complex_multitable_join --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((t1.id = t3.id)) otherCondition=() build RFs:RF1 id->[id]
------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
--------filter((t1.score > 20))
----------PhysicalOlapScan[t] apply RFs: RF1
--------PhysicalOlapScan[t]
------filter((t3.name = 'Helen'))
--------PhysicalOlapScan[t]

-- !infer_predicate_aggregate_subquery --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----filter((t_agg.total > 30))
------hashAgg[LOCAL]
--------PhysicalOlapScan[t]

-- !infer_predicate_join_with_function --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----NestedLoopJoin[INNER_JOIN](abs((score - score)) < 40)
------PhysicalOlapScan[t]
------PhysicalDistribute[DistributionSpecReplicated]
--------PhysicalOlapScan[t]

-- !infer_predicate_subquery_filter --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_SEMI_JOIN] hashCondition=((t1.id = t.id)) otherCondition=() build RFs:RF0 id->[id]
------PhysicalOlapScan[t] apply RFs: RF0
------filter((t.score > 50))
--------PhysicalOlapScan[t]

-- !infer_predicate_with_not_operator --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----filter((t1.score <= 60))
------PhysicalOlapScan[t]

-- !infer_predicate_complex_nested_subquery --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_SEMI_JOIN] hashCondition=((t.score = t.score)) otherCondition=() build RFs:RF0 score->[score]
------filter((t.score > 80) and (t1.id > 10))
--------PhysicalOlapScan[t] apply RFs: RF0
------PhysicalDistribute[DistributionSpecReplicated]
--------filter((t.score > 80))
----------PhysicalOlapScan[t]

-- !infer_predicate_multi_join_subquery_aggregate --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashAgg[LOCAL]
------hashJoin[LEFT_SEMI_JOIN] hashCondition=((t2.id = t.id)) otherCondition=() build RFs:RF2 id->[id]
--------hashJoin[INNER_JOIN] hashCondition=((t1.id = t3.id)) otherCondition=()
----------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
------------PhysicalOlapScan[t] apply RFs: RF0
------------PhysicalOlapScan[t] apply RFs: RF2
----------PhysicalOlapScan[t]
--------filter((t.score > 100))
----------PhysicalOlapScan[t]

-- !infer_predicate_multi_join_complex_condition_not_exists --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_ANTI_JOIN] hashCondition=((t4.id = t3.id)) otherCondition=()
------hashJoin[INNER_JOIN] hashCondition=((t1.id = t3.id)) otherCondition=()
--------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
----------filter((t1.score > 110))
------------PhysicalOlapScan[t]
----------PhysicalOlapScan[t]
--------PhysicalOlapScan[t]
------PhysicalOlapScan[t]

-- !infer_predicate_multi_join_complex_subquery --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((t1.id = t3.id)) otherCondition=() build RFs:RF1 id->[id]
------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
--------PhysicalOlapScan[t] apply RFs: RF1
--------PhysicalOlapScan[t]
------filter((t.score > 130))
--------PhysicalOlapScan[t]

-- !infer_predicate_multi_join_with_having_clause --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----filter((sum(score) > 150))
------hashAgg[LOCAL]
--------hashJoin[INNER_JOIN] hashCondition=((t1.id = t3.id)) otherCondition=()
----------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
------------PhysicalOlapScan[t]
------------PhysicalOlapScan[t]
----------PhysicalOlapScan[t]

-- !infer0 --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
------filter((t1.id = 1))
--------PhysicalOlapScan[t1] apply RFs: RF0
------PhysicalDistribute[DistributionSpecHash]
--------filter((t2.id = 1))
----------PhysicalOlapScan[t2]

-- !infer1 --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((t1.id = t3.id)) otherCondition=() build RFs:RF1 id->[id]
------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
--------filter((t1.id = 1))
----------PhysicalOlapScan[t1] apply RFs: RF0 RF1
--------PhysicalDistribute[DistributionSpecHash]
----------filter((t2.id = 1))
------------PhysicalOlapScan[t2]
------PhysicalDistribute[DistributionSpecHash]
--------filter((t3.id = 1))
----------PhysicalOlapScan[t]

-- !infer2 --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=((t1.id = 1))
------PhysicalOlapScan[t1]
------PhysicalDistribute[DistributionSpecHash]
--------filter((t2.id = 1))
----------PhysicalOlapScan[t2]

-- !infer3 --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[FULL_OUTER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=((t1.id = 1))
------PhysicalDistribute[DistributionSpecHash]
--------PhysicalOlapScan[t1]
------PhysicalDistribute[DistributionSpecHash]
--------PhysicalOlapScan[t2]

-- !infer4 --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_SEMI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
------filter((t1.id = 1))
--------PhysicalOlapScan[t1] apply RFs: RF0
------PhysicalDistribute[DistributionSpecHash]
--------filter((t2.id = 1))
----------PhysicalOlapScan[t2]

-- !infer5 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.id = t3.id)) otherCondition=() build RFs:RF1 id->[id]
----hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
------filter((t1.id = 1))
--------PhysicalLimit[GLOBAL]
----------PhysicalDistribute[DistributionSpecGather]
------------PhysicalLimit[LOCAL]
--------------PhysicalOlapScan[t1] apply RFs: RF0 RF1
------PhysicalDistribute[DistributionSpecReplicated]
--------filter((t2.id = 1))
----------PhysicalOlapScan[t2]
----PhysicalDistribute[DistributionSpecReplicated]
------filter((t3.id = 1))
--------PhysicalOlapScan[t]

-- !infer6 --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.id = t2.id) and (t1.name = t2.name)) otherCondition=((t1.id = 1))
------PhysicalOlapScan[t1]
------PhysicalDistribute[DistributionSpecHash]
--------filter((t2.id = 1) and (t2.name = 'bob'))
----------PhysicalOlapScan[t2]

-- !infer7 --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((t12.id = t34.id)) otherCondition=() build RFs:RF2 id->[id]
------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF1 id->[id]
--------filter((t1.id < 9) and (t1.id > 1))
----------PhysicalOlapScan[t1] apply RFs: RF1 RF2
--------PhysicalDistribute[DistributionSpecHash]
----------filter((t2.id < 9) and (t2.id > 1))
------------PhysicalOlapScan[t2]
------PhysicalDistribute[DistributionSpecHash]
--------hashJoin[INNER_JOIN] hashCondition=((t3.id = t4.id)) otherCondition=() build RFs:RF0 id->[id]
----------filter(( not (id = 3)) and (t34.id < 9) and (t34.id > 1))
------------PhysicalOlapScan[t3] apply RFs: RF0
----------PhysicalDistribute[DistributionSpecHash]
------------filter(( not (id = 4)) and (t4.id < 9) and (t4.id > 1))
--------------PhysicalOlapScan[t4]

-- !infer8 --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----NestedLoopJoin[INNER_JOIN]( not (id = id))
------filter((t1.id = 1))
--------PhysicalOlapScan[t1]
------PhysicalDistribute[DistributionSpecReplicated]
--------PhysicalOlapScan[t2]

-- !infer9 --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
------filter((cast(id as BIGINT) = 2147483648))
--------PhysicalOlapScan[t1] apply RFs: RF0
------PhysicalDistribute[DistributionSpecHash]
--------filter((cast(id as BIGINT) = 2147483648))
----------PhysicalOlapScan[t2]

-- !infer10 --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((expr_cast(id as SMALLINT) = expr_cast(id as SMALLINT))) otherCondition=() build RFs:RF0 expr_cast(id as SMALLINT)->[id]
------filter((cast(id as BIGINT) = 2147483648))
--------PhysicalOlapScan[t1] apply RFs: RF0
------PhysicalDistribute[DistributionSpecReplicated]
--------filter((cast(id as BIGINT) = 2147483648))
----------PhysicalOlapScan[t2]

-- !infer11 --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN] hashCondition=((expr_cast(id as LARGEINT) = expr_cast(id as LARGEINT))) otherCondition=() build RFs:RF0 expr_cast(id as LARGEINT)->[id]
------filter((cast(id as BIGINT) = 2147483648))
--------PhysicalOlapScan[t1] apply RFs: RF0
------PhysicalDistribute[DistributionSpecReplicated]
--------filter((cast(id as BIGINT) = 2147483648))
----------PhysicalOlapScan[t2]

