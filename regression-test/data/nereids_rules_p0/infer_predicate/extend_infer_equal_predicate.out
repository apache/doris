-- This file is automatically generated. You should know what you did if you want to edit this
-- !test_integer_cast --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = expr_cast(d_tinyint as INT))) otherCondition=()
----filter((t1.d_tinyint < 10))
------PhysicalOlapScan[extend_infer_t1]
----PhysicalOlapScan[extend_infer_t1]

-- !test_simple_compare --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----filter((t1.d_int < 10))
------PhysicalOlapScan[extend_infer_t1]
----filter((t2.d_int < 10))
------PhysicalOlapScan[extend_infer_t1]

-- !test_simple_compare_not_equal --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----filter(( not (d_int = 10)))
------PhysicalOlapScan[extend_infer_t1]
----filter(( not (d_int = 10)))
------PhysicalOlapScan[extend_infer_t1]

-- !test_simple_compare_datetimev2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datetimev2 = t2.d_datetimev2)) otherCondition=()
----filter((t1.d_datetimev2 = '2024-01-01 00:00:00'))
------PhysicalOlapScan[extend_infer_t1]
----filter((t2.d_datetimev2 = '2024-01-01 00:00:00'))
------PhysicalOlapScan[extend_infer_t1]

-- !test_simple_compare_not_equal_datetimev2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datetimev2 = t2.d_datetimev2)) otherCondition=()
----filter(( not (d_datetimev2 = '2024-01-01 00:00:00')))
------PhysicalOlapScan[extend_infer_t1]
----filter(( not (d_datetimev2 = '2024-01-01 00:00:00')))
------PhysicalOlapScan[extend_infer_t1]

-- !test_not_in --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----filter(( not d_int IN (10, 20)))
------PhysicalOlapScan[extend_infer_t1]
----filter(( not d_int IN (10, 20)))
------PhysicalOlapScan[extend_infer_t1]

-- !test_in --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----filter(d_int IN (10, 20))
------PhysicalOlapScan[extend_infer_t1]
----filter(d_int IN (10, 20))
------PhysicalOlapScan[extend_infer_t1]

-- !test_func_not_in --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----filter(( not abs(d_int) IN (10, 20)))
------PhysicalOlapScan[extend_infer_t1]
----filter(( not abs(d_int) IN (10, 20)))
------PhysicalOlapScan[extend_infer_t1]

-- !test_like --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_char100 = t2.d_char100)) otherCondition=()
----filter((d_char100 like '012%'))
------PhysicalOlapScan[extend_infer_t1]
----filter((d_char100 like '012%'))
------PhysicalOlapScan[extend_infer_t1]

-- !test_like_not --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_char100 = t2.d_char100)) otherCondition=()
----PhysicalOlapScan[extend_infer_t1]
----filter(( not (d_char100 like '012%')))
------PhysicalOlapScan[extend_infer_t1]

-- !test_like_to_equal --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_char100 = t2.d_char100)) otherCondition=()
----filter((t1.d_char100 = '012'))
------PhysicalOlapScan[extend_infer_t1]
----filter((t2.d_char100 = '012'))
------PhysicalOlapScan[extend_infer_t1]

-- !test_func_not_in_and_func_equal_condition --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_abs(d_int) = expr_abs(d_int))) otherCondition=()
----filter(( not abs(d_int) IN (10, 20)))
------PhysicalOlapScan[extend_infer_t1]
----filter(( not abs(d_int) IN (10, 20)))
------PhysicalOlapScan[extend_infer_t1]

-- !test_between_and --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
----filter((t1.a <= 10) and (t1.a >= 1))
------PhysicalOlapScan[extend_infer_t3]
----filter((t2.a <= 10) and (t2.a >= 1))
------PhysicalOlapScan[extend_infer_t4]

-- !test_and --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
----filter((t1.a <= 10) and (t1.a >= 2))
------PhysicalOlapScan[extend_infer_t3]
----filter((t2.a <= 10) and (t2.a >= 2))
------PhysicalOlapScan[extend_infer_t4]

-- !test_or1 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
----filter(((t1.a < 2) OR (t1.a > 10)))
------PhysicalOlapScan[extend_infer_t3]
----PhysicalOlapScan[extend_infer_t4]

-- !test_or2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
----filter(((t1.a < 2) OR (t1.a > 10)))
------PhysicalOlapScan[extend_infer_t3]
----PhysicalOlapScan[extend_infer_t4]

-- !test_sign_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
----filter((sign(cast(a as DOUBLE)) >= 1))
------PhysicalOlapScan[extend_infer_t3]
----filter((sign(cast(a as DOUBLE)) >= 1))
------PhysicalOlapScan[extend_infer_t4]

-- !test_if_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----PhysicalOlapScan[extend_infer_t1]
----filter(if(( not d_int IN (10, 20)), TRUE, FALSE))
------PhysicalOlapScan[extend_infer_t1]

-- !test_if_and_in_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----filter(( not (if((d_int = 5), TRUE, FALSE) = FALSE)))
------PhysicalOlapScan[extend_infer_t1]
----filter(( not (if((d_int = 5), TRUE, FALSE) = FALSE)))
------PhysicalOlapScan[extend_infer_t1]

-- !test_if_and_in_predicate_not --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----filter(( not (if((d_int = 5), TRUE, FALSE) = FALSE)))
------PhysicalOlapScan[extend_infer_t1]
----filter(( not (if((d_int = 5), TRUE, FALSE) = FALSE)))
------PhysicalOlapScan[extend_infer_t1]

-- !test_multi_slot_in_predicate1 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_(a + c) = expr_(a + c))) otherCondition=()
----filter(((t1.a + t1.c) < 10))
------PhysicalOlapScan[extend_infer_t3]
----filter(((t2.a + t2.c) < 10))
------PhysicalOlapScan[extend_infer_t4]

-- !test_multi_slot_in_predicate2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.a = t2.a) and (t1.b = t2.b)) otherCondition=()
----filter(((cast(a as DOUBLE) + cast(b as DOUBLE)) < 10.0))
------PhysicalOlapScan[extend_infer_t3]
----PhysicalOlapScan[extend_infer_t4]

-- !test_case_when_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----PhysicalOlapScan[extend_infer_t1]
----filter(CASE WHEN (d_int = 1) THEN TRUE WHEN (d_int = 2) THEN FALSE ELSE FALSE END)
------PhysicalOlapScan[extend_infer_t1]

-- !test_datetimev2_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datetimev2 = t2.d_datetimev2)) otherCondition=()
----filter((convert_tz(date_trunc(d_datetimev2, 'month'), 'Asia/Shanghai', 'Europe/Paris') = '2024-01-01 00:00:00'))
------PhysicalOlapScan[extend_infer_t1]
----filter((convert_tz(date_trunc(d_datetimev2, 'month'), 'Asia/Shanghai', 'Europe/Paris') = '2024-01-01 00:00:00'))
------PhysicalOlapScan[extend_infer_t1]

-- !test_convert_tz_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datetimev2 = t2.d_datetimev2)) otherCondition=()
----filter((convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris') > '2022-01-01 00:00:00'))
------PhysicalOlapScan[extend_infer_t1]
----filter((convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris') > '2022-01-01 00:00:00'))
------PhysicalOlapScan[extend_infer_t2]

-- !test_next_date_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datetimev2 = t2.d_datetimev2)) otherCondition=()
----filter((dayofmonth(hours_add(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'), 10)) > 10))
------PhysicalOlapScan[extend_infer_t1]
----filter((dayofmonth(hours_add(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'), 10)) > 10))
------PhysicalOlapScan[extend_infer_t2]

-- !test_random_nest_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datetimev2 = t2.d_datetimev2)) otherCondition=()
----filter((dayofmonth(hours_add(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'), cast(random(1, 10) as INT))) > 10))
------PhysicalOlapScan[extend_infer_t1]
----PhysicalOlapScan[extend_infer_t2]

-- !test_random_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
----filter((cast(a as DOUBLE) > random(10)))
------PhysicalOlapScan[extend_infer_t3]
----PhysicalOlapScan[extend_infer_t4]

-- !test_predicate_map --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datetimev2 = t2.d_datetimev2)) otherCondition=()
----filter((convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris') < '2022-01-01 00:00:00') and (dayofmonth(hours_add(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'), 10)) > 10))
------PhysicalOlapScan[extend_infer_t1]
----filter((convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris') < '2022-01-01 00:00:00') and (dayofmonth(hours_add(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'), 10)) > 10))
------PhysicalOlapScan[extend_infer_t2]

-- !test_int_upcast --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = expr_cast(d_tinyint as INT))) otherCondition=()
----filter((t1.d_int < 10))
------PhysicalOlapScan[extend_infer_t1]
----filter((cast(d_tinyint as INT) < 10) and (t2.d_tinyint < 10))
------PhysicalOlapScan[extend_infer_t1]

-- !test_int_downcast --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_cast(d_int as TINYINT) = t2.d_tinyint)) otherCondition=()
----filter((cast(d_int as TINYINT) < 10))
------PhysicalOlapScan[extend_infer_t1]
----filter((t2.d_tinyint < 10))
------PhysicalOlapScan[extend_infer_t1]

-- !test_date_upcast --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_cast(d_datev2 as DATETIMEV2(0)) = t2.d_datetimev2)) otherCondition=()
----filter((t1.d_datev2 < '2022-01-03'))
------PhysicalOlapScan[extend_infer_t1]
----filter((t2.d_datetimev2 < '2022-01-03 00:00:00'))
------PhysicalOlapScan[extend_infer_t2]

-- !test_date_downcast --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datev2 = expr_cast(d_datetimev2 as DATEV2))) otherCondition=()
----filter((t1.d_datev2 < '2022-01-03'))
------PhysicalOlapScan[extend_infer_t1]
----filter((cast(d_datetimev2 as DATEV2) < '2022-01-03'))
------PhysicalOlapScan[extend_infer_t2]

-- !test_date_both_upcast1 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_cast(d_datev2 as DATETIMEV2(0)) = expr_cast(d_date as DATETIMEV2(0)))) otherCondition=()
----filter((t1.d_datev2 < '2022-01-03'))
------PhysicalOlapScan[extend_infer_t1]
----filter((t2.d_date < '2022-01-03'))
------PhysicalOlapScan[extend_infer_t2]

-- !test_date_both_upcast2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datetime = expr_cast(d_date as DATETIMEV2(0)))) otherCondition=()
----filter((t1.d_datetime < '2022-01-03 00:00:00'))
------PhysicalOlapScan[extend_infer_t1]
----filter((t2.d_date < '2022-01-03'))
------PhysicalOlapScan[extend_infer_t2]

-- !test_char_different_type1 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_char100 = t2.d_char10)) otherCondition=()
----filter((t1.d_char100 > 'abc'))
------PhysicalOlapScan[extend_infer_t1]
----filter((t2.d_char10 > 'abc'))
------PhysicalOlapScan[extend_infer_t1]

-- !test_char_different_type2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_substring(cast(d_char100 as CHAR(50)), 1, 50) = t2.d_char10)) otherCondition=()
----filter((substring(cast(d_char100 as CHAR(50)), 1, 50) > 'abc'))
------PhysicalOlapScan[extend_infer_t1]
----filter((t2.d_char10 > 'abc'))
------PhysicalOlapScan[extend_infer_t1]

-- !test_char_different_type3 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_substring(cast(d_char100 as CHAR(50)), 1, 50) = expr_substring(cast(d_char10 as CHAR(50)), 1, 50))) otherCondition=()
----PhysicalOlapScan[extend_infer_t1]
----filter((t2.d_char10 > 'abc'))
------PhysicalOlapScan[extend_infer_t1]

-- !test_char_different_type4 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_substring(cast(d_char100 as CHAR(200)), 1, 200) = expr_substring(cast(d_char10 as CHAR(200)), 1, 200))) otherCondition=()
----PhysicalOlapScan[extend_infer_t1]
----filter((t2.d_char10 > 'abc'))
------PhysicalOlapScan[extend_infer_t1]

-- !test_cast_and_func --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_abs(d_int) = expr_cast(d_tinyint as BIGINT))) otherCondition=()
----PhysicalOlapScan[extend_infer_t1]
----filter((t2.d_tinyint < 10))
------PhysicalOlapScan[extend_infer_t1]

-- !test_cast_and_func2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_cast(abs(d_int) as TINYINT) = t2.d_tinyint)) otherCondition=()
----filter((cast(abs(d_int) as TINYINT) < 10))
------PhysicalOlapScan[extend_infer_t1]
----filter((t2.d_tinyint < 10))
------PhysicalOlapScan[extend_infer_t1]

-- !test_cast_and_func3 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_cast(cast(d_int as TINYINT) as SMALLINT) = expr_abs(d_tinyint))) otherCondition=()
----filter((cast(cast(d_int as TINYINT) as SMALLINT) < 10))
------PhysicalOlapScan[extend_infer_t1]
----filter((abs(d_tinyint) < 10))
------PhysicalOlapScan[extend_infer_t1]

-- !test_cast_and_func4 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = expr_cast(abs(d_tinyint) as INT))) otherCondition=()
----PhysicalOlapScan[extend_infer_t1]
----filter((abs(d_tinyint) < 10))
------PhysicalOlapScan[extend_infer_t1]

-- !test_func_equal_and_nest_func_pred1 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris') = expr_convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'))) otherCondition=()
----filter((dayofmonth(hours_add(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'), 10)) > 10))
------PhysicalOlapScan[extend_infer_t1]
----filter((dayofmonth(hours_add(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'), 10)) > 10))
------PhysicalOlapScan[extend_infer_t2]

-- !test_func_equal_and_nest_func_pred2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris') = expr_convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'))) otherCondition=()
----filter((dayofmonth(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris')) > 10))
------PhysicalOlapScan[extend_infer_t1]
----filter((dayofmonth(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris')) > 10))
------PhysicalOlapScan[extend_infer_t2]

-- !predicate_to_empty_relation --
PhysicalResultSink
--hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.a = t3.a)) otherCondition=()
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
------filter((t1.a = 2))
--------PhysicalOlapScan[extend_infer_t3]
------PhysicalEmptyRelation
----filter((t3.a = 2))
------PhysicalOlapScan[extend_infer_t4]

-- !equal_table_predicate_delete --
PhysicalResultSink
--filter((extend_infer_t3.a = 1) and (extend_infer_t3.c = 1))
----PhysicalOlapScan[extend_infer_t3]

-- !test_integer_cast_res --

-- !test_simple_compare_res --
1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00	1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00

-- !test_simple_compare_not_equal_res --
1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00	1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00
14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02	14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02

-- !test_simple_compare_datetimev2_res --

-- !test_simple_compare_not_equal_datetimev2_res --
1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00	1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00
14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02	14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02

-- !test_not_in_res --
1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00	1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00
14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02	14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02

-- !test_in_res --

-- !test_func_not_in_res --
1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00	1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00
14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02	14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02

-- !test_like_res --

-- !test_like_not_res --

-- !test_like_to_equal_res --

-- !test_func_not_in_and_func_equal_condition_res --
1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00	1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00
14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02	14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02

-- !test_between_and_res --

-- !test_and_res --

-- !test_or1_res --
0	d2	3	5	0	d2	2	2
33	d2	2	5	33	d2	23	5
78	\N	9	3	78	d2	23	5
100	d2	3	5	100	d2	3	\N

-- !test_or2_res --
0	d2	3	5	0	d2	2	2
33	d2	2	5	33	d2	23	5
78	\N	9	3	78	d2	23	5
100	d2	3	5	100	d2	3	\N

-- !test_sign_predicate_res --
33	d2	2	5	33	d2	23	5
78	\N	9	3	78	d2	23	5
100	d2	3	5	100	d2	3	\N

-- !test_if_predicate_res --
1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00	1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00
14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02	14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02

-- !test_if_and_in_predicate_res --

-- !test_if_and_in_predicate_not_res --

-- !test_multi_slot_in_predicate1_res --

-- !test_multi_slot_in_predicate2_res --

-- !test_case_when_predicate_res --
1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00	1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00

-- !test_datetimev2_predicate_res --

-- !test_convert_tz_predicate_res --

-- !test_next_date_predicate_res --
14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02	14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02

-- !test_random_nest_predicate_res --
14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02	14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02

-- !test_random_predicate_res --
33	d2	2	5	33	d2	23	5
78	\N	9	3	78	d2	23	5
100	d2	3	5	100	d2	3	\N

-- !test_predicate_map_res --
14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02	14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02

-- !test_int_upcast_res --

-- !test_int_downcast_res --

-- !test_date_upcast_res --

-- !test_date_downcast_res --
1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00	1	01234567890123456789	3	3	0123456789	2020-01-09T10:00:01	2020-01-09	2022-08-09	2022-08-09T10:00
14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02	14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02

-- !test_date_both_upcast1_res --

-- !test_date_both_upcast2_res --

-- !test_char_different_type1_res --

-- !test_char_different_type2_res --

-- !test_char_different_type3_res --

-- !test_char_different_type4_res --

-- !test_cast_and_func_res --

-- !test_cast_and_func2_res --

-- !test_cast_and_func3_res --

-- !test_cast_and_func4_res --

-- !test_func_equal_and_nest_func_pred1_res --
14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02	14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02

-- !test_func_equal_and_nest_func_pred2_res --
14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02	14	01234567890123456789	33	23	0123456789	2020-01-11T10:00:01	2020-01-11	2022-08-03	2022-08-09T10:00:02

-- !predicate_to_empty_relation_res --

-- !equal_table_predicate_delete_res --

-- !not_equal_inner_left --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t3.d_int = t.c1)) otherCondition=()
----filter(( not (d_int = 10)))
------PhysicalOlapScan[extend_infer_t1]
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((c1 = t2.d_int)) otherCondition=()
------filter(( not (d_int = 10)))
--------PhysicalOlapScan[extend_infer_t1]
------filter(( not (d_int = 10)))
--------PhysicalOlapScan[extend_infer_t1]

-- !not_equal_inner_left2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t3.d_int = t.c1)) otherCondition=()
----filter(( not (d_int = 10)))
------PhysicalOlapScan[extend_infer_t1]
----hashJoin[INNER_JOIN] hashCondition=((t1.d_int = c1)) otherCondition=()
------filter(( not (d_int = 10)))
--------PhysicalOlapScan[extend_infer_t1]
------filter(( not (d_int = 10)))
--------PhysicalOlapScan[extend_infer_t1]

-- !not_equal_left_inner --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t3.d_int = t.c1)) otherCondition=()
----filter(( not (d_int = 10)))
------PhysicalOlapScan[extend_infer_t1]
----hashJoin[INNER_JOIN] hashCondition=((c1 = t2.d_int)) otherCondition=()
------filter(( not (d_int = 10)))
--------PhysicalOlapScan[extend_infer_t1]
------filter(( not (d_int = 10)))
--------PhysicalOlapScan[extend_infer_t1]

-- !not_equal_left_left --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t3.d_int = t.c1)) otherCondition=()
----filter(( not (d_int = 10)))
------PhysicalOlapScan[extend_infer_t1]
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((c1 = t2.d_int)) otherCondition=()
------filter(( not (d_int = 10)))
--------PhysicalOlapScan[extend_infer_t1]
------filter(( not (d_int = 10)))
--------PhysicalOlapScan[extend_infer_t1]

-- !not_equal_left_left2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t3.d_int = t.c1)) otherCondition=()
----filter(( not (d_int = 10)))
------PhysicalOlapScan[extend_infer_t1]
----hashJoin[INNER_JOIN] hashCondition=((t1.d_int = c1)) otherCondition=()
------filter(( not (d_int = 10)))
--------PhysicalOlapScan[extend_infer_t1]
------filter(( not (d_int = 10)))
--------PhysicalOlapScan[extend_infer_t1]

-- !not_in_inner_right --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t3.d_int = t.c1)) otherCondition=()
----filter(( not d_int IN (10, 20)))
------PhysicalOlapScan[extend_infer_t1]
----hashJoin[INNER_JOIN] hashCondition=((c1 = t2.d_int)) otherCondition=()
------filter(( not d_int IN (10, 20)))
--------PhysicalOlapScan[extend_infer_t1]
------filter(( not d_int IN (10, 20)))
--------PhysicalOlapScan[extend_infer_t1]

-- !not_in_inner_right2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t3.d_int = t.c1)) otherCondition=()
----filter(( not d_int IN (10, 20)))
------PhysicalOlapScan[extend_infer_t1]
----hashJoin[RIGHT_OUTER_JOIN] hashCondition=((t1.d_int = c1)) otherCondition=()
------filter(( not d_int IN (10, 20)))
--------PhysicalOlapScan[extend_infer_t1]
------filter(( not d_int IN (10, 20)))
--------PhysicalOlapScan[extend_infer_t1]

-- !not_in_right_inner --
PhysicalResultSink
--hashJoin[RIGHT_OUTER_JOIN] hashCondition=((t3.d_int = t.c1)) otherCondition=()
----filter(( not d_int IN (10, 20)))
------PhysicalOlapScan[extend_infer_t1]
----hashJoin[INNER_JOIN] hashCondition=((c1 = t2.d_int)) otherCondition=()
------filter(( not d_int IN (10, 20)))
--------PhysicalOlapScan[extend_infer_t1]
------filter(( not d_int IN (10, 20)))
--------PhysicalOlapScan[extend_infer_t1]

-- !not_in_right_right --
PhysicalResultSink
--hashJoin[RIGHT_OUTER_JOIN] hashCondition=((t3.d_int = t.c1)) otherCondition=()
----filter(( not d_int IN (10, 20)))
------PhysicalOlapScan[extend_infer_t1]
----hashJoin[INNER_JOIN] hashCondition=((c1 = t2.d_int)) otherCondition=()
------filter(( not d_int IN (10, 20)))
--------PhysicalOlapScan[extend_infer_t1]
------filter(( not d_int IN (10, 20)))
--------PhysicalOlapScan[extend_infer_t1]

-- !not_in_right_right2 --
PhysicalResultSink
--hashJoin[RIGHT_OUTER_JOIN] hashCondition=((t3.d_int = t.c1)) otherCondition=()
----filter(( not d_int IN (10, 20)))
------PhysicalOlapScan[extend_infer_t1]
----hashJoin[RIGHT_OUTER_JOIN] hashCondition=((t1.d_int = c1)) otherCondition=()
------filter(( not d_int IN (10, 20)))
--------PhysicalOlapScan[extend_infer_t1]
------filter(( not d_int IN (10, 20)))
--------PhysicalOlapScan[extend_infer_t1]

-- !not_equal_semi_semi_with_cast --
PhysicalResultSink
--hashJoin[LEFT_SEMI_JOIN] hashCondition=((expr_cast(d_smallint as INT) = t.c1)) otherCondition=()
----filter(( not (cast(d_smallint as INT) = 10)) and ( not (d_smallint = 10)))
------PhysicalOlapScan[extend_infer_t1]
----hashJoin[LEFT_SEMI_JOIN] hashCondition=((c1 = expr_cast(d_tinyint as INT))) otherCondition=()
------filter(( not (d_int = 10)))
--------PhysicalOlapScan[extend_infer_t1]
------filter(( not (cast(d_tinyint as INT) = 10)))
--------PhysicalOlapScan[extend_infer_t1]

-- !not_equal_anti_anti_with_cast --
PhysicalResultSink
--hashJoin[LEFT_ANTI_JOIN] hashCondition=((expr_cast(d_smallint as INT) = t.c1)) otherCondition=()
----filter(( not (d_smallint = 10)))
------PhysicalOlapScan[extend_infer_t1]
----hashJoin[LEFT_ANTI_JOIN] hashCondition=((c1 = expr_cast(d_tinyint as INT))) otherCondition=()
------filter(( not (d_int = 10)))
--------PhysicalOlapScan[extend_infer_t1]
------filter(( not (cast(d_tinyint as INT) = 10)))
--------PhysicalOlapScan[extend_infer_t1]

-- !not_equal_anti_left_with_cast --
PhysicalResultSink
--hashJoin[LEFT_ANTI_JOIN] hashCondition=((expr_cast(d_smallint as INT) = t.c1)) otherCondition=()
----filter(( not (d_smallint = 10)))
------PhysicalOlapScan[extend_infer_t1]
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((c1 = expr_cast(d_tinyint as INT))) otherCondition=()
------filter(( not (d_int = 10)))
--------PhysicalOlapScan[extend_infer_t1]
------filter(( not (cast(d_tinyint as INT) = 10)))
--------PhysicalOlapScan[extend_infer_t1]

-- !not_equal_semi_anti_with_cast --
PhysicalResultSink
--hashJoin[LEFT_SEMI_JOIN] hashCondition=((expr_cast(d_smallint as INT) = t.c1)) otherCondition=()
----filter(( not (cast(d_smallint as INT) = 10)) and ( not (d_smallint = 10)))
------PhysicalOlapScan[extend_infer_t1]
----hashJoin[LEFT_ANTI_JOIN] hashCondition=((c1 = expr_cast(d_tinyint as INT))) otherCondition=()
------filter(( not (d_int = 10)))
--------PhysicalOlapScan[extend_infer_t1]
------filter(( not (cast(d_tinyint as INT) = 10)))
--------PhysicalOlapScan[extend_infer_t1]

-- !in_subquery_to_semi_join --
PhysicalResultSink
--hashJoin[LEFT_SEMI_JOIN] hashCondition=((t1.d_int = extend_infer_t2.d_int)) otherCondition=()
----filter(( not (d_int = 10)))
------PhysicalOlapScan[extend_infer_t1]
----filter(( not (d_int = 10)))
------PhysicalOlapScan[extend_infer_t2]

-- !not_in_subquery_to_na_anti_join_not_infer --
PhysicalResultSink
--hashJoin[NULL_AWARE_LEFT_ANTI_JOIN] hashCondition=((t1.d_int = extend_infer_t2.d_int)) otherCondition=()
----filter(( not (d_int = 10)))
------PhysicalOlapScan[extend_infer_t1]
----PhysicalOlapScan[extend_infer_t2]

-- !in_subquery_to_semi_join --
PhysicalResultSink
--hashJoin[LEFT_SEMI_JOIN] hashCondition=((t1.d_int = extend_infer_t2.d_int)) otherCondition=()
----hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
------filter(( not (d_int = 10)))
--------PhysicalOlapScan[extend_infer_t1]
------filter(( not (d_int = 10)))
--------PhysicalOlapScan[extend_infer_t1]
----filter(( not (d_int = 10)))
------PhysicalOlapScan[extend_infer_t2]

-- !cast_to_decimal_overflow_not_infer --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_cast(d_tinyint as INT) = t2.d_int)) otherCondition=()
----filter(cast(d_tinyint as DECIMALV3(4, 1)) IN (0.1, 0.5))
------PhysicalOlapScan[extend_infer_t1]
----PhysicalOlapScan[extend_infer_t2]

-- !char_equal_int_infer --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_cast(d_char10 as DOUBLE) = expr_cast(d_int as DOUBLE))) otherCondition=()
----filter(d_char10 IN ('bb', 'd'))
------PhysicalOlapScan[extend_infer_t1]
----PhysicalOlapScan[extend_infer_t2]

-- !date_equal_int_infer --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datev2 = expr_cast(d_int as DATEV2))) otherCondition=()
----filter(d_datev2 IN ('2024-01-01', '2024-01-02'))
------PhysicalOlapScan[extend_infer_t1]
----filter(cast(d_int as DATEV2) IN ('2024-01-01', '2024-01-02'))
------PhysicalOlapScan[extend_infer_t2]

-- !not_pull_up_grouping --
12	\N
33	\N
78	\N
100	\N

-- !pull_up_grouping --
12	\N
12	\N
33	\N
33	d2
78	\N
78	\N
100	\N
100	d2

-- !pull_up_limit --
0
0
12
12

-- !pull_up_topn --
12
12

-- !pull_up_window_partition_column --
0	0	3
12	12	9

-- !pull_up_window_order_column --
0	0
12	12

-- !pull_up_partition_topn --
12	9	2
78	9	1

-- !pull_up_generate --
0	d2	\N

-- !pull_up_from_inner_join --
0	d2

-- !pull_up_from_left_join --
0	d2

-- !pull_up_from_left_semi_join --
0

-- !pull_up_from_left_anti_join --

-- !pull_up_from_left_null_aware_anti_join --
12

-- !pull_up_from_left_anti_join_where --

-- !pull_up_from_right_join --
0	d2

-- !pull_up_from_right_semi_join --
0

-- !pull_up_from_right_anti_join_where --

-- !pull_up_from_right_anti_join_and --

-- !pull_up_from_union --
0
0

-- !pull_up_from_except --

-- !pull_up_from_intersect --
0

-- !pull_up_from_agg --
0

