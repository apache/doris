-- This file is automatically generated. You should know what you did if you want to edit this
-- !test_integer_cast --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = expr_cast(d_tinyint as INT))) otherCondition=()
----filter((t1.d_tinyint < 10))
------PhysicalOlapScan[test_cast_infer9]
----PhysicalOlapScan[test_cast_infer9]

-- !test_simple_compare --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----filter((t1.d_int < 10))
------PhysicalOlapScan[test_cast_infer9]
----filter((t2.d_int < 10))
------PhysicalOlapScan[test_cast_infer9]

-- !test_simple_compare_not_equal --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----filter(( not (d_int = 10)))
------PhysicalOlapScan[test_cast_infer9]
----filter(( not (d_int = 10)))
------PhysicalOlapScan[test_cast_infer9]

-- !test_simple_compare_datetimev2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datetimev2 = t2.d_datetimev2)) otherCondition=()
----filter((t1.d_datetimev2 = '2024-01-01 00:00:00'))
------PhysicalOlapScan[test_cast_infer9]
----filter((t2.d_datetimev2 = '2024-01-01 00:00:00'))
------PhysicalOlapScan[test_cast_infer9]

-- !test_simple_compare_not_equal_datetimev2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datetimev2 = t2.d_datetimev2)) otherCondition=()
----filter(( not (d_datetimev2 = '2024-01-01 00:00:00')))
------PhysicalOlapScan[test_cast_infer9]
----filter(( not (d_datetimev2 = '2024-01-01 00:00:00')))
------PhysicalOlapScan[test_cast_infer9]

-- !test_not_in --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----filter(( not d_int IN (10, 20)))
------PhysicalOlapScan[test_cast_infer9]
----filter(( not d_int IN (10, 20)))
------PhysicalOlapScan[test_cast_infer9]

-- !test_not_in_column --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----PhysicalOlapScan[test_cast_infer9]
----filter(( not d_int IN (20, cast(d_smallint as INT))))
------PhysicalOlapScan[test_cast_infer9]

-- !test_in --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----filter(d_int IN (10, 20))
------PhysicalOlapScan[test_cast_infer9]
----filter(d_int IN (10, 20))
------PhysicalOlapScan[test_cast_infer9]

-- !test_func_not_in --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----filter(( not abs(d_int) IN (10, 20)))
------PhysicalOlapScan[test_cast_infer9]
----filter(( not abs(d_int) IN (10, 20)))
------PhysicalOlapScan[test_cast_infer9]

-- !test_like --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_char100 = t2.d_char100)) otherCondition=()
----filter((d_char100 like '012%'))
------PhysicalOlapScan[test_cast_infer9]
----filter((d_char100 like '012%'))
------PhysicalOlapScan[test_cast_infer9]

-- !test_like_not --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_char100 = t2.d_char100)) otherCondition=()
----PhysicalOlapScan[test_cast_infer9]
----filter(( not (d_char100 like '012%')))
------PhysicalOlapScan[test_cast_infer9]

-- !test_like_to_equal --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_char100 = t2.d_char100)) otherCondition=()
----filter((t1.d_char100 = '012'))
------PhysicalOlapScan[test_cast_infer9]
----filter((t2.d_char100 = '012'))
------PhysicalOlapScan[test_cast_infer9]

-- !test_func_not_in_and_func_equal_condition --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_abs(d_int) = expr_abs(d_int))) otherCondition=()
----filter(( not abs(d_int) IN (10, 20)))
------PhysicalOlapScan[test_cast_infer9]
----filter(( not abs(d_int) IN (10, 20)))
------PhysicalOlapScan[test_cast_infer9]

-- !test_between_and --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
----filter((t1.a <= 10) and (t1.a >= 1))
------PhysicalOlapScan[test_like1]
----filter((t2.a <= 10) and (t2.a >= 1))
------PhysicalOlapScan[test_like2]

-- !test_and --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
----filter((t1.a <= 10) and (t1.a >= 2))
------PhysicalOlapScan[test_like1]
----filter((t2.a <= 10) and (t2.a >= 2))
------PhysicalOlapScan[test_like2]

-- !test_or1 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
----filter(((t1.a < 2) OR (t1.a > 10)))
------PhysicalOlapScan[test_like1]
----PhysicalOlapScan[test_like2]

-- !test_or2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
----filter(((t1.a < 2) OR (t1.a > 10)))
------PhysicalOlapScan[test_like1]
----PhysicalOlapScan[test_like2]

-- !test_sign_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
----filter((sign(cast(a as DOUBLE)) >= 1))
------PhysicalOlapScan[test_like1]
----filter((sign(cast(a as DOUBLE)) >= 1))
------PhysicalOlapScan[test_like2]

-- !test_if_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----PhysicalOlapScan[test_cast_infer9]
----filter(if(( not d_int IN (10, 20)), TRUE, FALSE))
------PhysicalOlapScan[test_cast_infer9]

-- !test_if_and_in_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----filter(( not (if((d_int = 5), TRUE, FALSE) = FALSE)))
------PhysicalOlapScan[test_cast_infer9]
----filter(( not (if((d_int = 5), TRUE, FALSE) = FALSE)))
------PhysicalOlapScan[test_cast_infer9]

-- !test_if_and_in_predicate_not --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----filter(( not (if((d_int = 5), TRUE, FALSE) = FALSE)))
------PhysicalOlapScan[test_cast_infer9]
----filter(( not (if((d_int = 5), TRUE, FALSE) = FALSE)))
------PhysicalOlapScan[test_cast_infer9]

-- !test_multi_slot_in_predicate1 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_(a + c) = expr_(a + c))) otherCondition=()
----filter(((t1.a + t1.c) < 10))
------PhysicalOlapScan[test_like1]
----filter(((t2.a + t2.c) < 10))
------PhysicalOlapScan[test_like2]

-- !test_multi_slot_in_predicate2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.a = t2.a) and (t1.b = t2.b)) otherCondition=()
----filter(((cast(a as DOUBLE) + cast(b as DOUBLE)) < 10.0))
------PhysicalOlapScan[test_like1]
----PhysicalOlapScan[test_like2]

-- !test_case_when_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = t2.d_int)) otherCondition=()
----PhysicalOlapScan[test_cast_infer9]
----filter(CASE WHEN (d_int = 1) THEN TRUE WHEN (d_int = 2) THEN FALSE ELSE FALSE END)
------PhysicalOlapScan[test_cast_infer9]

-- !test_datetimev2_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datetimev2 = t2.d_datetimev2)) otherCondition=()
----filter((convert_tz(date_trunc(d_datetimev2, 'month'), 'Asia/Shanghai', 'Europe/Paris') = '2024-01-01 00:00:00'))
------PhysicalOlapScan[test_cast_infer9]
----filter((convert_tz(date_trunc(d_datetimev2, 'month'), 'Asia/Shanghai', 'Europe/Paris') = '2024-01-01 00:00:00'))
------PhysicalOlapScan[test_cast_infer9]

-- !test_convert_tz_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datetimev2 = t2.d_datetimev2)) otherCondition=()
----filter((convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris') > '2022-01-01 00:00:00'))
------PhysicalOlapScan[test_cast_infer9]
----filter((convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris') > '2022-01-01 00:00:00'))
------PhysicalOlapScan[test_cast_infer8]

-- !test_next_date_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datetimev2 = t2.d_datetimev2)) otherCondition=()
----filter((dayofmonth(hours_add(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'), 10)) > 10))
------PhysicalOlapScan[test_cast_infer9]
----filter((dayofmonth(hours_add(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'), 10)) > 10))
------PhysicalOlapScan[test_cast_infer8]

-- !test_random_nest_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datetimev2 = t2.d_datetimev2)) otherCondition=()
----filter((dayofmonth(hours_add(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'), cast(random(1, 10) as INT))) > 10))
------PhysicalOlapScan[test_cast_infer9]
----PhysicalOlapScan[test_cast_infer8]

-- !test_random_predicate --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
----filter((cast(a as DOUBLE) > random(10)))
------PhysicalOlapScan[test_like1]
----PhysicalOlapScan[test_like2]

-- !test_predicate_map --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datetimev2 = t2.d_datetimev2)) otherCondition=()
----filter((convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris') < '2022-01-01 00:00:00') and (dayofmonth(hours_add(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'), 10)) > 10))
------PhysicalOlapScan[test_cast_infer9]
----filter((convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris') < '2022-01-01 00:00:00') and (dayofmonth(hours_add(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'), 10)) > 10))
------PhysicalOlapScan[test_cast_infer8]

-- !test_int_upcast --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = expr_cast(d_tinyint as INT))) otherCondition=()
----filter((t1.d_int < 10))
------PhysicalOlapScan[test_cast_infer9]
----filter((cast(d_tinyint as INT) < 10) and (t2.d_tinyint < 10))
------PhysicalOlapScan[test_cast_infer9]

-- !test_int_downcast --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_cast(d_int as TINYINT) = t2.d_tinyint)) otherCondition=()
----filter((cast(d_int as TINYINT) < 10))
------PhysicalOlapScan[test_cast_infer9]
----filter((t2.d_tinyint < 10))
------PhysicalOlapScan[test_cast_infer9]

-- !test_date_upcast --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_cast(d_datev2 as DATETIMEV2(0)) = t2.d_datetimev2)) otherCondition=()
----filter((t1.d_datev2 < '2022-01-03'))
------PhysicalOlapScan[test_cast_infer9]
----filter((t2.d_datetimev2 < '2022-01-03 00:00:00'))
------PhysicalOlapScan[test_cast_infer8]

-- !test_date_downcast --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datev2 = expr_cast(d_datetimev2 as DATEV2))) otherCondition=()
----filter((t1.d_datev2 < '2022-01-03'))
------PhysicalOlapScan[test_cast_infer9]
----filter((cast(d_datetimev2 as DATEV2) < '2022-01-03'))
------PhysicalOlapScan[test_cast_infer8]

-- !test_date_both_upcast1 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_cast(d_datev2 as DATETIMEV2(0)) = expr_cast(d_date as DATETIMEV2(0)))) otherCondition=()
----filter((t1.d_datev2 < '2022-01-03'))
------PhysicalOlapScan[test_cast_infer9]
----filter((t2.d_date < '2022-01-03'))
------PhysicalOlapScan[test_cast_infer8]

-- !test_date_both_upcast2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_datetime = expr_cast(d_date as DATETIMEV2(0)))) otherCondition=()
----filter((t1.d_datetime < '2022-01-03 00:00:00'))
------PhysicalOlapScan[test_cast_infer9]
----filter((t2.d_date < '2022-01-03'))
------PhysicalOlapScan[test_cast_infer8]

-- !test_char_different_type1 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_char100 = t2.d_char10)) otherCondition=()
----filter((t1.d_char100 > 'abc'))
------PhysicalOlapScan[test_cast_infer9]
----filter((t2.d_char10 > 'abc'))
------PhysicalOlapScan[test_cast_infer9]

-- !test_char_different_type2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_substring(cast(d_char100 as CHAR(50)), 1, 50) = t2.d_char10)) otherCondition=()
----filter((substring(cast(d_char100 as CHAR(50)), 1, 50) > 'abc'))
------PhysicalOlapScan[test_cast_infer9]
----filter((t2.d_char10 > 'abc'))
------PhysicalOlapScan[test_cast_infer9]

-- !test_char_different_type3 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_substring(cast(d_char100 as CHAR(50)), 1, 50) = expr_substring(cast(d_char10 as CHAR(50)), 1, 50))) otherCondition=()
----PhysicalOlapScan[test_cast_infer9]
----filter((t2.d_char10 > 'abc'))
------PhysicalOlapScan[test_cast_infer9]

-- !test_char_different_type4 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_substring(cast(d_char100 as CHAR(200)), 1, 200) = expr_substring(cast(d_char10 as CHAR(200)), 1, 200))) otherCondition=()
----PhysicalOlapScan[test_cast_infer9]
----filter((t2.d_char10 > 'abc'))
------PhysicalOlapScan[test_cast_infer9]

-- !test_cast_and_func --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_abs(d_int) = expr_cast(d_tinyint as BIGINT))) otherCondition=()
----PhysicalOlapScan[test_cast_infer9]
----filter((t2.d_tinyint < 10))
------PhysicalOlapScan[test_cast_infer9]

-- !test_cast_and_func2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_cast(abs(d_int) as TINYINT) = t2.d_tinyint)) otherCondition=()
----filter((cast(abs(d_int) as TINYINT) < 10))
------PhysicalOlapScan[test_cast_infer9]
----filter((t2.d_tinyint < 10))
------PhysicalOlapScan[test_cast_infer9]

-- !test_cast_and_func3 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_cast(cast(d_int as TINYINT) as SMALLINT) = expr_abs(d_tinyint))) otherCondition=()
----filter((cast(cast(d_int as TINYINT) as SMALLINT) < 10))
------PhysicalOlapScan[test_cast_infer9]
----filter((abs(d_tinyint) < 10))
------PhysicalOlapScan[test_cast_infer9]

-- !test_cast_and_func4 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.d_int = expr_cast(abs(d_tinyint) as INT))) otherCondition=()
----PhysicalOlapScan[test_cast_infer9]
----filter((abs(d_tinyint) < 10))
------PhysicalOlapScan[test_cast_infer9]

-- !test_func_equal_and_nest_func_pred1 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris') = expr_convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'))) otherCondition=()
----filter((dayofmonth(hours_add(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'), 10)) > 10))
------PhysicalOlapScan[test_cast_infer9]
----filter((dayofmonth(hours_add(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'), 10)) > 10))
------PhysicalOlapScan[test_cast_infer8]

-- !test_func_equal_and_nest_func_pred2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((expr_convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris') = expr_convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris'))) otherCondition=()
----filter((dayofmonth(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris')) > 10))
------PhysicalOlapScan[test_cast_infer9]
----filter((dayofmonth(convert_tz(d_datetimev2, 'Asia/Shanghai', 'Europe/Paris')) > 10))
------PhysicalOlapScan[test_cast_infer8]

-- !predicate_to_empty_relation --
PhysicalResultSink
--hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.a = t3.a)) otherCondition=()
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
------filter((t1.a = 2))
--------PhysicalOlapScan[test_like1]
------PhysicalEmptyRelation
----filter((t3.a = 2))
------PhysicalOlapScan[test_like2]

-- !left_join_left_table_where_predicate_can_pull_up1 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t1a = t3.a)) otherCondition=()
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1a = t2a)) otherCondition=()
------filter((test_like1.a < 10))
--------PhysicalOlapScan[test_like1]
------filter((t2.a < 10))
--------PhysicalOlapScan[test_like2]
----filter((t3.a < 10))
------PhysicalOlapScan[test_like3]

-- !left_join_left_table_where_predicate_can_pull_up1 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t1a = t3.a)) otherCondition=()
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1a = t2a)) otherCondition=()
------filter((t1.a < 10))
--------PhysicalOlapScan[test_like1]
------filter((t2.a < 10))
--------PhysicalOlapScan[test_like2]
----filter((t3.a < 10))
------PhysicalOlapScan[test_like3]

-- !left_join_right_table_where_predicate_cannot_pull_up --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t2a = t3.a)) otherCondition=()
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1a = t2a)) otherCondition=()
------PhysicalOlapScan[test_like1]
------filter((t2.a > 10))
--------PhysicalOlapScan[test_like2]
----PhysicalOlapScan[test_like3]

-- !right_join_right_table_on_predicate_cannot_pull_up --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t2a = t3.a)) otherCondition=()
----hashJoin[RIGHT_OUTER_JOIN] hashCondition=((t1a = t2a)) otherCondition=((t2a > 10))
------filter((t1.a > 10))
--------PhysicalOlapScan[test_like1]
------PhysicalOlapScan[test_like2]
----PhysicalOlapScan[test_like3]

-- !right_join_right_table_where_predicate_can_pull_up1 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t2a = t3.a)) otherCondition=()
----hashJoin[RIGHT_OUTER_JOIN] hashCondition=((t1a = t2a)) otherCondition=()
------filter((t1.a < 10))
--------PhysicalOlapScan[test_like1]
------filter((test_like2.a < 10))
--------PhysicalOlapScan[test_like2]
----filter((t3.a < 10))
------PhysicalOlapScan[test_like3]

-- !right_join_right_table_where_predicate_can_pull_up2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t2a = t3.a)) otherCondition=()
----hashJoin[RIGHT_OUTER_JOIN] hashCondition=((t1a = t2a)) otherCondition=()
------filter((t1.a > 10))
--------PhysicalOlapScan[test_like1]
------filter((t2.a > 10))
--------PhysicalOlapScan[test_like2]
----filter((t3.a > 10))
------PhysicalOlapScan[test_like3]

-- !left_join_right_table_where_predicate_cannot_pull_up_other_column --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t2c = t3.a)) otherCondition=()
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1a = t2.a)) otherCondition=()
------PhysicalOlapScan[test_like1]
------filter((t2.c > 10))
--------PhysicalOlapScan[test_like2]
----PhysicalOlapScan[test_like3]

-- !right_join_right_table_on_predicate_cannot_pull_up_other_column --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t2c = t3.a)) otherCondition=()
----hashJoin[RIGHT_OUTER_JOIN] hashCondition=((t1a = t2.a)) otherCondition=((t2c > 10))
------PhysicalOlapScan[test_like1]
------PhysicalOlapScan[test_like2]
----PhysicalOlapScan[test_like3]

-- !right_join_right_table_where_predicate_can_pull_up_other_column1 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t2c = t3.a)) otherCondition=()
----hashJoin[RIGHT_OUTER_JOIN] hashCondition=((t1a = t2.a)) otherCondition=()
------PhysicalOlapScan[test_like1]
------filter((test_like2.c < 10))
--------PhysicalOlapScan[test_like2]
----filter((t3.a < 10))
------PhysicalOlapScan[test_like3]

-- !right_join_right_table_where_predicate_can_pull_up_other_column2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t2c = t3.a)) otherCondition=()
----hashJoin[RIGHT_OUTER_JOIN] hashCondition=((t1a = t2.a)) otherCondition=()
------PhysicalOlapScan[test_like1]
------filter((t2.c > 10))
--------PhysicalOlapScan[test_like2]
----filter((t3.a > 10))
------PhysicalOlapScan[test_like3]

-- !right_semi_right_table_predicate_can_pull_up --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t2a = t3.a)) otherCondition=()
----hashJoin[RIGHT_SEMI_JOIN] hashCondition=((t1.a = t2a)) otherCondition=()
------filter((t1.a > 10))
--------PhysicalOlapScan[test_like1]
------filter((t2.a > 10))
--------PhysicalOlapScan[test_like2]
----filter((t3.a > 10))
------PhysicalOlapScan[test_like3]

-- !right_semi_right_table_predicate_can_pull_up_other_column --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t2c = t3.c)) otherCondition=()
----hashJoin[RIGHT_SEMI_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
------PhysicalOlapScan[test_like1]
------filter((t2.c > 10))
--------PhysicalOlapScan[test_like2]
----filter((t3.c > 10))
------PhysicalOlapScan[test_like3]

-- !left_semi_left_table_predicate_can_pull_up --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t1a = t3.a)) otherCondition=()
----hashJoin[LEFT_SEMI_JOIN] hashCondition=((t1a = t2.a)) otherCondition=()
------filter((t1.a > 10))
--------PhysicalOlapScan[test_like1]
------filter((t2.a > 10))
--------PhysicalOlapScan[test_like2]
----filter((t3.a > 10))
------PhysicalOlapScan[test_like3]

-- !left_semi_left_table_predicate_can_pull_up_other_column --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t1c = t3.c)) otherCondition=()
----hashJoin[LEFT_SEMI_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
------filter((t1.c > 10))
--------PhysicalOlapScan[test_like1]
------PhysicalOlapScan[test_like2]
----filter((t3.c > 10))
------PhysicalOlapScan[test_like3]

-- !right_anti_right_table_predicate_can_pull_up --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t2a = t3.a)) otherCondition=()
----hashJoin[RIGHT_ANTI_JOIN] hashCondition=((t1.a = t2a)) otherCondition=()
------filter((t1.a > 10))
--------PhysicalOlapScan[test_like1]
------filter((t2.a > 10))
--------PhysicalOlapScan[test_like2]
----filter((t3.a > 10))
------PhysicalOlapScan[test_like3]

-- !right_anti_right_table_predicate_can_pull_up_other_column --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t2c = t3.c)) otherCondition=()
----hashJoin[RIGHT_ANTI_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
------PhysicalOlapScan[test_like1]
------filter((t2.c > 10))
--------PhysicalOlapScan[test_like2]
----filter((t3.c > 10))
------PhysicalOlapScan[test_like3]

-- !left_anti_left_table_predicate_can_pull_up --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t1a = t3.a)) otherCondition=()
----hashJoin[LEFT_ANTI_JOIN] hashCondition=((t1a = t2.a)) otherCondition=()
------filter((t1.a > 10))
--------PhysicalOlapScan[test_like1]
------filter((t2.a > 10))
--------PhysicalOlapScan[test_like2]
----filter((t3.a > 10))
------PhysicalOlapScan[test_like3]

-- !left_anti_left_table_predicate_can_pull_up_other_column --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t.t1c = t3.c)) otherCondition=()
----hashJoin[LEFT_ANTI_JOIN] hashCondition=((t1.a = t2.a)) otherCondition=()
------filter((t1.c > 10))
--------PhysicalOlapScan[test_like1]
------PhysicalOlapScan[test_like2]
----filter((t3.c > 10))
------PhysicalOlapScan[test_like3]

