-- This file is automatically generated. You should know what you did if you want to edit this
-- !left_outer --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
------PhysicalOlapScan[t(t1)]
------filter((t2.score > 10))
--------PhysicalOlapScan[t(t2)]

-- !right_outer --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
------filter((t1.score > 10))
--------PhysicalOlapScan[t(t1)]
------PhysicalOlapScan[t(t2)]

-- !full_outer_join --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_OUTER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
------filter((t1.score > 10))
--------PhysicalOlapScan[t(t1)]
------PhysicalOlapScan[t(t2)]

-- !full_outer_join --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[RIGHT_OUTER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
------PhysicalOlapScan[t(t1)]
------filter((t2.score > 10))
--------PhysicalOlapScan[t(t2)]

-- !full_outer_join --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
------filter((t1.score > 10))
--------PhysicalOlapScan[t(t1)]
------filter((t2.score > 10))
--------PhysicalOlapScan[t(t2)]

-- !left_outer --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
------filter((t1.score > 10))
--------PhysicalOlapScan[t(t1)]
------filter((t2.score > 10))
--------PhysicalOlapScan[t(t2)]

-- !multiple_left_outer_1 --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_OUTER_JOIN colocated] hashCondition=((t1.id = t3.id)) otherCondition=()
------hashJoin[LEFT_OUTER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
--------filter((t1.score > 10))
----------PhysicalOlapScan[t(t1)]
--------PhysicalOlapScan[t(t2)]
------PhysicalOlapScan[t(t3)]

-- !multiple_left_outer_2 --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_OUTER_JOIN colocated] hashCondition=((t1.id = t3.id)) otherCondition=()
------hashJoin[INNER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
--------PhysicalOlapScan[t(t1)]
--------filter((t2.score > 10))
----------PhysicalOlapScan[t(t2)]
------PhysicalOlapScan[t(t3)]

-- !multiple_right_outer_1 --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN colocated] hashCondition=((t1.id = t3.id)) otherCondition=()
------hashJoin[INNER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
--------filter((t1.score > 10))
----------PhysicalOlapScan[t(t1)]
--------PhysicalOlapScan[t(t2)]
------PhysicalOlapScan[t(t3)]

-- !multiple_right_outer_2 --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN colocated] hashCondition=((t1.id = t3.id)) otherCondition=()
------hashJoin[INNER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
--------PhysicalOlapScan[t(t1)]
--------filter((t2.score > 10))
----------PhysicalOlapScan[t(t2)]
------PhysicalOlapScan[t(t3)]

-- !multiple_full_outer_1 --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_OUTER_JOIN colocated] hashCondition=((t1.id = t3.id)) otherCondition=()
------hashJoin[LEFT_OUTER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
--------filter((t1.score > 10))
----------PhysicalOlapScan[t(t1)]
--------PhysicalOlapScan[t(t2)]
------PhysicalOlapScan[t(t3)]

-- !multiple_full_outer_2 --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_OUTER_JOIN broadcast] hashCondition=((t1.id = t3.id)) otherCondition=()
------hashJoin[RIGHT_OUTER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
--------PhysicalOlapScan[t(t1)]
--------filter((t2.score > 10))
----------PhysicalOlapScan[t(t2)]
------PhysicalOlapScan[t(t3)]

-- !left_outer_join_non_null_assertion --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[LEFT_OUTER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
------filter(( not id IS NULL) and (t1.score > 5))
--------PhysicalOlapScan[t(t1)]
------PhysicalOlapScan[t(t2)]

-- !right_outer_join_non_null_assertion --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[RIGHT_OUTER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
------PhysicalOlapScan[t(t1)]
------filter(( not id IS NULL) and (t2.score > 5))
--------PhysicalOlapScan[t(t2)]

-- !full_outer_join_compound_conditions --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----filter(OR[(t1.score > 5),(t2.score > 5)])
------hashJoin[FULL_OUTER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
--------PhysicalOlapScan[t(t1)]
--------PhysicalOlapScan[t(t2)]

-- !multiple_joins_complex_conditions --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN colocated] hashCondition=((t2.id = t3.id)) otherCondition=()
------hashJoin[INNER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
--------filter((t1.score > 5))
----------PhysicalOlapScan[t(t1)]
--------PhysicalOlapScan[t(t2)]
------filter(( not score IS NULL))
--------PhysicalOlapScan[t(t3)]

-- !using_non_equijoin_conditions --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----PhysicalProject
------hashJoin[LEFT_OUTER_JOIN broadcast] hashCondition=((expr_cast(score as BIGINT) = expr_(cast(score as BIGINT) + 10))) otherCondition=()
--------PhysicalProject
----------filter(( not id IS NULL))
------------PhysicalOlapScan[t(t1)]
--------PhysicalProject
----------PhysicalOlapScan[t(t2)]

-- !joining_multiple_tables_with_aggregate_functions --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----PhysicalProject
------filter((count(id) > 1))
--------hashAgg[GLOBAL]
----------hashJoin[LEFT_OUTER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
------------PhysicalProject
--------------PhysicalOlapScan[t(t1)]
------------PhysicalProject
--------------PhysicalOlapScan[t(t2)]

-- !using_subqueries --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----PhysicalProject
------hashJoin[LEFT_OUTER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
--------filter(( not id IS NULL))
----------PhysicalOlapScan[t(t1)]
--------PhysicalProject
----------PhysicalOlapScan[t(t2)]

-- !left_outer --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
------filter((t1.score > 10))
--------PhysicalOlapScan[t(t1)]
------filter(( not name IS NULL))
--------PhysicalOlapScan[t(t2)]

-- !right_outer --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
------filter((t1.score > 10))
--------PhysicalOlapScan[t(t1)]
------filter(( not name IS NULL))
--------PhysicalOlapScan[t(t2)]

-- !full_outer --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
------filter((t1.score > 10))
--------PhysicalOlapScan[t(t1)]
------filter(( not name IS NULL))
--------PhysicalOlapScan[t(t2)]

-- !self_left_outer --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN colocated] hashCondition=((t1.id = t1_alias.id)) otherCondition=()
------PhysicalOlapScan[t(t1)]
------filter((t1_alias.name > '2023-01-01'))
--------PhysicalOlapScan[t(t1_alias)]

-- !right_outer_aggregate --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashAgg[GLOBAL]
------PhysicalProject
--------hashJoin[RIGHT_OUTER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
----------PhysicalProject
------------PhysicalOlapScan[t(t1)]
----------PhysicalProject
------------PhysicalOlapScan[t(t2)]

-- !full_outer_multiple_tables --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----filter(name IS NULL)
------hashJoin[FULL_OUTER_JOIN shuffle] hashCondition=((t1.id = t3.id)) otherCondition=()
--------hashJoin[FULL_OUTER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
----------PhysicalOlapScan[t(t1)]
----------PhysicalOlapScan[t(t2)]
--------PhysicalOlapScan[t(t3)]

-- !left_outer_with_subquery --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
------PhysicalOlapScan[t(t1)]
------PhysicalProject
--------filter((t2.score > 20))
----------PhysicalOlapScan[t]

-- !complex_join_conditions --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----PhysicalProject
------hashJoin[INNER_JOIN broadcast] hashCondition=((expr_cast(score as BIGINT) = expr_(cast(score as BIGINT) * 2))) otherCondition=((t1.id < t2.id))
--------PhysicalProject
----------PhysicalOlapScan[t(t1)]
--------PhysicalProject
----------PhysicalOlapScan[t(t2)]

-- !multiple_outer_with_window_function --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----PhysicalProject
------PhysicalWindow
--------PhysicalQuickSort[LOCAL_SORT]
----------PhysicalDistribute[DistributionSpecHash]
------------hashJoin[LEFT_OUTER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
--------------PhysicalProject
----------------PhysicalOlapScan[t(t1)]
--------------PhysicalProject
----------------PhysicalOlapScan[t(t2)]

-- !join_different_tables_non_null --
PhysicalResultSink
--PhysicalDistribute[DistributionSpecGather]
----hashJoin[INNER_JOIN colocated] hashCondition=((t1.id = t2.id)) otherCondition=()
------PhysicalOlapScan[t(t1)]
------filter(( not name IS NULL))
--------PhysicalOlapScan[t(t2)]

