-- This file is automatically generated. You should know what you did if you want to edit this
-- !basic_join_union --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((id = id)) otherCondition=()
----PhysicalUnion
------PhysicalOlapScan[table_b]
------PhysicalOlapScan[table_c]
----PhysicalOlapScan[table_a]

-- !three_way_union --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((id = id)) otherCondition=()
----PhysicalUnion
------PhysicalOlapScan[table_b]
------PhysicalOlapScan[table_c]
------PhysicalOlapScan[table_d]
----PhysicalOlapScan[table_a]

-- !union_with_projections --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((id = id)) otherCondition=()
----PhysicalUnion
------PhysicalOlapScan[table_b]
------PhysicalOlapScan[table_c]
----PhysicalOlapScan[table_a]

-- !union_with_constants --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((id = id)) otherCondition=()
----PhysicalUnion
------PhysicalOlapScan[table_b]
------PhysicalOlapScan[table_c]
----PhysicalOlapScan[table_a]

-- !union_with_loss_slots --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((id = id)) otherCondition=()
----PhysicalUnion
------PhysicalOlapScan[table_b]
------PhysicalOlapScan[table_c]
----PhysicalOlapScan[table_a]

-- !different_join_conditions --
PhysicalResultSink
--PhysicalUnion
----hashJoin[INNER_JOIN] hashCondition=((a.id = b.id)) otherCondition=()
------PhysicalOlapScan[table_a]
------PhysicalOlapScan[table_b]
----hashJoin[INNER_JOIN] hashCondition=((a.name = c.name)) otherCondition=()
------PhysicalOlapScan[table_a]
------PhysicalOlapScan[table_c]

-- !multi_column_join --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((id = id) and (name = name)) otherCondition=()
----PhysicalUnion
------PhysicalOlapScan[table_b]
------PhysicalOlapScan[table_c]
----PhysicalOlapScan[table_a]

-- !left_joins --
PhysicalResultSink
--PhysicalUnion
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((a.id = b.id)) otherCondition=()
------PhysicalOlapScan[table_a]
------PhysicalOlapScan[table_b]
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((a.id = c.id)) otherCondition=()
------PhysicalOlapScan[table_a]
------PhysicalOlapScan[table_c]

-- !subquery_join --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((id = id)) otherCondition=()
----PhysicalUnion
------hashAgg[LOCAL]
--------PhysicalOlapScan[table_b]
------hashAgg[LOCAL]
--------PhysicalOlapScan[table_c]
----PhysicalOlapScan[table_a]

-- !complex_join_condition1 --
PhysicalResultSink
--PhysicalUnion
----hashJoin[INNER_JOIN] hashCondition=((expr_cast(id as BIGINT) = expr_(cast(id as BIGINT) - 1))) otherCondition=()
------PhysicalOlapScan[table_a]
------PhysicalOlapScan[table_b]
----hashJoin[INNER_JOIN] hashCondition=((expr_cast(id as BIGINT) = expr_(cast(id as BIGINT) - 1))) otherCondition=()
------PhysicalOlapScan[table_a]
------PhysicalOlapScan[table_c]

-- !complex_join_condition2 --
PhysicalResultSink
--PhysicalUnion
----hashJoin[INNER_JOIN] hashCondition=((expr_cast(id as BIGINT) = expr_(cast(id as BIGINT) - 1))) otherCondition=()
------PhysicalOlapScan[table_a]
------PhysicalOlapScan[table_b]
----hashJoin[INNER_JOIN] hashCondition=((expr_cast(id as DOUBLE) = expr_(cast(id as DOUBLE) - 1.0))) otherCondition=()
------PhysicalOlapScan[table_a]
------PhysicalOlapScan[table_c]

-- !union_filter1 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((id = id)) otherCondition=()
----PhysicalUnion
------filter((b.id = 1))
--------PhysicalOlapScan[table_b]
------filter((c.id = 1))
--------PhysicalOlapScan[table_c]
----filter((a.id = 1))
------PhysicalOlapScan[table_a]

-- !union_filter2 --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((id = id)) otherCondition=()
----PhysicalUnion
------PhysicalOlapScan[table_b]
------PhysicalOlapScan[table_c]
----filter((cast(value as DOUBLE) = 1.0))
------PhysicalOlapScan[table_a]

-- !basic_join_union_res --
1	Alice	Value_B1
1	Alice	Value_C1
2	Bob	Value_B2
3	Charlie	Value_C3

-- !three_way_union_res --
1	Alice	Value_B1
1	Alice	Value_C1
1	Alice	Value_D1
2	Bob	Value_B2
2	Bob	Value_D2
3	Charlie	Value_C3
3	Charlie	Value_D3

-- !union_with_projections_res --
1	Alice	VALUE_B1
1	Alice	value_c1
2	Bob	VALUE_B2
3	Charlie	value_c3

-- !union_with_constants_res --
1	Alice	Value_B1	B
1	Alice	Value_C1	C
2	Bob	Value_B2	B
3	Charlie	Value_C3	C

-- !union_with_loss_slots_res --
1
1
2
3

-- !different_join_conditions_res --
1	Alice	Value_B1
1	Alice	Value_C1
2	Bob	Value_B2
3	Charlie	Value_C3

-- !multi_column_join_res --
1	Alice	Value_B1
1	Alice	Value_C1
2	Bob	Value_B2
3	Charlie	Value_C3

-- !left_joins_res --
1	Alice	Value_B1
1	Alice	Value_C1
2	Bob	\N
2	Bob	Value_B2
3	Charlie	\N
3	Charlie	Value_C3
5	Eva	\N
5	Eva	\N

-- !subquery_join_res --
1	Alice	Value_B1
1	Alice	Value_C1
2	Bob	Value_B2
3	Charlie	Value_C3

-- !complex_join_condition1_res --
1	Alice	Value_B2
2	Bob	Value_C3
3	Charlie	Value_B4
3	Charlie	Value_C4
5	Eva	Value_B6

-- !complex_join_condition2_res --
1	Alice	Value_B2
2	Bob	Value_C3
3	Charlie	Value_B4
3	Charlie	Value_C4
5	Eva	Value_B6

-- !union_filter1_res --
1	Alice	Value_B1	B
1	Alice	Value_C1	C

-- !union_filter2_res --

-- !expr --
1	4
34	25
34	35
34	35
34	35
79	25
101	5

-- !const --
1	2
34	2
34	3
34	3
34	3
79	2
101	2

-- !multi_condition --
\N	2
\N	2
\N	2
1	2
2	3
11	2

-- !multi_condition2 --
1	2
2	3
11	2

-- !multi_differenct_count_condition --

-- !no_common_side_project --
1	4
34	25
34	35
34	35
34	35
79	25
101	5

-- !common_slot_differnt --
34	5
34	25
34	101

-- !other_expr_differnt --
1	4
34	25
34	103
34	123
34	199
79	25
101	5

-- !2_same_tables --
0	0
0	1
33	1
33	33
78	1
78	78
100	1
100	100

-- !simple_column --
0	0
0	0
33	33
33	33
78	78
78	78
100	100
100	100

-- !func_column --
1	2
34	2
34	3
34	3
34	3
79	2
101	2

-- !other_join_slot_differnt --
34
34
34

-- !join_common_slot_has_expr --

-- !can_not_transform --
0	2
2	0
3	100
23	33
23	78
33	23
78	23
100	3

-- !other_side_condition_slot_has_expr_do_transform --
13

