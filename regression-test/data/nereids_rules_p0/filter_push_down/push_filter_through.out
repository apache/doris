-- This file is automatically generated. You should know what you did if you want to edit this
-- !filter_project_alias --
PhysicalResultSink
--filter((t1.id = 1))
----PhysicalOlapScan[t1]

-- !filter_project_constant --
PhysicalResultSink
--PhysicalEmptyRelation

-- !filter_project_arithmetic --
PhysicalResultSink
--filter((cast(id as BIGINT) = 1))
----PhysicalOlapScan[t1]

-- !filter_order_by --
PhysicalResultSink
--filter((t.id = 1))
----PhysicalOlapScan[t1]

-- !filter_order_by_limit --
PhysicalResultSink
--filter((t.id = 1))
----PhysicalTopN[MERGE_SORT]
------PhysicalTopN[LOCAL_SORT]
--------PhysicalOlapScan[t1]

-- !filter_order_by_constant --
PhysicalResultSink
--filter((t.id = 1))
----PhysicalOlapScan[t1]

-- !filter_join_inner --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
----filter((t1.id = 1))
------PhysicalOlapScan[t1]
----filter((t2.id = 1))
------PhysicalOlapScan[t2]

-- !filter_join_inner --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
----filter((t1.id = 1))
------PhysicalOlapScan[t1]
----filter((t2.id = 1))
------PhysicalOlapScan[t2]

-- !filter_join_inner --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
----filter((t1.msg = ''))
------PhysicalOlapScan[t1]
----PhysicalOlapScan[t2]

-- !filter_join_inner --
PhysicalResultSink
--PhysicalEmptyRelation

-- !filter_join_inner --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=(((t1.id = 1) OR (t2.id = 2)))
----PhysicalOlapScan[t1]
----PhysicalOlapScan[t2]

-- !filter_join_left --
PhysicalResultSink
--hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
----filter((t1.id = 1))
------PhysicalOlapScan[t1]
----filter((t2.id = 1))
------PhysicalOlapScan[t2]

-- !filter_join_left --
PhysicalResultSink
--PhysicalEmptyRelation

-- !filter_join_left --
PhysicalResultSink
--filter(((t1.id = 1) OR (t2.id = 2)))
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
------PhysicalOlapScan[t1]
------PhysicalOlapScan[t2]

-- !filter_join_right --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
----filter((t1.id = 1))
------PhysicalOlapScan[t1]
----filter((t2.id = 1))
------PhysicalOlapScan[t2]

-- !filter_join_full --
PhysicalResultSink
--hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
----filter((t1.id = 1))
------PhysicalOlapScan[t1]
----filter((t2.id = 1))
------PhysicalOlapScan[t2]

-- !filter_join_left --
PhysicalResultSink
--PhysicalEmptyRelation

-- !filter_join_left --
PhysicalResultSink
--filter(((t1.id = 1) OR (t2.id = 2)))
----hashJoin[FULL_OUTER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
------PhysicalOlapScan[t1]
------PhysicalOlapScan[t2]

-- !filter_join_cross --
PhysicalResultSink
--NestedLoopJoin[CROSS_JOIN]
----filter((t1.id = 1))
------PhysicalOlapScan[t1]
----PhysicalOlapScan[t2]

-- !filter_join_left_anti --
PhysicalResultSink
--hashJoin[LEFT_ANTI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
----filter((t1.id = 1))
------PhysicalOlapScan[t1]
----filter((t2.id = 1))
------PhysicalOlapScan[t2]

-- !filter_join_left_semi --
PhysicalResultSink
--hashJoin[LEFT_SEMI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
----filter((t1.id = 1))
------PhysicalOlapScan[t1]
----filter((t2.id = 1))
------PhysicalOlapScan[t2]

-- !filter_join_right_anti --
PhysicalResultSink
--hashJoin[RIGHT_ANTI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
----filter((t1.id = 1))
------PhysicalOlapScan[t1]
----filter((t2.id = 1))
------PhysicalOlapScan[t2]

-- !filter_join_right_semi --
PhysicalResultSink
--hashJoin[RIGHT_SEMI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
----filter((t1.id = 1))
------PhysicalOlapScan[t1]
----filter((t2.id = 1))
------PhysicalOlapScan[t2]

-- !filter_join_right_semi --
PhysicalResultSink
--hashJoin[RIGHT_SEMI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
----filter((t1.id = 1))
------PhysicalOlapScan[t1]
----filter((t2.id = 1))
------PhysicalOlapScan[t2]

-- !filter_multi_inner --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.id = t3.id)) otherCondition=()
----hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
------filter((t1.id = 1))
--------PhysicalOlapScan[t1]
------filter((t2.id = 1))
--------PhysicalOlapScan[t2]
----filter((t3.id = 1))
------PhysicalOlapScan[t3]

-- !filter_mixed_inner_left --
PhysicalResultSink
--filter((((t1.id = 1) AND (t2.id = 2)) OR (t3.id = 2)))
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.id = t3.id)) otherCondition=()
------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
--------PhysicalOlapScan[t1]
--------PhysicalOlapScan[t2]
------PhysicalOlapScan[t3]

-- !filter_multi_left --
PhysicalResultSink
--filter((((t1.id = 1) AND (t2.id > 1)) OR (t3.id < 4)))
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.id = t3.id)) otherCondition=()
------hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
--------PhysicalOlapScan[t1]
--------PhysicalOlapScan[t2]
------PhysicalOlapScan[t3]

-- !filter_multi_outer --
PhysicalResultSink
--hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.id = t3.id)) otherCondition=()
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
------filter((t1.id = 1))
--------PhysicalOlapScan[t1]
------filter((t2.id = 1))
--------PhysicalOlapScan[t2]
----filter((t3.id = 1))
------PhysicalOlapScan[t3]

-- !filter_multi_cross --
PhysicalResultSink
--NestedLoopJoin[CROSS_JOIN]
----NestedLoopJoin[CROSS_JOIN]
------filter((t1.id = 1))
--------PhysicalOlapScan[t1]
------PhysicalOlapScan[t2]
----PhysicalOlapScan[t3]

-- !filter_multi_mixed --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t1.id = t4.id)) otherCondition=()
----hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.id = t3.id)) otherCondition=()
------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
--------filter((t1.id = 1))
----------PhysicalOlapScan[t1]
--------filter((t2.id = 1))
----------PhysicalOlapScan[t2]
------filter((t3.id = 1))
--------PhysicalOlapScan[t3]
----filter((t4.id = 1))
------PhysicalOlapScan[t4]

-- !filter_aggregation_filtered_agg_func --
PhysicalResultSink
--filter((count(*) > 10))
----hashAgg[GLOBAL]
------hashAgg[LOCAL]
--------PhysicalOlapScan[t1]

-- !filter_aggregation_group_set --
PhysicalResultSink
--filter((cast(msg as DOUBLE) = 1.0))
----hashAgg[GLOBAL]
------hashAgg[LOCAL]
--------PhysicalRepeat
----------filter((t1.id > 10))
------------PhysicalOlapScan[t1]

-- !filter_aggregation_group_set --
PhysicalResultSink
--filter(((t1.id > 10) OR (cast(msg as DOUBLE) = 1.0)))
----hashAgg[GLOBAL]
------hashAgg[LOCAL]
--------PhysicalRepeat
----------PhysicalOlapScan[t1]

-- !filter_aggregation_filtered_key --
PhysicalResultSink
--hashAgg[GLOBAL]
----hashAgg[LOCAL]
------filter((t1.msg = '1'))
--------PhysicalOlapScan[t1]

-- !filter_aggregation_filtered_part_key --
PhysicalResultSink
--filter((t.c > 10))
----hashAgg[GLOBAL]
------hashAgg[LOCAL]
--------PhysicalOlapScan[t1]

-- !push_filter_union --
PhysicalResultSink
--hashAgg[GLOBAL]
----hashAgg[LOCAL]
------PhysicalUnion
--------filter((t1.id = 2))
----------PhysicalOlapScan[t1]
--------filter((t2.id = 2))
----------PhysicalOlapScan[t2]

-- !push_filter_union_all --
PhysicalResultSink
--PhysicalUnion
----filter((t1.id = 2))
------PhysicalOlapScan[t1]
----filter((t2.id = 2))
------PhysicalOlapScan[t2]

-- !push_filter_intersect --
PhysicalResultSink
--PhysicalIntersect
----filter((t1.id = 2))
------PhysicalOlapScan[t1]
----filter((t2.id = 2))
------PhysicalOlapScan[t2]

-- !push_filter_except --
PhysicalResultSink
--PhysicalExcept
----filter((t1.id = 2))
------PhysicalOlapScan[t1]
----filter((t2.id = 2))
------PhysicalOlapScan[t2]

-- !push_filter_union --
PhysicalResultSink
--hashAgg[GLOBAL]
----hashAgg[LOCAL]
------PhysicalUnion
--------filter((cast(random() as INT) = 2))
----------PhysicalOneRowRelation
--------filter((t2.id = 2))
----------PhysicalOlapScan[t2]

-- !push_filter_union_all --
PhysicalResultSink
--PhysicalUnion
----filter(cast(random() as INT) IN (2, 3))
------PhysicalOneRowRelation
----filter(id IN (2, 3))
------PhysicalOlapScan[t2]

-- !push_filter_intersect --
PhysicalResultSink
--PhysicalIntersect
----filter(cast(random() as INT) IN (2, 3))
------PhysicalOneRowRelation
----filter(id IN (2, 3))
------PhysicalOlapScan[t2]

-- !push_filter_except --
PhysicalResultSink
--PhysicalExcept
----filter((cast(random() as INT) = 2) and (t1.msg = ''))
------PhysicalOlapScan[t1]
----filter((t2.id = 2) and (t2.msg = ''))
------PhysicalOlapScan[t2]

-- !push_filter_except --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t3.id = t.id)) otherCondition=()
----PhysicalExcept
------filter((t1.id = 2))
--------PhysicalOlapScan[t1]
------filter((t2.id = 2))
--------PhysicalOlapScan[t2]
----PhysicalOlapScan[t3]

-- !push_filter_subquery --
PhysicalResultSink
--hashJoin[INNER_JOIN] hashCondition=((t3.id = t.id)) otherCondition=()
----PhysicalExcept
------filter((t1.id = 2))
--------PhysicalOlapScan[t1]
------filter((t2.id = 2))
--------PhysicalOlapScan[t2]
----PhysicalOlapScan[t3]

-- !filter_window_row_number --
PhysicalResultSink
--PhysicalWindow
----PhysicalQuickSort[LOCAL_SORT]
------filter((t1.id <= 5))
--------PhysicalOlapScan[t1]

-- !filter_window_order_row_number --
PhysicalResultSink
--PhysicalWindow
----PhysicalQuickSort[LOCAL_SORT]
------filter((t1.id <= 5))
--------PhysicalOlapScan[t1]

-- !filter_window_row_number_complex_predicate --
PhysicalResultSink
--PhysicalWindow
----PhysicalQuickSort[LOCAL_SORT]
------filter(((cast(id as DOUBLE) + cast(msg as DOUBLE)) = cast('' as DOUBLE)))
--------PhysicalOlapScan[t1]

-- !filter_multi_window --
PhysicalResultSink
--PhysicalWindow
----PhysicalQuickSort[LOCAL_SORT]
------PhysicalWindow
--------PhysicalQuickSort[LOCAL_SORT]
----------filter(((t1.msg = '') OR (t1.id = 2)))
------------PhysicalOlapScan[t1]

