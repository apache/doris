-- This file is automatically generated. You should know what you did if you want to edit this
-- !pushdown_inner_join --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
--------filter((t1.id > 1))
----------PhysicalOlapScan[t1] apply RFs: RF0
--------PhysicalDistribute
----------filter((t2.id > 1))
------------PhysicalOlapScan[t2]

-- !pushdown_left_semi_join --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[LEFT_SEMI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
--------filter((t1.id > 1))
----------PhysicalOlapScan[t1] apply RFs: RF0
--------PhysicalDistribute
----------PhysicalProject
------------filter((t2.id > 1))
--------------PhysicalOlapScan[t2]

-- !pushdown_right_semi_join --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[RIGHT_SEMI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
--------PhysicalProject
----------filter((t1.id > 1))
------------PhysicalOlapScan[t1] apply RFs: RF0
--------PhysicalDistribute
----------filter((t2.id > 1))
------------PhysicalOlapScan[t2]

-- !pushdown_left_outer_join --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[LEFT_OUTER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=((t1.id > 1))
--------PhysicalOlapScan[t1]
--------PhysicalDistribute
----------filter((t2.id > 1))
------------PhysicalOlapScan[t2]

-- !pushdown_right_outer_join --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[RIGHT_OUTER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
--------PhysicalDistribute
----------filter((t1.id > 1))
------------PhysicalOlapScan[t1]
--------PhysicalDistribute
----------PhysicalOlapScan[t2]

-- !pushdown_full_outer_join --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[FULL_OUTER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=((t1.id > 1))
--------PhysicalDistribute
----------PhysicalOlapScan[t1]
--------PhysicalDistribute
----------PhysicalOlapScan[t2]

-- !pushdown_left_anti_join --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[LEFT_ANTI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=((t1.id > 1))
--------PhysicalOlapScan[t1]
--------PhysicalDistribute
----------PhysicalProject
------------filter((t2.id > 1))
--------------PhysicalOlapScan[t2]

-- !pushdown_right_anti_join --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[RIGHT_ANTI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
--------PhysicalDistribute
----------PhysicalProject
------------filter((t1.id > 1))
--------------PhysicalOlapScan[t1]
--------PhysicalDistribute
----------PhysicalOlapScan[t2]

-- !pushdown_cross_join --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
--------filter((t1.id > 1))
----------PhysicalOlapScan[t1] apply RFs: RF0
--------PhysicalDistribute
----------filter((t2.id > 1))
------------PhysicalOlapScan[t2]

-- !pushdown_inner_join_combined --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[INNER_JOIN] hashCondition=((t2.id = t3.id)) otherCondition=() build RFs:RF1 id->[id]
--------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
----------filter((t1.id < 10) and (t1.id > 1))
------------PhysicalOlapScan[t1] apply RFs: RF0
----------PhysicalDistribute
------------filter((t2.id < 10) and (t2.id > 1))
--------------PhysicalOlapScan[t2] apply RFs: RF1
--------PhysicalDistribute
----------filter((t3.id < 10) and (t3.id > 1))
------------PhysicalOlapScan[t3]

-- !pushdown_left_semi_join_combined --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[INNER_JOIN] hashCondition=((t1.id = t3.id)) otherCondition=() build RFs:RF1 id->[id]
--------hashJoin[LEFT_SEMI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
----------filter((t1.id < 10) and (t1.id > 1))
------------PhysicalOlapScan[t1] apply RFs: RF0 RF1
----------PhysicalDistribute
------------PhysicalProject
--------------filter((t2.id < 10) and (t2.id > 1))
----------------PhysicalOlapScan[t2]
--------PhysicalDistribute
----------filter((t3.id < 10) and (t3.id > 1))
------------PhysicalOlapScan[t3]

-- !pushdown_right_semi_join_combined --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[INNER_JOIN] hashCondition=((t2.id = t3.id)) otherCondition=() build RFs:RF1 id->[id]
--------hashJoin[RIGHT_SEMI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
----------PhysicalProject
------------filter((t1.id < 10) and (t1.id > 1))
--------------PhysicalOlapScan[t1] apply RFs: RF0
----------PhysicalDistribute
------------filter((t2.id < 10) and (t2.id > 1))
--------------PhysicalOlapScan[t2] apply RFs: RF1
--------PhysicalDistribute
----------filter((t3.id < 10) and (t3.id > 1))
------------PhysicalOlapScan[t3]

-- !pushdown_left_outer_join_combined --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[INNER_JOIN] hashCondition=((t2.id = t3.id)) otherCondition=() build RFs:RF1 id->[id]
--------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
----------filter((t1.id < 10) and (t1.id > 1))
------------PhysicalOlapScan[t1] apply RFs: RF0
----------PhysicalDistribute
------------filter((t2.id < 10) and (t2.id > 1))
--------------PhysicalOlapScan[t2] apply RFs: RF1
--------PhysicalDistribute
----------filter((t3.id < 10) and (t3.id > 1))
------------PhysicalOlapScan[t3]

-- !pushdown_right_outer_join_combined --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[INNER_JOIN] hashCondition=((t2.id = t3.id)) otherCondition=() build RFs:RF1 id->[id]
--------hashJoin[RIGHT_OUTER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
----------PhysicalDistribute
------------filter((t1.id < 10) and (t1.id > 1))
--------------PhysicalOlapScan[t1] apply RFs: RF0
----------PhysicalDistribute
------------filter((t2.id < 10))
--------------PhysicalOlapScan[t2] apply RFs: RF1
--------PhysicalDistribute
----------filter((t3.id < 10))
------------PhysicalOlapScan[t3]

-- !pushdown_full_outer_join_combined --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[INNER_JOIN] hashCondition=((t2.id = t3.id)) otherCondition=() build RFs:RF1 id->[id]
--------hashJoin[RIGHT_OUTER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
----------PhysicalDistribute
------------filter((t1.id < 10) and (t1.id > 1))
--------------PhysicalOlapScan[t1] apply RFs: RF0
----------PhysicalDistribute
------------filter((t2.id < 10))
--------------PhysicalOlapScan[t2] apply RFs: RF1
--------PhysicalDistribute
----------filter((t3.id < 10))
------------PhysicalOlapScan[t3]

-- !pushdown_left_anti_join_combined --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[INNER_JOIN] hashCondition=((t1.id = t3.id)) otherCondition=() build RFs:RF0 id->[id]
--------hashJoin[LEFT_ANTI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=((t1.id > 1))
----------filter((t1.id < 10))
------------PhysicalOlapScan[t1] apply RFs: RF0
----------PhysicalDistribute
------------PhysicalProject
--------------filter((t2.id < 10) and (t2.id > 1))
----------------PhysicalOlapScan[t2]
--------PhysicalDistribute
----------filter((t3.id < 10))
------------PhysicalOlapScan[t3]

-- !pushdown_right_anti_join_combined --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[INNER_JOIN] hashCondition=((t2.id = t3.id)) otherCondition=() build RFs:RF1 id->[id]
--------hashJoin[RIGHT_ANTI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
----------PhysicalDistribute
------------PhysicalProject
--------------filter((t1.id < 10) and (t1.id > 1))
----------------PhysicalOlapScan[t1] apply RFs: RF0
----------PhysicalDistribute
------------filter((t2.id < 10))
--------------PhysicalOlapScan[t2] apply RFs: RF1
--------PhysicalDistribute
----------filter((t3.id < 10))
------------PhysicalOlapScan[t3]

-- !pushdown_cross_join_combined --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[INNER_JOIN] hashCondition=((t2.id = t3.id)) otherCondition=() build RFs:RF0 id->[id]
--------PhysicalDistribute
----------NestedLoopJoin[CROSS_JOIN]
------------PhysicalOlapScan[t1]
------------PhysicalDistribute
--------------filter((t2.id < 10))
----------------PhysicalOlapScan[t2] apply RFs: RF0
--------PhysicalDistribute
----------filter((t3.id < 10))
------------PhysicalOlapScan[t3]

-- !pushdown_null_aware_anti_join_combined --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[NULL_AWARE_LEFT_ANTI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
--------PhysicalOlapScan[t1]
--------PhysicalDistribute
----------PhysicalProject
------------filter((t2.id > 0))
--------------PhysicalOlapScan[t2]

-- !pushdown_inner_join_subquery --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[INNER_JOIN] hashCondition=((expr_cast(id as BIGINT) = sum(id))) otherCondition=() build RFs:RF0 sum(id)->[id]
--------PhysicalDistribute
----------PhysicalProject
------------filter((cast(id as BIGINT) = 1) and (t1.id = 1))
--------------PhysicalOlapScan[t1] apply RFs: RF0
--------PhysicalDistribute
----------filter((sum(id) = 1))
------------hashAgg[GLOBAL]
--------------PhysicalDistribute
----------------hashAgg[LOCAL]
------------------PhysicalProject
--------------------PhysicalOlapScan[t2]

-- !pushdown_left_semi_join_subquery --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[LEFT_SEMI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
--------filter((t1.id > 1))
----------PhysicalOlapScan[t1] apply RFs: RF0
--------PhysicalDistribute
----------PhysicalProject
------------filter((t2.id > 1))
--------------PhysicalOlapScan[t2]

-- !pushdown_left_outer_join_subquery --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------filter(((cast(id as BIGINT) = sum(id)) OR id IS NULL))
--------NestedLoopJoin[LEFT_OUTER_JOIN](t1.id = 1)
----------PhysicalOlapScan[t1]
----------PhysicalDistribute
------------hashAgg[GLOBAL]
--------------PhysicalDistribute
----------------hashAgg[LOCAL]
------------------PhysicalProject
--------------------PhysicalOlapScan[t2]

-- !pushdown_left_anti_join_subquery --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------NestedLoopJoin[LEFT_ANTI_JOIN](((t1.id = t2.id) OR id IS NULL) OR id IS NULL)(t1.id > 1)
--------PhysicalOlapScan[t1]
--------PhysicalDistribute
----------PhysicalProject
------------PhysicalOlapScan[t2]

-- !pushdown_cross_subquery --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------NestedLoopJoin[LEFT_SEMI_JOIN]
--------filter((t1.id > 1))
----------PhysicalOlapScan[t1]
--------PhysicalDistribute
----------PhysicalProject
------------PhysicalOlapScan[t2]

-- !pushdown_inner_join_subquery_outer --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[INNER_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
--------filter((t1.id > 1))
----------PhysicalOlapScan[t1] apply RFs: RF0
--------PhysicalDistribute
----------filter((t2.id > 1))
------------PhysicalAssertNumRows
--------------PhysicalDistribute
----------------PhysicalProject
------------------PhysicalOlapScan[t2]

-- !pushdown_left_semi_join_subquery_outer --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[LEFT_SEMI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=() build RFs:RF0 id->[id]
--------filter((t1.id > 1))
----------PhysicalOlapScan[t1] apply RFs: RF0
--------PhysicalDistribute
----------PhysicalProject
------------filter((t2.id > 1))
--------------PhysicalOlapScan[t2]

-- !pushdown_left_outer_join_subquery_outer --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------NestedLoopJoin[INNER_JOIN]((t1.id = t2.id) OR (id IS NULL AND (t1.id > 1)))
--------PhysicalOlapScan[t1]
--------PhysicalDistribute
----------PhysicalAssertNumRows
------------PhysicalDistribute
--------------PhysicalProject
----------------PhysicalOlapScan[t2]

-- !pushdown_left_anti_join_subquery_outer --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------hashJoin[NULL_AWARE_LEFT_ANTI_JOIN] hashCondition=((t1.id = t2.id)) otherCondition=()
--------filter((t1.id > 1))
----------PhysicalOlapScan[t1]
--------PhysicalDistribute
----------PhysicalProject
------------filter((t2.id > 1))
--------------PhysicalOlapScan[t2]

-- !pushdown_cross_join_subquery_outer --
PhysicalResultSink
--PhysicalDistribute
----PhysicalProject
------NestedLoopJoin[CROSS_JOIN]
--------filter((t1.id > 1))
----------PhysicalOlapScan[t1]
--------PhysicalDistribute
----------PhysicalLimit[GLOBAL]
------------PhysicalDistribute
--------------PhysicalLimit[LOCAL]
----------------PhysicalProject
------------------PhysicalOlapScan[t2]

