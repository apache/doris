// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

suite("nereids_scalar_fn_4") {
    sql "use regression_test_nereids_function_p0"
    sql "set enable_nereids_planner=true"
    sql "set enable_fallback_to_original_planner=false"

    def tableList = ["fn_test", "fn_test_not_nullable"]
    tableList.each {
        qt_sql "select radians(kdbl) from ${it} order by kdbl"
        sql "select random() from ${it}"
        sql "select random(1000) from ${it} order by kbint"
        qt_sql "select regexp_extract(kvchrs1, kvchrs1, kbint) from ${it} order by kvchrs1, kvchrs1, kbint"
        qt_sql "select regexp_extract(kstr, kstr, kbint) from ${it} order by kstr, kstr, kbint"
        // qt_sql "select regexp_extract_all(kvchrs1, kvchrs1) from ${it} order by kvchrs1, kvchrs1"
        // qt_sql "select regexp_extract_all(kstr, kstr) from ${it} order by kstr, kstr"
        qt_sql "select regexp_replace(kvchrs1, kvchrs1, kvchrs1) from ${it} order by kvchrs1, kvchrs1, kvchrs1"
        qt_sql "select regexp_replace(kstr, kstr, kstr) from ${it} order by kstr, kstr, kstr"
        qt_sql "select regexp_replace_one(kvchrs1, kvchrs1, kvchrs1) from ${it} order by kvchrs1, kvchrs1, kvchrs1"
        qt_sql "select regexp_replace_one(kstr, kstr, kstr) from ${it} order by kstr, kstr, kstr"
        qt_sql "select repeat(kvchrs1, kint) from ${it} order by kvchrs1, kint"
        qt_sql "select repeat(kstr, kint) from ${it} order by kstr, kint"
        qt_sql "select replace(kvchrs1, kvchrs1, kvchrs1) from ${it} order by kvchrs1, kvchrs1, kvchrs1"
        qt_sql "select replace(kstr, kstr, kstr) from ${it} order by kstr, kstr, kstr"
        qt_sql "select right(kvchrs1, kint) from ${it} order by kvchrs1, kint"
        qt_sql "select right(kstr, kint) from ${it} order by kstr, kint"
        qt_sql "select round(kdbl) from ${it} order by kdbl"
        qt_sql "select round(kdbl, 2) from ${it} order by kdbl, kint"
        qt_sql "select round_bankers(kdbl) from ${it} order by kdbl"
        qt_sql "select round_bankers(kdbl, 2) from ${it} order by kdbl, kint"
        qt_sql "select rpad(kvchrs1, kint%1000, kvchrs1) from ${it} order by kvchrs1, kint, kvchrs1"
        qt_sql "select rpad(kstr, kint%1000, kstr) from ${it} order by kstr, kint, kstr"
        qt_sql "select rtrim(kvchrs1) from ${it} order by kvchrs1"
        qt_sql "select rtrim(kstr) from ${it} order by kstr"
        sql "select running_difference(ktint) from ${it} order by ktint"
        sql "select running_difference(ksint) from ${it} order by ksint"
        sql "select running_difference(kint) from ${it} order by kint"
        // qt_sql "select running_difference(kbint) from ${it} order by kbint"
        sql "select running_difference(klint) from ${it} order by klint"
        sql "select running_difference(kfloat) from ${it} order by kfloat"
        sql "select running_difference(kdbl) from ${it} order by kdbl"
        sql "select running_difference(kdcmls1) from ${it} order by kdcmls1"
        // sql "select running_difference(kdt) from ${it} order by kdt"
        sql "select running_difference(kdtv2) from ${it} order by kdtv2"
        // qt_sql "select running_difference(kdtm) from ${it} order by kdtm"
        // qt_sql "select running_difference(kdtmv2s1) from ${it} order by kdtmv2s1"
        qt_sql "select second(kdtm) from ${it} order by kdtm"
        qt_sql "select second(kdtmv2s1) from ${it} order by kdtmv2s1"
        qt_sql "select second(kdtv2) from ${it} order by kdtv2"
        qt_sql "select second_ceil(kdtm) from ${it} order by kdtm"
        qt_sql "select second_ceil(kdtmv2s1) from ${it} order by kdtmv2s1"
        // qt_sql "select second_ceil(kdtv2) from ${it} order by kdtv2"
        qt_sql "select second_ceil(kdtm, kdtm) from ${it} order by kdtm, kdtm"
        qt_sql "select second_ceil(kdtm, kint) from ${it} order by kdtm, kint"
        qt_sql "select second_ceil(kdtmv2s1, kdtmv2s1) from ${it} order by kdtmv2s1, kdtmv2s1"
        qt_sql "select second_ceil(kdtmv2s1, kint) from ${it} order by kdtmv2s1, kint"
        // qt_sql "select second_ceil(kdtv2, kdtv2) from ${it} order by kdtv2, kdtv2"
        // qt_sql "select second_ceil(kdtv2, kint) from ${it} order by kdtv2, kint"
        qt_sql "select second_ceil(kdtm, kint, kdtm) from ${it} order by kdtm, kint, kdtm"
        qt_sql "select second_ceil(kdtmv2s1, kint, kdtmv2s1) from ${it} order by kdtmv2s1, kint, kdtmv2s1"
        // qt_sql "select second_ceil(kdtv2, kint, kdtv2) from ${it} order by kdtv2, kint, kdtv2"
        qt_sql "select second_floor(kdtm) from ${it} order by kdtm"
        qt_sql "select second_floor(kdtmv2s1) from ${it} order by kdtmv2s1"
        // qt_sql "select second_floor(kdtv2) from ${it} order by kdtv2"
        qt_sql "select second_floor(kdtm, kdtm) from ${it} order by kdtm, kdtm"
        qt_sql "select second_floor(kdtm, kint) from ${it} order by kdtm, kint"
        qt_sql "select second_floor(kdtmv2s1, kdtmv2s1) from ${it} order by kdtmv2s1, kdtmv2s1"
        qt_sql "select second_floor(kdtmv2s1, kint) from ${it} order by kdtmv2s1, kint"
        // qt_sql "select second_floor(kdtv2, kdtv2) from ${it} order by kdtv2, kdtv2"
        // qt_sql "select second_floor(kdtv2, kint) from ${it} order by kdtv2, kint"
        qt_sql "select second_floor(kdtm, kint, kdtm) from ${it} order by kdtm, kint, kdtm"
        qt_sql "select second_floor(kdtmv2s1, kint, kdtmv2s1) from ${it} order by kdtmv2s1, kint, kdtmv2s1"
        // qt_sql "select second_floor(kdtv2, kint, kdtv2) from ${it} order by kdtv2, kint, kdtv2"
        qt_sql "select seconds_add(kdtm, kint) from ${it} order by kdtm, kint"
        qt_sql "select seconds_add(kdtmv2s1, kint) from ${it} order by kdtmv2s1, kint"
        qt_sql "select seconds_add(kdt, kint) from ${it} order by kdt, kint"
        qt_sql "select seconds_add(kdtv2, kint) from ${it} order by kdtv2, kint"
        qt_sql "select seconds_diff(kdtm, kdtm) from ${it} order by kdtm, kdtm"
        qt_sql "select seconds_diff(kdtmv2s1, kdtmv2s1) from ${it} order by kdtmv2s1, kdtmv2s1"
        qt_sql "select seconds_diff(kdtv2, kdtmv2s1) from ${it} order by kdtv2, kdtmv2s1"
        qt_sql "select seconds_diff(kdtmv2s1, kdtv2) from ${it} order by kdtmv2s1, kdtv2"
        qt_sql "select seconds_diff(kdtv2, kdtv2) from ${it} order by kdtv2, kdtv2"
        qt_sql "select seconds_diff(kdtv2, kdtm) from ${it} order by kdtv2, kdtm"
        qt_sql "select seconds_diff(kdtm, kdtv2) from ${it} order by kdtm, kdtv2"
        qt_sql "select seconds_diff(kdtmv2s1, kdtm) from ${it} order by kdtmv2s1, kdtm"
        qt_sql "select seconds_diff(kdtm, kdtmv2s1) from ${it} order by kdtm, kdtmv2s1"
        qt_sql "select seconds_sub(kdtm, kint) from ${it} order by kdtm, kint"
        qt_sql "select seconds_sub(kdtmv2s1, kint) from ${it} order by kdtmv2s1, kint"
        qt_sql "select seconds_sub(kdt, kint) from ${it} order by kdt, kint"
        qt_sql "select seconds_sub(kdtv2, kint) from ${it} order by kdtv2, kint"
        qt_sql "select sign(kdbl) from ${it} order by kdbl"
        qt_sql "select sin(kdbl) from ${it} order by kdbl"
        qt_sql "select sleep(0.1) from ${it} order by kint"
        qt_sql "select sm3(kvchrs1) from ${it} order by kvchrs1"
        qt_sql "select sm3(kstr) from ${it} order by kstr"
        qt_sql "select sm3sum(kvchrs1) from ${it} order by kvchrs1"
        qt_sql "select sm3sum(kstr) from ${it} order by kstr"
        sql "select sm4_decrypt(kvchrs1, kvchrs1) from ${it} order by kvchrs1, kvchrs1"
        sql "select sm4_decrypt(kstr, kstr) from ${it} order by kstr, kstr"

        sql "select sm4_decrypt(kvchrs1, kvchrs1, kvchrs1) from ${it} order by kvchrs1, kvchrs1, kvchrs1"
        sql "select sm4_decrypt(kstr, kstr, kstr) from ${it} order by kstr, kstr, kstr"
        qt_sql "select sm4_decrypt(kvchrs1, kvchrs1, kvchrs1, 'SM4_128_ECB') from ${it} order by kvchrs1, kvchrs1, kvchrs1, kvchrs1"
        qt_sql "select sm4_decrypt(kstr, kstr, kstr, kstr) from ${it} order by kstr, kstr, kstr, kstr"
        sql "select sm4_encrypt(kvchrs1, kvchrs1) from ${it} order by kvchrs1, kvchrs1"
        sql "select sm4_encrypt(kstr, kstr) from ${it} order by kstr, kstr"
        sql "select sm4_encrypt(kvchrs1, kvchrs1, kvchrs1) from ${it} order by kvchrs1, kvchrs1, kvchrs1"
        sql "select sm4_encrypt(kstr, kstr, kstr) from ${it} order by kstr, kstr, kstr"
        qt_sql "select sm4_encrypt(kvchrs1, kvchrs1, kvchrs1, 'SM4_128_ECB') from ${it} order by kvchrs1, kvchrs1, kvchrs1, kvchrs1"
        qt_sql "select sm4_encrypt(kstr, kstr, kstr, kstr) from ${it} order by kstr, kstr, kstr, kstr"
        sql "select space(10) from ${it} order by kint"
        qt_sql "select split_part(kvchrs1, ' ', 1) from ${it} order by kvchrs1, kvchrs1, kint"
        qt_sql "select split_part(kstr, ' ', 1) from ${it} order by kstr, kstr, kint"
        qt_sql "select sqrt(kdbl) from ${it} order by kdbl"
        qt_sql "select st_astext(st_point_vc) from ${it} order by st_point_vc"
        qt_sql "select st_astext(st_point_str) from ${it} order by st_point_str"
        qt_sql "select st_aswkt(st_point_vc) from ${it} order by st_point_vc"
        qt_sql "select st_aswkt(st_point_str) from ${it} order by st_point_str"
        qt_sql "select st_circle(kdbl, kdbl, kdbl) from ${it} order by kdbl, kdbl, kdbl"
        qt_sql "select st_contains(st_point_vc, st_point_vc) from ${it} order by st_point_vc, st_point_vc"
        qt_sql "select st_distance_sphere(kdbl, kdbl, kdbl, kdbl) from ${it} order by kdbl, kdbl, kdbl, kdbl"
        qt_sql "select st_geometryfromtext(st_point_vc) from ${it} order by st_point_vc"
        qt_sql "select st_geometryfromtext(st_point_str) from ${it} order by st_point_str"
        qt_sql "select st_geomfromtext(st_point_vc) from ${it} order by st_point_vc"
        qt_sql "select st_geomfromtext(st_point_str) from ${it} order by st_point_str"
        qt_sql "select st_linefromtext(st_point_vc) from ${it} order by st_point_vc"
        qt_sql "select st_linefromtext(st_point_str) from ${it} order by st_point_str"
        qt_sql "select st_linestringfromtext(st_point_vc) from ${it} order by st_point_vc"
        qt_sql "select st_linestringfromtext(st_point_str) from ${it} order by st_point_str"
        qt_sql "select st_point(kdbl, kdbl) from ${it} order by kdbl, kdbl"
        qt_sql "select st_polyfromtext(st_point_vc) from ${it} order by st_point_vc"
        qt_sql "select st_polyfromtext(st_point_str) from ${it} order by st_point_str"
        qt_sql "select st_polygon(st_point_vc) from ${it} order by st_point_vc"
        qt_sql "select st_polygon(st_point_str) from ${it} order by st_point_str"
        qt_sql "select st_polygonfromtext(st_point_vc) from ${it} order by st_point_vc"
        qt_sql "select st_polygonfromtext(st_point_str) from ${it} order by st_point_str"
        qt_sql "select st_x(st_point_vc) from ${it} order by st_point_vc"
        qt_sql "select st_x(st_point_str) from ${it} order by st_point_str"
        qt_sql "select st_y(st_point_vc) from ${it} order by st_point_vc"
        qt_sql "select st_y(st_point_str) from ${it} order by st_point_str"
        qt_sql "select starts_with(kvchrs1, kvchrs1) from ${it} order by kvchrs1, kvchrs1"
        qt_sql "select starts_with(kstr, kstr) from ${it} order by kstr, kstr"
        qt_sql "select strleft(kvchrs1, kint) from ${it} order by kvchrs1, kint"
        qt_sql "select strleft(kstr, kint) from ${it} order by kstr, kint"
        qt_sql "select strright(kvchrs1, kint) from ${it} order by kvchrs1, kint"
        qt_sql "select strright(kstr, kint) from ${it} order by kstr, kint"
        qt_sql "select str_to_date(kvchrs1, kvchrs1) from ${it} order by kvchrs1, kvchrs1"
        qt_sql "select str_to_date(kstr, kstr) from ${it} order by kstr, kstr"
// function sub_bitmap(bitmap, bigint, bigint) is unsupported for the test suite.
        qt_sql "select sub_replace(kvchrs1, kvchrs1, kint) from ${it} order by kvchrs1, kvchrs1, kint"
        qt_sql "select sub_replace(kstr, kstr, kint) from ${it} order by kstr, kstr, kint"
        qt_sql "select sub_replace(kvchrs1, kvchrs1, kint, kint) from ${it} order by kvchrs1, kvchrs1, kint, kint"
        qt_sql "select sub_replace(kstr, kstr, kint, kint) from ${it} order by kstr, kstr, kint, kint"
        qt_sql "select substring(kvchrs1, kint) from ${it} order by kvchrs1, kint"
        qt_sql "select substring(kstr, kint) from ${it} order by kstr, kint"
        qt_sql "select substring(kvchrs1, kint, kint) from ${it} order by kvchrs1, kint, kint"
        qt_sql "select substring(kstr, kint, kint) from ${it} order by kstr, kint, kint"
        qt_sql "select substring_index(kvchrs1, ' ', 2) from ${it} order by kvchrs1, kvchrs1, kint"
        qt_sql "select substring_index(kstr, ' ', 2) from ${it} order by kstr, kstr, kint"
        qt_sql "select tan(kdbl) from ${it} order by kdbl"
        qt_sql "select timediff(kdtm, kdtm) from ${it} order by kdtm, kdtm"
        qt_sql "select timediff(kdtmv2s1, kdtmv2s1) from ${it} order by kdtmv2s1, kdtmv2s1"
        qt_sql "select timediff(kdtmv2s1, kdtv2) from ${it} order by kdtmv2s1, kdtv2"
        qt_sql "select timediff(kdtv2, kdtmv2s1) from ${it} order by kdtv2, kdtmv2s1"
        qt_sql "select timediff(kdtv2, kdtv2) from ${it} order by kdtv2, kdtv2"
        qt_sql "select timediff(kdtmv2s1, kdtm) from ${it} order by kdtmv2s1, kdtm"
        qt_sql "select timediff(kdtv2, kdtm) from ${it} order by kdtv2, kdtm"
        qt_sql "select timestamp(kdtm) from ${it} order by kdtm"
        qt_sql "select timestamp(kdtmv2s1) from ${it} order by kdtmv2s1"
        qt_sql "select to_base64(kstr) from ${it} order by kstr"
        qt_sql "select to_bitmap(kvchrs1) from ${it} order by kvchrs1"
        qt_sql "select to_bitmap(kstr) from ${it} order by kstr"
        // qt_sql "select to_bitmap_with_check(kvchrs1) from ${it} where kvchrs1 is not null order by kvchrs1"
        // qt_sql "select to_bitmap_with_check(kstr) from ${it} where kstr is not null order by kstr"
        qt_sql "select to_date(kdtm) from ${it} order by kdtm"
        qt_sql "select to_date(kdtmv2s1) from ${it} order by kdtmv2s1"
        qt_sql "select to_datev2(kdtmv2s1) from ${it} order by kdtmv2s1"
        qt_sql "select to_days(kdt) from ${it} order by kdt"
        qt_sql "select to_days(kdtv2) from ${it} order by kdtv2"
        qt_sql "select to_monday(kdtmv2s1) from ${it} order by kdtmv2s1"
        qt_sql "select to_monday(kdtv2) from ${it} order by kdtv2"
        qt_sql "select to_monday(kdtm) from ${it} order by kdtm"
        qt_sql "select to_monday(kdt) from ${it} order by kdt"
        // qt_sql "select to_quantile_state(kvchrs1, 0.05) from ${it} order by kvchrs1, kfloat"
        qt_sql "select trim(kvchrs1) from ${it} order by kvchrs1"
        qt_sql "select trim(kstr) from ${it} order by kstr"
        qt_sql "select truncate(kdbl, 2) from ${it} order by kdbl, kint"
        qt_sql "select unhex(kvchrs1) from ${it} order by kvchrs1"
        qt_sql "select unhex(kstr) from ${it} order by kstr"
        sql "select unix_timestamp() from fn_test"
        qt_sql "select unix_timestamp(kdtm) from ${it} order by kdtm"
        qt_sql "select unix_timestamp(kdt) from ${it} order by kdt"
        qt_sql "select unix_timestamp(kdtmv2s1) from ${it} order by kdtmv2s1"
        qt_sql "select unix_timestamp(kdtv2) from ${it} order by kdtv2"
        qt_sql "select unix_timestamp(kvchrs1, kvchrs1) from ${it} order by kvchrs1, kvchrs1"
        qt_sql "select unix_timestamp(kstr, kstr) from ${it} order by kstr, kstr"
        qt_sql "select upper(kvchrs1) from ${it} order by kvchrs1"
        qt_sql "select upper(kstr) from ${it} order by kstr"
        sql "select user() from fn_test"
        sql "select utc_timestamp() from fn_test"
        sql "select uuid() from fn_test"
        sql "select version() from fn_test"
        qt_sql "select week(kdtm) from ${it} order by kdtm"
        qt_sql "select week(kdtmv2s1) from ${it} order by kdtmv2s1"
        qt_sql "select week(kdtv2) from ${it} order by kdtv2"
        qt_sql "select week(kdtm, kint) from ${it} order by kdtm, kint"
        qt_sql "select week(kdtmv2s1, kint) from ${it} order by kdtmv2s1, kint"
        qt_sql "select week(kdtv2, kint) from ${it} order by kdtv2, kint"
        qt_sql "select week_ceil(kdtm) from ${it} order by kdtm"
        qt_sql "select week_ceil(kdtmv2s1) from ${it} order by kdtmv2s1"
        qt_sql "select week_ceil(kdtv2) from ${it} order by kdtv2"
        qt_sql "select week_ceil(kdtm, kdtm) from ${it} order by kdtm, kdtm"
        qt_sql "select week_ceil(kdtm, kint) from ${it} order by kdtm, kint"
        qt_sql "select week_ceil(kdtmv2s1, kdtmv2s1) from ${it} order by kdtmv2s1, kdtmv2s1"
        qt_sql "select week_ceil(kdtmv2s1, kint) from ${it} order by kdtmv2s1, kint"
        qt_sql "select week_ceil(kdtv2, kdtv2) from ${it} order by kdtv2, kdtv2"
        qt_sql "select week_ceil(kdtv2, kint) from ${it} order by kdtv2, kint"
        qt_sql "select week_ceil(kdtm, kint, kdtm) from ${it} order by kdtm, kint, kdtm"
        qt_sql "select week_ceil(kdtmv2s1, kint, kdtmv2s1) from ${it} order by kdtmv2s1, kint, kdtmv2s1"
        qt_sql "select week_ceil(kdtv2, kint, kdtv2) from ${it} order by kdtv2, kint, kdtv2"
        qt_sql "select week_floor(kdtm) from ${it} order by kdtm"
        qt_sql "select week_floor(kdtmv2s1) from ${it} order by kdtmv2s1"
        qt_sql "select week_floor(kdtv2) from ${it} order by kdtv2"
        qt_sql "select week_floor(kdtm, kdtm) from ${it} order by kdtm, kdtm"
        qt_sql "select week_floor(kdtm, kint) from ${it} order by kdtm, kint"
        qt_sql "select week_floor(kdtmv2s1, kdtmv2s1) from ${it} order by kdtmv2s1, kdtmv2s1"
        qt_sql "select week_floor(kdtmv2s1, kint) from ${it} order by kdtmv2s1, kint"
        qt_sql "select week_floor(kdtv2, kdtv2) from ${it} order by kdtv2, kdtv2"
        qt_sql "select week_floor(kdtv2, kint) from ${it} order by kdtv2, kint"
        qt_sql "select week_floor(kdtm, kint, kdtm) from ${it} order by kdtm, kint, kdtm"
        qt_sql "select week_floor(kdtmv2s1, kint, kdtmv2s1) from ${it} order by kdtmv2s1, kint, kdtmv2s1"
        qt_sql "select week_floor(kdtv2, kint, kdtv2) from ${it} order by kdtv2, kint, kdtv2"
        qt_sql "select weekofyear(kdtm) from ${it} order by kdtm"
        qt_sql "select weekofyear(kdtmv2s1) from ${it} order by kdtmv2s1"
        qt_sql "select weekofyear(kdtv2) from ${it} order by kdtv2"
        qt_sql "select weekday(kdtm) from ${it} order by kdtm"
        qt_sql "select weekday(kdtmv2s1) from ${it} order by kdtmv2s1"
        qt_sql "select weekday(kdtv2) from ${it} order by kdtv2"
        qt_sql "select weeks_diff(kdtm, kdtm) from ${it} order by kdtm, kdtm"
        qt_sql "select weeks_diff(kdtmv2s1, kdtmv2s1) from ${it} order by kdtmv2s1, kdtmv2s1"
        qt_sql "select weeks_diff(kdtv2, kdtmv2s1) from ${it} order by kdtv2, kdtmv2s1"
        qt_sql "select weeks_diff(kdtmv2s1, kdtv2) from ${it} order by kdtmv2s1, kdtv2"
        qt_sql "select weeks_diff(kdtv2, kdtv2) from ${it} order by kdtv2, kdtv2"
        qt_sql "select weeks_diff(kdtv2, kdtm) from ${it} order by kdtv2, kdtm"
        qt_sql "select weeks_diff(kdtm, kdtv2) from ${it} order by kdtm, kdtv2"
        qt_sql "select weeks_diff(kdtmv2s1, kdtm) from ${it} order by kdtmv2s1, kdtm"
        qt_sql "select weeks_diff(kdtm, kdtmv2s1) from ${it} order by kdtm, kdtmv2s1"
    }
}