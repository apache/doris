// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.


suite("test_cast_to_double_from_decimalv2_20_6") {

    // This test case is generated from the correspoinding be UT test case,
    // update this case if the correspoinding be UT test case is updated,
    // e.g.: ../run-be-ut.sh --run --filter=FunctionCastToDecimalTest.* --gen_regression_case
    sql "drop table if exists test_cast_to_double_from_decimalv2_20_6_0_nullable;"
    sql "create table test_cast_to_double_from_decimalv2_20_6_0_nullable(f1 int, f2 decimalv2(20, 6)) properties('replication_num'='1');"
    sql """insert into test_cast_to_double_from_decimalv2_20_6_0_nullable values (0, "0.000000"),(1, "0.000000"),(2, "0.001000"),(3, "-0.001000"),(4, "0.009000"),(5, "-0.009000"),(6, "0.999999"),(7, "-0.999999"),(8, "99.999000"),(9, "-99.999000"),(10, "900.000000"),(11, "-900.000000"),(12, "900.001000"),(13, "-900.001000"),(14, "999.998000"),(15, "-999.998000"),(16, "1000.000000"),(17, "-1000.000000"),(18, "1000.001000"),(19, "-1000.001000"),
      (20, "1000.009000"),(21, "-1000.009000"),(22, "1000.999999"),(23, "-1000.999999"),(24, "1099.999000"),(25, "-1099.999000"),(26, "1900.000000"),(27, "-1900.000000"),(28, "1900.001000"),(29, "-1900.001000"),(30, "1999.998000"),(31, "-1999.998000"),(32, "9000.000000"),(33, "-9000.000000"),(34, "9000.001000"),(35, "-9000.001000"),(36, "9000.009000"),(37, "-9000.009000"),(38, "9000.999999"),(39, "-9000.999999"),
      (40, "9099.999000"),(41, "-9099.999000"),(42, "9900.000000"),(43, "-9900.000000"),(44, "9900.001000"),(45, "-9900.001000"),(46, "9999.998000"),(47, "-9999.998000"),(48, "9999999999999000.000000"),(49, "-9999999999999000.000000"),(50, "9999999999999000.001000"),(51, "-9999999999999000.001000"),(52, "9999999999999000.009000"),(53, "-9999999999999000.009000"),(54, "9999999999999000.999999"),(55, "-9999999999999000.999999"),(56, "9999999999999099.999000"),(57, "-9999999999999099.999000"),(58, "9999999999999900.000000"),(59, "-9999999999999900.000000"),
      (60, "9999999999999900.001000"),(61, "-9999999999999900.001000"),(62, "9999999999999999.998000"),(63, "-9999999999999999.998000"),(64, "90000000000000000.000000"),(65, "-90000000000000000.000000"),(66, "90000000000000000.001000"),(67, "-90000000000000000.001000"),(68, "90000000000000000.009000"),(69, "-90000000000000000.009000"),(70, "90000000000000000.999999"),(71, "-90000000000000000.999999"),(72, "90000000000000099.999000"),(73, "-90000000000000099.999000"),(74, "90000000000000900.000000"),(75, "-90000000000000900.000000"),(76, "90000000000000900.001000"),(77, "-90000000000000900.001000"),(78, "90000000000000999.998000"),(79, "-90000000000000999.998000"),
      (80, "90000000000001000.000000"),(81, "-90000000000001000.000000"),(82, "90000000000001000.001000"),(83, "-90000000000001000.001000"),(84, "90000000000001000.009000"),(85, "-90000000000001000.009000"),(86, "90000000000001000.999999"),(87, "-90000000000001000.999999"),(88, "90000000000001099.999000"),(89, "-90000000000001099.999000"),(90, "90000000000001900.000000"),(91, "-90000000000001900.000000"),(92, "90000000000001900.001000"),(93, "-90000000000001900.001000"),(94, "90000000000001999.998000"),(95, "-90000000000001999.998000"),(96, "99999999999998000.000000"),(97, "-99999999999998000.000000"),(98, "99999999999998000.001000"),(99, "-99999999999998000.001000"),
      (100, "99999999999998000.009000"),(101, "-99999999999998000.009000"),(102, "99999999999998000.999999"),(103, "-99999999999998000.999999"),(104, "99999999999998099.999000"),(105, "-99999999999998099.999000"),(106, "99999999999998900.000000"),(107, "-99999999999998900.000000"),(108, "99999999999998900.001000"),(109, "-99999999999998900.001000"),(110, "99999999999998999.998000"),(111, "-99999999999998999.998000"),(112, "99999999999999000.000000"),(113, "-99999999999999000.000000"),(114, "99999999999999000.001000"),(115, "-99999999999999000.001000"),(116, "99999999999999000.009000"),(117, "-99999999999999000.009000"),(118, "99999999999999000.999999"),(119, "-99999999999999000.999999"),
      (120, "99999999999999099.999000"),(121, "-99999999999999099.999000"),(122, "99999999999999900.000000"),(123, "-99999999999999900.000000"),(124, "99999999999999900.001000"),(125, "-99999999999999900.001000"),(126, "99999999999999999.998000"),(127, "-99999999999999999.998000")
      ,(128, null);
    """

    sql "set enable_strict_cast=true;"
    qt_sql_0_strict 'select f1, cast(f2 as double) from test_cast_to_double_from_decimalv2_20_6_0_nullable order by 1;'

    sql "set enable_strict_cast=false;"
    qt_sql_0_non_strict 'select f1, cast(f2 as double) from test_cast_to_double_from_decimalv2_20_6_0_nullable order by 1;'

    sql "drop table if exists test_cast_to_double_from_decimalv2_20_6_0_not_nullable;"
    sql "create table test_cast_to_double_from_decimalv2_20_6_0_not_nullable(f1 int, f2 decimalv2(20, 6)) properties('replication_num'='1');"
    sql """insert into test_cast_to_double_from_decimalv2_20_6_0_not_nullable values (0, "0.000000"),(1, "0.000000"),(2, "0.001000"),(3, "-0.001000"),(4, "0.009000"),(5, "-0.009000"),(6, "0.999999"),(7, "-0.999999"),(8, "99.999000"),(9, "-99.999000"),(10, "900.000000"),(11, "-900.000000"),(12, "900.001000"),(13, "-900.001000"),(14, "999.998000"),(15, "-999.998000"),(16, "1000.000000"),(17, "-1000.000000"),(18, "1000.001000"),(19, "-1000.001000"),
      (20, "1000.009000"),(21, "-1000.009000"),(22, "1000.999999"),(23, "-1000.999999"),(24, "1099.999000"),(25, "-1099.999000"),(26, "1900.000000"),(27, "-1900.000000"),(28, "1900.001000"),(29, "-1900.001000"),(30, "1999.998000"),(31, "-1999.998000"),(32, "9000.000000"),(33, "-9000.000000"),(34, "9000.001000"),(35, "-9000.001000"),(36, "9000.009000"),(37, "-9000.009000"),(38, "9000.999999"),(39, "-9000.999999"),
      (40, "9099.999000"),(41, "-9099.999000"),(42, "9900.000000"),(43, "-9900.000000"),(44, "9900.001000"),(45, "-9900.001000"),(46, "9999.998000"),(47, "-9999.998000"),(48, "9999999999999000.000000"),(49, "-9999999999999000.000000"),(50, "9999999999999000.001000"),(51, "-9999999999999000.001000"),(52, "9999999999999000.009000"),(53, "-9999999999999000.009000"),(54, "9999999999999000.999999"),(55, "-9999999999999000.999999"),(56, "9999999999999099.999000"),(57, "-9999999999999099.999000"),(58, "9999999999999900.000000"),(59, "-9999999999999900.000000"),
      (60, "9999999999999900.001000"),(61, "-9999999999999900.001000"),(62, "9999999999999999.998000"),(63, "-9999999999999999.998000"),(64, "90000000000000000.000000"),(65, "-90000000000000000.000000"),(66, "90000000000000000.001000"),(67, "-90000000000000000.001000"),(68, "90000000000000000.009000"),(69, "-90000000000000000.009000"),(70, "90000000000000000.999999"),(71, "-90000000000000000.999999"),(72, "90000000000000099.999000"),(73, "-90000000000000099.999000"),(74, "90000000000000900.000000"),(75, "-90000000000000900.000000"),(76, "90000000000000900.001000"),(77, "-90000000000000900.001000"),(78, "90000000000000999.998000"),(79, "-90000000000000999.998000"),
      (80, "90000000000001000.000000"),(81, "-90000000000001000.000000"),(82, "90000000000001000.001000"),(83, "-90000000000001000.001000"),(84, "90000000000001000.009000"),(85, "-90000000000001000.009000"),(86, "90000000000001000.999999"),(87, "-90000000000001000.999999"),(88, "90000000000001099.999000"),(89, "-90000000000001099.999000"),(90, "90000000000001900.000000"),(91, "-90000000000001900.000000"),(92, "90000000000001900.001000"),(93, "-90000000000001900.001000"),(94, "90000000000001999.998000"),(95, "-90000000000001999.998000"),(96, "99999999999998000.000000"),(97, "-99999999999998000.000000"),(98, "99999999999998000.001000"),(99, "-99999999999998000.001000"),
      (100, "99999999999998000.009000"),(101, "-99999999999998000.009000"),(102, "99999999999998000.999999"),(103, "-99999999999998000.999999"),(104, "99999999999998099.999000"),(105, "-99999999999998099.999000"),(106, "99999999999998900.000000"),(107, "-99999999999998900.000000"),(108, "99999999999998900.001000"),(109, "-99999999999998900.001000"),(110, "99999999999998999.998000"),(111, "-99999999999998999.998000"),(112, "99999999999999000.000000"),(113, "-99999999999999000.000000"),(114, "99999999999999000.001000"),(115, "-99999999999999000.001000"),(116, "99999999999999000.009000"),(117, "-99999999999999000.009000"),(118, "99999999999999000.999999"),(119, "-99999999999999000.999999"),
      (120, "99999999999999099.999000"),(121, "-99999999999999099.999000"),(122, "99999999999999900.000000"),(123, "-99999999999999900.000000"),(124, "99999999999999900.001000"),(125, "-99999999999999900.001000"),(126, "99999999999999999.998000"),(127, "-99999999999999999.998000");
    """

    sql "set enable_strict_cast=true;"
    qt_sql_0_strict 'select f1, cast(f2 as double) from test_cast_to_double_from_decimalv2_20_6_0_not_nullable order by 1;'

    sql "set enable_strict_cast=false;"
    qt_sql_0_non_strict 'select f1, cast(f2 as double) from test_cast_to_double_from_decimalv2_20_6_0_not_nullable order by 1;'

}