// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_types_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_types_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_types_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_types_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2eproto;
namespace doris {
class PDateTime;
class PDateTimeDefaultTypeInternal;
extern PDateTimeDefaultTypeInternal _PDateTime_default_instance_;
class PDecimal;
class PDecimalDefaultTypeInternal;
extern PDecimalDefaultTypeInternal _PDecimal_default_instance_;
class PField;
class PFieldDefaultTypeInternal;
extern PFieldDefaultTypeInternal _PField_default_instance_;
class PFunction;
class PFunctionDefaultTypeInternal;
extern PFunctionDefaultTypeInternal _PFunction_default_instance_;
class PFunctionContext;
class PFunctionContextDefaultTypeInternal;
extern PFunctionContextDefaultTypeInternal _PFunctionContext_default_instance_;
class PFunction_Property;
class PFunction_PropertyDefaultTypeInternal;
extern PFunction_PropertyDefaultTypeInternal _PFunction_Property_default_instance_;
class PGenericType;
class PGenericTypeDefaultTypeInternal;
extern PGenericTypeDefaultTypeInternal _PGenericType_default_instance_;
class PHandShakeRequest;
class PHandShakeRequestDefaultTypeInternal;
extern PHandShakeRequestDefaultTypeInternal _PHandShakeRequest_default_instance_;
class PHandShakeResponse;
class PHandShakeResponseDefaultTypeInternal;
extern PHandShakeResponseDefaultTypeInternal _PHandShakeResponse_default_instance_;
class PList;
class PListDefaultTypeInternal;
extern PListDefaultTypeInternal _PList_default_instance_;
class PMap;
class PMapDefaultTypeInternal;
extern PMapDefaultTypeInternal _PMap_default_instance_;
class PScalarType;
class PScalarTypeDefaultTypeInternal;
extern PScalarTypeDefaultTypeInternal _PScalarType_default_instance_;
class PStatus;
class PStatusDefaultTypeInternal;
extern PStatusDefaultTypeInternal _PStatus_default_instance_;
class PStruct;
class PStructDefaultTypeInternal;
extern PStructDefaultTypeInternal _PStruct_default_instance_;
class PStructField;
class PStructFieldDefaultTypeInternal;
extern PStructFieldDefaultTypeInternal _PStructField_default_instance_;
class PTypeDesc;
class PTypeDescDefaultTypeInternal;
extern PTypeDescDefaultTypeInternal _PTypeDesc_default_instance_;
class PTypeNode;
class PTypeNodeDefaultTypeInternal;
extern PTypeNodeDefaultTypeInternal _PTypeNode_default_instance_;
class PUniqueId;
class PUniqueIdDefaultTypeInternal;
extern PUniqueIdDefaultTypeInternal _PUniqueId_default_instance_;
class PValue;
class PValueDefaultTypeInternal;
extern PValueDefaultTypeInternal _PValue_default_instance_;
class PValues;
class PValuesDefaultTypeInternal;
extern PValuesDefaultTypeInternal _PValues_default_instance_;
}  // namespace doris
PROTOBUF_NAMESPACE_OPEN
template<> ::doris::PDateTime* Arena::CreateMaybeMessage<::doris::PDateTime>(Arena*);
template<> ::doris::PDecimal* Arena::CreateMaybeMessage<::doris::PDecimal>(Arena*);
template<> ::doris::PField* Arena::CreateMaybeMessage<::doris::PField>(Arena*);
template<> ::doris::PFunction* Arena::CreateMaybeMessage<::doris::PFunction>(Arena*);
template<> ::doris::PFunctionContext* Arena::CreateMaybeMessage<::doris::PFunctionContext>(Arena*);
template<> ::doris::PFunction_Property* Arena::CreateMaybeMessage<::doris::PFunction_Property>(Arena*);
template<> ::doris::PGenericType* Arena::CreateMaybeMessage<::doris::PGenericType>(Arena*);
template<> ::doris::PHandShakeRequest* Arena::CreateMaybeMessage<::doris::PHandShakeRequest>(Arena*);
template<> ::doris::PHandShakeResponse* Arena::CreateMaybeMessage<::doris::PHandShakeResponse>(Arena*);
template<> ::doris::PList* Arena::CreateMaybeMessage<::doris::PList>(Arena*);
template<> ::doris::PMap* Arena::CreateMaybeMessage<::doris::PMap>(Arena*);
template<> ::doris::PScalarType* Arena::CreateMaybeMessage<::doris::PScalarType>(Arena*);
template<> ::doris::PStatus* Arena::CreateMaybeMessage<::doris::PStatus>(Arena*);
template<> ::doris::PStruct* Arena::CreateMaybeMessage<::doris::PStruct>(Arena*);
template<> ::doris::PStructField* Arena::CreateMaybeMessage<::doris::PStructField>(Arena*);
template<> ::doris::PTypeDesc* Arena::CreateMaybeMessage<::doris::PTypeDesc>(Arena*);
template<> ::doris::PTypeNode* Arena::CreateMaybeMessage<::doris::PTypeNode>(Arena*);
template<> ::doris::PUniqueId* Arena::CreateMaybeMessage<::doris::PUniqueId>(Arena*);
template<> ::doris::PValue* Arena::CreateMaybeMessage<::doris::PValue>(Arena*);
template<> ::doris::PValues* Arena::CreateMaybeMessage<::doris::PValues>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace doris {

enum PGenericType_TypeId : int {
  PGenericType_TypeId_UINT8 = 0,
  PGenericType_TypeId_UINT16 = 1,
  PGenericType_TypeId_UINT32 = 2,
  PGenericType_TypeId_UINT64 = 3,
  PGenericType_TypeId_UINT128 = 4,
  PGenericType_TypeId_UINT256 = 5,
  PGenericType_TypeId_INT8 = 6,
  PGenericType_TypeId_INT16 = 7,
  PGenericType_TypeId_INT32 = 8,
  PGenericType_TypeId_INT64 = 9,
  PGenericType_TypeId_INT128 = 10,
  PGenericType_TypeId_INT256 = 11,
  PGenericType_TypeId_FLOAT = 12,
  PGenericType_TypeId_DOUBLE = 13,
  PGenericType_TypeId_BOOLEAN = 14,
  PGenericType_TypeId_DATE = 15,
  PGenericType_TypeId_DATETIME = 16,
  PGenericType_TypeId_HLL = 17,
  PGenericType_TypeId_BITMAP = 18,
  PGenericType_TypeId_LIST = 19,
  PGenericType_TypeId_MAP = 20,
  PGenericType_TypeId_STRUCT = 21,
  PGenericType_TypeId_STRING = 22,
  PGenericType_TypeId_DECIMAL32 = 23,
  PGenericType_TypeId_DECIMAL64 = 24,
  PGenericType_TypeId_DECIMAL128 = 25,
  PGenericType_TypeId_BYTES = 26,
  PGenericType_TypeId_NOTHING = 27,
  PGenericType_TypeId_DATEV2 = 28,
  PGenericType_TypeId_DATETIMEV2 = 29,
  PGenericType_TypeId_UNKNOWN = 999
};
bool PGenericType_TypeId_IsValid(int value);
constexpr PGenericType_TypeId PGenericType_TypeId_TypeId_MIN = PGenericType_TypeId_UINT8;
constexpr PGenericType_TypeId PGenericType_TypeId_TypeId_MAX = PGenericType_TypeId_UNKNOWN;
constexpr int PGenericType_TypeId_TypeId_ARRAYSIZE = PGenericType_TypeId_TypeId_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PGenericType_TypeId_descriptor();
template<typename T>
inline const std::string& PGenericType_TypeId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PGenericType_TypeId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PGenericType_TypeId_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PGenericType_TypeId_descriptor(), enum_t_value);
}
inline bool PGenericType_TypeId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PGenericType_TypeId* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PGenericType_TypeId>(
    PGenericType_TypeId_descriptor(), name, value);
}
enum PFunction_FunctionType : int {
  PFunction_FunctionType_UDF = 0,
  PFunction_FunctionType_UDAF = 1,
  PFunction_FunctionType_UDTF = 2
};
bool PFunction_FunctionType_IsValid(int value);
constexpr PFunction_FunctionType PFunction_FunctionType_FunctionType_MIN = PFunction_FunctionType_UDF;
constexpr PFunction_FunctionType PFunction_FunctionType_FunctionType_MAX = PFunction_FunctionType_UDTF;
constexpr int PFunction_FunctionType_FunctionType_ARRAYSIZE = PFunction_FunctionType_FunctionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PFunction_FunctionType_descriptor();
template<typename T>
inline const std::string& PFunction_FunctionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PFunction_FunctionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PFunction_FunctionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PFunction_FunctionType_descriptor(), enum_t_value);
}
inline bool PFunction_FunctionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PFunction_FunctionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PFunction_FunctionType>(
    PFunction_FunctionType_descriptor(), name, value);
}
enum PPlanFragmentCancelReason : int {
  LIMIT_REACH = 1,
  USER_CANCEL = 2,
  INTERNAL_ERROR = 3,
  TIMEOUT = 4,
  CALL_RPC_ERROR = 5,
  MEMORY_LIMIT_EXCEED = 6
};
bool PPlanFragmentCancelReason_IsValid(int value);
constexpr PPlanFragmentCancelReason PPlanFragmentCancelReason_MIN = LIMIT_REACH;
constexpr PPlanFragmentCancelReason PPlanFragmentCancelReason_MAX = MEMORY_LIMIT_EXCEED;
constexpr int PPlanFragmentCancelReason_ARRAYSIZE = PPlanFragmentCancelReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PPlanFragmentCancelReason_descriptor();
template<typename T>
inline const std::string& PPlanFragmentCancelReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PPlanFragmentCancelReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PPlanFragmentCancelReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PPlanFragmentCancelReason_descriptor(), enum_t_value);
}
inline bool PPlanFragmentCancelReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PPlanFragmentCancelReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PPlanFragmentCancelReason>(
    PPlanFragmentCancelReason_descriptor(), name, value);
}
// ===================================================================

class PStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PStatus) */ {
 public:
  inline PStatus() : PStatus(nullptr) {}
  virtual ~PStatus();

  PStatus(const PStatus& from);
  PStatus(PStatus&& from) noexcept
    : PStatus() {
    *this = ::std::move(from);
  }

  inline PStatus& operator=(const PStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PStatus& operator=(PStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PStatus& default_instance();

  static inline const PStatus* internal_default_instance() {
    return reinterpret_cast<const PStatus*>(
               &_PStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PStatus& a, PStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PStatus* New() const final {
    return CreateMaybeMessage<PStatus>(nullptr);
  }

  PStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PStatus& from);
  void MergeFrom(const PStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PStatus";
  }
  protected:
  explicit PStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgsFieldNumber = 2,
    kStatusCodeFieldNumber = 1,
  };
  // repeated string error_msgs = 2;
  int error_msgs_size() const;
  private:
  int _internal_error_msgs_size() const;
  public:
  void clear_error_msgs();
  const std::string& error_msgs(int index) const;
  std::string* mutable_error_msgs(int index);
  void set_error_msgs(int index, const std::string& value);
  void set_error_msgs(int index, std::string&& value);
  void set_error_msgs(int index, const char* value);
  void set_error_msgs(int index, const char* value, size_t size);
  std::string* add_error_msgs();
  void add_error_msgs(const std::string& value);
  void add_error_msgs(std::string&& value);
  void add_error_msgs(const char* value);
  void add_error_msgs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& error_msgs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_error_msgs();
  private:
  const std::string& _internal_error_msgs(int index) const;
  std::string* _internal_add_error_msgs();
  public:

  // required int32 status_code = 1;
  bool has_status_code() const;
  private:
  bool _internal_has_status_code() const;
  public:
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:doris.PStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> error_msgs_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PScalarType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PScalarType) */ {
 public:
  inline PScalarType() : PScalarType(nullptr) {}
  virtual ~PScalarType();

  PScalarType(const PScalarType& from);
  PScalarType(PScalarType&& from) noexcept
    : PScalarType() {
    *this = ::std::move(from);
  }

  inline PScalarType& operator=(const PScalarType& from) {
    CopyFrom(from);
    return *this;
  }
  inline PScalarType& operator=(PScalarType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PScalarType& default_instance();

  static inline const PScalarType* internal_default_instance() {
    return reinterpret_cast<const PScalarType*>(
               &_PScalarType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PScalarType& a, PScalarType& b) {
    a.Swap(&b);
  }
  inline void Swap(PScalarType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PScalarType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PScalarType* New() const final {
    return CreateMaybeMessage<PScalarType>(nullptr);
  }

  PScalarType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PScalarType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PScalarType& from);
  void MergeFrom(const PScalarType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PScalarType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PScalarType";
  }
  protected:
  explicit PScalarType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kLenFieldNumber = 2,
    kPrecisionFieldNumber = 3,
    kScaleFieldNumber = 4,
  };
  // required int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 len = 2;
  bool has_len() const;
  private:
  bool _internal_has_len() const;
  public:
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::int32 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 precision = 3;
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::int32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 scale = 4;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  ::PROTOBUF_NAMESPACE_ID::int32 scale() const;
  void set_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scale() const;
  void _internal_set_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:doris.PScalarType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 len_;
  ::PROTOBUF_NAMESPACE_ID::int32 precision_;
  ::PROTOBUF_NAMESPACE_ID::int32 scale_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PStructField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PStructField) */ {
 public:
  inline PStructField() : PStructField(nullptr) {}
  virtual ~PStructField();

  PStructField(const PStructField& from);
  PStructField(PStructField&& from) noexcept
    : PStructField() {
    *this = ::std::move(from);
  }

  inline PStructField& operator=(const PStructField& from) {
    CopyFrom(from);
    return *this;
  }
  inline PStructField& operator=(PStructField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PStructField& default_instance();

  static inline const PStructField* internal_default_instance() {
    return reinterpret_cast<const PStructField*>(
               &_PStructField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PStructField& a, PStructField& b) {
    a.Swap(&b);
  }
  inline void Swap(PStructField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PStructField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PStructField* New() const final {
    return CreateMaybeMessage<PStructField>(nullptr);
  }

  PStructField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PStructField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PStructField& from);
  void MergeFrom(const PStructField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PStructField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PStructField";
  }
  protected:
  explicit PStructField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCommentFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string comment = 2;
  bool has_comment() const;
  private:
  bool _internal_has_comment() const;
  public:
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // @@protoc_insertion_point(class_scope:doris.PStructField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PTypeNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PTypeNode) */ {
 public:
  inline PTypeNode() : PTypeNode(nullptr) {}
  virtual ~PTypeNode();

  PTypeNode(const PTypeNode& from);
  PTypeNode(PTypeNode&& from) noexcept
    : PTypeNode() {
    *this = ::std::move(from);
  }

  inline PTypeNode& operator=(const PTypeNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline PTypeNode& operator=(PTypeNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PTypeNode& default_instance();

  static inline const PTypeNode* internal_default_instance() {
    return reinterpret_cast<const PTypeNode*>(
               &_PTypeNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PTypeNode& a, PTypeNode& b) {
    a.Swap(&b);
  }
  inline void Swap(PTypeNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PTypeNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PTypeNode* New() const final {
    return CreateMaybeMessage<PTypeNode>(nullptr);
  }

  PTypeNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PTypeNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PTypeNode& from);
  void MergeFrom(const PTypeNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PTypeNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PTypeNode";
  }
  protected:
  explicit PTypeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStructFieldsFieldNumber = 3,
    kScalarTypeFieldNumber = 2,
    kTypeFieldNumber = 1,
    kContainsNullFieldNumber = 4,
  };
  // repeated .doris.PStructField struct_fields = 3;
  int struct_fields_size() const;
  private:
  int _internal_struct_fields_size() const;
  public:
  void clear_struct_fields();
  ::doris::PStructField* mutable_struct_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PStructField >*
      mutable_struct_fields();
  private:
  const ::doris::PStructField& _internal_struct_fields(int index) const;
  ::doris::PStructField* _internal_add_struct_fields();
  public:
  const ::doris::PStructField& struct_fields(int index) const;
  ::doris::PStructField* add_struct_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PStructField >&
      struct_fields() const;

  // optional .doris.PScalarType scalar_type = 2;
  bool has_scalar_type() const;
  private:
  bool _internal_has_scalar_type() const;
  public:
  void clear_scalar_type();
  const ::doris::PScalarType& scalar_type() const;
  ::doris::PScalarType* release_scalar_type();
  ::doris::PScalarType* mutable_scalar_type();
  void set_allocated_scalar_type(::doris::PScalarType* scalar_type);
  private:
  const ::doris::PScalarType& _internal_scalar_type() const;
  ::doris::PScalarType* _internal_mutable_scalar_type();
  public:
  void unsafe_arena_set_allocated_scalar_type(
      ::doris::PScalarType* scalar_type);
  ::doris::PScalarType* unsafe_arena_release_scalar_type();

  // required int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool contains_null = 4;
  bool has_contains_null() const;
  private:
  bool _internal_has_contains_null() const;
  public:
  void clear_contains_null();
  bool contains_null() const;
  void set_contains_null(bool value);
  private:
  bool _internal_contains_null() const;
  void _internal_set_contains_null(bool value);
  public:

  // @@protoc_insertion_point(class_scope:doris.PTypeNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PStructField > struct_fields_;
  ::doris::PScalarType* scalar_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  bool contains_null_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PTypeDesc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PTypeDesc) */ {
 public:
  inline PTypeDesc() : PTypeDesc(nullptr) {}
  virtual ~PTypeDesc();

  PTypeDesc(const PTypeDesc& from);
  PTypeDesc(PTypeDesc&& from) noexcept
    : PTypeDesc() {
    *this = ::std::move(from);
  }

  inline PTypeDesc& operator=(const PTypeDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline PTypeDesc& operator=(PTypeDesc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PTypeDesc& default_instance();

  static inline const PTypeDesc* internal_default_instance() {
    return reinterpret_cast<const PTypeDesc*>(
               &_PTypeDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PTypeDesc& a, PTypeDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(PTypeDesc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PTypeDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PTypeDesc* New() const final {
    return CreateMaybeMessage<PTypeDesc>(nullptr);
  }

  PTypeDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PTypeDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PTypeDesc& from);
  void MergeFrom(const PTypeDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PTypeDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PTypeDesc";
  }
  protected:
  explicit PTypeDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypesFieldNumber = 1,
  };
  // repeated .doris.PTypeNode types = 1;
  int types_size() const;
  private:
  int _internal_types_size() const;
  public:
  void clear_types();
  ::doris::PTypeNode* mutable_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PTypeNode >*
      mutable_types();
  private:
  const ::doris::PTypeNode& _internal_types(int index) const;
  ::doris::PTypeNode* _internal_add_types();
  public:
  const ::doris::PTypeNode& types(int index) const;
  ::doris::PTypeNode* add_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PTypeNode >&
      types() const;

  // @@protoc_insertion_point(class_scope:doris.PTypeDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PTypeNode > types_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PUniqueId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PUniqueId) */ {
 public:
  inline PUniqueId() : PUniqueId(nullptr) {}
  virtual ~PUniqueId();

  PUniqueId(const PUniqueId& from);
  PUniqueId(PUniqueId&& from) noexcept
    : PUniqueId() {
    *this = ::std::move(from);
  }

  inline PUniqueId& operator=(const PUniqueId& from) {
    CopyFrom(from);
    return *this;
  }
  inline PUniqueId& operator=(PUniqueId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PUniqueId& default_instance();

  static inline const PUniqueId* internal_default_instance() {
    return reinterpret_cast<const PUniqueId*>(
               &_PUniqueId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PUniqueId& a, PUniqueId& b) {
    a.Swap(&b);
  }
  inline void Swap(PUniqueId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PUniqueId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PUniqueId* New() const final {
    return CreateMaybeMessage<PUniqueId>(nullptr);
  }

  PUniqueId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PUniqueId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PUniqueId& from);
  void MergeFrom(const PUniqueId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PUniqueId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PUniqueId";
  }
  protected:
  explicit PUniqueId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHiFieldNumber = 1,
    kLoFieldNumber = 2,
  };
  // required int64 hi = 1;
  bool has_hi() const;
  private:
  bool _internal_has_hi() const;
  public:
  void clear_hi();
  ::PROTOBUF_NAMESPACE_ID::int64 hi() const;
  void set_hi(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_hi() const;
  void _internal_set_hi(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int64 lo = 2;
  bool has_lo() const;
  private:
  bool _internal_has_lo() const;
  public:
  void clear_lo();
  ::PROTOBUF_NAMESPACE_ID::int64 lo() const;
  void set_lo(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lo() const;
  void _internal_set_lo(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:doris.PUniqueId)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 hi_;
  ::PROTOBUF_NAMESPACE_ID::int64 lo_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PGenericType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PGenericType) */ {
 public:
  inline PGenericType() : PGenericType(nullptr) {}
  virtual ~PGenericType();

  PGenericType(const PGenericType& from);
  PGenericType(PGenericType&& from) noexcept
    : PGenericType() {
    *this = ::std::move(from);
  }

  inline PGenericType& operator=(const PGenericType& from) {
    CopyFrom(from);
    return *this;
  }
  inline PGenericType& operator=(PGenericType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PGenericType& default_instance();

  static inline const PGenericType* internal_default_instance() {
    return reinterpret_cast<const PGenericType*>(
               &_PGenericType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PGenericType& a, PGenericType& b) {
    a.Swap(&b);
  }
  inline void Swap(PGenericType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PGenericType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PGenericType* New() const final {
    return CreateMaybeMessage<PGenericType>(nullptr);
  }

  PGenericType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PGenericType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PGenericType& from);
  void MergeFrom(const PGenericType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PGenericType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PGenericType";
  }
  protected:
  explicit PGenericType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PGenericType_TypeId TypeId;
  static constexpr TypeId UINT8 =
    PGenericType_TypeId_UINT8;
  static constexpr TypeId UINT16 =
    PGenericType_TypeId_UINT16;
  static constexpr TypeId UINT32 =
    PGenericType_TypeId_UINT32;
  static constexpr TypeId UINT64 =
    PGenericType_TypeId_UINT64;
  static constexpr TypeId UINT128 =
    PGenericType_TypeId_UINT128;
  static constexpr TypeId UINT256 =
    PGenericType_TypeId_UINT256;
  static constexpr TypeId INT8 =
    PGenericType_TypeId_INT8;
  static constexpr TypeId INT16 =
    PGenericType_TypeId_INT16;
  static constexpr TypeId INT32 =
    PGenericType_TypeId_INT32;
  static constexpr TypeId INT64 =
    PGenericType_TypeId_INT64;
  static constexpr TypeId INT128 =
    PGenericType_TypeId_INT128;
  static constexpr TypeId INT256 =
    PGenericType_TypeId_INT256;
  static constexpr TypeId FLOAT =
    PGenericType_TypeId_FLOAT;
  static constexpr TypeId DOUBLE =
    PGenericType_TypeId_DOUBLE;
  static constexpr TypeId BOOLEAN =
    PGenericType_TypeId_BOOLEAN;
  static constexpr TypeId DATE =
    PGenericType_TypeId_DATE;
  static constexpr TypeId DATETIME =
    PGenericType_TypeId_DATETIME;
  static constexpr TypeId HLL =
    PGenericType_TypeId_HLL;
  static constexpr TypeId BITMAP =
    PGenericType_TypeId_BITMAP;
  static constexpr TypeId LIST =
    PGenericType_TypeId_LIST;
  static constexpr TypeId MAP =
    PGenericType_TypeId_MAP;
  static constexpr TypeId STRUCT =
    PGenericType_TypeId_STRUCT;
  static constexpr TypeId STRING =
    PGenericType_TypeId_STRING;
  static constexpr TypeId DECIMAL32 =
    PGenericType_TypeId_DECIMAL32;
  static constexpr TypeId DECIMAL64 =
    PGenericType_TypeId_DECIMAL64;
  static constexpr TypeId DECIMAL128 =
    PGenericType_TypeId_DECIMAL128;
  static constexpr TypeId BYTES =
    PGenericType_TypeId_BYTES;
  static constexpr TypeId NOTHING =
    PGenericType_TypeId_NOTHING;
  static constexpr TypeId DATEV2 =
    PGenericType_TypeId_DATEV2;
  static constexpr TypeId DATETIMEV2 =
    PGenericType_TypeId_DATETIMEV2;
  static constexpr TypeId UNKNOWN =
    PGenericType_TypeId_UNKNOWN;
  static inline bool TypeId_IsValid(int value) {
    return PGenericType_TypeId_IsValid(value);
  }
  static constexpr TypeId TypeId_MIN =
    PGenericType_TypeId_TypeId_MIN;
  static constexpr TypeId TypeId_MAX =
    PGenericType_TypeId_TypeId_MAX;
  static constexpr int TypeId_ARRAYSIZE =
    PGenericType_TypeId_TypeId_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TypeId_descriptor() {
    return PGenericType_TypeId_descriptor();
  }
  template<typename T>
  static inline const std::string& TypeId_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TypeId>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TypeId_Name.");
    return PGenericType_TypeId_Name(enum_t_value);
  }
  static inline bool TypeId_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TypeId* value) {
    return PGenericType_TypeId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kListTypeFieldNumber = 11,
    kMapTypeFieldNumber = 12,
    kStructTypeFieldNumber = 13,
    kDecimalTypeFieldNumber = 14,
    kIdFieldNumber = 2,
  };
  // optional .doris.PList list_type = 11;
  bool has_list_type() const;
  private:
  bool _internal_has_list_type() const;
  public:
  void clear_list_type();
  const ::doris::PList& list_type() const;
  ::doris::PList* release_list_type();
  ::doris::PList* mutable_list_type();
  void set_allocated_list_type(::doris::PList* list_type);
  private:
  const ::doris::PList& _internal_list_type() const;
  ::doris::PList* _internal_mutable_list_type();
  public:
  void unsafe_arena_set_allocated_list_type(
      ::doris::PList* list_type);
  ::doris::PList* unsafe_arena_release_list_type();

  // optional .doris.PMap map_type = 12;
  bool has_map_type() const;
  private:
  bool _internal_has_map_type() const;
  public:
  void clear_map_type();
  const ::doris::PMap& map_type() const;
  ::doris::PMap* release_map_type();
  ::doris::PMap* mutable_map_type();
  void set_allocated_map_type(::doris::PMap* map_type);
  private:
  const ::doris::PMap& _internal_map_type() const;
  ::doris::PMap* _internal_mutable_map_type();
  public:
  void unsafe_arena_set_allocated_map_type(
      ::doris::PMap* map_type);
  ::doris::PMap* unsafe_arena_release_map_type();

  // optional .doris.PStruct struct_type = 13;
  bool has_struct_type() const;
  private:
  bool _internal_has_struct_type() const;
  public:
  void clear_struct_type();
  const ::doris::PStruct& struct_type() const;
  ::doris::PStruct* release_struct_type();
  ::doris::PStruct* mutable_struct_type();
  void set_allocated_struct_type(::doris::PStruct* struct_type);
  private:
  const ::doris::PStruct& _internal_struct_type() const;
  ::doris::PStruct* _internal_mutable_struct_type();
  public:
  void unsafe_arena_set_allocated_struct_type(
      ::doris::PStruct* struct_type);
  ::doris::PStruct* unsafe_arena_release_struct_type();

  // optional .doris.PDecimal decimal_type = 14;
  bool has_decimal_type() const;
  private:
  bool _internal_has_decimal_type() const;
  public:
  void clear_decimal_type();
  const ::doris::PDecimal& decimal_type() const;
  ::doris::PDecimal* release_decimal_type();
  ::doris::PDecimal* mutable_decimal_type();
  void set_allocated_decimal_type(::doris::PDecimal* decimal_type);
  private:
  const ::doris::PDecimal& _internal_decimal_type() const;
  ::doris::PDecimal* _internal_mutable_decimal_type();
  public:
  void unsafe_arena_set_allocated_decimal_type(
      ::doris::PDecimal* decimal_type);
  ::doris::PDecimal* unsafe_arena_release_decimal_type();

  // required .doris.PGenericType.TypeId id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::doris::PGenericType_TypeId id() const;
  void set_id(::doris::PGenericType_TypeId value);
  private:
  ::doris::PGenericType_TypeId _internal_id() const;
  void _internal_set_id(::doris::PGenericType_TypeId value);
  public:

  // @@protoc_insertion_point(class_scope:doris.PGenericType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::doris::PList* list_type_;
  ::doris::PMap* map_type_;
  ::doris::PStruct* struct_type_;
  ::doris::PDecimal* decimal_type_;
  int id_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PList) */ {
 public:
  inline PList() : PList(nullptr) {}
  virtual ~PList();

  PList(const PList& from);
  PList(PList&& from) noexcept
    : PList() {
    *this = ::std::move(from);
  }

  inline PList& operator=(const PList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PList& operator=(PList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PList& default_instance();

  static inline const PList* internal_default_instance() {
    return reinterpret_cast<const PList*>(
               &_PList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PList& a, PList& b) {
    a.Swap(&b);
  }
  inline void Swap(PList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PList* New() const final {
    return CreateMaybeMessage<PList>(nullptr);
  }

  PList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PList& from);
  void MergeFrom(const PList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PList";
  }
  protected:
  explicit PList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementTypeFieldNumber = 1,
  };
  // required .doris.PGenericType element_type = 1;
  bool has_element_type() const;
  private:
  bool _internal_has_element_type() const;
  public:
  void clear_element_type();
  const ::doris::PGenericType& element_type() const;
  ::doris::PGenericType* release_element_type();
  ::doris::PGenericType* mutable_element_type();
  void set_allocated_element_type(::doris::PGenericType* element_type);
  private:
  const ::doris::PGenericType& _internal_element_type() const;
  ::doris::PGenericType* _internal_mutable_element_type();
  public:
  void unsafe_arena_set_allocated_element_type(
      ::doris::PGenericType* element_type);
  ::doris::PGenericType* unsafe_arena_release_element_type();

  // @@protoc_insertion_point(class_scope:doris.PList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::doris::PGenericType* element_type_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PMap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PMap) */ {
 public:
  inline PMap() : PMap(nullptr) {}
  virtual ~PMap();

  PMap(const PMap& from);
  PMap(PMap&& from) noexcept
    : PMap() {
    *this = ::std::move(from);
  }

  inline PMap& operator=(const PMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline PMap& operator=(PMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PMap& default_instance();

  static inline const PMap* internal_default_instance() {
    return reinterpret_cast<const PMap*>(
               &_PMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PMap& a, PMap& b) {
    a.Swap(&b);
  }
  inline void Swap(PMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PMap* New() const final {
    return CreateMaybeMessage<PMap>(nullptr);
  }

  PMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PMap& from);
  void MergeFrom(const PMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PMap";
  }
  protected:
  explicit PMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyTypeFieldNumber = 1,
    kValueTypeFieldNumber = 2,
  };
  // required .doris.PGenericType key_type = 1;
  bool has_key_type() const;
  private:
  bool _internal_has_key_type() const;
  public:
  void clear_key_type();
  const ::doris::PGenericType& key_type() const;
  ::doris::PGenericType* release_key_type();
  ::doris::PGenericType* mutable_key_type();
  void set_allocated_key_type(::doris::PGenericType* key_type);
  private:
  const ::doris::PGenericType& _internal_key_type() const;
  ::doris::PGenericType* _internal_mutable_key_type();
  public:
  void unsafe_arena_set_allocated_key_type(
      ::doris::PGenericType* key_type);
  ::doris::PGenericType* unsafe_arena_release_key_type();

  // required .doris.PGenericType value_type = 2;
  bool has_value_type() const;
  private:
  bool _internal_has_value_type() const;
  public:
  void clear_value_type();
  const ::doris::PGenericType& value_type() const;
  ::doris::PGenericType* release_value_type();
  ::doris::PGenericType* mutable_value_type();
  void set_allocated_value_type(::doris::PGenericType* value_type);
  private:
  const ::doris::PGenericType& _internal_value_type() const;
  ::doris::PGenericType* _internal_mutable_value_type();
  public:
  void unsafe_arena_set_allocated_value_type(
      ::doris::PGenericType* value_type);
  ::doris::PGenericType* unsafe_arena_release_value_type();

  // @@protoc_insertion_point(class_scope:doris.PMap)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::doris::PGenericType* key_type_;
  ::doris::PGenericType* value_type_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PField) */ {
 public:
  inline PField() : PField(nullptr) {}
  virtual ~PField();

  PField(const PField& from);
  PField(PField&& from) noexcept
    : PField() {
    *this = ::std::move(from);
  }

  inline PField& operator=(const PField& from) {
    CopyFrom(from);
    return *this;
  }
  inline PField& operator=(PField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PField& default_instance();

  static inline const PField* internal_default_instance() {
    return reinterpret_cast<const PField*>(
               &_PField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PField& a, PField& b) {
    a.Swap(&b);
  }
  inline void Swap(PField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PField* New() const final {
    return CreateMaybeMessage<PField>(nullptr);
  }

  PField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PField& from);
  void MergeFrom(const PField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PField";
  }
  protected:
  explicit PField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCommentFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string comment = 3;
  bool has_comment() const;
  private:
  bool _internal_has_comment() const;
  public:
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // required .doris.PGenericType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::doris::PGenericType& type() const;
  ::doris::PGenericType* release_type();
  ::doris::PGenericType* mutable_type();
  void set_allocated_type(::doris::PGenericType* type);
  private:
  const ::doris::PGenericType& _internal_type() const;
  ::doris::PGenericType* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::doris::PGenericType* type);
  ::doris::PGenericType* unsafe_arena_release_type();

  // @@protoc_insertion_point(class_scope:doris.PField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::doris::PGenericType* type_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PStruct PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PStruct) */ {
 public:
  inline PStruct() : PStruct(nullptr) {}
  virtual ~PStruct();

  PStruct(const PStruct& from);
  PStruct(PStruct&& from) noexcept
    : PStruct() {
    *this = ::std::move(from);
  }

  inline PStruct& operator=(const PStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline PStruct& operator=(PStruct&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PStruct& default_instance();

  static inline const PStruct* internal_default_instance() {
    return reinterpret_cast<const PStruct*>(
               &_PStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PStruct& a, PStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(PStruct* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PStruct* New() const final {
    return CreateMaybeMessage<PStruct>(nullptr);
  }

  PStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PStruct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PStruct& from);
  void MergeFrom(const PStruct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PStruct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PStruct";
  }
  protected:
  explicit PStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated .doris.PField fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::doris::PField* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PField >*
      mutable_fields();
  private:
  const ::doris::PField& _internal_fields(int index) const;
  ::doris::PField* _internal_add_fields();
  public:
  const ::doris::PField& fields(int index) const;
  ::doris::PField* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PField >&
      fields() const;

  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:doris.PStruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PField > fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PDecimal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PDecimal) */ {
 public:
  inline PDecimal() : PDecimal(nullptr) {}
  virtual ~PDecimal();

  PDecimal(const PDecimal& from);
  PDecimal(PDecimal&& from) noexcept
    : PDecimal() {
    *this = ::std::move(from);
  }

  inline PDecimal& operator=(const PDecimal& from) {
    CopyFrom(from);
    return *this;
  }
  inline PDecimal& operator=(PDecimal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PDecimal& default_instance();

  static inline const PDecimal* internal_default_instance() {
    return reinterpret_cast<const PDecimal*>(
               &_PDecimal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PDecimal& a, PDecimal& b) {
    a.Swap(&b);
  }
  inline void Swap(PDecimal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PDecimal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PDecimal* New() const final {
    return CreateMaybeMessage<PDecimal>(nullptr);
  }

  PDecimal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PDecimal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PDecimal& from);
  void MergeFrom(const PDecimal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PDecimal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PDecimal";
  }
  protected:
  explicit PDecimal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrecisionFieldNumber = 1,
    kScaleFieldNumber = 2,
  };
  // required uint32 precision = 1;
  bool has_precision() const;
  private:
  bool _internal_has_precision() const;
  public:
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::uint32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 scale = 2;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  ::PROTOBUF_NAMESPACE_ID::uint32 scale() const;
  void set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scale() const;
  void _internal_set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:doris.PDecimal)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 precision_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scale_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PDateTime PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PDateTime) */ {
 public:
  inline PDateTime() : PDateTime(nullptr) {}
  virtual ~PDateTime();

  PDateTime(const PDateTime& from);
  PDateTime(PDateTime&& from) noexcept
    : PDateTime() {
    *this = ::std::move(from);
  }

  inline PDateTime& operator=(const PDateTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline PDateTime& operator=(PDateTime&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PDateTime& default_instance();

  static inline const PDateTime* internal_default_instance() {
    return reinterpret_cast<const PDateTime*>(
               &_PDateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PDateTime& a, PDateTime& b) {
    a.Swap(&b);
  }
  inline void Swap(PDateTime* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PDateTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PDateTime* New() const final {
    return CreateMaybeMessage<PDateTime>(nullptr);
  }

  PDateTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PDateTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PDateTime& from);
  void MergeFrom(const PDateTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PDateTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PDateTime";
  }
  protected:
  explicit PDateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearFieldNumber = 1,
    kMonthFieldNumber = 2,
    kDayFieldNumber = 3,
    kHourFieldNumber = 4,
    kMinuteFieldNumber = 5,
    kSecondFieldNumber = 6,
    kMicrosecondFieldNumber = 7,
  };
  // optional int32 year = 1;
  bool has_year() const;
  private:
  bool _internal_has_year() const;
  public:
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::int32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 month = 2;
  bool has_month() const;
  private:
  bool _internal_has_month() const;
  public:
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::int32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 day = 3;
  bool has_day() const;
  private:
  bool _internal_has_day() const;
  public:
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::int32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 hour = 4;
  bool has_hour() const;
  private:
  bool _internal_has_hour() const;
  public:
  void clear_hour();
  ::PROTOBUF_NAMESPACE_ID::int32 hour() const;
  void set_hour(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hour() const;
  void _internal_set_hour(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 minute = 5;
  bool has_minute() const;
  private:
  bool _internal_has_minute() const;
  public:
  void clear_minute();
  ::PROTOBUF_NAMESPACE_ID::int32 minute() const;
  void set_minute(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minute() const;
  void _internal_set_minute(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 second = 6;
  bool has_second() const;
  private:
  bool _internal_has_second() const;
  public:
  void clear_second();
  ::PROTOBUF_NAMESPACE_ID::int32 second() const;
  void set_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_second() const;
  void _internal_set_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 microsecond = 7;
  bool has_microsecond() const;
  private:
  bool _internal_has_microsecond() const;
  public:
  void clear_microsecond();
  ::PROTOBUF_NAMESPACE_ID::int32 microsecond() const;
  void set_microsecond(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_microsecond() const;
  void _internal_set_microsecond(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:doris.PDateTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 year_;
  ::PROTOBUF_NAMESPACE_ID::int32 month_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_;
  ::PROTOBUF_NAMESPACE_ID::int32 hour_;
  ::PROTOBUF_NAMESPACE_ID::int32 minute_;
  ::PROTOBUF_NAMESPACE_ID::int32 second_;
  ::PROTOBUF_NAMESPACE_ID::int32 microsecond_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PValue) */ {
 public:
  inline PValue() : PValue(nullptr) {}
  virtual ~PValue();

  PValue(const PValue& from);
  PValue(PValue&& from) noexcept
    : PValue() {
    *this = ::std::move(from);
  }

  inline PValue& operator=(const PValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PValue& operator=(PValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PValue& default_instance();

  static inline const PValue* internal_default_instance() {
    return reinterpret_cast<const PValue*>(
               &_PValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PValue& a, PValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PValue* New() const final {
    return CreateMaybeMessage<PValue>(nullptr);
  }

  PValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PValue& from);
  void MergeFrom(const PValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PValue";
  }
  protected:
  explicit PValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 10,
    kBytesValueFieldNumber = 11,
    kTypeFieldNumber = 1,
    kDatetimeValueFieldNumber = 12,
    kDoubleValueFieldNumber = 3,
    kFloatValueFieldNumber = 4,
    kInt32ValueFieldNumber = 5,
    kInt64ValueFieldNumber = 6,
    kIsNullFieldNumber = 2,
    kBoolValueFieldNumber = 9,
    kUint32ValueFieldNumber = 7,
    kUint64ValueFieldNumber = 8,
  };
  // optional string string_value = 10;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // optional bytes bytes_value = 11;
  bool has_bytes_value() const;
  private:
  bool _internal_has_bytes_value() const;
  public:
  void clear_bytes_value();
  const std::string& bytes_value() const;
  void set_bytes_value(const std::string& value);
  void set_bytes_value(std::string&& value);
  void set_bytes_value(const char* value);
  void set_bytes_value(const void* value, size_t size);
  std::string* mutable_bytes_value();
  std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* bytes_value);
  private:
  const std::string& _internal_bytes_value() const;
  void _internal_set_bytes_value(const std::string& value);
  std::string* _internal_mutable_bytes_value();
  public:

  // required .doris.PGenericType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::doris::PGenericType& type() const;
  ::doris::PGenericType* release_type();
  ::doris::PGenericType* mutable_type();
  void set_allocated_type(::doris::PGenericType* type);
  private:
  const ::doris::PGenericType& _internal_type() const;
  ::doris::PGenericType* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::doris::PGenericType* type);
  ::doris::PGenericType* unsafe_arena_release_type();

  // optional .doris.PDateTime datetime_value = 12;
  bool has_datetime_value() const;
  private:
  bool _internal_has_datetime_value() const;
  public:
  void clear_datetime_value();
  const ::doris::PDateTime& datetime_value() const;
  ::doris::PDateTime* release_datetime_value();
  ::doris::PDateTime* mutable_datetime_value();
  void set_allocated_datetime_value(::doris::PDateTime* datetime_value);
  private:
  const ::doris::PDateTime& _internal_datetime_value() const;
  ::doris::PDateTime* _internal_mutable_datetime_value();
  public:
  void unsafe_arena_set_allocated_datetime_value(
      ::doris::PDateTime* datetime_value);
  ::doris::PDateTime* unsafe_arena_release_datetime_value();

  // optional double double_value = 3;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // optional float float_value = 4;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // optional int32 int32_value = 5;
  bool has_int32_value() const;
  private:
  bool _internal_has_int32_value() const;
  public:
  void clear_int32_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int32_value() const;
  void set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32_value() const;
  void _internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 int64_value = 6;
  bool has_int64_value() const;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value() const;
  void set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_value() const;
  void _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool is_null = 2 [default = false];
  bool has_is_null() const;
  private:
  bool _internal_has_is_null() const;
  public:
  void clear_is_null();
  bool is_null() const;
  void set_is_null(bool value);
  private:
  bool _internal_is_null() const;
  void _internal_set_is_null(bool value);
  public:

  // optional bool bool_value = 9;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // optional uint32 uint32_value = 7;
  bool has_uint32_value() const;
  private:
  bool _internal_has_uint32_value() const;
  public:
  void clear_uint32_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_value() const;
  void set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_value() const;
  void _internal_set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 uint64_value = 8;
  bool has_uint64_value() const;
  private:
  bool _internal_has_uint64_value() const;
  public:
  void clear_uint64_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_value() const;
  void set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64_value() const;
  void _internal_set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:doris.PValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
  ::doris::PGenericType* type_;
  ::doris::PDateTime* datetime_value_;
  double double_value_;
  float float_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 int32_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value_;
  bool is_null_;
  bool bool_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_value_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PValues PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PValues) */ {
 public:
  inline PValues() : PValues(nullptr) {}
  virtual ~PValues();

  PValues(const PValues& from);
  PValues(PValues&& from) noexcept
    : PValues() {
    *this = ::std::move(from);
  }

  inline PValues& operator=(const PValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline PValues& operator=(PValues&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PValues& default_instance();

  static inline const PValues* internal_default_instance() {
    return reinterpret_cast<const PValues*>(
               &_PValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PValues& a, PValues& b) {
    a.Swap(&b);
  }
  inline void Swap(PValues* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PValues* New() const final {
    return CreateMaybeMessage<PValues>(nullptr);
  }

  PValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PValues& from);
  void MergeFrom(const PValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PValues";
  }
  protected:
  explicit PValues(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNullMapFieldNumber = 3,
    kDoubleValueFieldNumber = 4,
    kFloatValueFieldNumber = 5,
    kInt32ValueFieldNumber = 6,
    kInt64ValueFieldNumber = 7,
    kUint32ValueFieldNumber = 8,
    kUint64ValueFieldNumber = 9,
    kBoolValueFieldNumber = 10,
    kStringValueFieldNumber = 11,
    kBytesValueFieldNumber = 12,
    kDatetimeValueFieldNumber = 13,
    kTypeFieldNumber = 1,
    kHasNullFieldNumber = 2,
  };
  // repeated bool null_map = 3;
  int null_map_size() const;
  private:
  int _internal_null_map_size() const;
  public:
  void clear_null_map();
  private:
  bool _internal_null_map(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_null_map() const;
  void _internal_add_null_map(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_null_map();
  public:
  bool null_map(int index) const;
  void set_null_map(int index, bool value);
  void add_null_map(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      null_map() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_null_map();

  // repeated double double_value = 4;
  int double_value_size() const;
  private:
  int _internal_double_value_size() const;
  public:
  void clear_double_value();
  private:
  double _internal_double_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_value() const;
  void _internal_add_double_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_value();
  public:
  double double_value(int index) const;
  void set_double_value(int index, double value);
  void add_double_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_value();

  // repeated float float_value = 5;
  int float_value_size() const;
  private:
  int _internal_float_value_size() const;
  public:
  void clear_float_value();
  private:
  float _internal_float_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_value() const;
  void _internal_add_float_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_value();
  public:
  float float_value(int index) const;
  void set_float_value(int index, float value);
  void add_float_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_value();

  // repeated int32 int32_value = 6;
  int int32_value_size() const;
  private:
  int _internal_int32_value_size() const;
  public:
  void clear_int32_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int32_value() const;
  void _internal_add_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int32_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int32_value(int index) const;
  void set_int32_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int32_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int32_value();

  // repeated int64 int64_value = 7;
  int int64_value_size() const;
  private:
  int _internal_int64_value_size() const;
  public:
  void clear_int64_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_int64_value() const;
  void _internal_add_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_int64_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value(int index) const;
  void set_int64_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      int64_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_int64_value();

  // repeated uint32 uint32_value = 8;
  int uint32_value_size() const;
  private:
  int _internal_uint32_value_size() const;
  public:
  void clear_uint32_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_uint32_value() const;
  void _internal_add_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_uint32_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_value(int index) const;
  void set_uint32_value(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      uint32_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_uint32_value();

  // repeated uint64 uint64_value = 9;
  int uint64_value_size() const;
  private:
  int _internal_uint64_value_size() const;
  public:
  void clear_uint64_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_uint64_value() const;
  void _internal_add_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_uint64_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_value(int index) const;
  void set_uint64_value(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      uint64_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_uint64_value();

  // repeated bool bool_value = 10;
  int bool_value_size() const;
  private:
  int _internal_bool_value_size() const;
  public:
  void clear_bool_value();
  private:
  bool _internal_bool_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_bool_value() const;
  void _internal_add_bool_value(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_bool_value();
  public:
  bool bool_value(int index) const;
  void set_bool_value(int index, bool value);
  void add_bool_value(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      bool_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_bool_value();

  // repeated string string_value = 11;
  int string_value_size() const;
  private:
  int _internal_string_value_size() const;
  public:
  void clear_string_value();
  const std::string& string_value(int index) const;
  std::string* mutable_string_value(int index);
  void set_string_value(int index, const std::string& value);
  void set_string_value(int index, std::string&& value);
  void set_string_value(int index, const char* value);
  void set_string_value(int index, const char* value, size_t size);
  std::string* add_string_value();
  void add_string_value(const std::string& value);
  void add_string_value(std::string&& value);
  void add_string_value(const char* value);
  void add_string_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_value();
  private:
  const std::string& _internal_string_value(int index) const;
  std::string* _internal_add_string_value();
  public:

  // repeated bytes bytes_value = 12;
  int bytes_value_size() const;
  private:
  int _internal_bytes_value_size() const;
  public:
  void clear_bytes_value();
  const std::string& bytes_value(int index) const;
  std::string* mutable_bytes_value(int index);
  void set_bytes_value(int index, const std::string& value);
  void set_bytes_value(int index, std::string&& value);
  void set_bytes_value(int index, const char* value);
  void set_bytes_value(int index, const void* value, size_t size);
  std::string* add_bytes_value();
  void add_bytes_value(const std::string& value);
  void add_bytes_value(std::string&& value);
  void add_bytes_value(const char* value);
  void add_bytes_value(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bytes_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bytes_value();
  private:
  const std::string& _internal_bytes_value(int index) const;
  std::string* _internal_add_bytes_value();
  public:

  // repeated .doris.PDateTime datetime_value = 13;
  int datetime_value_size() const;
  private:
  int _internal_datetime_value_size() const;
  public:
  void clear_datetime_value();
  ::doris::PDateTime* mutable_datetime_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PDateTime >*
      mutable_datetime_value();
  private:
  const ::doris::PDateTime& _internal_datetime_value(int index) const;
  ::doris::PDateTime* _internal_add_datetime_value();
  public:
  const ::doris::PDateTime& datetime_value(int index) const;
  ::doris::PDateTime* add_datetime_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PDateTime >&
      datetime_value() const;

  // required .doris.PGenericType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::doris::PGenericType& type() const;
  ::doris::PGenericType* release_type();
  ::doris::PGenericType* mutable_type();
  void set_allocated_type(::doris::PGenericType* type);
  private:
  const ::doris::PGenericType& _internal_type() const;
  ::doris::PGenericType* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::doris::PGenericType* type);
  ::doris::PGenericType* unsafe_arena_release_type();

  // optional bool has_null = 2 [default = false];
  bool has_has_null() const;
  private:
  bool _internal_has_has_null() const;
  public:
  void clear_has_null();
  bool has_null() const;
  void set_has_null(bool value);
  private:
  bool _internal_has_null() const;
  void _internal_set_has_null(bool value);
  public:

  // @@protoc_insertion_point(class_scope:doris.PValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > null_map_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int32_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > int64_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > uint32_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > uint64_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > bool_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bytes_value_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PDateTime > datetime_value_;
  ::doris::PGenericType* type_;
  bool has_null_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PFunction_Property PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PFunction.Property) */ {
 public:
  inline PFunction_Property() : PFunction_Property(nullptr) {}
  virtual ~PFunction_Property();

  PFunction_Property(const PFunction_Property& from);
  PFunction_Property(PFunction_Property&& from) noexcept
    : PFunction_Property() {
    *this = ::std::move(from);
  }

  inline PFunction_Property& operator=(const PFunction_Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline PFunction_Property& operator=(PFunction_Property&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PFunction_Property& default_instance();

  static inline const PFunction_Property* internal_default_instance() {
    return reinterpret_cast<const PFunction_Property*>(
               &_PFunction_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PFunction_Property& a, PFunction_Property& b) {
    a.Swap(&b);
  }
  inline void Swap(PFunction_Property* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PFunction_Property* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PFunction_Property* New() const final {
    return CreateMaybeMessage<PFunction_Property>(nullptr);
  }

  PFunction_Property* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PFunction_Property>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PFunction_Property& from);
  void MergeFrom(const PFunction_Property& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PFunction_Property* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PFunction.Property";
  }
  protected:
  explicit PFunction_Property(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required string val = 2;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  const std::string& val() const;
  void set_val(const std::string& value);
  void set_val(std::string&& value);
  void set_val(const char* value);
  void set_val(const char* value, size_t size);
  std::string* mutable_val();
  std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // @@protoc_insertion_point(class_scope:doris.PFunction.Property)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PFunction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PFunction) */ {
 public:
  inline PFunction() : PFunction(nullptr) {}
  virtual ~PFunction();

  PFunction(const PFunction& from);
  PFunction(PFunction&& from) noexcept
    : PFunction() {
    *this = ::std::move(from);
  }

  inline PFunction& operator=(const PFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline PFunction& operator=(PFunction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PFunction& default_instance();

  static inline const PFunction* internal_default_instance() {
    return reinterpret_cast<const PFunction*>(
               &_PFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PFunction& a, PFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(PFunction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PFunction* New() const final {
    return CreateMaybeMessage<PFunction>(nullptr);
  }

  PFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PFunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PFunction& from);
  void MergeFrom(const PFunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PFunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PFunction";
  }
  protected:
  explicit PFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PFunction_Property Property;

  typedef PFunction_FunctionType FunctionType;
  static constexpr FunctionType UDF =
    PFunction_FunctionType_UDF;
  static constexpr FunctionType UDAF =
    PFunction_FunctionType_UDAF;
  static constexpr FunctionType UDTF =
    PFunction_FunctionType_UDTF;
  static inline bool FunctionType_IsValid(int value) {
    return PFunction_FunctionType_IsValid(value);
  }
  static constexpr FunctionType FunctionType_MIN =
    PFunction_FunctionType_FunctionType_MIN;
  static constexpr FunctionType FunctionType_MAX =
    PFunction_FunctionType_FunctionType_MAX;
  static constexpr int FunctionType_ARRAYSIZE =
    PFunction_FunctionType_FunctionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FunctionType_descriptor() {
    return PFunction_FunctionType_descriptor();
  }
  template<typename T>
  static inline const std::string& FunctionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FunctionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FunctionType_Name.");
    return PFunction_FunctionType_Name(enum_t_value);
  }
  static inline bool FunctionType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FunctionType* value) {
    return PFunction_FunctionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kPropertiesFieldNumber = 6,
    kFunctionNameFieldNumber = 1,
    kOutputFieldNumber = 3,
    kTypeFieldNumber = 4,
    kVariadicFieldNumber = 5,
  };
  // repeated .doris.PGenericType inputs = 2;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::doris::PGenericType* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PGenericType >*
      mutable_inputs();
  private:
  const ::doris::PGenericType& _internal_inputs(int index) const;
  ::doris::PGenericType* _internal_add_inputs();
  public:
  const ::doris::PGenericType& inputs(int index) const;
  ::doris::PGenericType* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PGenericType >&
      inputs() const;

  // repeated .doris.PFunction.Property properties = 6;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::doris::PFunction_Property* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PFunction_Property >*
      mutable_properties();
  private:
  const ::doris::PFunction_Property& _internal_properties(int index) const;
  ::doris::PFunction_Property* _internal_add_properties();
  public:
  const ::doris::PFunction_Property& properties(int index) const;
  ::doris::PFunction_Property* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PFunction_Property >&
      properties() const;

  // required string function_name = 1;
  bool has_function_name() const;
  private:
  bool _internal_has_function_name() const;
  public:
  void clear_function_name();
  const std::string& function_name() const;
  void set_function_name(const std::string& value);
  void set_function_name(std::string&& value);
  void set_function_name(const char* value);
  void set_function_name(const char* value, size_t size);
  std::string* mutable_function_name();
  std::string* release_function_name();
  void set_allocated_function_name(std::string* function_name);
  private:
  const std::string& _internal_function_name() const;
  void _internal_set_function_name(const std::string& value);
  std::string* _internal_mutable_function_name();
  public:

  // optional .doris.PGenericType output = 3;
  bool has_output() const;
  private:
  bool _internal_has_output() const;
  public:
  void clear_output();
  const ::doris::PGenericType& output() const;
  ::doris::PGenericType* release_output();
  ::doris::PGenericType* mutable_output();
  void set_allocated_output(::doris::PGenericType* output);
  private:
  const ::doris::PGenericType& _internal_output() const;
  ::doris::PGenericType* _internal_mutable_output();
  public:
  void unsafe_arena_set_allocated_output(
      ::doris::PGenericType* output);
  ::doris::PGenericType* unsafe_arena_release_output();

  // optional .doris.PFunction.FunctionType type = 4 [default = UDF];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::doris::PFunction_FunctionType type() const;
  void set_type(::doris::PFunction_FunctionType value);
  private:
  ::doris::PFunction_FunctionType _internal_type() const;
  void _internal_set_type(::doris::PFunction_FunctionType value);
  public:

  // optional bool variadic = 5;
  bool has_variadic() const;
  private:
  bool _internal_has_variadic() const;
  public:
  void clear_variadic();
  bool variadic() const;
  void set_variadic(bool value);
  private:
  bool _internal_variadic() const;
  void _internal_set_variadic(bool value);
  public:

  // @@protoc_insertion_point(class_scope:doris.PFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PGenericType > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PFunction_Property > properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_name_;
  ::doris::PGenericType* output_;
  int type_;
  bool variadic_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PFunctionContext PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PFunctionContext) */ {
 public:
  inline PFunctionContext() : PFunctionContext(nullptr) {}
  virtual ~PFunctionContext();

  PFunctionContext(const PFunctionContext& from);
  PFunctionContext(PFunctionContext&& from) noexcept
    : PFunctionContext() {
    *this = ::std::move(from);
  }

  inline PFunctionContext& operator=(const PFunctionContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline PFunctionContext& operator=(PFunctionContext&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PFunctionContext& default_instance();

  static inline const PFunctionContext* internal_default_instance() {
    return reinterpret_cast<const PFunctionContext*>(
               &_PFunctionContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PFunctionContext& a, PFunctionContext& b) {
    a.Swap(&b);
  }
  inline void Swap(PFunctionContext* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PFunctionContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PFunctionContext* New() const final {
    return CreateMaybeMessage<PFunctionContext>(nullptr);
  }

  PFunctionContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PFunctionContext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PFunctionContext& from);
  void MergeFrom(const PFunctionContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PFunctionContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PFunctionContext";
  }
  protected:
  explicit PFunctionContext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsDataFieldNumber = 2,
    kDataFieldNumber = 1,
  };
  // repeated .doris.PValues args_data = 2;
  int args_data_size() const;
  private:
  int _internal_args_data_size() const;
  public:
  void clear_args_data();
  ::doris::PValues* mutable_args_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PValues >*
      mutable_args_data();
  private:
  const ::doris::PValues& _internal_args_data(int index) const;
  ::doris::PValues* _internal_add_args_data();
  public:
  const ::doris::PValues& args_data(int index) const;
  ::doris::PValues* add_args_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PValues >&
      args_data() const;

  // optional bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:doris.PFunctionContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PValues > args_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PHandShakeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PHandShakeRequest) */ {
 public:
  inline PHandShakeRequest() : PHandShakeRequest(nullptr) {}
  virtual ~PHandShakeRequest();

  PHandShakeRequest(const PHandShakeRequest& from);
  PHandShakeRequest(PHandShakeRequest&& from) noexcept
    : PHandShakeRequest() {
    *this = ::std::move(from);
  }

  inline PHandShakeRequest& operator=(const PHandShakeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PHandShakeRequest& operator=(PHandShakeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PHandShakeRequest& default_instance();

  static inline const PHandShakeRequest* internal_default_instance() {
    return reinterpret_cast<const PHandShakeRequest*>(
               &_PHandShakeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PHandShakeRequest& a, PHandShakeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PHandShakeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PHandShakeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PHandShakeRequest* New() const final {
    return CreateMaybeMessage<PHandShakeRequest>(nullptr);
  }

  PHandShakeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PHandShakeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PHandShakeRequest& from);
  void MergeFrom(const PHandShakeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PHandShakeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PHandShakeRequest";
  }
  protected:
  explicit PHandShakeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHelloFieldNumber = 1,
  };
  // optional string hello = 1;
  bool has_hello() const;
  private:
  bool _internal_has_hello() const;
  public:
  void clear_hello();
  const std::string& hello() const;
  void set_hello(const std::string& value);
  void set_hello(std::string&& value);
  void set_hello(const char* value);
  void set_hello(const char* value, size_t size);
  std::string* mutable_hello();
  std::string* release_hello();
  void set_allocated_hello(std::string* hello);
  private:
  const std::string& _internal_hello() const;
  void _internal_set_hello(const std::string& value);
  std::string* _internal_mutable_hello();
  public:

  // @@protoc_insertion_point(class_scope:doris.PHandShakeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hello_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PHandShakeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PHandShakeResponse) */ {
 public:
  inline PHandShakeResponse() : PHandShakeResponse(nullptr) {}
  virtual ~PHandShakeResponse();

  PHandShakeResponse(const PHandShakeResponse& from);
  PHandShakeResponse(PHandShakeResponse&& from) noexcept
    : PHandShakeResponse() {
    *this = ::std::move(from);
  }

  inline PHandShakeResponse& operator=(const PHandShakeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PHandShakeResponse& operator=(PHandShakeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PHandShakeResponse& default_instance();

  static inline const PHandShakeResponse* internal_default_instance() {
    return reinterpret_cast<const PHandShakeResponse*>(
               &_PHandShakeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PHandShakeResponse& a, PHandShakeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PHandShakeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PHandShakeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PHandShakeResponse* New() const final {
    return CreateMaybeMessage<PHandShakeResponse>(nullptr);
  }

  PHandShakeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PHandShakeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PHandShakeResponse& from);
  void MergeFrom(const PHandShakeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PHandShakeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PHandShakeResponse";
  }
  protected:
  explicit PHandShakeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHelloFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // optional string hello = 2;
  bool has_hello() const;
  private:
  bool _internal_has_hello() const;
  public:
  void clear_hello();
  const std::string& hello() const;
  void set_hello(const std::string& value);
  void set_hello(std::string&& value);
  void set_hello(const char* value);
  void set_hello(const char* value, size_t size);
  std::string* mutable_hello();
  std::string* release_hello();
  void set_allocated_hello(std::string* hello);
  private:
  const std::string& _internal_hello() const;
  void _internal_set_hello(const std::string& value);
  std::string* _internal_mutable_hello();
  public:

  // optional .doris.PStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::doris::PStatus& status() const;
  ::doris::PStatus* release_status();
  ::doris::PStatus* mutable_status();
  void set_allocated_status(::doris::PStatus* status);
  private:
  const ::doris::PStatus& _internal_status() const;
  ::doris::PStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::doris::PStatus* status);
  ::doris::PStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:doris.PHandShakeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hello_;
  ::doris::PStatus* status_;
  friend struct ::TableStruct_types_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PStatus

// required int32 status_code = 1;
inline bool PStatus::_internal_has_status_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PStatus::has_status_code() const {
  return _internal_has_status_code();
}
inline void PStatus::clear_status_code() {
  status_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PStatus::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PStatus::status_code() const {
  // @@protoc_insertion_point(field_get:doris.PStatus.status_code)
  return _internal_status_code();
}
inline void PStatus::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  status_code_ = value;
}
inline void PStatus::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:doris.PStatus.status_code)
}

// repeated string error_msgs = 2;
inline int PStatus::_internal_error_msgs_size() const {
  return error_msgs_.size();
}
inline int PStatus::error_msgs_size() const {
  return _internal_error_msgs_size();
}
inline void PStatus::clear_error_msgs() {
  error_msgs_.Clear();
}
inline std::string* PStatus::add_error_msgs() {
  // @@protoc_insertion_point(field_add_mutable:doris.PStatus.error_msgs)
  return _internal_add_error_msgs();
}
inline const std::string& PStatus::_internal_error_msgs(int index) const {
  return error_msgs_.Get(index);
}
inline const std::string& PStatus::error_msgs(int index) const {
  // @@protoc_insertion_point(field_get:doris.PStatus.error_msgs)
  return _internal_error_msgs(index);
}
inline std::string* PStatus::mutable_error_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:doris.PStatus.error_msgs)
  return error_msgs_.Mutable(index);
}
inline void PStatus::set_error_msgs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:doris.PStatus.error_msgs)
  error_msgs_.Mutable(index)->assign(value);
}
inline void PStatus::set_error_msgs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:doris.PStatus.error_msgs)
  error_msgs_.Mutable(index)->assign(std::move(value));
}
inline void PStatus::set_error_msgs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  error_msgs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:doris.PStatus.error_msgs)
}
inline void PStatus::set_error_msgs(int index, const char* value, size_t size) {
  error_msgs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:doris.PStatus.error_msgs)
}
inline std::string* PStatus::_internal_add_error_msgs() {
  return error_msgs_.Add();
}
inline void PStatus::add_error_msgs(const std::string& value) {
  error_msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:doris.PStatus.error_msgs)
}
inline void PStatus::add_error_msgs(std::string&& value) {
  error_msgs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:doris.PStatus.error_msgs)
}
inline void PStatus::add_error_msgs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  error_msgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:doris.PStatus.error_msgs)
}
inline void PStatus::add_error_msgs(const char* value, size_t size) {
  error_msgs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:doris.PStatus.error_msgs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PStatus::error_msgs() const {
  // @@protoc_insertion_point(field_list:doris.PStatus.error_msgs)
  return error_msgs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PStatus::mutable_error_msgs() {
  // @@protoc_insertion_point(field_mutable_list:doris.PStatus.error_msgs)
  return &error_msgs_;
}

// -------------------------------------------------------------------

// PScalarType

// required int32 type = 1;
inline bool PScalarType::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PScalarType::has_type() const {
  return _internal_has_type();
}
inline void PScalarType::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScalarType::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScalarType::type() const {
  // @@protoc_insertion_point(field_get:doris.PScalarType.type)
  return _internal_type();
}
inline void PScalarType::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void PScalarType::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:doris.PScalarType.type)
}

// optional int32 len = 2;
inline bool PScalarType::_internal_has_len() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PScalarType::has_len() const {
  return _internal_has_len();
}
inline void PScalarType::clear_len() {
  len_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScalarType::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScalarType::len() const {
  // @@protoc_insertion_point(field_get:doris.PScalarType.len)
  return _internal_len();
}
inline void PScalarType::_internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  len_ = value;
}
inline void PScalarType::set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:doris.PScalarType.len)
}

// optional int32 precision = 3;
inline bool PScalarType::_internal_has_precision() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PScalarType::has_precision() const {
  return _internal_has_precision();
}
inline void PScalarType::clear_precision() {
  precision_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScalarType::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScalarType::precision() const {
  // @@protoc_insertion_point(field_get:doris.PScalarType.precision)
  return _internal_precision();
}
inline void PScalarType::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  precision_ = value;
}
inline void PScalarType::set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:doris.PScalarType.precision)
}

// optional int32 scale = 4;
inline bool PScalarType::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PScalarType::has_scale() const {
  return _internal_has_scale();
}
inline void PScalarType::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScalarType::_internal_scale() const {
  return scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PScalarType::scale() const {
  // @@protoc_insertion_point(field_get:doris.PScalarType.scale)
  return _internal_scale();
}
inline void PScalarType::_internal_set_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  scale_ = value;
}
inline void PScalarType::set_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:doris.PScalarType.scale)
}

// -------------------------------------------------------------------

// PStructField

// required string name = 1;
inline bool PStructField::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PStructField::has_name() const {
  return _internal_has_name();
}
inline void PStructField::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PStructField::name() const {
  // @@protoc_insertion_point(field_get:doris.PStructField.name)
  return _internal_name();
}
inline void PStructField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:doris.PStructField.name)
}
inline std::string* PStructField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:doris.PStructField.name)
  return _internal_mutable_name();
}
inline const std::string& PStructField::_internal_name() const {
  return name_.Get();
}
inline void PStructField::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PStructField::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:doris.PStructField.name)
}
inline void PStructField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:doris.PStructField.name)
}
inline void PStructField::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:doris.PStructField.name)
}
inline std::string* PStructField::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PStructField::release_name() {
  // @@protoc_insertion_point(field_release:doris.PStructField.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PStructField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:doris.PStructField.name)
}

// optional string comment = 2;
inline bool PStructField::_internal_has_comment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PStructField::has_comment() const {
  return _internal_has_comment();
}
inline void PStructField::clear_comment() {
  comment_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PStructField::comment() const {
  // @@protoc_insertion_point(field_get:doris.PStructField.comment)
  return _internal_comment();
}
inline void PStructField::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:doris.PStructField.comment)
}
inline std::string* PStructField::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:doris.PStructField.comment)
  return _internal_mutable_comment();
}
inline const std::string& PStructField::_internal_comment() const {
  return comment_.Get();
}
inline void PStructField::_internal_set_comment(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PStructField::set_comment(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:doris.PStructField.comment)
}
inline void PStructField::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:doris.PStructField.comment)
}
inline void PStructField::set_comment(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:doris.PStructField.comment)
}
inline std::string* PStructField::_internal_mutable_comment() {
  _has_bits_[0] |= 0x00000002u;
  return comment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PStructField::release_comment() {
  // @@protoc_insertion_point(field_release:doris.PStructField.comment)
  if (!_internal_has_comment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return comment_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PStructField::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:doris.PStructField.comment)
}

// -------------------------------------------------------------------

// PTypeNode

// required int32 type = 1;
inline bool PTypeNode::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PTypeNode::has_type() const {
  return _internal_has_type();
}
inline void PTypeNode::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PTypeNode::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PTypeNode::type() const {
  // @@protoc_insertion_point(field_get:doris.PTypeNode.type)
  return _internal_type();
}
inline void PTypeNode::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void PTypeNode::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:doris.PTypeNode.type)
}

// optional .doris.PScalarType scalar_type = 2;
inline bool PTypeNode::_internal_has_scalar_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || scalar_type_ != nullptr);
  return value;
}
inline bool PTypeNode::has_scalar_type() const {
  return _internal_has_scalar_type();
}
inline void PTypeNode::clear_scalar_type() {
  if (scalar_type_ != nullptr) scalar_type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::doris::PScalarType& PTypeNode::_internal_scalar_type() const {
  const ::doris::PScalarType* p = scalar_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PScalarType&>(
      ::doris::_PScalarType_default_instance_);
}
inline const ::doris::PScalarType& PTypeNode::scalar_type() const {
  // @@protoc_insertion_point(field_get:doris.PTypeNode.scalar_type)
  return _internal_scalar_type();
}
inline void PTypeNode::unsafe_arena_set_allocated_scalar_type(
    ::doris::PScalarType* scalar_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scalar_type_);
  }
  scalar_type_ = scalar_type;
  if (scalar_type) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PTypeNode.scalar_type)
}
inline ::doris::PScalarType* PTypeNode::release_scalar_type() {
  _has_bits_[0] &= ~0x00000001u;
  ::doris::PScalarType* temp = scalar_type_;
  scalar_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PScalarType* PTypeNode::unsafe_arena_release_scalar_type() {
  // @@protoc_insertion_point(field_release:doris.PTypeNode.scalar_type)
  _has_bits_[0] &= ~0x00000001u;
  ::doris::PScalarType* temp = scalar_type_;
  scalar_type_ = nullptr;
  return temp;
}
inline ::doris::PScalarType* PTypeNode::_internal_mutable_scalar_type() {
  _has_bits_[0] |= 0x00000001u;
  if (scalar_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PScalarType>(GetArena());
    scalar_type_ = p;
  }
  return scalar_type_;
}
inline ::doris::PScalarType* PTypeNode::mutable_scalar_type() {
  // @@protoc_insertion_point(field_mutable:doris.PTypeNode.scalar_type)
  return _internal_mutable_scalar_type();
}
inline void PTypeNode::set_allocated_scalar_type(::doris::PScalarType* scalar_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scalar_type_;
  }
  if (scalar_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scalar_type);
    if (message_arena != submessage_arena) {
      scalar_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scalar_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scalar_type_ = scalar_type;
  // @@protoc_insertion_point(field_set_allocated:doris.PTypeNode.scalar_type)
}

// repeated .doris.PStructField struct_fields = 3;
inline int PTypeNode::_internal_struct_fields_size() const {
  return struct_fields_.size();
}
inline int PTypeNode::struct_fields_size() const {
  return _internal_struct_fields_size();
}
inline void PTypeNode::clear_struct_fields() {
  struct_fields_.Clear();
}
inline ::doris::PStructField* PTypeNode::mutable_struct_fields(int index) {
  // @@protoc_insertion_point(field_mutable:doris.PTypeNode.struct_fields)
  return struct_fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PStructField >*
PTypeNode::mutable_struct_fields() {
  // @@protoc_insertion_point(field_mutable_list:doris.PTypeNode.struct_fields)
  return &struct_fields_;
}
inline const ::doris::PStructField& PTypeNode::_internal_struct_fields(int index) const {
  return struct_fields_.Get(index);
}
inline const ::doris::PStructField& PTypeNode::struct_fields(int index) const {
  // @@protoc_insertion_point(field_get:doris.PTypeNode.struct_fields)
  return _internal_struct_fields(index);
}
inline ::doris::PStructField* PTypeNode::_internal_add_struct_fields() {
  return struct_fields_.Add();
}
inline ::doris::PStructField* PTypeNode::add_struct_fields() {
  // @@protoc_insertion_point(field_add:doris.PTypeNode.struct_fields)
  return _internal_add_struct_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PStructField >&
PTypeNode::struct_fields() const {
  // @@protoc_insertion_point(field_list:doris.PTypeNode.struct_fields)
  return struct_fields_;
}

// optional bool contains_null = 4;
inline bool PTypeNode::_internal_has_contains_null() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PTypeNode::has_contains_null() const {
  return _internal_has_contains_null();
}
inline void PTypeNode::clear_contains_null() {
  contains_null_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PTypeNode::_internal_contains_null() const {
  return contains_null_;
}
inline bool PTypeNode::contains_null() const {
  // @@protoc_insertion_point(field_get:doris.PTypeNode.contains_null)
  return _internal_contains_null();
}
inline void PTypeNode::_internal_set_contains_null(bool value) {
  _has_bits_[0] |= 0x00000004u;
  contains_null_ = value;
}
inline void PTypeNode::set_contains_null(bool value) {
  _internal_set_contains_null(value);
  // @@protoc_insertion_point(field_set:doris.PTypeNode.contains_null)
}

// -------------------------------------------------------------------

// PTypeDesc

// repeated .doris.PTypeNode types = 1;
inline int PTypeDesc::_internal_types_size() const {
  return types_.size();
}
inline int PTypeDesc::types_size() const {
  return _internal_types_size();
}
inline void PTypeDesc::clear_types() {
  types_.Clear();
}
inline ::doris::PTypeNode* PTypeDesc::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:doris.PTypeDesc.types)
  return types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PTypeNode >*
PTypeDesc::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:doris.PTypeDesc.types)
  return &types_;
}
inline const ::doris::PTypeNode& PTypeDesc::_internal_types(int index) const {
  return types_.Get(index);
}
inline const ::doris::PTypeNode& PTypeDesc::types(int index) const {
  // @@protoc_insertion_point(field_get:doris.PTypeDesc.types)
  return _internal_types(index);
}
inline ::doris::PTypeNode* PTypeDesc::_internal_add_types() {
  return types_.Add();
}
inline ::doris::PTypeNode* PTypeDesc::add_types() {
  // @@protoc_insertion_point(field_add:doris.PTypeDesc.types)
  return _internal_add_types();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PTypeNode >&
PTypeDesc::types() const {
  // @@protoc_insertion_point(field_list:doris.PTypeDesc.types)
  return types_;
}

// -------------------------------------------------------------------

// PUniqueId

// required int64 hi = 1;
inline bool PUniqueId::_internal_has_hi() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PUniqueId::has_hi() const {
  return _internal_has_hi();
}
inline void PUniqueId::clear_hi() {
  hi_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PUniqueId::_internal_hi() const {
  return hi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PUniqueId::hi() const {
  // @@protoc_insertion_point(field_get:doris.PUniqueId.hi)
  return _internal_hi();
}
inline void PUniqueId::_internal_set_hi(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  hi_ = value;
}
inline void PUniqueId::set_hi(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_hi(value);
  // @@protoc_insertion_point(field_set:doris.PUniqueId.hi)
}

// required int64 lo = 2;
inline bool PUniqueId::_internal_has_lo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PUniqueId::has_lo() const {
  return _internal_has_lo();
}
inline void PUniqueId::clear_lo() {
  lo_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PUniqueId::_internal_lo() const {
  return lo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PUniqueId::lo() const {
  // @@protoc_insertion_point(field_get:doris.PUniqueId.lo)
  return _internal_lo();
}
inline void PUniqueId::_internal_set_lo(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  lo_ = value;
}
inline void PUniqueId::set_lo(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lo(value);
  // @@protoc_insertion_point(field_set:doris.PUniqueId.lo)
}

// -------------------------------------------------------------------

// PGenericType

// required .doris.PGenericType.TypeId id = 2;
inline bool PGenericType::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PGenericType::has_id() const {
  return _internal_has_id();
}
inline void PGenericType::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::doris::PGenericType_TypeId PGenericType::_internal_id() const {
  return static_cast< ::doris::PGenericType_TypeId >(id_);
}
inline ::doris::PGenericType_TypeId PGenericType::id() const {
  // @@protoc_insertion_point(field_get:doris.PGenericType.id)
  return _internal_id();
}
inline void PGenericType::_internal_set_id(::doris::PGenericType_TypeId value) {
  assert(::doris::PGenericType_TypeId_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void PGenericType::set_id(::doris::PGenericType_TypeId value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:doris.PGenericType.id)
}

// optional .doris.PList list_type = 11;
inline bool PGenericType::_internal_has_list_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || list_type_ != nullptr);
  return value;
}
inline bool PGenericType::has_list_type() const {
  return _internal_has_list_type();
}
inline void PGenericType::clear_list_type() {
  if (list_type_ != nullptr) list_type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::doris::PList& PGenericType::_internal_list_type() const {
  const ::doris::PList* p = list_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PList&>(
      ::doris::_PList_default_instance_);
}
inline const ::doris::PList& PGenericType::list_type() const {
  // @@protoc_insertion_point(field_get:doris.PGenericType.list_type)
  return _internal_list_type();
}
inline void PGenericType::unsafe_arena_set_allocated_list_type(
    ::doris::PList* list_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_type_);
  }
  list_type_ = list_type;
  if (list_type) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PGenericType.list_type)
}
inline ::doris::PList* PGenericType::release_list_type() {
  _has_bits_[0] &= ~0x00000001u;
  ::doris::PList* temp = list_type_;
  list_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PList* PGenericType::unsafe_arena_release_list_type() {
  // @@protoc_insertion_point(field_release:doris.PGenericType.list_type)
  _has_bits_[0] &= ~0x00000001u;
  ::doris::PList* temp = list_type_;
  list_type_ = nullptr;
  return temp;
}
inline ::doris::PList* PGenericType::_internal_mutable_list_type() {
  _has_bits_[0] |= 0x00000001u;
  if (list_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PList>(GetArena());
    list_type_ = p;
  }
  return list_type_;
}
inline ::doris::PList* PGenericType::mutable_list_type() {
  // @@protoc_insertion_point(field_mutable:doris.PGenericType.list_type)
  return _internal_mutable_list_type();
}
inline void PGenericType::set_allocated_list_type(::doris::PList* list_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete list_type_;
  }
  if (list_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_type);
    if (message_arena != submessage_arena) {
      list_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  list_type_ = list_type;
  // @@protoc_insertion_point(field_set_allocated:doris.PGenericType.list_type)
}

// optional .doris.PMap map_type = 12;
inline bool PGenericType::_internal_has_map_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || map_type_ != nullptr);
  return value;
}
inline bool PGenericType::has_map_type() const {
  return _internal_has_map_type();
}
inline void PGenericType::clear_map_type() {
  if (map_type_ != nullptr) map_type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::doris::PMap& PGenericType::_internal_map_type() const {
  const ::doris::PMap* p = map_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PMap&>(
      ::doris::_PMap_default_instance_);
}
inline const ::doris::PMap& PGenericType::map_type() const {
  // @@protoc_insertion_point(field_get:doris.PGenericType.map_type)
  return _internal_map_type();
}
inline void PGenericType::unsafe_arena_set_allocated_map_type(
    ::doris::PMap* map_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_type_);
  }
  map_type_ = map_type;
  if (map_type) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PGenericType.map_type)
}
inline ::doris::PMap* PGenericType::release_map_type() {
  _has_bits_[0] &= ~0x00000002u;
  ::doris::PMap* temp = map_type_;
  map_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PMap* PGenericType::unsafe_arena_release_map_type() {
  // @@protoc_insertion_point(field_release:doris.PGenericType.map_type)
  _has_bits_[0] &= ~0x00000002u;
  ::doris::PMap* temp = map_type_;
  map_type_ = nullptr;
  return temp;
}
inline ::doris::PMap* PGenericType::_internal_mutable_map_type() {
  _has_bits_[0] |= 0x00000002u;
  if (map_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PMap>(GetArena());
    map_type_ = p;
  }
  return map_type_;
}
inline ::doris::PMap* PGenericType::mutable_map_type() {
  // @@protoc_insertion_point(field_mutable:doris.PGenericType.map_type)
  return _internal_mutable_map_type();
}
inline void PGenericType::set_allocated_map_type(::doris::PMap* map_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete map_type_;
  }
  if (map_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_type);
    if (message_arena != submessage_arena) {
      map_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  map_type_ = map_type;
  // @@protoc_insertion_point(field_set_allocated:doris.PGenericType.map_type)
}

// optional .doris.PStruct struct_type = 13;
inline bool PGenericType::_internal_has_struct_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || struct_type_ != nullptr);
  return value;
}
inline bool PGenericType::has_struct_type() const {
  return _internal_has_struct_type();
}
inline void PGenericType::clear_struct_type() {
  if (struct_type_ != nullptr) struct_type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::doris::PStruct& PGenericType::_internal_struct_type() const {
  const ::doris::PStruct* p = struct_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PStruct&>(
      ::doris::_PStruct_default_instance_);
}
inline const ::doris::PStruct& PGenericType::struct_type() const {
  // @@protoc_insertion_point(field_get:doris.PGenericType.struct_type)
  return _internal_struct_type();
}
inline void PGenericType::unsafe_arena_set_allocated_struct_type(
    ::doris::PStruct* struct_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct_type_);
  }
  struct_type_ = struct_type;
  if (struct_type) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PGenericType.struct_type)
}
inline ::doris::PStruct* PGenericType::release_struct_type() {
  _has_bits_[0] &= ~0x00000004u;
  ::doris::PStruct* temp = struct_type_;
  struct_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PStruct* PGenericType::unsafe_arena_release_struct_type() {
  // @@protoc_insertion_point(field_release:doris.PGenericType.struct_type)
  _has_bits_[0] &= ~0x00000004u;
  ::doris::PStruct* temp = struct_type_;
  struct_type_ = nullptr;
  return temp;
}
inline ::doris::PStruct* PGenericType::_internal_mutable_struct_type() {
  _has_bits_[0] |= 0x00000004u;
  if (struct_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PStruct>(GetArena());
    struct_type_ = p;
  }
  return struct_type_;
}
inline ::doris::PStruct* PGenericType::mutable_struct_type() {
  // @@protoc_insertion_point(field_mutable:doris.PGenericType.struct_type)
  return _internal_mutable_struct_type();
}
inline void PGenericType::set_allocated_struct_type(::doris::PStruct* struct_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete struct_type_;
  }
  if (struct_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(struct_type);
    if (message_arena != submessage_arena) {
      struct_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  struct_type_ = struct_type;
  // @@protoc_insertion_point(field_set_allocated:doris.PGenericType.struct_type)
}

// optional .doris.PDecimal decimal_type = 14;
inline bool PGenericType::_internal_has_decimal_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || decimal_type_ != nullptr);
  return value;
}
inline bool PGenericType::has_decimal_type() const {
  return _internal_has_decimal_type();
}
inline void PGenericType::clear_decimal_type() {
  if (decimal_type_ != nullptr) decimal_type_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::doris::PDecimal& PGenericType::_internal_decimal_type() const {
  const ::doris::PDecimal* p = decimal_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PDecimal&>(
      ::doris::_PDecimal_default_instance_);
}
inline const ::doris::PDecimal& PGenericType::decimal_type() const {
  // @@protoc_insertion_point(field_get:doris.PGenericType.decimal_type)
  return _internal_decimal_type();
}
inline void PGenericType::unsafe_arena_set_allocated_decimal_type(
    ::doris::PDecimal* decimal_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decimal_type_);
  }
  decimal_type_ = decimal_type;
  if (decimal_type) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PGenericType.decimal_type)
}
inline ::doris::PDecimal* PGenericType::release_decimal_type() {
  _has_bits_[0] &= ~0x00000008u;
  ::doris::PDecimal* temp = decimal_type_;
  decimal_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PDecimal* PGenericType::unsafe_arena_release_decimal_type() {
  // @@protoc_insertion_point(field_release:doris.PGenericType.decimal_type)
  _has_bits_[0] &= ~0x00000008u;
  ::doris::PDecimal* temp = decimal_type_;
  decimal_type_ = nullptr;
  return temp;
}
inline ::doris::PDecimal* PGenericType::_internal_mutable_decimal_type() {
  _has_bits_[0] |= 0x00000008u;
  if (decimal_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PDecimal>(GetArena());
    decimal_type_ = p;
  }
  return decimal_type_;
}
inline ::doris::PDecimal* PGenericType::mutable_decimal_type() {
  // @@protoc_insertion_point(field_mutable:doris.PGenericType.decimal_type)
  return _internal_mutable_decimal_type();
}
inline void PGenericType::set_allocated_decimal_type(::doris::PDecimal* decimal_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete decimal_type_;
  }
  if (decimal_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(decimal_type);
    if (message_arena != submessage_arena) {
      decimal_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decimal_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  decimal_type_ = decimal_type;
  // @@protoc_insertion_point(field_set_allocated:doris.PGenericType.decimal_type)
}

// -------------------------------------------------------------------

// PList

// required .doris.PGenericType element_type = 1;
inline bool PList::_internal_has_element_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || element_type_ != nullptr);
  return value;
}
inline bool PList::has_element_type() const {
  return _internal_has_element_type();
}
inline void PList::clear_element_type() {
  if (element_type_ != nullptr) element_type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::doris::PGenericType& PList::_internal_element_type() const {
  const ::doris::PGenericType* p = element_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PGenericType&>(
      ::doris::_PGenericType_default_instance_);
}
inline const ::doris::PGenericType& PList::element_type() const {
  // @@protoc_insertion_point(field_get:doris.PList.element_type)
  return _internal_element_type();
}
inline void PList::unsafe_arena_set_allocated_element_type(
    ::doris::PGenericType* element_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(element_type_);
  }
  element_type_ = element_type;
  if (element_type) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PList.element_type)
}
inline ::doris::PGenericType* PList::release_element_type() {
  _has_bits_[0] &= ~0x00000001u;
  ::doris::PGenericType* temp = element_type_;
  element_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PGenericType* PList::unsafe_arena_release_element_type() {
  // @@protoc_insertion_point(field_release:doris.PList.element_type)
  _has_bits_[0] &= ~0x00000001u;
  ::doris::PGenericType* temp = element_type_;
  element_type_ = nullptr;
  return temp;
}
inline ::doris::PGenericType* PList::_internal_mutable_element_type() {
  _has_bits_[0] |= 0x00000001u;
  if (element_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PGenericType>(GetArena());
    element_type_ = p;
  }
  return element_type_;
}
inline ::doris::PGenericType* PList::mutable_element_type() {
  // @@protoc_insertion_point(field_mutable:doris.PList.element_type)
  return _internal_mutable_element_type();
}
inline void PList::set_allocated_element_type(::doris::PGenericType* element_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete element_type_;
  }
  if (element_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(element_type);
    if (message_arena != submessage_arena) {
      element_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  element_type_ = element_type;
  // @@protoc_insertion_point(field_set_allocated:doris.PList.element_type)
}

// -------------------------------------------------------------------

// PMap

// required .doris.PGenericType key_type = 1;
inline bool PMap::_internal_has_key_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || key_type_ != nullptr);
  return value;
}
inline bool PMap::has_key_type() const {
  return _internal_has_key_type();
}
inline void PMap::clear_key_type() {
  if (key_type_ != nullptr) key_type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::doris::PGenericType& PMap::_internal_key_type() const {
  const ::doris::PGenericType* p = key_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PGenericType&>(
      ::doris::_PGenericType_default_instance_);
}
inline const ::doris::PGenericType& PMap::key_type() const {
  // @@protoc_insertion_point(field_get:doris.PMap.key_type)
  return _internal_key_type();
}
inline void PMap::unsafe_arena_set_allocated_key_type(
    ::doris::PGenericType* key_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_type_);
  }
  key_type_ = key_type;
  if (key_type) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PMap.key_type)
}
inline ::doris::PGenericType* PMap::release_key_type() {
  _has_bits_[0] &= ~0x00000001u;
  ::doris::PGenericType* temp = key_type_;
  key_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PGenericType* PMap::unsafe_arena_release_key_type() {
  // @@protoc_insertion_point(field_release:doris.PMap.key_type)
  _has_bits_[0] &= ~0x00000001u;
  ::doris::PGenericType* temp = key_type_;
  key_type_ = nullptr;
  return temp;
}
inline ::doris::PGenericType* PMap::_internal_mutable_key_type() {
  _has_bits_[0] |= 0x00000001u;
  if (key_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PGenericType>(GetArena());
    key_type_ = p;
  }
  return key_type_;
}
inline ::doris::PGenericType* PMap::mutable_key_type() {
  // @@protoc_insertion_point(field_mutable:doris.PMap.key_type)
  return _internal_mutable_key_type();
}
inline void PMap::set_allocated_key_type(::doris::PGenericType* key_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete key_type_;
  }
  if (key_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key_type);
    if (message_arena != submessage_arena) {
      key_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_type_ = key_type;
  // @@protoc_insertion_point(field_set_allocated:doris.PMap.key_type)
}

// required .doris.PGenericType value_type = 2;
inline bool PMap::_internal_has_value_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_type_ != nullptr);
  return value;
}
inline bool PMap::has_value_type() const {
  return _internal_has_value_type();
}
inline void PMap::clear_value_type() {
  if (value_type_ != nullptr) value_type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::doris::PGenericType& PMap::_internal_value_type() const {
  const ::doris::PGenericType* p = value_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PGenericType&>(
      ::doris::_PGenericType_default_instance_);
}
inline const ::doris::PGenericType& PMap::value_type() const {
  // @@protoc_insertion_point(field_get:doris.PMap.value_type)
  return _internal_value_type();
}
inline void PMap::unsafe_arena_set_allocated_value_type(
    ::doris::PGenericType* value_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_type_);
  }
  value_type_ = value_type;
  if (value_type) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PMap.value_type)
}
inline ::doris::PGenericType* PMap::release_value_type() {
  _has_bits_[0] &= ~0x00000002u;
  ::doris::PGenericType* temp = value_type_;
  value_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PGenericType* PMap::unsafe_arena_release_value_type() {
  // @@protoc_insertion_point(field_release:doris.PMap.value_type)
  _has_bits_[0] &= ~0x00000002u;
  ::doris::PGenericType* temp = value_type_;
  value_type_ = nullptr;
  return temp;
}
inline ::doris::PGenericType* PMap::_internal_mutable_value_type() {
  _has_bits_[0] |= 0x00000002u;
  if (value_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PGenericType>(GetArena());
    value_type_ = p;
  }
  return value_type_;
}
inline ::doris::PGenericType* PMap::mutable_value_type() {
  // @@protoc_insertion_point(field_mutable:doris.PMap.value_type)
  return _internal_mutable_value_type();
}
inline void PMap::set_allocated_value_type(::doris::PGenericType* value_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_type_;
  }
  if (value_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value_type);
    if (message_arena != submessage_arena) {
      value_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_type_ = value_type;
  // @@protoc_insertion_point(field_set_allocated:doris.PMap.value_type)
}

// -------------------------------------------------------------------

// PField

// required .doris.PGenericType type = 1;
inline bool PField::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || type_ != nullptr);
  return value;
}
inline bool PField::has_type() const {
  return _internal_has_type();
}
inline void PField::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::doris::PGenericType& PField::_internal_type() const {
  const ::doris::PGenericType* p = type_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PGenericType&>(
      ::doris::_PGenericType_default_instance_);
}
inline const ::doris::PGenericType& PField::type() const {
  // @@protoc_insertion_point(field_get:doris.PField.type)
  return _internal_type();
}
inline void PField::unsafe_arena_set_allocated_type(
    ::doris::PGenericType* type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  type_ = type;
  if (type) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PField.type)
}
inline ::doris::PGenericType* PField::release_type() {
  _has_bits_[0] &= ~0x00000004u;
  ::doris::PGenericType* temp = type_;
  type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PGenericType* PField::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:doris.PField.type)
  _has_bits_[0] &= ~0x00000004u;
  ::doris::PGenericType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::doris::PGenericType* PField::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000004u;
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PGenericType>(GetArena());
    type_ = p;
  }
  return type_;
}
inline ::doris::PGenericType* PField::mutable_type() {
  // @@protoc_insertion_point(field_mutable:doris.PField.type)
  return _internal_mutable_type();
}
inline void PField::set_allocated_type(::doris::PGenericType* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type);
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:doris.PField.type)
}

// optional string name = 2;
inline bool PField::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PField::has_name() const {
  return _internal_has_name();
}
inline void PField::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PField::name() const {
  // @@protoc_insertion_point(field_get:doris.PField.name)
  return _internal_name();
}
inline void PField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:doris.PField.name)
}
inline std::string* PField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:doris.PField.name)
  return _internal_mutable_name();
}
inline const std::string& PField::_internal_name() const {
  return name_.Get();
}
inline void PField::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PField::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:doris.PField.name)
}
inline void PField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:doris.PField.name)
}
inline void PField::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:doris.PField.name)
}
inline std::string* PField::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PField::release_name() {
  // @@protoc_insertion_point(field_release:doris.PField.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:doris.PField.name)
}

// optional string comment = 3;
inline bool PField::_internal_has_comment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PField::has_comment() const {
  return _internal_has_comment();
}
inline void PField::clear_comment() {
  comment_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PField::comment() const {
  // @@protoc_insertion_point(field_get:doris.PField.comment)
  return _internal_comment();
}
inline void PField::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:doris.PField.comment)
}
inline std::string* PField::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:doris.PField.comment)
  return _internal_mutable_comment();
}
inline const std::string& PField::_internal_comment() const {
  return comment_.Get();
}
inline void PField::_internal_set_comment(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PField::set_comment(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:doris.PField.comment)
}
inline void PField::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:doris.PField.comment)
}
inline void PField::set_comment(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:doris.PField.comment)
}
inline std::string* PField::_internal_mutable_comment() {
  _has_bits_[0] |= 0x00000002u;
  return comment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PField::release_comment() {
  // @@protoc_insertion_point(field_release:doris.PField.comment)
  if (!_internal_has_comment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return comment_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PField::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:doris.PField.comment)
}

// -------------------------------------------------------------------

// PStruct

// repeated .doris.PField fields = 1;
inline int PStruct::_internal_fields_size() const {
  return fields_.size();
}
inline int PStruct::fields_size() const {
  return _internal_fields_size();
}
inline void PStruct::clear_fields() {
  fields_.Clear();
}
inline ::doris::PField* PStruct::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:doris.PStruct.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PField >*
PStruct::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:doris.PStruct.fields)
  return &fields_;
}
inline const ::doris::PField& PStruct::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::doris::PField& PStruct::fields(int index) const {
  // @@protoc_insertion_point(field_get:doris.PStruct.fields)
  return _internal_fields(index);
}
inline ::doris::PField* PStruct::_internal_add_fields() {
  return fields_.Add();
}
inline ::doris::PField* PStruct::add_fields() {
  // @@protoc_insertion_point(field_add:doris.PStruct.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PField >&
PStruct::fields() const {
  // @@protoc_insertion_point(field_list:doris.PStruct.fields)
  return fields_;
}

// required string name = 2;
inline bool PStruct::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PStruct::has_name() const {
  return _internal_has_name();
}
inline void PStruct::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PStruct::name() const {
  // @@protoc_insertion_point(field_get:doris.PStruct.name)
  return _internal_name();
}
inline void PStruct::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:doris.PStruct.name)
}
inline std::string* PStruct::mutable_name() {
  // @@protoc_insertion_point(field_mutable:doris.PStruct.name)
  return _internal_mutable_name();
}
inline const std::string& PStruct::_internal_name() const {
  return name_.Get();
}
inline void PStruct::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PStruct::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:doris.PStruct.name)
}
inline void PStruct::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:doris.PStruct.name)
}
inline void PStruct::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:doris.PStruct.name)
}
inline std::string* PStruct::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PStruct::release_name() {
  // @@protoc_insertion_point(field_release:doris.PStruct.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PStruct::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:doris.PStruct.name)
}

// -------------------------------------------------------------------

// PDecimal

// required uint32 precision = 1;
inline bool PDecimal::_internal_has_precision() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PDecimal::has_precision() const {
  return _internal_has_precision();
}
inline void PDecimal::clear_precision() {
  precision_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDecimal::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDecimal::precision() const {
  // @@protoc_insertion_point(field_get:doris.PDecimal.precision)
  return _internal_precision();
}
inline void PDecimal::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  precision_ = value;
}
inline void PDecimal::set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:doris.PDecimal.precision)
}

// required uint32 scale = 2;
inline bool PDecimal::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PDecimal::has_scale() const {
  return _internal_has_scale();
}
inline void PDecimal::clear_scale() {
  scale_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDecimal::_internal_scale() const {
  return scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDecimal::scale() const {
  // @@protoc_insertion_point(field_get:doris.PDecimal.scale)
  return _internal_scale();
}
inline void PDecimal::_internal_set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  scale_ = value;
}
inline void PDecimal::set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:doris.PDecimal.scale)
}

// -------------------------------------------------------------------

// PDateTime

// optional int32 year = 1;
inline bool PDateTime::_internal_has_year() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PDateTime::has_year() const {
  return _internal_has_year();
}
inline void PDateTime::clear_year() {
  year_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDateTime::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDateTime::year() const {
  // @@protoc_insertion_point(field_get:doris.PDateTime.year)
  return _internal_year();
}
inline void PDateTime::_internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  year_ = value;
}
inline void PDateTime::set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:doris.PDateTime.year)
}

// optional int32 month = 2;
inline bool PDateTime::_internal_has_month() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PDateTime::has_month() const {
  return _internal_has_month();
}
inline void PDateTime::clear_month() {
  month_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDateTime::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDateTime::month() const {
  // @@protoc_insertion_point(field_get:doris.PDateTime.month)
  return _internal_month();
}
inline void PDateTime::_internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  month_ = value;
}
inline void PDateTime::set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:doris.PDateTime.month)
}

// optional int32 day = 3;
inline bool PDateTime::_internal_has_day() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PDateTime::has_day() const {
  return _internal_has_day();
}
inline void PDateTime::clear_day() {
  day_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDateTime::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDateTime::day() const {
  // @@protoc_insertion_point(field_get:doris.PDateTime.day)
  return _internal_day();
}
inline void PDateTime::_internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  day_ = value;
}
inline void PDateTime::set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:doris.PDateTime.day)
}

// optional int32 hour = 4;
inline bool PDateTime::_internal_has_hour() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PDateTime::has_hour() const {
  return _internal_has_hour();
}
inline void PDateTime::clear_hour() {
  hour_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDateTime::_internal_hour() const {
  return hour_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDateTime::hour() const {
  // @@protoc_insertion_point(field_get:doris.PDateTime.hour)
  return _internal_hour();
}
inline void PDateTime::_internal_set_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  hour_ = value;
}
inline void PDateTime::set_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hour(value);
  // @@protoc_insertion_point(field_set:doris.PDateTime.hour)
}

// optional int32 minute = 5;
inline bool PDateTime::_internal_has_minute() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PDateTime::has_minute() const {
  return _internal_has_minute();
}
inline void PDateTime::clear_minute() {
  minute_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDateTime::_internal_minute() const {
  return minute_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDateTime::minute() const {
  // @@protoc_insertion_point(field_get:doris.PDateTime.minute)
  return _internal_minute();
}
inline void PDateTime::_internal_set_minute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  minute_ = value;
}
inline void PDateTime::set_minute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minute(value);
  // @@protoc_insertion_point(field_set:doris.PDateTime.minute)
}

// optional int32 second = 6;
inline bool PDateTime::_internal_has_second() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PDateTime::has_second() const {
  return _internal_has_second();
}
inline void PDateTime::clear_second() {
  second_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDateTime::_internal_second() const {
  return second_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDateTime::second() const {
  // @@protoc_insertion_point(field_get:doris.PDateTime.second)
  return _internal_second();
}
inline void PDateTime::_internal_set_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  second_ = value;
}
inline void PDateTime::set_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_second(value);
  // @@protoc_insertion_point(field_set:doris.PDateTime.second)
}

// optional int32 microsecond = 7;
inline bool PDateTime::_internal_has_microsecond() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PDateTime::has_microsecond() const {
  return _internal_has_microsecond();
}
inline void PDateTime::clear_microsecond() {
  microsecond_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDateTime::_internal_microsecond() const {
  return microsecond_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PDateTime::microsecond() const {
  // @@protoc_insertion_point(field_get:doris.PDateTime.microsecond)
  return _internal_microsecond();
}
inline void PDateTime::_internal_set_microsecond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  microsecond_ = value;
}
inline void PDateTime::set_microsecond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_microsecond(value);
  // @@protoc_insertion_point(field_set:doris.PDateTime.microsecond)
}

// -------------------------------------------------------------------

// PValue

// required .doris.PGenericType type = 1;
inline bool PValue::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || type_ != nullptr);
  return value;
}
inline bool PValue::has_type() const {
  return _internal_has_type();
}
inline void PValue::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::doris::PGenericType& PValue::_internal_type() const {
  const ::doris::PGenericType* p = type_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PGenericType&>(
      ::doris::_PGenericType_default_instance_);
}
inline const ::doris::PGenericType& PValue::type() const {
  // @@protoc_insertion_point(field_get:doris.PValue.type)
  return _internal_type();
}
inline void PValue::unsafe_arena_set_allocated_type(
    ::doris::PGenericType* type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  type_ = type;
  if (type) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PValue.type)
}
inline ::doris::PGenericType* PValue::release_type() {
  _has_bits_[0] &= ~0x00000004u;
  ::doris::PGenericType* temp = type_;
  type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PGenericType* PValue::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:doris.PValue.type)
  _has_bits_[0] &= ~0x00000004u;
  ::doris::PGenericType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::doris::PGenericType* PValue::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000004u;
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PGenericType>(GetArena());
    type_ = p;
  }
  return type_;
}
inline ::doris::PGenericType* PValue::mutable_type() {
  // @@protoc_insertion_point(field_mutable:doris.PValue.type)
  return _internal_mutable_type();
}
inline void PValue::set_allocated_type(::doris::PGenericType* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type);
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:doris.PValue.type)
}

// optional bool is_null = 2 [default = false];
inline bool PValue::_internal_has_is_null() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PValue::has_is_null() const {
  return _internal_has_is_null();
}
inline void PValue::clear_is_null() {
  is_null_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool PValue::_internal_is_null() const {
  return is_null_;
}
inline bool PValue::is_null() const {
  // @@protoc_insertion_point(field_get:doris.PValue.is_null)
  return _internal_is_null();
}
inline void PValue::_internal_set_is_null(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_null_ = value;
}
inline void PValue::set_is_null(bool value) {
  _internal_set_is_null(value);
  // @@protoc_insertion_point(field_set:doris.PValue.is_null)
}

// optional double double_value = 3;
inline bool PValue::_internal_has_double_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PValue::has_double_value() const {
  return _internal_has_double_value();
}
inline void PValue::clear_double_value() {
  double_value_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double PValue::_internal_double_value() const {
  return double_value_;
}
inline double PValue::double_value() const {
  // @@protoc_insertion_point(field_get:doris.PValue.double_value)
  return _internal_double_value();
}
inline void PValue::_internal_set_double_value(double value) {
  _has_bits_[0] |= 0x00000010u;
  double_value_ = value;
}
inline void PValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:doris.PValue.double_value)
}

// optional float float_value = 4;
inline bool PValue::_internal_has_float_value() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PValue::has_float_value() const {
  return _internal_has_float_value();
}
inline void PValue::clear_float_value() {
  float_value_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float PValue::_internal_float_value() const {
  return float_value_;
}
inline float PValue::float_value() const {
  // @@protoc_insertion_point(field_get:doris.PValue.float_value)
  return _internal_float_value();
}
inline void PValue::_internal_set_float_value(float value) {
  _has_bits_[0] |= 0x00000020u;
  float_value_ = value;
}
inline void PValue::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:doris.PValue.float_value)
}

// optional int32 int32_value = 5;
inline bool PValue::_internal_has_int32_value() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PValue::has_int32_value() const {
  return _internal_has_int32_value();
}
inline void PValue::clear_int32_value() {
  int32_value_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PValue::_internal_int32_value() const {
  return int32_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PValue::int32_value() const {
  // @@protoc_insertion_point(field_get:doris.PValue.int32_value)
  return _internal_int32_value();
}
inline void PValue::_internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  int32_value_ = value;
}
inline void PValue::set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int32_value(value);
  // @@protoc_insertion_point(field_set:doris.PValue.int32_value)
}

// optional int64 int64_value = 6;
inline bool PValue::_internal_has_int64_value() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PValue::has_int64_value() const {
  return _internal_has_int64_value();
}
inline void PValue::clear_int64_value() {
  int64_value_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PValue::_internal_int64_value() const {
  return int64_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PValue::int64_value() const {
  // @@protoc_insertion_point(field_get:doris.PValue.int64_value)
  return _internal_int64_value();
}
inline void PValue::_internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  int64_value_ = value;
}
inline void PValue::set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:doris.PValue.int64_value)
}

// optional uint32 uint32_value = 7;
inline bool PValue::_internal_has_uint32_value() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PValue::has_uint32_value() const {
  return _internal_has_uint32_value();
}
inline void PValue::clear_uint32_value() {
  uint32_value_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PValue::_internal_uint32_value() const {
  return uint32_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PValue::uint32_value() const {
  // @@protoc_insertion_point(field_get:doris.PValue.uint32_value)
  return _internal_uint32_value();
}
inline void PValue::_internal_set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  uint32_value_ = value;
}
inline void PValue::set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_value(value);
  // @@protoc_insertion_point(field_set:doris.PValue.uint32_value)
}

// optional uint64 uint64_value = 8;
inline bool PValue::_internal_has_uint64_value() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PValue::has_uint64_value() const {
  return _internal_has_uint64_value();
}
inline void PValue::clear_uint64_value() {
  uint64_value_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PValue::_internal_uint64_value() const {
  return uint64_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PValue::uint64_value() const {
  // @@protoc_insertion_point(field_get:doris.PValue.uint64_value)
  return _internal_uint64_value();
}
inline void PValue::_internal_set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  uint64_value_ = value;
}
inline void PValue::set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint64_value(value);
  // @@protoc_insertion_point(field_set:doris.PValue.uint64_value)
}

// optional bool bool_value = 9;
inline bool PValue::_internal_has_bool_value() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PValue::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void PValue::clear_bool_value() {
  bool_value_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool PValue::_internal_bool_value() const {
  return bool_value_;
}
inline bool PValue::bool_value() const {
  // @@protoc_insertion_point(field_get:doris.PValue.bool_value)
  return _internal_bool_value();
}
inline void PValue::_internal_set_bool_value(bool value) {
  _has_bits_[0] |= 0x00000200u;
  bool_value_ = value;
}
inline void PValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:doris.PValue.bool_value)
}

// optional string string_value = 10;
inline bool PValue::_internal_has_string_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PValue::has_string_value() const {
  return _internal_has_string_value();
}
inline void PValue::clear_string_value() {
  string_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PValue::string_value() const {
  // @@protoc_insertion_point(field_get:doris.PValue.string_value)
  return _internal_string_value();
}
inline void PValue::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:doris.PValue.string_value)
}
inline std::string* PValue::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:doris.PValue.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& PValue::_internal_string_value() const {
  return string_value_.Get();
}
inline void PValue::_internal_set_string_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PValue::set_string_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:doris.PValue.string_value)
}
inline void PValue::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:doris.PValue.string_value)
}
inline void PValue::set_string_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:doris.PValue.string_value)
}
inline std::string* PValue::_internal_mutable_string_value() {
  _has_bits_[0] |= 0x00000001u;
  return string_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PValue::release_string_value() {
  // @@protoc_insertion_point(field_release:doris.PValue.string_value)
  if (!_internal_has_string_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PValue::set_allocated_string_value(std::string* string_value) {
  if (string_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:doris.PValue.string_value)
}

// optional bytes bytes_value = 11;
inline bool PValue::_internal_has_bytes_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PValue::has_bytes_value() const {
  return _internal_has_bytes_value();
}
inline void PValue::clear_bytes_value() {
  bytes_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PValue::bytes_value() const {
  // @@protoc_insertion_point(field_get:doris.PValue.bytes_value)
  return _internal_bytes_value();
}
inline void PValue::set_bytes_value(const std::string& value) {
  _internal_set_bytes_value(value);
  // @@protoc_insertion_point(field_set:doris.PValue.bytes_value)
}
inline std::string* PValue::mutable_bytes_value() {
  // @@protoc_insertion_point(field_mutable:doris.PValue.bytes_value)
  return _internal_mutable_bytes_value();
}
inline const std::string& PValue::_internal_bytes_value() const {
  return bytes_value_.Get();
}
inline void PValue::_internal_set_bytes_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bytes_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PValue::set_bytes_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  bytes_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:doris.PValue.bytes_value)
}
inline void PValue::set_bytes_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  bytes_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:doris.PValue.bytes_value)
}
inline void PValue::set_bytes_value(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  bytes_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:doris.PValue.bytes_value)
}
inline std::string* PValue::_internal_mutable_bytes_value() {
  _has_bits_[0] |= 0x00000002u;
  return bytes_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PValue::release_bytes_value() {
  // @@protoc_insertion_point(field_release:doris.PValue.bytes_value)
  if (!_internal_has_bytes_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return bytes_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PValue::set_allocated_bytes_value(std::string* bytes_value) {
  if (bytes_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bytes_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytes_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:doris.PValue.bytes_value)
}

// optional .doris.PDateTime datetime_value = 12;
inline bool PValue::_internal_has_datetime_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || datetime_value_ != nullptr);
  return value;
}
inline bool PValue::has_datetime_value() const {
  return _internal_has_datetime_value();
}
inline void PValue::clear_datetime_value() {
  if (datetime_value_ != nullptr) datetime_value_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::doris::PDateTime& PValue::_internal_datetime_value() const {
  const ::doris::PDateTime* p = datetime_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PDateTime&>(
      ::doris::_PDateTime_default_instance_);
}
inline const ::doris::PDateTime& PValue::datetime_value() const {
  // @@protoc_insertion_point(field_get:doris.PValue.datetime_value)
  return _internal_datetime_value();
}
inline void PValue::unsafe_arena_set_allocated_datetime_value(
    ::doris::PDateTime* datetime_value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datetime_value_);
  }
  datetime_value_ = datetime_value;
  if (datetime_value) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PValue.datetime_value)
}
inline ::doris::PDateTime* PValue::release_datetime_value() {
  _has_bits_[0] &= ~0x00000008u;
  ::doris::PDateTime* temp = datetime_value_;
  datetime_value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PDateTime* PValue::unsafe_arena_release_datetime_value() {
  // @@protoc_insertion_point(field_release:doris.PValue.datetime_value)
  _has_bits_[0] &= ~0x00000008u;
  ::doris::PDateTime* temp = datetime_value_;
  datetime_value_ = nullptr;
  return temp;
}
inline ::doris::PDateTime* PValue::_internal_mutable_datetime_value() {
  _has_bits_[0] |= 0x00000008u;
  if (datetime_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PDateTime>(GetArena());
    datetime_value_ = p;
  }
  return datetime_value_;
}
inline ::doris::PDateTime* PValue::mutable_datetime_value() {
  // @@protoc_insertion_point(field_mutable:doris.PValue.datetime_value)
  return _internal_mutable_datetime_value();
}
inline void PValue::set_allocated_datetime_value(::doris::PDateTime* datetime_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete datetime_value_;
  }
  if (datetime_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(datetime_value);
    if (message_arena != submessage_arena) {
      datetime_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datetime_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  datetime_value_ = datetime_value;
  // @@protoc_insertion_point(field_set_allocated:doris.PValue.datetime_value)
}

// -------------------------------------------------------------------

// PValues

// required .doris.PGenericType type = 1;
inline bool PValues::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || type_ != nullptr);
  return value;
}
inline bool PValues::has_type() const {
  return _internal_has_type();
}
inline void PValues::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::doris::PGenericType& PValues::_internal_type() const {
  const ::doris::PGenericType* p = type_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PGenericType&>(
      ::doris::_PGenericType_default_instance_);
}
inline const ::doris::PGenericType& PValues::type() const {
  // @@protoc_insertion_point(field_get:doris.PValues.type)
  return _internal_type();
}
inline void PValues::unsafe_arena_set_allocated_type(
    ::doris::PGenericType* type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  type_ = type;
  if (type) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PValues.type)
}
inline ::doris::PGenericType* PValues::release_type() {
  _has_bits_[0] &= ~0x00000001u;
  ::doris::PGenericType* temp = type_;
  type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PGenericType* PValues::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:doris.PValues.type)
  _has_bits_[0] &= ~0x00000001u;
  ::doris::PGenericType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::doris::PGenericType* PValues::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PGenericType>(GetArena());
    type_ = p;
  }
  return type_;
}
inline ::doris::PGenericType* PValues::mutable_type() {
  // @@protoc_insertion_point(field_mutable:doris.PValues.type)
  return _internal_mutable_type();
}
inline void PValues::set_allocated_type(::doris::PGenericType* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type);
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:doris.PValues.type)
}

// optional bool has_null = 2 [default = false];
inline bool PValues::_internal_has_has_null() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PValues::has_has_null() const {
  return _internal_has_has_null();
}
inline void PValues::clear_has_null() {
  has_null_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PValues::_internal_has_null() const {
  return has_null_;
}
inline bool PValues::has_null() const {
  // @@protoc_insertion_point(field_get:doris.PValues.has_null)
  return _internal_has_null();
}
inline void PValues::_internal_set_has_null(bool value) {
  _has_bits_[0] |= 0x00000002u;
  has_null_ = value;
}
inline void PValues::set_has_null(bool value) {
  _internal_set_has_null(value);
  // @@protoc_insertion_point(field_set:doris.PValues.has_null)
}

// repeated bool null_map = 3;
inline int PValues::_internal_null_map_size() const {
  return null_map_.size();
}
inline int PValues::null_map_size() const {
  return _internal_null_map_size();
}
inline void PValues::clear_null_map() {
  null_map_.Clear();
}
inline bool PValues::_internal_null_map(int index) const {
  return null_map_.Get(index);
}
inline bool PValues::null_map(int index) const {
  // @@protoc_insertion_point(field_get:doris.PValues.null_map)
  return _internal_null_map(index);
}
inline void PValues::set_null_map(int index, bool value) {
  null_map_.Set(index, value);
  // @@protoc_insertion_point(field_set:doris.PValues.null_map)
}
inline void PValues::_internal_add_null_map(bool value) {
  null_map_.Add(value);
}
inline void PValues::add_null_map(bool value) {
  _internal_add_null_map(value);
  // @@protoc_insertion_point(field_add:doris.PValues.null_map)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
PValues::_internal_null_map() const {
  return null_map_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
PValues::null_map() const {
  // @@protoc_insertion_point(field_list:doris.PValues.null_map)
  return _internal_null_map();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
PValues::_internal_mutable_null_map() {
  return &null_map_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
PValues::mutable_null_map() {
  // @@protoc_insertion_point(field_mutable_list:doris.PValues.null_map)
  return _internal_mutable_null_map();
}

// repeated double double_value = 4;
inline int PValues::_internal_double_value_size() const {
  return double_value_.size();
}
inline int PValues::double_value_size() const {
  return _internal_double_value_size();
}
inline void PValues::clear_double_value() {
  double_value_.Clear();
}
inline double PValues::_internal_double_value(int index) const {
  return double_value_.Get(index);
}
inline double PValues::double_value(int index) const {
  // @@protoc_insertion_point(field_get:doris.PValues.double_value)
  return _internal_double_value(index);
}
inline void PValues::set_double_value(int index, double value) {
  double_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:doris.PValues.double_value)
}
inline void PValues::_internal_add_double_value(double value) {
  double_value_.Add(value);
}
inline void PValues::add_double_value(double value) {
  _internal_add_double_value(value);
  // @@protoc_insertion_point(field_add:doris.PValues.double_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PValues::_internal_double_value() const {
  return double_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PValues::double_value() const {
  // @@protoc_insertion_point(field_list:doris.PValues.double_value)
  return _internal_double_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PValues::_internal_mutable_double_value() {
  return &double_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PValues::mutable_double_value() {
  // @@protoc_insertion_point(field_mutable_list:doris.PValues.double_value)
  return _internal_mutable_double_value();
}

// repeated float float_value = 5;
inline int PValues::_internal_float_value_size() const {
  return float_value_.size();
}
inline int PValues::float_value_size() const {
  return _internal_float_value_size();
}
inline void PValues::clear_float_value() {
  float_value_.Clear();
}
inline float PValues::_internal_float_value(int index) const {
  return float_value_.Get(index);
}
inline float PValues::float_value(int index) const {
  // @@protoc_insertion_point(field_get:doris.PValues.float_value)
  return _internal_float_value(index);
}
inline void PValues::set_float_value(int index, float value) {
  float_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:doris.PValues.float_value)
}
inline void PValues::_internal_add_float_value(float value) {
  float_value_.Add(value);
}
inline void PValues::add_float_value(float value) {
  _internal_add_float_value(value);
  // @@protoc_insertion_point(field_add:doris.PValues.float_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PValues::_internal_float_value() const {
  return float_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PValues::float_value() const {
  // @@protoc_insertion_point(field_list:doris.PValues.float_value)
  return _internal_float_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PValues::_internal_mutable_float_value() {
  return &float_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PValues::mutable_float_value() {
  // @@protoc_insertion_point(field_mutable_list:doris.PValues.float_value)
  return _internal_mutable_float_value();
}

// repeated int32 int32_value = 6;
inline int PValues::_internal_int32_value_size() const {
  return int32_value_.size();
}
inline int PValues::int32_value_size() const {
  return _internal_int32_value_size();
}
inline void PValues::clear_int32_value() {
  int32_value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PValues::_internal_int32_value(int index) const {
  return int32_value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PValues::int32_value(int index) const {
  // @@protoc_insertion_point(field_get:doris.PValues.int32_value)
  return _internal_int32_value(index);
}
inline void PValues::set_int32_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int32_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:doris.PValues.int32_value)
}
inline void PValues::_internal_add_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int32_value_.Add(value);
}
inline void PValues::add_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int32_value(value);
  // @@protoc_insertion_point(field_add:doris.PValues.int32_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PValues::_internal_int32_value() const {
  return int32_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PValues::int32_value() const {
  // @@protoc_insertion_point(field_list:doris.PValues.int32_value)
  return _internal_int32_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PValues::_internal_mutable_int32_value() {
  return &int32_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PValues::mutable_int32_value() {
  // @@protoc_insertion_point(field_mutable_list:doris.PValues.int32_value)
  return _internal_mutable_int32_value();
}

// repeated int64 int64_value = 7;
inline int PValues::_internal_int64_value_size() const {
  return int64_value_.size();
}
inline int PValues::int64_value_size() const {
  return _internal_int64_value_size();
}
inline void PValues::clear_int64_value() {
  int64_value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PValues::_internal_int64_value(int index) const {
  return int64_value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PValues::int64_value(int index) const {
  // @@protoc_insertion_point(field_get:doris.PValues.int64_value)
  return _internal_int64_value(index);
}
inline void PValues::set_int64_value(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:doris.PValues.int64_value)
}
inline void PValues::_internal_add_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_value_.Add(value);
}
inline void PValues::add_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_int64_value(value);
  // @@protoc_insertion_point(field_add:doris.PValues.int64_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
PValues::_internal_int64_value() const {
  return int64_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
PValues::int64_value() const {
  // @@protoc_insertion_point(field_list:doris.PValues.int64_value)
  return _internal_int64_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
PValues::_internal_mutable_int64_value() {
  return &int64_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
PValues::mutable_int64_value() {
  // @@protoc_insertion_point(field_mutable_list:doris.PValues.int64_value)
  return _internal_mutable_int64_value();
}

// repeated uint32 uint32_value = 8;
inline int PValues::_internal_uint32_value_size() const {
  return uint32_value_.size();
}
inline int PValues::uint32_value_size() const {
  return _internal_uint32_value_size();
}
inline void PValues::clear_uint32_value() {
  uint32_value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PValues::_internal_uint32_value(int index) const {
  return uint32_value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PValues::uint32_value(int index) const {
  // @@protoc_insertion_point(field_get:doris.PValues.uint32_value)
  return _internal_uint32_value(index);
}
inline void PValues::set_uint32_value(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  uint32_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:doris.PValues.uint32_value)
}
inline void PValues::_internal_add_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  uint32_value_.Add(value);
}
inline void PValues::add_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_uint32_value(value);
  // @@protoc_insertion_point(field_add:doris.PValues.uint32_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PValues::_internal_uint32_value() const {
  return uint32_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PValues::uint32_value() const {
  // @@protoc_insertion_point(field_list:doris.PValues.uint32_value)
  return _internal_uint32_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PValues::_internal_mutable_uint32_value() {
  return &uint32_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PValues::mutable_uint32_value() {
  // @@protoc_insertion_point(field_mutable_list:doris.PValues.uint32_value)
  return _internal_mutable_uint32_value();
}

// repeated uint64 uint64_value = 9;
inline int PValues::_internal_uint64_value_size() const {
  return uint64_value_.size();
}
inline int PValues::uint64_value_size() const {
  return _internal_uint64_value_size();
}
inline void PValues::clear_uint64_value() {
  uint64_value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PValues::_internal_uint64_value(int index) const {
  return uint64_value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PValues::uint64_value(int index) const {
  // @@protoc_insertion_point(field_get:doris.PValues.uint64_value)
  return _internal_uint64_value(index);
}
inline void PValues::set_uint64_value(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:doris.PValues.uint64_value)
}
inline void PValues::_internal_add_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_value_.Add(value);
}
inline void PValues::add_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_uint64_value(value);
  // @@protoc_insertion_point(field_add:doris.PValues.uint64_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
PValues::_internal_uint64_value() const {
  return uint64_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
PValues::uint64_value() const {
  // @@protoc_insertion_point(field_list:doris.PValues.uint64_value)
  return _internal_uint64_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
PValues::_internal_mutable_uint64_value() {
  return &uint64_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
PValues::mutable_uint64_value() {
  // @@protoc_insertion_point(field_mutable_list:doris.PValues.uint64_value)
  return _internal_mutable_uint64_value();
}

// repeated bool bool_value = 10;
inline int PValues::_internal_bool_value_size() const {
  return bool_value_.size();
}
inline int PValues::bool_value_size() const {
  return _internal_bool_value_size();
}
inline void PValues::clear_bool_value() {
  bool_value_.Clear();
}
inline bool PValues::_internal_bool_value(int index) const {
  return bool_value_.Get(index);
}
inline bool PValues::bool_value(int index) const {
  // @@protoc_insertion_point(field_get:doris.PValues.bool_value)
  return _internal_bool_value(index);
}
inline void PValues::set_bool_value(int index, bool value) {
  bool_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:doris.PValues.bool_value)
}
inline void PValues::_internal_add_bool_value(bool value) {
  bool_value_.Add(value);
}
inline void PValues::add_bool_value(bool value) {
  _internal_add_bool_value(value);
  // @@protoc_insertion_point(field_add:doris.PValues.bool_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
PValues::_internal_bool_value() const {
  return bool_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
PValues::bool_value() const {
  // @@protoc_insertion_point(field_list:doris.PValues.bool_value)
  return _internal_bool_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
PValues::_internal_mutable_bool_value() {
  return &bool_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
PValues::mutable_bool_value() {
  // @@protoc_insertion_point(field_mutable_list:doris.PValues.bool_value)
  return _internal_mutable_bool_value();
}

// repeated string string_value = 11;
inline int PValues::_internal_string_value_size() const {
  return string_value_.size();
}
inline int PValues::string_value_size() const {
  return _internal_string_value_size();
}
inline void PValues::clear_string_value() {
  string_value_.Clear();
}
inline std::string* PValues::add_string_value() {
  // @@protoc_insertion_point(field_add_mutable:doris.PValues.string_value)
  return _internal_add_string_value();
}
inline const std::string& PValues::_internal_string_value(int index) const {
  return string_value_.Get(index);
}
inline const std::string& PValues::string_value(int index) const {
  // @@protoc_insertion_point(field_get:doris.PValues.string_value)
  return _internal_string_value(index);
}
inline std::string* PValues::mutable_string_value(int index) {
  // @@protoc_insertion_point(field_mutable:doris.PValues.string_value)
  return string_value_.Mutable(index);
}
inline void PValues::set_string_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:doris.PValues.string_value)
  string_value_.Mutable(index)->assign(value);
}
inline void PValues::set_string_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:doris.PValues.string_value)
  string_value_.Mutable(index)->assign(std::move(value));
}
inline void PValues::set_string_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:doris.PValues.string_value)
}
inline void PValues::set_string_value(int index, const char* value, size_t size) {
  string_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:doris.PValues.string_value)
}
inline std::string* PValues::_internal_add_string_value() {
  return string_value_.Add();
}
inline void PValues::add_string_value(const std::string& value) {
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:doris.PValues.string_value)
}
inline void PValues::add_string_value(std::string&& value) {
  string_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:doris.PValues.string_value)
}
inline void PValues::add_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:doris.PValues.string_value)
}
inline void PValues::add_string_value(const char* value, size_t size) {
  string_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:doris.PValues.string_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PValues::string_value() const {
  // @@protoc_insertion_point(field_list:doris.PValues.string_value)
  return string_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PValues::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable_list:doris.PValues.string_value)
  return &string_value_;
}

// repeated bytes bytes_value = 12;
inline int PValues::_internal_bytes_value_size() const {
  return bytes_value_.size();
}
inline int PValues::bytes_value_size() const {
  return _internal_bytes_value_size();
}
inline void PValues::clear_bytes_value() {
  bytes_value_.Clear();
}
inline std::string* PValues::add_bytes_value() {
  // @@protoc_insertion_point(field_add_mutable:doris.PValues.bytes_value)
  return _internal_add_bytes_value();
}
inline const std::string& PValues::_internal_bytes_value(int index) const {
  return bytes_value_.Get(index);
}
inline const std::string& PValues::bytes_value(int index) const {
  // @@protoc_insertion_point(field_get:doris.PValues.bytes_value)
  return _internal_bytes_value(index);
}
inline std::string* PValues::mutable_bytes_value(int index) {
  // @@protoc_insertion_point(field_mutable:doris.PValues.bytes_value)
  return bytes_value_.Mutable(index);
}
inline void PValues::set_bytes_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:doris.PValues.bytes_value)
  bytes_value_.Mutable(index)->assign(value);
}
inline void PValues::set_bytes_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:doris.PValues.bytes_value)
  bytes_value_.Mutable(index)->assign(std::move(value));
}
inline void PValues::set_bytes_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bytes_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:doris.PValues.bytes_value)
}
inline void PValues::set_bytes_value(int index, const void* value, size_t size) {
  bytes_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:doris.PValues.bytes_value)
}
inline std::string* PValues::_internal_add_bytes_value() {
  return bytes_value_.Add();
}
inline void PValues::add_bytes_value(const std::string& value) {
  bytes_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:doris.PValues.bytes_value)
}
inline void PValues::add_bytes_value(std::string&& value) {
  bytes_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:doris.PValues.bytes_value)
}
inline void PValues::add_bytes_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bytes_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:doris.PValues.bytes_value)
}
inline void PValues::add_bytes_value(const void* value, size_t size) {
  bytes_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:doris.PValues.bytes_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PValues::bytes_value() const {
  // @@protoc_insertion_point(field_list:doris.PValues.bytes_value)
  return bytes_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PValues::mutable_bytes_value() {
  // @@protoc_insertion_point(field_mutable_list:doris.PValues.bytes_value)
  return &bytes_value_;
}

// repeated .doris.PDateTime datetime_value = 13;
inline int PValues::_internal_datetime_value_size() const {
  return datetime_value_.size();
}
inline int PValues::datetime_value_size() const {
  return _internal_datetime_value_size();
}
inline void PValues::clear_datetime_value() {
  datetime_value_.Clear();
}
inline ::doris::PDateTime* PValues::mutable_datetime_value(int index) {
  // @@protoc_insertion_point(field_mutable:doris.PValues.datetime_value)
  return datetime_value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PDateTime >*
PValues::mutable_datetime_value() {
  // @@protoc_insertion_point(field_mutable_list:doris.PValues.datetime_value)
  return &datetime_value_;
}
inline const ::doris::PDateTime& PValues::_internal_datetime_value(int index) const {
  return datetime_value_.Get(index);
}
inline const ::doris::PDateTime& PValues::datetime_value(int index) const {
  // @@protoc_insertion_point(field_get:doris.PValues.datetime_value)
  return _internal_datetime_value(index);
}
inline ::doris::PDateTime* PValues::_internal_add_datetime_value() {
  return datetime_value_.Add();
}
inline ::doris::PDateTime* PValues::add_datetime_value() {
  // @@protoc_insertion_point(field_add:doris.PValues.datetime_value)
  return _internal_add_datetime_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PDateTime >&
PValues::datetime_value() const {
  // @@protoc_insertion_point(field_list:doris.PValues.datetime_value)
  return datetime_value_;
}

// -------------------------------------------------------------------

// PFunction_Property

// required string key = 1;
inline bool PFunction_Property::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PFunction_Property::has_key() const {
  return _internal_has_key();
}
inline void PFunction_Property::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PFunction_Property::key() const {
  // @@protoc_insertion_point(field_get:doris.PFunction.Property.key)
  return _internal_key();
}
inline void PFunction_Property::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:doris.PFunction.Property.key)
}
inline std::string* PFunction_Property::mutable_key() {
  // @@protoc_insertion_point(field_mutable:doris.PFunction.Property.key)
  return _internal_mutable_key();
}
inline const std::string& PFunction_Property::_internal_key() const {
  return key_.Get();
}
inline void PFunction_Property::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PFunction_Property::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:doris.PFunction.Property.key)
}
inline void PFunction_Property::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:doris.PFunction.Property.key)
}
inline void PFunction_Property::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:doris.PFunction.Property.key)
}
inline std::string* PFunction_Property::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PFunction_Property::release_key() {
  // @@protoc_insertion_point(field_release:doris.PFunction.Property.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PFunction_Property::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:doris.PFunction.Property.key)
}

// required string val = 2;
inline bool PFunction_Property::_internal_has_val() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PFunction_Property::has_val() const {
  return _internal_has_val();
}
inline void PFunction_Property::clear_val() {
  val_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PFunction_Property::val() const {
  // @@protoc_insertion_point(field_get:doris.PFunction.Property.val)
  return _internal_val();
}
inline void PFunction_Property::set_val(const std::string& value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:doris.PFunction.Property.val)
}
inline std::string* PFunction_Property::mutable_val() {
  // @@protoc_insertion_point(field_mutable:doris.PFunction.Property.val)
  return _internal_mutable_val();
}
inline const std::string& PFunction_Property::_internal_val() const {
  return val_.Get();
}
inline void PFunction_Property::_internal_set_val(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PFunction_Property::set_val(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  val_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:doris.PFunction.Property.val)
}
inline void PFunction_Property::set_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:doris.PFunction.Property.val)
}
inline void PFunction_Property::set_val(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:doris.PFunction.Property.val)
}
inline std::string* PFunction_Property::_internal_mutable_val() {
  _has_bits_[0] |= 0x00000002u;
  return val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PFunction_Property::release_val() {
  // @@protoc_insertion_point(field_release:doris.PFunction.Property.val)
  if (!_internal_has_val()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PFunction_Property::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:doris.PFunction.Property.val)
}

// -------------------------------------------------------------------

// PFunction

// required string function_name = 1;
inline bool PFunction::_internal_has_function_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PFunction::has_function_name() const {
  return _internal_has_function_name();
}
inline void PFunction::clear_function_name() {
  function_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PFunction::function_name() const {
  // @@protoc_insertion_point(field_get:doris.PFunction.function_name)
  return _internal_function_name();
}
inline void PFunction::set_function_name(const std::string& value) {
  _internal_set_function_name(value);
  // @@protoc_insertion_point(field_set:doris.PFunction.function_name)
}
inline std::string* PFunction::mutable_function_name() {
  // @@protoc_insertion_point(field_mutable:doris.PFunction.function_name)
  return _internal_mutable_function_name();
}
inline const std::string& PFunction::_internal_function_name() const {
  return function_name_.Get();
}
inline void PFunction::_internal_set_function_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PFunction::set_function_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  function_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:doris.PFunction.function_name)
}
inline void PFunction::set_function_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:doris.PFunction.function_name)
}
inline void PFunction::set_function_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:doris.PFunction.function_name)
}
inline std::string* PFunction::_internal_mutable_function_name() {
  _has_bits_[0] |= 0x00000001u;
  return function_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PFunction::release_function_name() {
  // @@protoc_insertion_point(field_release:doris.PFunction.function_name)
  if (!_internal_has_function_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return function_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PFunction::set_allocated_function_name(std::string* function_name) {
  if (function_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  function_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:doris.PFunction.function_name)
}

// repeated .doris.PGenericType inputs = 2;
inline int PFunction::_internal_inputs_size() const {
  return inputs_.size();
}
inline int PFunction::inputs_size() const {
  return _internal_inputs_size();
}
inline void PFunction::clear_inputs() {
  inputs_.Clear();
}
inline ::doris::PGenericType* PFunction::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:doris.PFunction.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PGenericType >*
PFunction::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:doris.PFunction.inputs)
  return &inputs_;
}
inline const ::doris::PGenericType& PFunction::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::doris::PGenericType& PFunction::inputs(int index) const {
  // @@protoc_insertion_point(field_get:doris.PFunction.inputs)
  return _internal_inputs(index);
}
inline ::doris::PGenericType* PFunction::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::doris::PGenericType* PFunction::add_inputs() {
  // @@protoc_insertion_point(field_add:doris.PFunction.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PGenericType >&
PFunction::inputs() const {
  // @@protoc_insertion_point(field_list:doris.PFunction.inputs)
  return inputs_;
}

// optional .doris.PGenericType output = 3;
inline bool PFunction::_internal_has_output() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || output_ != nullptr);
  return value;
}
inline bool PFunction::has_output() const {
  return _internal_has_output();
}
inline void PFunction::clear_output() {
  if (output_ != nullptr) output_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::doris::PGenericType& PFunction::_internal_output() const {
  const ::doris::PGenericType* p = output_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PGenericType&>(
      ::doris::_PGenericType_default_instance_);
}
inline const ::doris::PGenericType& PFunction::output() const {
  // @@protoc_insertion_point(field_get:doris.PFunction.output)
  return _internal_output();
}
inline void PFunction::unsafe_arena_set_allocated_output(
    ::doris::PGenericType* output) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_);
  }
  output_ = output;
  if (output) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PFunction.output)
}
inline ::doris::PGenericType* PFunction::release_output() {
  _has_bits_[0] &= ~0x00000002u;
  ::doris::PGenericType* temp = output_;
  output_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PGenericType* PFunction::unsafe_arena_release_output() {
  // @@protoc_insertion_point(field_release:doris.PFunction.output)
  _has_bits_[0] &= ~0x00000002u;
  ::doris::PGenericType* temp = output_;
  output_ = nullptr;
  return temp;
}
inline ::doris::PGenericType* PFunction::_internal_mutable_output() {
  _has_bits_[0] |= 0x00000002u;
  if (output_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PGenericType>(GetArena());
    output_ = p;
  }
  return output_;
}
inline ::doris::PGenericType* PFunction::mutable_output() {
  // @@protoc_insertion_point(field_mutable:doris.PFunction.output)
  return _internal_mutable_output();
}
inline void PFunction::set_allocated_output(::doris::PGenericType* output) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete output_;
  }
  if (output) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(output);
    if (message_arena != submessage_arena) {
      output = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  output_ = output;
  // @@protoc_insertion_point(field_set_allocated:doris.PFunction.output)
}

// optional .doris.PFunction.FunctionType type = 4 [default = UDF];
inline bool PFunction::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PFunction::has_type() const {
  return _internal_has_type();
}
inline void PFunction::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::doris::PFunction_FunctionType PFunction::_internal_type() const {
  return static_cast< ::doris::PFunction_FunctionType >(type_);
}
inline ::doris::PFunction_FunctionType PFunction::type() const {
  // @@protoc_insertion_point(field_get:doris.PFunction.type)
  return _internal_type();
}
inline void PFunction::_internal_set_type(::doris::PFunction_FunctionType value) {
  assert(::doris::PFunction_FunctionType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void PFunction::set_type(::doris::PFunction_FunctionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:doris.PFunction.type)
}

// optional bool variadic = 5;
inline bool PFunction::_internal_has_variadic() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PFunction::has_variadic() const {
  return _internal_has_variadic();
}
inline void PFunction::clear_variadic() {
  variadic_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PFunction::_internal_variadic() const {
  return variadic_;
}
inline bool PFunction::variadic() const {
  // @@protoc_insertion_point(field_get:doris.PFunction.variadic)
  return _internal_variadic();
}
inline void PFunction::_internal_set_variadic(bool value) {
  _has_bits_[0] |= 0x00000008u;
  variadic_ = value;
}
inline void PFunction::set_variadic(bool value) {
  _internal_set_variadic(value);
  // @@protoc_insertion_point(field_set:doris.PFunction.variadic)
}

// repeated .doris.PFunction.Property properties = 6;
inline int PFunction::_internal_properties_size() const {
  return properties_.size();
}
inline int PFunction::properties_size() const {
  return _internal_properties_size();
}
inline void PFunction::clear_properties() {
  properties_.Clear();
}
inline ::doris::PFunction_Property* PFunction::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:doris.PFunction.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PFunction_Property >*
PFunction::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:doris.PFunction.properties)
  return &properties_;
}
inline const ::doris::PFunction_Property& PFunction::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::doris::PFunction_Property& PFunction::properties(int index) const {
  // @@protoc_insertion_point(field_get:doris.PFunction.properties)
  return _internal_properties(index);
}
inline ::doris::PFunction_Property* PFunction::_internal_add_properties() {
  return properties_.Add();
}
inline ::doris::PFunction_Property* PFunction::add_properties() {
  // @@protoc_insertion_point(field_add:doris.PFunction.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PFunction_Property >&
PFunction::properties() const {
  // @@protoc_insertion_point(field_list:doris.PFunction.properties)
  return properties_;
}

// -------------------------------------------------------------------

// PFunctionContext

// optional bytes data = 1;
inline bool PFunctionContext::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PFunctionContext::has_data() const {
  return _internal_has_data();
}
inline void PFunctionContext::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PFunctionContext::data() const {
  // @@protoc_insertion_point(field_get:doris.PFunctionContext.data)
  return _internal_data();
}
inline void PFunctionContext::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:doris.PFunctionContext.data)
}
inline std::string* PFunctionContext::mutable_data() {
  // @@protoc_insertion_point(field_mutable:doris.PFunctionContext.data)
  return _internal_mutable_data();
}
inline const std::string& PFunctionContext::_internal_data() const {
  return data_.Get();
}
inline void PFunctionContext::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PFunctionContext::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:doris.PFunctionContext.data)
}
inline void PFunctionContext::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:doris.PFunctionContext.data)
}
inline void PFunctionContext::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:doris.PFunctionContext.data)
}
inline std::string* PFunctionContext::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PFunctionContext::release_data() {
  // @@protoc_insertion_point(field_release:doris.PFunctionContext.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PFunctionContext::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:doris.PFunctionContext.data)
}

// repeated .doris.PValues args_data = 2;
inline int PFunctionContext::_internal_args_data_size() const {
  return args_data_.size();
}
inline int PFunctionContext::args_data_size() const {
  return _internal_args_data_size();
}
inline void PFunctionContext::clear_args_data() {
  args_data_.Clear();
}
inline ::doris::PValues* PFunctionContext::mutable_args_data(int index) {
  // @@protoc_insertion_point(field_mutable:doris.PFunctionContext.args_data)
  return args_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PValues >*
PFunctionContext::mutable_args_data() {
  // @@protoc_insertion_point(field_mutable_list:doris.PFunctionContext.args_data)
  return &args_data_;
}
inline const ::doris::PValues& PFunctionContext::_internal_args_data(int index) const {
  return args_data_.Get(index);
}
inline const ::doris::PValues& PFunctionContext::args_data(int index) const {
  // @@protoc_insertion_point(field_get:doris.PFunctionContext.args_data)
  return _internal_args_data(index);
}
inline ::doris::PValues* PFunctionContext::_internal_add_args_data() {
  return args_data_.Add();
}
inline ::doris::PValues* PFunctionContext::add_args_data() {
  // @@protoc_insertion_point(field_add:doris.PFunctionContext.args_data)
  return _internal_add_args_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PValues >&
PFunctionContext::args_data() const {
  // @@protoc_insertion_point(field_list:doris.PFunctionContext.args_data)
  return args_data_;
}

// -------------------------------------------------------------------

// PHandShakeRequest

// optional string hello = 1;
inline bool PHandShakeRequest::_internal_has_hello() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PHandShakeRequest::has_hello() const {
  return _internal_has_hello();
}
inline void PHandShakeRequest::clear_hello() {
  hello_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PHandShakeRequest::hello() const {
  // @@protoc_insertion_point(field_get:doris.PHandShakeRequest.hello)
  return _internal_hello();
}
inline void PHandShakeRequest::set_hello(const std::string& value) {
  _internal_set_hello(value);
  // @@protoc_insertion_point(field_set:doris.PHandShakeRequest.hello)
}
inline std::string* PHandShakeRequest::mutable_hello() {
  // @@protoc_insertion_point(field_mutable:doris.PHandShakeRequest.hello)
  return _internal_mutable_hello();
}
inline const std::string& PHandShakeRequest::_internal_hello() const {
  return hello_.Get();
}
inline void PHandShakeRequest::_internal_set_hello(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hello_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PHandShakeRequest::set_hello(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hello_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:doris.PHandShakeRequest.hello)
}
inline void PHandShakeRequest::set_hello(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hello_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:doris.PHandShakeRequest.hello)
}
inline void PHandShakeRequest::set_hello(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hello_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:doris.PHandShakeRequest.hello)
}
inline std::string* PHandShakeRequest::_internal_mutable_hello() {
  _has_bits_[0] |= 0x00000001u;
  return hello_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PHandShakeRequest::release_hello() {
  // @@protoc_insertion_point(field_release:doris.PHandShakeRequest.hello)
  if (!_internal_has_hello()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hello_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PHandShakeRequest::set_allocated_hello(std::string* hello) {
  if (hello != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hello_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hello,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:doris.PHandShakeRequest.hello)
}

// -------------------------------------------------------------------

// PHandShakeResponse

// optional .doris.PStatus status = 1;
inline bool PHandShakeResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool PHandShakeResponse::has_status() const {
  return _internal_has_status();
}
inline void PHandShakeResponse::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::doris::PStatus& PHandShakeResponse::_internal_status() const {
  const ::doris::PStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PStatus&>(
      ::doris::_PStatus_default_instance_);
}
inline const ::doris::PStatus& PHandShakeResponse::status() const {
  // @@protoc_insertion_point(field_get:doris.PHandShakeResponse.status)
  return _internal_status();
}
inline void PHandShakeResponse::unsafe_arena_set_allocated_status(
    ::doris::PStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PHandShakeResponse.status)
}
inline ::doris::PStatus* PHandShakeResponse::release_status() {
  _has_bits_[0] &= ~0x00000002u;
  ::doris::PStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PStatus* PHandShakeResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:doris.PHandShakeResponse.status)
  _has_bits_[0] &= ~0x00000002u;
  ::doris::PStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::doris::PStatus* PHandShakeResponse::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000002u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::doris::PStatus* PHandShakeResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:doris.PHandShakeResponse.status)
  return _internal_mutable_status();
}
inline void PHandShakeResponse::set_allocated_status(::doris::PStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:doris.PHandShakeResponse.status)
}

// optional string hello = 2;
inline bool PHandShakeResponse::_internal_has_hello() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PHandShakeResponse::has_hello() const {
  return _internal_has_hello();
}
inline void PHandShakeResponse::clear_hello() {
  hello_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PHandShakeResponse::hello() const {
  // @@protoc_insertion_point(field_get:doris.PHandShakeResponse.hello)
  return _internal_hello();
}
inline void PHandShakeResponse::set_hello(const std::string& value) {
  _internal_set_hello(value);
  // @@protoc_insertion_point(field_set:doris.PHandShakeResponse.hello)
}
inline std::string* PHandShakeResponse::mutable_hello() {
  // @@protoc_insertion_point(field_mutable:doris.PHandShakeResponse.hello)
  return _internal_mutable_hello();
}
inline const std::string& PHandShakeResponse::_internal_hello() const {
  return hello_.Get();
}
inline void PHandShakeResponse::_internal_set_hello(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hello_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PHandShakeResponse::set_hello(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hello_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:doris.PHandShakeResponse.hello)
}
inline void PHandShakeResponse::set_hello(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hello_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:doris.PHandShakeResponse.hello)
}
inline void PHandShakeResponse::set_hello(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hello_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:doris.PHandShakeResponse.hello)
}
inline std::string* PHandShakeResponse::_internal_mutable_hello() {
  _has_bits_[0] |= 0x00000001u;
  return hello_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PHandShakeResponse::release_hello() {
  // @@protoc_insertion_point(field_release:doris.PHandShakeResponse.hello)
  if (!_internal_has_hello()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hello_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PHandShakeResponse::set_allocated_hello(std::string* hello) {
  if (hello != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hello_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hello,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:doris.PHandShakeResponse.hello)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace doris

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::doris::PGenericType_TypeId> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::doris::PGenericType_TypeId>() {
  return ::doris::PGenericType_TypeId_descriptor();
}
template <> struct is_proto_enum< ::doris::PFunction_FunctionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::doris::PFunction_FunctionType>() {
  return ::doris::PFunction_FunctionType_descriptor();
}
template <> struct is_proto_enum< ::doris::PPlanFragmentCancelReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::doris::PPlanFragmentCancelReason>() {
  return ::doris::PPlanFragmentCancelReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_types_2eproto
