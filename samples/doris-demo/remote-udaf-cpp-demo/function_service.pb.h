// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: function_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_function_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_function_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_function_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_function_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_function_5fservice_2eproto;
namespace doris {
class PCheckFunctionRequest;
class PCheckFunctionRequestDefaultTypeInternal;
extern PCheckFunctionRequestDefaultTypeInternal _PCheckFunctionRequest_default_instance_;
class PCheckFunctionResponse;
class PCheckFunctionResponseDefaultTypeInternal;
extern PCheckFunctionResponseDefaultTypeInternal _PCheckFunctionResponse_default_instance_;
class PFunctionCallRequest;
class PFunctionCallRequestDefaultTypeInternal;
extern PFunctionCallRequestDefaultTypeInternal _PFunctionCallRequest_default_instance_;
class PFunctionCallResponse;
class PFunctionCallResponseDefaultTypeInternal;
extern PFunctionCallResponseDefaultTypeInternal _PFunctionCallResponse_default_instance_;
class PRequestContext;
class PRequestContextDefaultTypeInternal;
extern PRequestContextDefaultTypeInternal _PRequestContext_default_instance_;
}  // namespace doris
PROTOBUF_NAMESPACE_OPEN
template<> ::doris::PCheckFunctionRequest* Arena::CreateMaybeMessage<::doris::PCheckFunctionRequest>(Arena*);
template<> ::doris::PCheckFunctionResponse* Arena::CreateMaybeMessage<::doris::PCheckFunctionResponse>(Arena*);
template<> ::doris::PFunctionCallRequest* Arena::CreateMaybeMessage<::doris::PFunctionCallRequest>(Arena*);
template<> ::doris::PFunctionCallResponse* Arena::CreateMaybeMessage<::doris::PFunctionCallResponse>(Arena*);
template<> ::doris::PRequestContext* Arena::CreateMaybeMessage<::doris::PRequestContext>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace doris {

enum PCheckFunctionRequest_MatchType : int {
  PCheckFunctionRequest_MatchType_IDENTICAL = 0,
  PCheckFunctionRequest_MatchType_INDISTINGUISHABLE = 1,
  PCheckFunctionRequest_MatchType_SUPERTYPE_OF = 2,
  PCheckFunctionRequest_MatchType_NONSTRICT_SUPERTYPE_OF = 3,
  PCheckFunctionRequest_MatchType_MATCHABLE = 4
};
bool PCheckFunctionRequest_MatchType_IsValid(int value);
constexpr PCheckFunctionRequest_MatchType PCheckFunctionRequest_MatchType_MatchType_MIN = PCheckFunctionRequest_MatchType_IDENTICAL;
constexpr PCheckFunctionRequest_MatchType PCheckFunctionRequest_MatchType_MatchType_MAX = PCheckFunctionRequest_MatchType_MATCHABLE;
constexpr int PCheckFunctionRequest_MatchType_MatchType_ARRAYSIZE = PCheckFunctionRequest_MatchType_MatchType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PCheckFunctionRequest_MatchType_descriptor();
template<typename T>
inline const std::string& PCheckFunctionRequest_MatchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PCheckFunctionRequest_MatchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PCheckFunctionRequest_MatchType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PCheckFunctionRequest_MatchType_descriptor(), enum_t_value);
}
inline bool PCheckFunctionRequest_MatchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PCheckFunctionRequest_MatchType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PCheckFunctionRequest_MatchType>(
    PCheckFunctionRequest_MatchType_descriptor(), name, value);
}
// ===================================================================

class PRequestContext PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PRequestContext) */ {
 public:
  inline PRequestContext() : PRequestContext(nullptr) {}
  virtual ~PRequestContext();

  PRequestContext(const PRequestContext& from);
  PRequestContext(PRequestContext&& from) noexcept
    : PRequestContext() {
    *this = ::std::move(from);
  }

  inline PRequestContext& operator=(const PRequestContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline PRequestContext& operator=(PRequestContext&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PRequestContext& default_instance();

  static inline const PRequestContext* internal_default_instance() {
    return reinterpret_cast<const PRequestContext*>(
               &_PRequestContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PRequestContext& a, PRequestContext& b) {
    a.Swap(&b);
  }
  inline void Swap(PRequestContext* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PRequestContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PRequestContext* New() const final {
    return CreateMaybeMessage<PRequestContext>(nullptr);
  }

  PRequestContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PRequestContext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PRequestContext& from);
  void MergeFrom(const PRequestContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PRequestContext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PRequestContext";
  }
  protected:
  explicit PRequestContext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_function_5fservice_2eproto);
    return ::descriptor_table_function_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kFunctionContextFieldNumber = 2,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional .doris.PFunctionContext function_context = 2;
  bool has_function_context() const;
  private:
  bool _internal_has_function_context() const;
  public:
  void clear_function_context();
  const ::doris::PFunctionContext& function_context() const;
  ::doris::PFunctionContext* release_function_context();
  ::doris::PFunctionContext* mutable_function_context();
  void set_allocated_function_context(::doris::PFunctionContext* function_context);
  private:
  const ::doris::PFunctionContext& _internal_function_context() const;
  ::doris::PFunctionContext* _internal_mutable_function_context();
  public:
  void unsafe_arena_set_allocated_function_context(
      ::doris::PFunctionContext* function_context);
  ::doris::PFunctionContext* unsafe_arena_release_function_context();

  // @@protoc_insertion_point(class_scope:doris.PRequestContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::doris::PFunctionContext* function_context_;
  friend struct ::TableStruct_function_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PFunctionCallRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PFunctionCallRequest) */ {
 public:
  inline PFunctionCallRequest() : PFunctionCallRequest(nullptr) {}
  virtual ~PFunctionCallRequest();

  PFunctionCallRequest(const PFunctionCallRequest& from);
  PFunctionCallRequest(PFunctionCallRequest&& from) noexcept
    : PFunctionCallRequest() {
    *this = ::std::move(from);
  }

  inline PFunctionCallRequest& operator=(const PFunctionCallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PFunctionCallRequest& operator=(PFunctionCallRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PFunctionCallRequest& default_instance();

  static inline const PFunctionCallRequest* internal_default_instance() {
    return reinterpret_cast<const PFunctionCallRequest*>(
               &_PFunctionCallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PFunctionCallRequest& a, PFunctionCallRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PFunctionCallRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PFunctionCallRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PFunctionCallRequest* New() const final {
    return CreateMaybeMessage<PFunctionCallRequest>(nullptr);
  }

  PFunctionCallRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PFunctionCallRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PFunctionCallRequest& from);
  void MergeFrom(const PFunctionCallRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PFunctionCallRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PFunctionCallRequest";
  }
  protected:
  explicit PFunctionCallRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_function_5fservice_2eproto);
    return ::descriptor_table_function_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kFunctionNameFieldNumber = 1,
    kContextFieldNumber = 3,
  };
  // repeated .doris.PValues args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  ::doris::PValues* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PValues >*
      mutable_args();
  private:
  const ::doris::PValues& _internal_args(int index) const;
  ::doris::PValues* _internal_add_args();
  public:
  const ::doris::PValues& args(int index) const;
  ::doris::PValues* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PValues >&
      args() const;

  // optional string function_name = 1;
  bool has_function_name() const;
  private:
  bool _internal_has_function_name() const;
  public:
  void clear_function_name();
  const std::string& function_name() const;
  void set_function_name(const std::string& value);
  void set_function_name(std::string&& value);
  void set_function_name(const char* value);
  void set_function_name(const char* value, size_t size);
  std::string* mutable_function_name();
  std::string* release_function_name();
  void set_allocated_function_name(std::string* function_name);
  private:
  const std::string& _internal_function_name() const;
  void _internal_set_function_name(const std::string& value);
  std::string* _internal_mutable_function_name();
  public:

  // optional .doris.PRequestContext context = 3;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::doris::PRequestContext& context() const;
  ::doris::PRequestContext* release_context();
  ::doris::PRequestContext* mutable_context();
  void set_allocated_context(::doris::PRequestContext* context);
  private:
  const ::doris::PRequestContext& _internal_context() const;
  ::doris::PRequestContext* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::doris::PRequestContext* context);
  ::doris::PRequestContext* unsafe_arena_release_context();

  // @@protoc_insertion_point(class_scope:doris.PFunctionCallRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PValues > args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_name_;
  ::doris::PRequestContext* context_;
  friend struct ::TableStruct_function_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PFunctionCallResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PFunctionCallResponse) */ {
 public:
  inline PFunctionCallResponse() : PFunctionCallResponse(nullptr) {}
  virtual ~PFunctionCallResponse();

  PFunctionCallResponse(const PFunctionCallResponse& from);
  PFunctionCallResponse(PFunctionCallResponse&& from) noexcept
    : PFunctionCallResponse() {
    *this = ::std::move(from);
  }

  inline PFunctionCallResponse& operator=(const PFunctionCallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PFunctionCallResponse& operator=(PFunctionCallResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PFunctionCallResponse& default_instance();

  static inline const PFunctionCallResponse* internal_default_instance() {
    return reinterpret_cast<const PFunctionCallResponse*>(
               &_PFunctionCallResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PFunctionCallResponse& a, PFunctionCallResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PFunctionCallResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PFunctionCallResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PFunctionCallResponse* New() const final {
    return CreateMaybeMessage<PFunctionCallResponse>(nullptr);
  }

  PFunctionCallResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PFunctionCallResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PFunctionCallResponse& from);
  void MergeFrom(const PFunctionCallResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PFunctionCallResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PFunctionCallResponse";
  }
  protected:
  explicit PFunctionCallResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_function_5fservice_2eproto);
    return ::descriptor_table_function_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kStatusFieldNumber = 2,
    kContextFieldNumber = 3,
  };
  // repeated .doris.PValues result = 1;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::doris::PValues* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PValues >*
      mutable_result();
  private:
  const ::doris::PValues& _internal_result(int index) const;
  ::doris::PValues* _internal_add_result();
  public:
  const ::doris::PValues& result(int index) const;
  ::doris::PValues* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PValues >&
      result() const;

  // optional .doris.PStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::doris::PStatus& status() const;
  ::doris::PStatus* release_status();
  ::doris::PStatus* mutable_status();
  void set_allocated_status(::doris::PStatus* status);
  private:
  const ::doris::PStatus& _internal_status() const;
  ::doris::PStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::doris::PStatus* status);
  ::doris::PStatus* unsafe_arena_release_status();

  // optional .doris.PRequestContext context = 3;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::doris::PRequestContext& context() const;
  ::doris::PRequestContext* release_context();
  ::doris::PRequestContext* mutable_context();
  void set_allocated_context(::doris::PRequestContext* context);
  private:
  const ::doris::PRequestContext& _internal_context() const;
  ::doris::PRequestContext* _internal_mutable_context();
  public:
  void unsafe_arena_set_allocated_context(
      ::doris::PRequestContext* context);
  ::doris::PRequestContext* unsafe_arena_release_context();

  // @@protoc_insertion_point(class_scope:doris.PFunctionCallResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PValues > result_;
  ::doris::PStatus* status_;
  ::doris::PRequestContext* context_;
  friend struct ::TableStruct_function_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PCheckFunctionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PCheckFunctionRequest) */ {
 public:
  inline PCheckFunctionRequest() : PCheckFunctionRequest(nullptr) {}
  virtual ~PCheckFunctionRequest();

  PCheckFunctionRequest(const PCheckFunctionRequest& from);
  PCheckFunctionRequest(PCheckFunctionRequest&& from) noexcept
    : PCheckFunctionRequest() {
    *this = ::std::move(from);
  }

  inline PCheckFunctionRequest& operator=(const PCheckFunctionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PCheckFunctionRequest& operator=(PCheckFunctionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PCheckFunctionRequest& default_instance();

  static inline const PCheckFunctionRequest* internal_default_instance() {
    return reinterpret_cast<const PCheckFunctionRequest*>(
               &_PCheckFunctionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PCheckFunctionRequest& a, PCheckFunctionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PCheckFunctionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PCheckFunctionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PCheckFunctionRequest* New() const final {
    return CreateMaybeMessage<PCheckFunctionRequest>(nullptr);
  }

  PCheckFunctionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PCheckFunctionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PCheckFunctionRequest& from);
  void MergeFrom(const PCheckFunctionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PCheckFunctionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PCheckFunctionRequest";
  }
  protected:
  explicit PCheckFunctionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_function_5fservice_2eproto);
    return ::descriptor_table_function_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PCheckFunctionRequest_MatchType MatchType;
  static constexpr MatchType IDENTICAL =
    PCheckFunctionRequest_MatchType_IDENTICAL;
  static constexpr MatchType INDISTINGUISHABLE =
    PCheckFunctionRequest_MatchType_INDISTINGUISHABLE;
  static constexpr MatchType SUPERTYPE_OF =
    PCheckFunctionRequest_MatchType_SUPERTYPE_OF;
  static constexpr MatchType NONSTRICT_SUPERTYPE_OF =
    PCheckFunctionRequest_MatchType_NONSTRICT_SUPERTYPE_OF;
  static constexpr MatchType MATCHABLE =
    PCheckFunctionRequest_MatchType_MATCHABLE;
  static inline bool MatchType_IsValid(int value) {
    return PCheckFunctionRequest_MatchType_IsValid(value);
  }
  static constexpr MatchType MatchType_MIN =
    PCheckFunctionRequest_MatchType_MatchType_MIN;
  static constexpr MatchType MatchType_MAX =
    PCheckFunctionRequest_MatchType_MatchType_MAX;
  static constexpr int MatchType_ARRAYSIZE =
    PCheckFunctionRequest_MatchType_MatchType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MatchType_descriptor() {
    return PCheckFunctionRequest_MatchType_descriptor();
  }
  template<typename T>
  static inline const std::string& MatchType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MatchType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MatchType_Name.");
    return PCheckFunctionRequest_MatchType_Name(enum_t_value);
  }
  static inline bool MatchType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MatchType* value) {
    return PCheckFunctionRequest_MatchType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionFieldNumber = 1,
    kMatchTypeFieldNumber = 2,
  };
  // optional .doris.PFunction function = 1;
  bool has_function() const;
  private:
  bool _internal_has_function() const;
  public:
  void clear_function();
  const ::doris::PFunction& function() const;
  ::doris::PFunction* release_function();
  ::doris::PFunction* mutable_function();
  void set_allocated_function(::doris::PFunction* function);
  private:
  const ::doris::PFunction& _internal_function() const;
  ::doris::PFunction* _internal_mutable_function();
  public:
  void unsafe_arena_set_allocated_function(
      ::doris::PFunction* function);
  ::doris::PFunction* unsafe_arena_release_function();

  // optional .doris.PCheckFunctionRequest.MatchType match_type = 2;
  bool has_match_type() const;
  private:
  bool _internal_has_match_type() const;
  public:
  void clear_match_type();
  ::doris::PCheckFunctionRequest_MatchType match_type() const;
  void set_match_type(::doris::PCheckFunctionRequest_MatchType value);
  private:
  ::doris::PCheckFunctionRequest_MatchType _internal_match_type() const;
  void _internal_set_match_type(::doris::PCheckFunctionRequest_MatchType value);
  public:

  // @@protoc_insertion_point(class_scope:doris.PCheckFunctionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::doris::PFunction* function_;
  int match_type_;
  friend struct ::TableStruct_function_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PCheckFunctionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doris.PCheckFunctionResponse) */ {
 public:
  inline PCheckFunctionResponse() : PCheckFunctionResponse(nullptr) {}
  virtual ~PCheckFunctionResponse();

  PCheckFunctionResponse(const PCheckFunctionResponse& from);
  PCheckFunctionResponse(PCheckFunctionResponse&& from) noexcept
    : PCheckFunctionResponse() {
    *this = ::std::move(from);
  }

  inline PCheckFunctionResponse& operator=(const PCheckFunctionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PCheckFunctionResponse& operator=(PCheckFunctionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PCheckFunctionResponse& default_instance();

  static inline const PCheckFunctionResponse* internal_default_instance() {
    return reinterpret_cast<const PCheckFunctionResponse*>(
               &_PCheckFunctionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PCheckFunctionResponse& a, PCheckFunctionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PCheckFunctionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PCheckFunctionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PCheckFunctionResponse* New() const final {
    return CreateMaybeMessage<PCheckFunctionResponse>(nullptr);
  }

  PCheckFunctionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PCheckFunctionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PCheckFunctionResponse& from);
  void MergeFrom(const PCheckFunctionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PCheckFunctionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doris.PCheckFunctionResponse";
  }
  protected:
  explicit PCheckFunctionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_function_5fservice_2eproto);
    return ::descriptor_table_function_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .doris.PStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::doris::PStatus& status() const;
  ::doris::PStatus* release_status();
  ::doris::PStatus* mutable_status();
  void set_allocated_status(::doris::PStatus* status);
  private:
  const ::doris::PStatus& _internal_status() const;
  ::doris::PStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::doris::PStatus* status);
  ::doris::PStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:doris.PCheckFunctionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::doris::PStatus* status_;
  friend struct ::TableStruct_function_5fservice_2eproto;
};
// ===================================================================

class PFunctionService_Stub;

class PFunctionService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline PFunctionService() {};
 public:
  virtual ~PFunctionService();

  typedef PFunctionService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void fn_call(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::doris::PFunctionCallRequest* request,
                       ::doris::PFunctionCallResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void check_fn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::doris::PCheckFunctionRequest* request,
                       ::doris::PCheckFunctionResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void hand_shake(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::doris::PHandShakeRequest* request,
                       ::doris::PHandShakeResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PFunctionService);
};

class PFunctionService_Stub : public PFunctionService {
 public:
  PFunctionService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  PFunctionService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~PFunctionService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements PFunctionService ------------------------------------------

  void fn_call(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::doris::PFunctionCallRequest* request,
                       ::doris::PFunctionCallResponse* response,
                       ::google::protobuf::Closure* done);
  void check_fn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::doris::PCheckFunctionRequest* request,
                       ::doris::PCheckFunctionResponse* response,
                       ::google::protobuf::Closure* done);
  void hand_shake(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::doris::PHandShakeRequest* request,
                       ::doris::PHandShakeResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PFunctionService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PRequestContext

// optional string id = 1;
inline bool PRequestContext::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PRequestContext::has_id() const {
  return _internal_has_id();
}
inline void PRequestContext::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PRequestContext::id() const {
  // @@protoc_insertion_point(field_get:doris.PRequestContext.id)
  return _internal_id();
}
inline void PRequestContext::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:doris.PRequestContext.id)
}
inline std::string* PRequestContext::mutable_id() {
  // @@protoc_insertion_point(field_mutable:doris.PRequestContext.id)
  return _internal_mutable_id();
}
inline const std::string& PRequestContext::_internal_id() const {
  return id_.Get();
}
inline void PRequestContext::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PRequestContext::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:doris.PRequestContext.id)
}
inline void PRequestContext::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:doris.PRequestContext.id)
}
inline void PRequestContext::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:doris.PRequestContext.id)
}
inline std::string* PRequestContext::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PRequestContext::release_id() {
  // @@protoc_insertion_point(field_release:doris.PRequestContext.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PRequestContext::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:doris.PRequestContext.id)
}

// optional .doris.PFunctionContext function_context = 2;
inline bool PRequestContext::_internal_has_function_context() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || function_context_ != nullptr);
  return value;
}
inline bool PRequestContext::has_function_context() const {
  return _internal_has_function_context();
}
inline const ::doris::PFunctionContext& PRequestContext::_internal_function_context() const {
  const ::doris::PFunctionContext* p = function_context_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PFunctionContext&>(
      ::doris::_PFunctionContext_default_instance_);
}
inline const ::doris::PFunctionContext& PRequestContext::function_context() const {
  // @@protoc_insertion_point(field_get:doris.PRequestContext.function_context)
  return _internal_function_context();
}
inline void PRequestContext::unsafe_arena_set_allocated_function_context(
    ::doris::PFunctionContext* function_context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_context_);
  }
  function_context_ = function_context;
  if (function_context) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PRequestContext.function_context)
}
inline ::doris::PFunctionContext* PRequestContext::release_function_context() {
  _has_bits_[0] &= ~0x00000002u;
  ::doris::PFunctionContext* temp = function_context_;
  function_context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PFunctionContext* PRequestContext::unsafe_arena_release_function_context() {
  // @@protoc_insertion_point(field_release:doris.PRequestContext.function_context)
  _has_bits_[0] &= ~0x00000002u;
  ::doris::PFunctionContext* temp = function_context_;
  function_context_ = nullptr;
  return temp;
}
inline ::doris::PFunctionContext* PRequestContext::_internal_mutable_function_context() {
  _has_bits_[0] |= 0x00000002u;
  if (function_context_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PFunctionContext>(GetArena());
    function_context_ = p;
  }
  return function_context_;
}
inline ::doris::PFunctionContext* PRequestContext::mutable_function_context() {
  // @@protoc_insertion_point(field_mutable:doris.PRequestContext.function_context)
  return _internal_mutable_function_context();
}
inline void PRequestContext::set_allocated_function_context(::doris::PFunctionContext* function_context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_context_);
  }
  if (function_context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_context)->GetArena();
    if (message_arena != submessage_arena) {
      function_context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function_context, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  function_context_ = function_context;
  // @@protoc_insertion_point(field_set_allocated:doris.PRequestContext.function_context)
}

// -------------------------------------------------------------------

// PFunctionCallRequest

// optional string function_name = 1;
inline bool PFunctionCallRequest::_internal_has_function_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PFunctionCallRequest::has_function_name() const {
  return _internal_has_function_name();
}
inline void PFunctionCallRequest::clear_function_name() {
  function_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PFunctionCallRequest::function_name() const {
  // @@protoc_insertion_point(field_get:doris.PFunctionCallRequest.function_name)
  return _internal_function_name();
}
inline void PFunctionCallRequest::set_function_name(const std::string& value) {
  _internal_set_function_name(value);
  // @@protoc_insertion_point(field_set:doris.PFunctionCallRequest.function_name)
}
inline std::string* PFunctionCallRequest::mutable_function_name() {
  // @@protoc_insertion_point(field_mutable:doris.PFunctionCallRequest.function_name)
  return _internal_mutable_function_name();
}
inline const std::string& PFunctionCallRequest::_internal_function_name() const {
  return function_name_.Get();
}
inline void PFunctionCallRequest::_internal_set_function_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PFunctionCallRequest::set_function_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  function_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:doris.PFunctionCallRequest.function_name)
}
inline void PFunctionCallRequest::set_function_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:doris.PFunctionCallRequest.function_name)
}
inline void PFunctionCallRequest::set_function_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:doris.PFunctionCallRequest.function_name)
}
inline std::string* PFunctionCallRequest::_internal_mutable_function_name() {
  _has_bits_[0] |= 0x00000001u;
  return function_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PFunctionCallRequest::release_function_name() {
  // @@protoc_insertion_point(field_release:doris.PFunctionCallRequest.function_name)
  if (!_internal_has_function_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return function_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PFunctionCallRequest::set_allocated_function_name(std::string* function_name) {
  if (function_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  function_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:doris.PFunctionCallRequest.function_name)
}

// repeated .doris.PValues args = 2;
inline int PFunctionCallRequest::_internal_args_size() const {
  return args_.size();
}
inline int PFunctionCallRequest::args_size() const {
  return _internal_args_size();
}
inline ::doris::PValues* PFunctionCallRequest::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:doris.PFunctionCallRequest.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PValues >*
PFunctionCallRequest::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:doris.PFunctionCallRequest.args)
  return &args_;
}
inline const ::doris::PValues& PFunctionCallRequest::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::doris::PValues& PFunctionCallRequest::args(int index) const {
  // @@protoc_insertion_point(field_get:doris.PFunctionCallRequest.args)
  return _internal_args(index);
}
inline ::doris::PValues* PFunctionCallRequest::_internal_add_args() {
  return args_.Add();
}
inline ::doris::PValues* PFunctionCallRequest::add_args() {
  // @@protoc_insertion_point(field_add:doris.PFunctionCallRequest.args)
  return _internal_add_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PValues >&
PFunctionCallRequest::args() const {
  // @@protoc_insertion_point(field_list:doris.PFunctionCallRequest.args)
  return args_;
}

// optional .doris.PRequestContext context = 3;
inline bool PFunctionCallRequest::_internal_has_context() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || context_ != nullptr);
  return value;
}
inline bool PFunctionCallRequest::has_context() const {
  return _internal_has_context();
}
inline void PFunctionCallRequest::clear_context() {
  if (context_ != nullptr) context_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::doris::PRequestContext& PFunctionCallRequest::_internal_context() const {
  const ::doris::PRequestContext* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PRequestContext&>(
      ::doris::_PRequestContext_default_instance_);
}
inline const ::doris::PRequestContext& PFunctionCallRequest::context() const {
  // @@protoc_insertion_point(field_get:doris.PFunctionCallRequest.context)
  return _internal_context();
}
inline void PFunctionCallRequest::unsafe_arena_set_allocated_context(
    ::doris::PRequestContext* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PFunctionCallRequest.context)
}
inline ::doris::PRequestContext* PFunctionCallRequest::release_context() {
  _has_bits_[0] &= ~0x00000002u;
  ::doris::PRequestContext* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PRequestContext* PFunctionCallRequest::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:doris.PFunctionCallRequest.context)
  _has_bits_[0] &= ~0x00000002u;
  ::doris::PRequestContext* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::doris::PRequestContext* PFunctionCallRequest::_internal_mutable_context() {
  _has_bits_[0] |= 0x00000002u;
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PRequestContext>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::doris::PRequestContext* PFunctionCallRequest::mutable_context() {
  // @@protoc_insertion_point(field_mutable:doris.PFunctionCallRequest.context)
  return _internal_mutable_context();
}
inline void PFunctionCallRequest::set_allocated_context(::doris::PRequestContext* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete context_;
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(context);
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:doris.PFunctionCallRequest.context)
}

// -------------------------------------------------------------------

// PFunctionCallResponse

// repeated .doris.PValues result = 1;
inline int PFunctionCallResponse::_internal_result_size() const {
  return result_.size();
}
inline int PFunctionCallResponse::result_size() const {
  return _internal_result_size();
}
inline ::doris::PValues* PFunctionCallResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:doris.PFunctionCallResponse.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PValues >*
PFunctionCallResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:doris.PFunctionCallResponse.result)
  return &result_;
}
inline const ::doris::PValues& PFunctionCallResponse::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::doris::PValues& PFunctionCallResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:doris.PFunctionCallResponse.result)
  return _internal_result(index);
}
inline ::doris::PValues* PFunctionCallResponse::_internal_add_result() {
  return result_.Add();
}
inline ::doris::PValues* PFunctionCallResponse::add_result() {
  // @@protoc_insertion_point(field_add:doris.PFunctionCallResponse.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::doris::PValues >&
PFunctionCallResponse::result() const {
  // @@protoc_insertion_point(field_list:doris.PFunctionCallResponse.result)
  return result_;
}

// optional .doris.PStatus status = 2;
inline bool PFunctionCallResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool PFunctionCallResponse::has_status() const {
  return _internal_has_status();
}
inline const ::doris::PStatus& PFunctionCallResponse::_internal_status() const {
  const ::doris::PStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PStatus&>(
      ::doris::_PStatus_default_instance_);
}
inline const ::doris::PStatus& PFunctionCallResponse::status() const {
  // @@protoc_insertion_point(field_get:doris.PFunctionCallResponse.status)
  return _internal_status();
}
inline void PFunctionCallResponse::unsafe_arena_set_allocated_status(
    ::doris::PStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PFunctionCallResponse.status)
}
inline ::doris::PStatus* PFunctionCallResponse::release_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::doris::PStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PStatus* PFunctionCallResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:doris.PFunctionCallResponse.status)
  _has_bits_[0] &= ~0x00000001u;
  ::doris::PStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::doris::PStatus* PFunctionCallResponse::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::doris::PStatus* PFunctionCallResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:doris.PFunctionCallResponse.status)
  return _internal_mutable_status();
}
inline void PFunctionCallResponse::set_allocated_status(::doris::PStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:doris.PFunctionCallResponse.status)
}

// optional .doris.PRequestContext context = 3;
inline bool PFunctionCallResponse::_internal_has_context() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || context_ != nullptr);
  return value;
}
inline bool PFunctionCallResponse::has_context() const {
  return _internal_has_context();
}
inline void PFunctionCallResponse::clear_context() {
  if (context_ != nullptr) context_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::doris::PRequestContext& PFunctionCallResponse::_internal_context() const {
  const ::doris::PRequestContext* p = context_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PRequestContext&>(
      ::doris::_PRequestContext_default_instance_);
}
inline const ::doris::PRequestContext& PFunctionCallResponse::context() const {
  // @@protoc_insertion_point(field_get:doris.PFunctionCallResponse.context)
  return _internal_context();
}
inline void PFunctionCallResponse::unsafe_arena_set_allocated_context(
    ::doris::PRequestContext* context) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  context_ = context;
  if (context) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PFunctionCallResponse.context)
}
inline ::doris::PRequestContext* PFunctionCallResponse::release_context() {
  _has_bits_[0] &= ~0x00000002u;
  ::doris::PRequestContext* temp = context_;
  context_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PRequestContext* PFunctionCallResponse::unsafe_arena_release_context() {
  // @@protoc_insertion_point(field_release:doris.PFunctionCallResponse.context)
  _has_bits_[0] &= ~0x00000002u;
  ::doris::PRequestContext* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::doris::PRequestContext* PFunctionCallResponse::_internal_mutable_context() {
  _has_bits_[0] |= 0x00000002u;
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PRequestContext>(GetArena());
    context_ = p;
  }
  return context_;
}
inline ::doris::PRequestContext* PFunctionCallResponse::mutable_context() {
  // @@protoc_insertion_point(field_mutable:doris.PFunctionCallResponse.context)
  return _internal_mutable_context();
}
inline void PFunctionCallResponse::set_allocated_context(::doris::PRequestContext* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete context_;
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(context);
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:doris.PFunctionCallResponse.context)
}

// -------------------------------------------------------------------

// PCheckFunctionRequest

// optional .doris.PFunction function = 1;
inline bool PCheckFunctionRequest::_internal_has_function() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || function_ != nullptr);
  return value;
}
inline bool PCheckFunctionRequest::has_function() const {
  return _internal_has_function();
}
inline const ::doris::PFunction& PCheckFunctionRequest::_internal_function() const {
  const ::doris::PFunction* p = function_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PFunction&>(
      ::doris::_PFunction_default_instance_);
}
inline const ::doris::PFunction& PCheckFunctionRequest::function() const {
  // @@protoc_insertion_point(field_get:doris.PCheckFunctionRequest.function)
  return _internal_function();
}
inline void PCheckFunctionRequest::unsafe_arena_set_allocated_function(
    ::doris::PFunction* function) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_);
  }
  function_ = function;
  if (function) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PCheckFunctionRequest.function)
}
inline ::doris::PFunction* PCheckFunctionRequest::release_function() {
  _has_bits_[0] &= ~0x00000001u;
  ::doris::PFunction* temp = function_;
  function_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PFunction* PCheckFunctionRequest::unsafe_arena_release_function() {
  // @@protoc_insertion_point(field_release:doris.PCheckFunctionRequest.function)
  _has_bits_[0] &= ~0x00000001u;
  ::doris::PFunction* temp = function_;
  function_ = nullptr;
  return temp;
}
inline ::doris::PFunction* PCheckFunctionRequest::_internal_mutable_function() {
  _has_bits_[0] |= 0x00000001u;
  if (function_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PFunction>(GetArena());
    function_ = p;
  }
  return function_;
}
inline ::doris::PFunction* PCheckFunctionRequest::mutable_function() {
  // @@protoc_insertion_point(field_mutable:doris.PCheckFunctionRequest.function)
  return _internal_mutable_function();
}
inline void PCheckFunctionRequest::set_allocated_function(::doris::PFunction* function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_);
  }
  if (function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(function)->GetArena();
    if (message_arena != submessage_arena) {
      function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  function_ = function;
  // @@protoc_insertion_point(field_set_allocated:doris.PCheckFunctionRequest.function)
}

// optional .doris.PCheckFunctionRequest.MatchType match_type = 2;
inline bool PCheckFunctionRequest::_internal_has_match_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PCheckFunctionRequest::has_match_type() const {
  return _internal_has_match_type();
}
inline void PCheckFunctionRequest::clear_match_type() {
  match_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::doris::PCheckFunctionRequest_MatchType PCheckFunctionRequest::_internal_match_type() const {
  return static_cast< ::doris::PCheckFunctionRequest_MatchType >(match_type_);
}
inline ::doris::PCheckFunctionRequest_MatchType PCheckFunctionRequest::match_type() const {
  // @@protoc_insertion_point(field_get:doris.PCheckFunctionRequest.match_type)
  return _internal_match_type();
}
inline void PCheckFunctionRequest::_internal_set_match_type(::doris::PCheckFunctionRequest_MatchType value) {
  assert(::doris::PCheckFunctionRequest_MatchType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  match_type_ = value;
}
inline void PCheckFunctionRequest::set_match_type(::doris::PCheckFunctionRequest_MatchType value) {
  _internal_set_match_type(value);
  // @@protoc_insertion_point(field_set:doris.PCheckFunctionRequest.match_type)
}

// -------------------------------------------------------------------

// PCheckFunctionResponse

// optional .doris.PStatus status = 1;
inline bool PCheckFunctionResponse::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || status_ != nullptr);
  return value;
}
inline bool PCheckFunctionResponse::has_status() const {
  return _internal_has_status();
}
inline const ::doris::PStatus& PCheckFunctionResponse::_internal_status() const {
  const ::doris::PStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::doris::PStatus&>(
      ::doris::_PStatus_default_instance_);
}
inline const ::doris::PStatus& PCheckFunctionResponse::status() const {
  // @@protoc_insertion_point(field_get:doris.PCheckFunctionResponse.status)
  return _internal_status();
}
inline void PCheckFunctionResponse::unsafe_arena_set_allocated_status(
    ::doris::PStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:doris.PCheckFunctionResponse.status)
}
inline ::doris::PStatus* PCheckFunctionResponse::release_status() {
  _has_bits_[0] &= ~0x00000001u;
  ::doris::PStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::doris::PStatus* PCheckFunctionResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:doris.PCheckFunctionResponse.status)
  _has_bits_[0] &= ~0x00000001u;
  ::doris::PStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::doris::PStatus* PCheckFunctionResponse::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::doris::PStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::doris::PStatus* PCheckFunctionResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:doris.PCheckFunctionResponse.status)
  return _internal_mutable_status();
}
inline void PCheckFunctionResponse::set_allocated_status(::doris::PStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:doris.PCheckFunctionResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace doris

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::doris::PCheckFunctionRequest_MatchType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::doris::PCheckFunctionRequest_MatchType>() {
  return ::doris::PCheckFunctionRequest_MatchType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_function_5fservice_2eproto
