// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#include "types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDateTime_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDecimal_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PField_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PFunction_Property_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PScalarType_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PStatus_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PStructField_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PTypeNode_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PValues_types_2eproto;
namespace doris {
class PStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PStatus> _instance;
} _PStatus_default_instance_;
class PScalarTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PScalarType> _instance;
} _PScalarType_default_instance_;
class PStructFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PStructField> _instance;
} _PStructField_default_instance_;
class PTypeNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PTypeNode> _instance;
} _PTypeNode_default_instance_;
class PTypeDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PTypeDesc> _instance;
} _PTypeDesc_default_instance_;
class PUniqueIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PUniqueId> _instance;
} _PUniqueId_default_instance_;
class PGenericTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PGenericType> _instance;
} _PGenericType_default_instance_;
class PListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PList> _instance;
} _PList_default_instance_;
class PMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PMap> _instance;
} _PMap_default_instance_;
class PFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PField> _instance;
} _PField_default_instance_;
class PStructDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PStruct> _instance;
} _PStruct_default_instance_;
class PDecimalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PDecimal> _instance;
} _PDecimal_default_instance_;
class PDateTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PDateTime> _instance;
} _PDateTime_default_instance_;
class PValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PValue> _instance;
} _PValue_default_instance_;
class PValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PValues> _instance;
} _PValues_default_instance_;
class PFunction_PropertyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PFunction_Property> _instance;
} _PFunction_Property_default_instance_;
class PFunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PFunction> _instance;
} _PFunction_default_instance_;
class PFunctionContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PFunctionContext> _instance;
} _PFunctionContext_default_instance_;
class PHandShakeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PHandShakeRequest> _instance;
} _PHandShakeRequest_default_instance_;
class PHandShakeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PHandShakeResponse> _instance;
} _PHandShakeResponse_default_instance_;
}  // namespace doris
static void InitDefaultsscc_info_PDateTime_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PDateTime_default_instance_;
    new (ptr) ::doris::PDateTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDateTime_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PDateTime_types_2eproto}, {}};

static void InitDefaultsscc_info_PDecimal_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PDecimal_default_instance_;
    new (ptr) ::doris::PDecimal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PDecimal_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PDecimal_types_2eproto}, {}};

static void InitDefaultsscc_info_PField_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PGenericType_default_instance_;
    new (ptr) ::doris::PGenericType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::doris::_PList_default_instance_;
    new (ptr) ::doris::PList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::doris::_PMap_default_instance_;
    new (ptr) ::doris::PMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::doris::_PField_default_instance_;
    new (ptr) ::doris::PField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::doris::_PStruct_default_instance_;
    new (ptr) ::doris::PStruct();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PField_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PField_types_2eproto}, {
      &scc_info_PDecimal_types_2eproto.base,}};

static void InitDefaultsscc_info_PFunction_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PFunction_default_instance_;
    new (ptr) ::doris::PFunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PFunction_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PFunction_types_2eproto}, {
      &scc_info_PField_types_2eproto.base,
      &scc_info_PFunction_Property_types_2eproto.base,}};

static void InitDefaultsscc_info_PFunction_Property_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PFunction_Property_default_instance_;
    new (ptr) ::doris::PFunction_Property();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PFunction_Property_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PFunction_Property_types_2eproto}, {}};

static void InitDefaultsscc_info_PFunctionContext_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PFunctionContext_default_instance_;
    new (ptr) ::doris::PFunctionContext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PFunctionContext_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PFunctionContext_types_2eproto}, {
      &scc_info_PValues_types_2eproto.base,}};

static void InitDefaultsscc_info_PHandShakeRequest_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PHandShakeRequest_default_instance_;
    new (ptr) ::doris::PHandShakeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PHandShakeRequest_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PHandShakeRequest_types_2eproto}, {}};

static void InitDefaultsscc_info_PHandShakeResponse_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PHandShakeResponse_default_instance_;
    new (ptr) ::doris::PHandShakeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PHandShakeResponse_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PHandShakeResponse_types_2eproto}, {
      &scc_info_PStatus_types_2eproto.base,}};

static void InitDefaultsscc_info_PScalarType_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PScalarType_default_instance_;
    new (ptr) ::doris::PScalarType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PScalarType_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PScalarType_types_2eproto}, {}};

static void InitDefaultsscc_info_PStatus_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PStatus_default_instance_;
    new (ptr) ::doris::PStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PStatus_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PStatus_types_2eproto}, {}};

static void InitDefaultsscc_info_PStructField_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PStructField_default_instance_;
    new (ptr) ::doris::PStructField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PStructField_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PStructField_types_2eproto}, {}};

static void InitDefaultsscc_info_PTypeDesc_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PTypeDesc_default_instance_;
    new (ptr) ::doris::PTypeDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PTypeDesc_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PTypeDesc_types_2eproto}, {
      &scc_info_PTypeNode_types_2eproto.base,}};

static void InitDefaultsscc_info_PTypeNode_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PTypeNode_default_instance_;
    new (ptr) ::doris::PTypeNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PTypeNode_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PTypeNode_types_2eproto}, {
      &scc_info_PScalarType_types_2eproto.base,
      &scc_info_PStructField_types_2eproto.base,}};

static void InitDefaultsscc_info_PUniqueId_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PUniqueId_default_instance_;
    new (ptr) ::doris::PUniqueId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PUniqueId_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PUniqueId_types_2eproto}, {}};

static void InitDefaultsscc_info_PValue_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PValue_default_instance_;
    new (ptr) ::doris::PValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PValue_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PValue_types_2eproto}, {
      &scc_info_PField_types_2eproto.base,
      &scc_info_PDateTime_types_2eproto.base,}};

static void InitDefaultsscc_info_PValues_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PValues_default_instance_;
    new (ptr) ::doris::PValues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PValues_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PValues_types_2eproto}, {
      &scc_info_PField_types_2eproto.base,
      &scc_info_PDateTime_types_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_types_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_types_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_types_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_types_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::doris::PStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PStatus, status_code_),
  PROTOBUF_FIELD_OFFSET(::doris::PStatus, error_msgs_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::doris::PScalarType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PScalarType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PScalarType, type_),
  PROTOBUF_FIELD_OFFSET(::doris::PScalarType, len_),
  PROTOBUF_FIELD_OFFSET(::doris::PScalarType, precision_),
  PROTOBUF_FIELD_OFFSET(::doris::PScalarType, scale_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::doris::PStructField, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PStructField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PStructField, name_),
  PROTOBUF_FIELD_OFFSET(::doris::PStructField, comment_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::doris::PTypeNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PTypeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PTypeNode, type_),
  PROTOBUF_FIELD_OFFSET(::doris::PTypeNode, scalar_type_),
  PROTOBUF_FIELD_OFFSET(::doris::PTypeNode, struct_fields_),
  PROTOBUF_FIELD_OFFSET(::doris::PTypeNode, contains_null_),
  1,
  0,
  ~0u,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::doris::PTypeDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PTypeDesc, types_),
  PROTOBUF_FIELD_OFFSET(::doris::PUniqueId, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PUniqueId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PUniqueId, hi_),
  PROTOBUF_FIELD_OFFSET(::doris::PUniqueId, lo_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::doris::PGenericType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PGenericType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PGenericType, id_),
  PROTOBUF_FIELD_OFFSET(::doris::PGenericType, list_type_),
  PROTOBUF_FIELD_OFFSET(::doris::PGenericType, map_type_),
  PROTOBUF_FIELD_OFFSET(::doris::PGenericType, struct_type_),
  PROTOBUF_FIELD_OFFSET(::doris::PGenericType, decimal_type_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::doris::PList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PList, element_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::doris::PMap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PMap, key_type_),
  PROTOBUF_FIELD_OFFSET(::doris::PMap, value_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::doris::PField, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PField, type_),
  PROTOBUF_FIELD_OFFSET(::doris::PField, name_),
  PROTOBUF_FIELD_OFFSET(::doris::PField, comment_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::doris::PStruct, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PStruct, fields_),
  PROTOBUF_FIELD_OFFSET(::doris::PStruct, name_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::doris::PDecimal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PDecimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PDecimal, precision_),
  PROTOBUF_FIELD_OFFSET(::doris::PDecimal, scale_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::doris::PDateTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PDateTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PDateTime, year_),
  PROTOBUF_FIELD_OFFSET(::doris::PDateTime, month_),
  PROTOBUF_FIELD_OFFSET(::doris::PDateTime, day_),
  PROTOBUF_FIELD_OFFSET(::doris::PDateTime, hour_),
  PROTOBUF_FIELD_OFFSET(::doris::PDateTime, minute_),
  PROTOBUF_FIELD_OFFSET(::doris::PDateTime, second_),
  PROTOBUF_FIELD_OFFSET(::doris::PDateTime, microsecond_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::doris::PValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PValue, type_),
  PROTOBUF_FIELD_OFFSET(::doris::PValue, is_null_),
  PROTOBUF_FIELD_OFFSET(::doris::PValue, double_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValue, float_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValue, int32_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValue, int64_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValue, uint32_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValue, uint64_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValue, bool_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValue, string_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValue, bytes_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValue, datetime_value_),
  2,
  8,
  4,
  5,
  6,
  7,
  10,
  11,
  9,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::doris::PValues, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PValues, type_),
  PROTOBUF_FIELD_OFFSET(::doris::PValues, has_null_),
  PROTOBUF_FIELD_OFFSET(::doris::PValues, null_map_),
  PROTOBUF_FIELD_OFFSET(::doris::PValues, double_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValues, float_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValues, int32_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValues, int64_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValues, uint32_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValues, uint64_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValues, bool_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValues, string_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValues, bytes_value_),
  PROTOBUF_FIELD_OFFSET(::doris::PValues, datetime_value_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::doris::PFunction_Property, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PFunction_Property, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PFunction_Property, key_),
  PROTOBUF_FIELD_OFFSET(::doris::PFunction_Property, val_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::doris::PFunction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PFunction, function_name_),
  PROTOBUF_FIELD_OFFSET(::doris::PFunction, inputs_),
  PROTOBUF_FIELD_OFFSET(::doris::PFunction, output_),
  PROTOBUF_FIELD_OFFSET(::doris::PFunction, type_),
  PROTOBUF_FIELD_OFFSET(::doris::PFunction, variadic_),
  PROTOBUF_FIELD_OFFSET(::doris::PFunction, properties_),
  0,
  ~0u,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::doris::PFunctionContext, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PFunctionContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PFunctionContext, data_),
  PROTOBUF_FIELD_OFFSET(::doris::PFunctionContext, args_data_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::doris::PHandShakeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PHandShakeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PHandShakeRequest, hello_),
  0,
  PROTOBUF_FIELD_OFFSET(::doris::PHandShakeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PHandShakeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PHandShakeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::doris::PHandShakeResponse, hello_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::doris::PStatus)},
  { 9, 18, sizeof(::doris::PScalarType)},
  { 22, 29, sizeof(::doris::PStructField)},
  { 31, 40, sizeof(::doris::PTypeNode)},
  { 44, -1, sizeof(::doris::PTypeDesc)},
  { 50, 57, sizeof(::doris::PUniqueId)},
  { 59, 69, sizeof(::doris::PGenericType)},
  { 74, 80, sizeof(::doris::PList)},
  { 81, 88, sizeof(::doris::PMap)},
  { 90, 98, sizeof(::doris::PField)},
  { 101, 108, sizeof(::doris::PStruct)},
  { 110, 117, sizeof(::doris::PDecimal)},
  { 119, 131, sizeof(::doris::PDateTime)},
  { 138, 155, sizeof(::doris::PValue)},
  { 167, 185, sizeof(::doris::PValues)},
  { 198, 205, sizeof(::doris::PFunction_Property)},
  { 207, 218, sizeof(::doris::PFunction)},
  { 224, 231, sizeof(::doris::PFunctionContext)},
  { 233, 239, sizeof(::doris::PHandShakeRequest)},
  { 240, 247, sizeof(::doris::PHandShakeResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PScalarType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PStructField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PTypeNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PTypeDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PUniqueId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PGenericType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PStruct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PDecimal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PDateTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PFunction_Property_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PFunctionContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PHandShakeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PHandShakeResponse_default_instance_),
};

const char descriptor_table_protodef_types_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013types.proto\022\005doris\"2\n\007PStatus\022\023\n\013statu"
  "s_code\030\001 \002(\005\022\022\n\nerror_msgs\030\002 \003(\t\"J\n\013PSca"
  "larType\022\014\n\004type\030\001 \002(\005\022\013\n\003len\030\002 \001(\005\022\021\n\tpr"
  "ecision\030\003 \001(\005\022\r\n\005scale\030\004 \001(\005\"-\n\014PStructF"
  "ield\022\014\n\004name\030\001 \002(\t\022\017\n\007comment\030\002 \001(\t\"\205\001\n\t"
  "PTypeNode\022\014\n\004type\030\001 \002(\005\022\'\n\013scalar_type\030\002"
  " \001(\0132\022.doris.PScalarType\022*\n\rstruct_field"
  "s\030\003 \003(\0132\023.doris.PStructField\022\025\n\rcontains"
  "_null\030\004 \001(\010\",\n\tPTypeDesc\022\037\n\005types\030\001 \003(\0132"
  "\020.doris.PTypeNode\"#\n\tPUniqueId\022\n\n\002hi\030\001 \002"
  "(\003\022\n\n\002lo\030\002 \002(\003\"\305\004\n\014PGenericType\022&\n\002id\030\002 "
  "\002(\0162\032.doris.PGenericType.TypeId\022\037\n\tlist_"
  "type\030\013 \001(\0132\014.doris.PList\022\035\n\010map_type\030\014 \001"
  "(\0132\013.doris.PMap\022#\n\013struct_type\030\r \001(\0132\016.d"
  "oris.PStruct\022%\n\014decimal_type\030\016 \001(\0132\017.dor"
  "is.PDecimal\"\200\003\n\006TypeId\022\t\n\005UINT8\020\000\022\n\n\006UIN"
  "T16\020\001\022\n\n\006UINT32\020\002\022\n\n\006UINT64\020\003\022\013\n\007UINT128"
  "\020\004\022\013\n\007UINT256\020\005\022\010\n\004INT8\020\006\022\t\n\005INT16\020\007\022\t\n\005"
  "INT32\020\010\022\t\n\005INT64\020\t\022\n\n\006INT128\020\n\022\n\n\006INT256"
  "\020\013\022\t\n\005FLOAT\020\014\022\n\n\006DOUBLE\020\r\022\013\n\007BOOLEAN\020\016\022\010"
  "\n\004DATE\020\017\022\014\n\010DATETIME\020\020\022\007\n\003HLL\020\021\022\n\n\006BITMA"
  "P\020\022\022\010\n\004LIST\020\023\022\007\n\003MAP\020\024\022\n\n\006STRUCT\020\025\022\n\n\006ST"
  "RING\020\026\022\r\n\tDECIMAL32\020\027\022\r\n\tDECIMAL64\020\030\022\016\n\n"
  "DECIMAL128\020\031\022\t\n\005BYTES\020\032\022\013\n\007NOTHING\020\033\022\n\n\006"
  "DATEV2\020\034\022\016\n\nDATETIMEV2\020\035\022\014\n\007UNKNOWN\020\347\007\"2"
  "\n\005PList\022)\n\014element_type\030\001 \002(\0132\023.doris.PG"
  "enericType\"V\n\004PMap\022%\n\010key_type\030\001 \002(\0132\023.d"
  "oris.PGenericType\022\'\n\nvalue_type\030\002 \002(\0132\023."
  "doris.PGenericType\"J\n\006PField\022!\n\004type\030\001 \002"
  "(\0132\023.doris.PGenericType\022\014\n\004name\030\002 \001(\t\022\017\n"
  "\007comment\030\003 \001(\t\"6\n\007PStruct\022\035\n\006fields\030\001 \003("
  "\0132\r.doris.PField\022\014\n\004name\030\002 \002(\t\",\n\010PDecim"
  "al\022\021\n\tprecision\030\001 \002(\r\022\r\n\005scale\030\002 \002(\r\"x\n\t"
  "PDateTime\022\014\n\004year\030\001 \001(\005\022\r\n\005month\030\002 \001(\005\022\013"
  "\n\003day\030\003 \001(\005\022\014\n\004hour\030\004 \001(\005\022\016\n\006minute\030\005 \001("
  "\005\022\016\n\006second\030\006 \001(\005\022\023\n\013microsecond\030\007 \001(\005\"\255"
  "\002\n\006PValue\022!\n\004type\030\001 \002(\0132\023.doris.PGeneric"
  "Type\022\026\n\007is_null\030\002 \001(\010:\005false\022\024\n\014double_v"
  "alue\030\003 \001(\001\022\023\n\013float_value\030\004 \001(\002\022\023\n\013int32"
  "_value\030\005 \001(\005\022\023\n\013int64_value\030\006 \001(\003\022\024\n\014uin"
  "t32_value\030\007 \001(\r\022\024\n\014uint64_value\030\010 \001(\004\022\022\n"
  "\nbool_value\030\t \001(\010\022\024\n\014string_value\030\n \001(\t\022"
  "\023\n\013bytes_value\030\013 \001(\014\022(\n\016datetime_value\030\014"
  " \001(\0132\020.doris.PDateTime\"\301\002\n\007PValues\022!\n\004ty"
  "pe\030\001 \002(\0132\023.doris.PGenericType\022\027\n\010has_nul"
  "l\030\002 \001(\010:\005false\022\020\n\010null_map\030\003 \003(\010\022\024\n\014doub"
  "le_value\030\004 \003(\001\022\023\n\013float_value\030\005 \003(\002\022\023\n\013i"
  "nt32_value\030\006 \003(\005\022\023\n\013int64_value\030\007 \003(\003\022\024\n"
  "\014uint32_value\030\010 \003(\r\022\024\n\014uint64_value\030\t \003("
  "\004\022\022\n\nbool_value\030\n \003(\010\022\024\n\014string_value\030\013 "
  "\003(\t\022\023\n\013bytes_value\030\014 \003(\014\022(\n\016datetime_val"
  "ue\030\r \003(\0132\020.doris.PDateTime\"\262\002\n\tPFunction"
  "\022\025\n\rfunction_name\030\001 \002(\t\022#\n\006inputs\030\002 \003(\0132"
  "\023.doris.PGenericType\022#\n\006output\030\003 \001(\0132\023.d"
  "oris.PGenericType\0220\n\004type\030\004 \001(\0162\035.doris."
  "PFunction.FunctionType:\003UDF\022\020\n\010variadic\030"
  "\005 \001(\010\022-\n\nproperties\030\006 \003(\0132\031.doris.PFunct"
  "ion.Property\032$\n\010Property\022\013\n\003key\030\001 \002(\t\022\013\n"
  "\003val\030\002 \002(\t\"+\n\014FunctionType\022\007\n\003UDF\020\000\022\010\n\004U"
  "DAF\020\001\022\010\n\004UDTF\020\002\"C\n\020PFunctionContext\022\014\n\004d"
  "ata\030\001 \001(\014\022!\n\targs_data\030\002 \003(\0132\016.doris.PVa"
  "lues\"\"\n\021PHandShakeRequest\022\r\n\005hello\030\001 \001(\t"
  "\"C\n\022PHandShakeResponse\022\036\n\006status\030\001 \001(\0132\016"
  ".doris.PStatus\022\r\n\005hello\030\002 \001(\t*\213\001\n\031PPlanF"
  "ragmentCancelReason\022\017\n\013LIMIT_REACH\020\001\022\017\n\013"
  "USER_CANCEL\020\002\022\022\n\016INTERNAL_ERROR\020\003\022\013\n\007TIM"
  "EOUT\020\004\022\022\n\016CALL_RPC_ERROR\020\005\022\027\n\023MEMORY_LIM"
  "IT_EXCEED\020\006B\030\n\026org.apache.doris.proto"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_types_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_types_2eproto_sccs[16] = {
  &scc_info_PDateTime_types_2eproto.base,
  &scc_info_PDecimal_types_2eproto.base,
  &scc_info_PField_types_2eproto.base,
  &scc_info_PFunction_types_2eproto.base,
  &scc_info_PFunction_Property_types_2eproto.base,
  &scc_info_PFunctionContext_types_2eproto.base,
  &scc_info_PHandShakeRequest_types_2eproto.base,
  &scc_info_PHandShakeResponse_types_2eproto.base,
  &scc_info_PScalarType_types_2eproto.base,
  &scc_info_PStatus_types_2eproto.base,
  &scc_info_PStructField_types_2eproto.base,
  &scc_info_PTypeDesc_types_2eproto.base,
  &scc_info_PTypeNode_types_2eproto.base,
  &scc_info_PUniqueId_types_2eproto.base,
  &scc_info_PValue_types_2eproto.base,
  &scc_info_PValues_types_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_types_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2eproto = {
  false, false, descriptor_table_protodef_types_2eproto, "types.proto", 2717,
  &descriptor_table_types_2eproto_once, descriptor_table_types_2eproto_sccs, descriptor_table_types_2eproto_deps, 16, 0,
  schemas, file_default_instances, TableStruct_types_2eproto::offsets,
  file_level_metadata_types_2eproto, 20, file_level_enum_descriptors_types_2eproto, file_level_service_descriptors_types_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_types_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_types_2eproto)), true);
namespace doris {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PGenericType_TypeId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_types_2eproto);
  return file_level_enum_descriptors_types_2eproto[0];
}
bool PGenericType_TypeId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 999:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PGenericType_TypeId PGenericType::UINT8;
constexpr PGenericType_TypeId PGenericType::UINT16;
constexpr PGenericType_TypeId PGenericType::UINT32;
constexpr PGenericType_TypeId PGenericType::UINT64;
constexpr PGenericType_TypeId PGenericType::UINT128;
constexpr PGenericType_TypeId PGenericType::UINT256;
constexpr PGenericType_TypeId PGenericType::INT8;
constexpr PGenericType_TypeId PGenericType::INT16;
constexpr PGenericType_TypeId PGenericType::INT32;
constexpr PGenericType_TypeId PGenericType::INT64;
constexpr PGenericType_TypeId PGenericType::INT128;
constexpr PGenericType_TypeId PGenericType::INT256;
constexpr PGenericType_TypeId PGenericType::FLOAT;
constexpr PGenericType_TypeId PGenericType::DOUBLE;
constexpr PGenericType_TypeId PGenericType::BOOLEAN;
constexpr PGenericType_TypeId PGenericType::DATE;
constexpr PGenericType_TypeId PGenericType::DATETIME;
constexpr PGenericType_TypeId PGenericType::HLL;
constexpr PGenericType_TypeId PGenericType::BITMAP;
constexpr PGenericType_TypeId PGenericType::LIST;
constexpr PGenericType_TypeId PGenericType::MAP;
constexpr PGenericType_TypeId PGenericType::STRUCT;
constexpr PGenericType_TypeId PGenericType::STRING;
constexpr PGenericType_TypeId PGenericType::DECIMAL32;
constexpr PGenericType_TypeId PGenericType::DECIMAL64;
constexpr PGenericType_TypeId PGenericType::DECIMAL128;
constexpr PGenericType_TypeId PGenericType::BYTES;
constexpr PGenericType_TypeId PGenericType::NOTHING;
constexpr PGenericType_TypeId PGenericType::DATEV2;
constexpr PGenericType_TypeId PGenericType::DATETIMEV2;
constexpr PGenericType_TypeId PGenericType::UNKNOWN;
constexpr PGenericType_TypeId PGenericType::TypeId_MIN;
constexpr PGenericType_TypeId PGenericType::TypeId_MAX;
constexpr int PGenericType::TypeId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PFunction_FunctionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_types_2eproto);
  return file_level_enum_descriptors_types_2eproto[1];
}
bool PFunction_FunctionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PFunction_FunctionType PFunction::UDF;
constexpr PFunction_FunctionType PFunction::UDAF;
constexpr PFunction_FunctionType PFunction::UDTF;
constexpr PFunction_FunctionType PFunction::FunctionType_MIN;
constexpr PFunction_FunctionType PFunction::FunctionType_MAX;
constexpr int PFunction::FunctionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PPlanFragmentCancelReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_types_2eproto);
  return file_level_enum_descriptors_types_2eproto[2];
}
bool PPlanFragmentCancelReason_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<PStatus>()._has_bits_);
  static void set_has_status_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PStatus::PStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  error_msgs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PStatus)
}
PStatus::PStatus(const PStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      error_msgs_(from.error_msgs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:doris.PStatus)
}

void PStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PStatus_types_2eproto.base);
  status_code_ = 0;
}

PStatus::~PStatus() {
  // @@protoc_insertion_point(destructor:doris.PStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PStatus::ArenaDtor(void* object) {
  PStatus* _this = reinterpret_cast< PStatus* >(object);
  (void)_this;
}
void PStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PStatus& PStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PStatus_types_2eproto.base);
  return *internal_default_instance();
}


void PStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msgs_.Clear();
  status_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_status_code(&has_bits);
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string error_msgs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_error_msgs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doris.PStatus.error_msgs");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 status_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status_code(), target);
  }

  // repeated string error_msgs = 2;
  for (int i = 0, n = this->_internal_error_msgs_size(); i < n; i++) {
    const auto& s = this->_internal_error_msgs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "doris.PStatus.error_msgs");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PStatus)
  return target;
}

size_t PStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PStatus)
  size_t total_size = 0;

  // required int32 status_code = 1;
  if (_internal_has_status_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status_code());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string error_msgs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(error_msgs_.size());
  for (int i = 0, n = error_msgs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      error_msgs_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PStatus)
    MergeFrom(*source);
  }
}

void PStatus::MergeFrom(const PStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  error_msgs_.MergeFrom(from.error_msgs_);
  if (from._internal_has_status_code()) {
    _internal_set_status_code(from._internal_status_code());
  }
}

void PStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PStatus::CopyFrom(const PStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PStatus::InternalSwap(PStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_msgs_.InternalSwap(&other->error_msgs_);
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PScalarType::_Internal {
 public:
  using HasBits = decltype(std::declval<PScalarType>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PScalarType::PScalarType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PScalarType)
}
PScalarType::PScalarType(const PScalarType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&type_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:doris.PScalarType)
}

void PScalarType::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&type_)) + sizeof(scale_));
}

PScalarType::~PScalarType() {
  // @@protoc_insertion_point(destructor:doris.PScalarType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PScalarType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PScalarType::ArenaDtor(void* object) {
  PScalarType* _this = reinterpret_cast< PScalarType* >(object);
  (void)_this;
}
void PScalarType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PScalarType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PScalarType& PScalarType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PScalarType_types_2eproto.base);
  return *internal_default_instance();
}


void PScalarType::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PScalarType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scale_) -
        reinterpret_cast<char*>(&type_)) + sizeof(scale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PScalarType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 len = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_len(&has_bits);
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 precision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_precision(&has_bits);
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PScalarType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PScalarType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional int32 len = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_len(), target);
  }

  // optional int32 precision = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_precision(), target);
  }

  // optional int32 scale = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PScalarType)
  return target;
}

size_t PScalarType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PScalarType)
  size_t total_size = 0;

  // required int32 type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional int32 len = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_len());
    }

    // optional int32 precision = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_precision());
    }

    // optional int32 scale = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_scale());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PScalarType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PScalarType)
  GOOGLE_DCHECK_NE(&from, this);
  const PScalarType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PScalarType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PScalarType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PScalarType)
    MergeFrom(*source);
  }
}

void PScalarType::MergeFrom(const PScalarType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PScalarType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      len_ = from.len_;
    }
    if (cached_has_bits & 0x00000004u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000008u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PScalarType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PScalarType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PScalarType::CopyFrom(const PScalarType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PScalarType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PScalarType::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PScalarType::InternalSwap(PScalarType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PScalarType, scale_)
      + sizeof(PScalarType::scale_)
      - PROTOBUF_FIELD_OFFSET(PScalarType, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PScalarType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PStructField::_Internal {
 public:
  using HasBits = decltype(std::declval<PStructField>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PStructField::PStructField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PStructField)
}
PStructField::PStructField(const PStructField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_comment()) {
    comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:doris.PStructField)
}

void PStructField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PStructField_types_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PStructField::~PStructField() {
  // @@protoc_insertion_point(destructor:doris.PStructField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PStructField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PStructField::ArenaDtor(void* object) {
  PStructField* _this = reinterpret_cast< PStructField* >(object);
  (void)_this;
}
void PStructField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PStructField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PStructField& PStructField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PStructField_types_2eproto.base);
  return *internal_default_instance();
}


void PStructField::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PStructField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      comment_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PStructField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doris.PStructField.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doris.PStructField.comment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PStructField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PStructField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "doris.PStructField.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string comment = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "doris.PStructField.comment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PStructField)
  return target;
}

size_t PStructField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PStructField)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string comment = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PStructField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PStructField)
  GOOGLE_DCHECK_NE(&from, this);
  const PStructField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PStructField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PStructField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PStructField)
    MergeFrom(*source);
  }
}

void PStructField::MergeFrom(const PStructField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PStructField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_comment(from._internal_comment());
    }
  }
}

void PStructField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PStructField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PStructField::CopyFrom(const PStructField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PStructField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PStructField::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PStructField::InternalSwap(PStructField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PStructField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PTypeNode::_Internal {
 public:
  using HasBits = decltype(std::declval<PTypeNode>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::doris::PScalarType& scalar_type(const PTypeNode* msg);
  static void set_has_scalar_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contains_null(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::doris::PScalarType&
PTypeNode::_Internal::scalar_type(const PTypeNode* msg) {
  return *msg->scalar_type_;
}
PTypeNode::PTypeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  struct_fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PTypeNode)
}
PTypeNode::PTypeNode(const PTypeNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      struct_fields_(from.struct_fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scalar_type()) {
    scalar_type_ = new ::doris::PScalarType(*from.scalar_type_);
  } else {
    scalar_type_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&contains_null_) -
    reinterpret_cast<char*>(&type_)) + sizeof(contains_null_));
  // @@protoc_insertion_point(copy_constructor:doris.PTypeNode)
}

void PTypeNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PTypeNode_types_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&scalar_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&contains_null_) -
      reinterpret_cast<char*>(&scalar_type_)) + sizeof(contains_null_));
}

PTypeNode::~PTypeNode() {
  // @@protoc_insertion_point(destructor:doris.PTypeNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PTypeNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete scalar_type_;
}

void PTypeNode::ArenaDtor(void* object) {
  PTypeNode* _this = reinterpret_cast< PTypeNode* >(object);
  (void)_this;
}
void PTypeNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PTypeNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PTypeNode& PTypeNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PTypeNode_types_2eproto.base);
  return *internal_default_instance();
}


void PTypeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PTypeNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  struct_fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(scalar_type_ != nullptr);
    scalar_type_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contains_null_) -
        reinterpret_cast<char*>(&type_)) + sizeof(contains_null_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PTypeNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .doris.PScalarType scalar_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_scalar_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .doris.PStructField struct_fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_struct_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool contains_null = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_contains_null(&has_bits);
          contains_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PTypeNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PTypeNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional .doris.PScalarType scalar_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::scalar_type(this), target, stream);
  }

  // repeated .doris.PStructField struct_fields = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_struct_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_struct_fields(i), target, stream);
  }

  // optional bool contains_null = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_contains_null(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PTypeNode)
  return target;
}

size_t PTypeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PTypeNode)
  size_t total_size = 0;

  // required int32 type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .doris.PStructField struct_fields = 3;
  total_size += 1UL * this->_internal_struct_fields_size();
  for (const auto& msg : this->struct_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .doris.PScalarType scalar_type = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scalar_type_);
  }

  // optional bool contains_null = 4;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PTypeNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PTypeNode)
  GOOGLE_DCHECK_NE(&from, this);
  const PTypeNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PTypeNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PTypeNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PTypeNode)
    MergeFrom(*source);
  }
}

void PTypeNode::MergeFrom(const PTypeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PTypeNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  struct_fields_.MergeFrom(from.struct_fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_scalar_type()->::doris::PScalarType::MergeFrom(from._internal_scalar_type());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      contains_null_ = from.contains_null_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PTypeNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PTypeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PTypeNode::CopyFrom(const PTypeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PTypeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTypeNode::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(struct_fields_)) return false;
  if (_internal_has_scalar_type()) {
    if (!scalar_type_->IsInitialized()) return false;
  }
  return true;
}

void PTypeNode::InternalSwap(PTypeNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  struct_fields_.InternalSwap(&other->struct_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PTypeNode, contains_null_)
      + sizeof(PTypeNode::contains_null_)
      - PROTOBUF_FIELD_OFFSET(PTypeNode, scalar_type_)>(
          reinterpret_cast<char*>(&scalar_type_),
          reinterpret_cast<char*>(&other->scalar_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PTypeNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PTypeDesc::_Internal {
 public:
};

PTypeDesc::PTypeDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PTypeDesc)
}
PTypeDesc::PTypeDesc(const PTypeDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      types_(from.types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:doris.PTypeDesc)
}

void PTypeDesc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PTypeDesc_types_2eproto.base);
}

PTypeDesc::~PTypeDesc() {
  // @@protoc_insertion_point(destructor:doris.PTypeDesc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PTypeDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PTypeDesc::ArenaDtor(void* object) {
  PTypeDesc* _this = reinterpret_cast< PTypeDesc* >(object);
  (void)_this;
}
void PTypeDesc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PTypeDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PTypeDesc& PTypeDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PTypeDesc_types_2eproto.base);
  return *internal_default_instance();
}


void PTypeDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PTypeDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PTypeDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .doris.PTypeNode types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PTypeDesc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PTypeDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .doris.PTypeNode types = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_types(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PTypeDesc)
  return target;
}

size_t PTypeDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PTypeDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .doris.PTypeNode types = 1;
  total_size += 1UL * this->_internal_types_size();
  for (const auto& msg : this->types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PTypeDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PTypeDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const PTypeDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PTypeDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PTypeDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PTypeDesc)
    MergeFrom(*source);
  }
}

void PTypeDesc::MergeFrom(const PTypeDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PTypeDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
}

void PTypeDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PTypeDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PTypeDesc::CopyFrom(const PTypeDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PTypeDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTypeDesc::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(types_)) return false;
  return true;
}

void PTypeDesc::InternalSwap(PTypeDesc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  types_.InternalSwap(&other->types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PTypeDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PUniqueId::_Internal {
 public:
  using HasBits = decltype(std::declval<PUniqueId>()._has_bits_);
  static void set_has_hi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PUniqueId::PUniqueId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PUniqueId)
}
PUniqueId::PUniqueId(const PUniqueId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hi_, &from.hi_,
    static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
    reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
  // @@protoc_insertion_point(copy_constructor:doris.PUniqueId)
}

void PUniqueId::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&hi_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lo_) -
      reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
}

PUniqueId::~PUniqueId() {
  // @@protoc_insertion_point(destructor:doris.PUniqueId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PUniqueId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PUniqueId::ArenaDtor(void* object) {
  PUniqueId* _this = reinterpret_cast< PUniqueId* >(object);
  (void)_this;
}
void PUniqueId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PUniqueId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PUniqueId& PUniqueId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PUniqueId_types_2eproto.base);
  return *internal_default_instance();
}


void PUniqueId::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PUniqueId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&hi_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lo_) -
        reinterpret_cast<char*>(&hi_)) + sizeof(lo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PUniqueId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 hi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hi(&has_bits);
          hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 lo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lo(&has_bits);
          lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PUniqueId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PUniqueId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 hi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_hi(), target);
  }

  // required int64 lo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_lo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PUniqueId)
  return target;
}

size_t PUniqueId::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:doris.PUniqueId)
  size_t total_size = 0;

  if (_internal_has_hi()) {
    // required int64 hi = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_hi());
  }

  if (_internal_has_lo()) {
    // required int64 lo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lo());
  }

  return total_size;
}
size_t PUniqueId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PUniqueId)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 hi = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_hi());

    // required int64 lo = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lo());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PUniqueId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PUniqueId)
  GOOGLE_DCHECK_NE(&from, this);
  const PUniqueId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PUniqueId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PUniqueId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PUniqueId)
    MergeFrom(*source);
  }
}

void PUniqueId::MergeFrom(const PUniqueId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PUniqueId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hi_ = from.hi_;
    }
    if (cached_has_bits & 0x00000002u) {
      lo_ = from.lo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PUniqueId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PUniqueId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PUniqueId::CopyFrom(const PUniqueId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PUniqueId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUniqueId::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PUniqueId::InternalSwap(PUniqueId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PUniqueId, lo_)
      + sizeof(PUniqueId::lo_)
      - PROTOBUF_FIELD_OFFSET(PUniqueId, hi_)>(
          reinterpret_cast<char*>(&hi_),
          reinterpret_cast<char*>(&other->hi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PUniqueId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PGenericType::_Internal {
 public:
  using HasBits = decltype(std::declval<PGenericType>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::doris::PList& list_type(const PGenericType* msg);
  static void set_has_list_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::doris::PMap& map_type(const PGenericType* msg);
  static void set_has_map_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::doris::PStruct& struct_type(const PGenericType* msg);
  static void set_has_struct_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::doris::PDecimal& decimal_type(const PGenericType* msg);
  static void set_has_decimal_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::doris::PList&
PGenericType::_Internal::list_type(const PGenericType* msg) {
  return *msg->list_type_;
}
const ::doris::PMap&
PGenericType::_Internal::map_type(const PGenericType* msg) {
  return *msg->map_type_;
}
const ::doris::PStruct&
PGenericType::_Internal::struct_type(const PGenericType* msg) {
  return *msg->struct_type_;
}
const ::doris::PDecimal&
PGenericType::_Internal::decimal_type(const PGenericType* msg) {
  return *msg->decimal_type_;
}
PGenericType::PGenericType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PGenericType)
}
PGenericType::PGenericType(const PGenericType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_list_type()) {
    list_type_ = new ::doris::PList(*from.list_type_);
  } else {
    list_type_ = nullptr;
  }
  if (from._internal_has_map_type()) {
    map_type_ = new ::doris::PMap(*from.map_type_);
  } else {
    map_type_ = nullptr;
  }
  if (from._internal_has_struct_type()) {
    struct_type_ = new ::doris::PStruct(*from.struct_type_);
  } else {
    struct_type_ = nullptr;
  }
  if (from._internal_has_decimal_type()) {
    decimal_type_ = new ::doris::PDecimal(*from.decimal_type_);
  } else {
    decimal_type_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:doris.PGenericType)
}

void PGenericType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PField_types_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&list_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&list_type_)) + sizeof(id_));
}

PGenericType::~PGenericType() {
  // @@protoc_insertion_point(destructor:doris.PGenericType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PGenericType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete list_type_;
  if (this != internal_default_instance()) delete map_type_;
  if (this != internal_default_instance()) delete struct_type_;
  if (this != internal_default_instance()) delete decimal_type_;
}

void PGenericType::ArenaDtor(void* object) {
  PGenericType* _this = reinterpret_cast< PGenericType* >(object);
  (void)_this;
}
void PGenericType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PGenericType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PGenericType& PGenericType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PField_types_2eproto.base);
  return *internal_default_instance();
}


void PGenericType::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PGenericType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(list_type_ != nullptr);
      list_type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(map_type_ != nullptr);
      map_type_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(struct_type_ != nullptr);
      struct_type_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(decimal_type_ != nullptr);
      decimal_type_->Clear();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PGenericType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .doris.PGenericType.TypeId id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::doris::PGenericType_TypeId_IsValid(val))) {
            _internal_set_id(static_cast<::doris::PGenericType_TypeId>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .doris.PList list_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .doris.PMap map_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .doris.PStruct struct_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .doris.PDecimal decimal_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_decimal_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PGenericType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PGenericType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .doris.PGenericType.TypeId id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_id(), target);
  }

  // optional .doris.PList list_type = 11;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::list_type(this), target, stream);
  }

  // optional .doris.PMap map_type = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::map_type(this), target, stream);
  }

  // optional .doris.PStruct struct_type = 13;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::struct_type(this), target, stream);
  }

  // optional .doris.PDecimal decimal_type = 14;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::decimal_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PGenericType)
  return target;
}

size_t PGenericType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PGenericType)
  size_t total_size = 0;

  // required .doris.PGenericType.TypeId id = 2;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .doris.PList list_type = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *list_type_);
    }

    // optional .doris.PMap map_type = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *map_type_);
    }

    // optional .doris.PStruct struct_type = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *struct_type_);
    }

    // optional .doris.PDecimal decimal_type = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *decimal_type_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PGenericType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PGenericType)
  GOOGLE_DCHECK_NE(&from, this);
  const PGenericType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PGenericType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PGenericType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PGenericType)
    MergeFrom(*source);
  }
}

void PGenericType::MergeFrom(const PGenericType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PGenericType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_list_type()->::doris::PList::MergeFrom(from._internal_list_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_map_type()->::doris::PMap::MergeFrom(from._internal_map_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_struct_type()->::doris::PStruct::MergeFrom(from._internal_struct_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_decimal_type()->::doris::PDecimal::MergeFrom(from._internal_decimal_type());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PGenericType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PGenericType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PGenericType::CopyFrom(const PGenericType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PGenericType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PGenericType::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_list_type()) {
    if (!list_type_->IsInitialized()) return false;
  }
  if (_internal_has_map_type()) {
    if (!map_type_->IsInitialized()) return false;
  }
  if (_internal_has_struct_type()) {
    if (!struct_type_->IsInitialized()) return false;
  }
  if (_internal_has_decimal_type()) {
    if (!decimal_type_->IsInitialized()) return false;
  }
  return true;
}

void PGenericType::InternalSwap(PGenericType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PGenericType, id_)
      + sizeof(PGenericType::id_)
      - PROTOBUF_FIELD_OFFSET(PGenericType, list_type_)>(
          reinterpret_cast<char*>(&list_type_),
          reinterpret_cast<char*>(&other->list_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PGenericType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PList::_Internal {
 public:
  using HasBits = decltype(std::declval<PList>()._has_bits_);
  static const ::doris::PGenericType& element_type(const PList* msg);
  static void set_has_element_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::doris::PGenericType&
PList::_Internal::element_type(const PList* msg) {
  return *msg->element_type_;
}
PList::PList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PList)
}
PList::PList(const PList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_element_type()) {
    element_type_ = new ::doris::PGenericType(*from.element_type_);
  } else {
    element_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:doris.PList)
}

void PList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PField_types_2eproto.base);
  element_type_ = nullptr;
}

PList::~PList() {
  // @@protoc_insertion_point(destructor:doris.PList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete element_type_;
}

void PList::ArenaDtor(void* object) {
  PList* _this = reinterpret_cast< PList* >(object);
  (void)_this;
}
void PList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PList& PList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PField_types_2eproto.base);
  return *internal_default_instance();
}


void PList::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(element_type_ != nullptr);
    element_type_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .doris.PGenericType element_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_element_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .doris.PGenericType element_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::element_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PList)
  return target;
}

size_t PList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PList)
  size_t total_size = 0;

  // required .doris.PGenericType element_type = 1;
  if (_internal_has_element_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *element_type_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PList)
  GOOGLE_DCHECK_NE(&from, this);
  const PList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PList)
    MergeFrom(*source);
  }
}

void PList::MergeFrom(const PList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_element_type()) {
    _internal_mutable_element_type()->::doris::PGenericType::MergeFrom(from._internal_element_type());
  }
}

void PList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PList::CopyFrom(const PList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PList::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_element_type()) {
    if (!element_type_->IsInitialized()) return false;
  }
  return true;
}

void PList::InternalSwap(PList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(element_type_, other->element_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PMap::_Internal {
 public:
  using HasBits = decltype(std::declval<PMap>()._has_bits_);
  static const ::doris::PGenericType& key_type(const PMap* msg);
  static void set_has_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::doris::PGenericType& value_type(const PMap* msg);
  static void set_has_value_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::doris::PGenericType&
PMap::_Internal::key_type(const PMap* msg) {
  return *msg->key_type_;
}
const ::doris::PGenericType&
PMap::_Internal::value_type(const PMap* msg) {
  return *msg->value_type_;
}
PMap::PMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PMap)
}
PMap::PMap(const PMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key_type()) {
    key_type_ = new ::doris::PGenericType(*from.key_type_);
  } else {
    key_type_ = nullptr;
  }
  if (from._internal_has_value_type()) {
    value_type_ = new ::doris::PGenericType(*from.value_type_);
  } else {
    value_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:doris.PMap)
}

void PMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PField_types_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&key_type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_type_) -
      reinterpret_cast<char*>(&key_type_)) + sizeof(value_type_));
}

PMap::~PMap() {
  // @@protoc_insertion_point(destructor:doris.PMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete key_type_;
  if (this != internal_default_instance()) delete value_type_;
}

void PMap::ArenaDtor(void* object) {
  PMap* _this = reinterpret_cast< PMap* >(object);
  (void)_this;
}
void PMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PMap& PMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PField_types_2eproto.base);
  return *internal_default_instance();
}


void PMap::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(key_type_ != nullptr);
      key_type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_type_ != nullptr);
      value_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .doris.PGenericType key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .doris.PGenericType value_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .doris.PGenericType key_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::key_type(this), target, stream);
  }

  // required .doris.PGenericType value_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PMap)
  return target;
}

size_t PMap::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:doris.PMap)
  size_t total_size = 0;

  if (_internal_has_key_type()) {
    // required .doris.PGenericType key_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_type_);
  }

  if (_internal_has_value_type()) {
    // required .doris.PGenericType value_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_type_);
  }

  return total_size;
}
size_t PMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PMap)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .doris.PGenericType key_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_type_);

    // required .doris.PGenericType value_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_type_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PMap)
  GOOGLE_DCHECK_NE(&from, this);
  const PMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PMap)
    MergeFrom(*source);
  }
}

void PMap::MergeFrom(const PMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_key_type()->::doris::PGenericType::MergeFrom(from._internal_key_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value_type()->::doris::PGenericType::MergeFrom(from._internal_value_type());
    }
  }
}

void PMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMap::CopyFrom(const PMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMap::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_key_type()) {
    if (!key_type_->IsInitialized()) return false;
  }
  if (_internal_has_value_type()) {
    if (!value_type_->IsInitialized()) return false;
  }
  return true;
}

void PMap::InternalSwap(PMap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PMap, value_type_)
      + sizeof(PMap::value_type_)
      - PROTOBUF_FIELD_OFFSET(PMap, key_type_)>(
          reinterpret_cast<char*>(&key_type_),
          reinterpret_cast<char*>(&other->key_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PField::_Internal {
 public:
  using HasBits = decltype(std::declval<PField>()._has_bits_);
  static const ::doris::PGenericType& type(const PField* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::doris::PGenericType&
PField::_Internal::type(const PField* msg) {
  return *msg->type_;
}
PField::PField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PField)
}
PField::PField(const PField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_comment()) {
    comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment(), 
      GetArena());
  }
  if (from._internal_has_type()) {
    type_ = new ::doris::PGenericType(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:doris.PField)
}

void PField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PField_types_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = nullptr;
}

PField::~PField() {
  // @@protoc_insertion_point(destructor:doris.PField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void PField::ArenaDtor(void* object) {
  PField* _this = reinterpret_cast< PField* >(object);
  (void)_this;
}
void PField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PField& PField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PField_types_2eproto.base);
  return *internal_default_instance();
}


void PField::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      comment_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .doris.PGenericType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doris.PField.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string comment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doris.PField.comment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .doris.PGenericType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::type(this), target, stream);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "doris.PField.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string comment = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "doris.PField.comment");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PField)
  return target;
}

size_t PField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PField)
  size_t total_size = 0;

  // required .doris.PGenericType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string comment = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_comment());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PField)
  GOOGLE_DCHECK_NE(&from, this);
  const PField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PField)
    MergeFrom(*source);
  }
}

void PField::MergeFrom(const PField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_comment(from._internal_comment());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_type()->::doris::PGenericType::MergeFrom(from._internal_type());
    }
  }
}

void PField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PField::CopyFrom(const PField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PField::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_type()) {
    if (!type_->IsInitialized()) return false;
  }
  return true;
}

void PField::InternalSwap(PField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PStruct::_Internal {
 public:
  using HasBits = decltype(std::declval<PStruct>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PStruct::PStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PStruct)
}
PStruct::PStruct(const PStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:doris.PStruct)
}

void PStruct::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PField_types_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PStruct::~PStruct() {
  // @@protoc_insertion_point(destructor:doris.PStruct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PStruct::ArenaDtor(void* object) {
  PStruct* _this = reinterpret_cast< PStruct* >(object);
  (void)_this;
}
void PStruct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PStruct& PStruct::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PField_types_2eproto.base);
  return *internal_default_instance();
}


void PStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .doris.PField fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doris.PStruct.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PStruct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .doris.PField fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_fields(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "doris.PStruct.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PStruct)
  return target;
}

size_t PStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PStruct)
  size_t total_size = 0;

  // required string name = 2;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .doris.PField fields = 1;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PStruct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const PStruct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PStruct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PStruct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PStruct)
    MergeFrom(*source);
  }
}

void PStruct::MergeFrom(const PStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
}

void PStruct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PStruct::CopyFrom(const PStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PStruct::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fields_)) return false;
  return true;
}

void PStruct::InternalSwap(PStruct* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fields_.InternalSwap(&other->fields_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PStruct::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PDecimal::_Internal {
 public:
  using HasBits = decltype(std::declval<PDecimal>()._has_bits_);
  static void set_has_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PDecimal::PDecimal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PDecimal)
}
PDecimal::PDecimal(const PDecimal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&precision_, &from.precision_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&precision_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:doris.PDecimal)
}

void PDecimal::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&precision_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&precision_)) + sizeof(scale_));
}

PDecimal::~PDecimal() {
  // @@protoc_insertion_point(destructor:doris.PDecimal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PDecimal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PDecimal::ArenaDtor(void* object) {
  PDecimal* _this = reinterpret_cast< PDecimal* >(object);
  (void)_this;
}
void PDecimal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PDecimal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PDecimal& PDecimal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PDecimal_types_2eproto.base);
  return *internal_default_instance();
}


void PDecimal::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PDecimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&precision_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scale_) -
        reinterpret_cast<char*>(&precision_)) + sizeof(scale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PDecimal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 precision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_precision(&has_bits);
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PDecimal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PDecimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 precision = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_precision(), target);
  }

  // required uint32 scale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PDecimal)
  return target;
}

size_t PDecimal::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:doris.PDecimal)
  size_t total_size = 0;

  if (_internal_has_precision()) {
    // required uint32 precision = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_precision());
  }

  if (_internal_has_scale()) {
    // required uint32 scale = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_scale());
  }

  return total_size;
}
size_t PDecimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PDecimal)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 precision = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_precision());

    // required uint32 scale = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_scale());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PDecimal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PDecimal)
  GOOGLE_DCHECK_NE(&from, this);
  const PDecimal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PDecimal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PDecimal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PDecimal)
    MergeFrom(*source);
  }
}

void PDecimal::MergeFrom(const PDecimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PDecimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PDecimal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PDecimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDecimal::CopyFrom(const PDecimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PDecimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDecimal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PDecimal::InternalSwap(PDecimal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PDecimal, scale_)
      + sizeof(PDecimal::scale_)
      - PROTOBUF_FIELD_OFFSET(PDecimal, precision_)>(
          reinterpret_cast<char*>(&precision_),
          reinterpret_cast<char*>(&other->precision_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PDecimal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PDateTime::_Internal {
 public:
  using HasBits = decltype(std::declval<PDateTime>()._has_bits_);
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_day(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_second(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_microsecond(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

PDateTime::PDateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PDateTime)
}
PDateTime::PDateTime(const PDateTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&microsecond_) -
    reinterpret_cast<char*>(&year_)) + sizeof(microsecond_));
  // @@protoc_insertion_point(copy_constructor:doris.PDateTime)
}

void PDateTime::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&year_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&microsecond_) -
      reinterpret_cast<char*>(&year_)) + sizeof(microsecond_));
}

PDateTime::~PDateTime() {
  // @@protoc_insertion_point(destructor:doris.PDateTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PDateTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PDateTime::ArenaDtor(void* object) {
  PDateTime* _this = reinterpret_cast< PDateTime* >(object);
  (void)_this;
}
void PDateTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PDateTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PDateTime& PDateTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PDateTime_types_2eproto.base);
  return *internal_default_instance();
}


void PDateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PDateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&year_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&microsecond_) -
        reinterpret_cast<char*>(&year_)) + sizeof(microsecond_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PDateTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_year(&has_bits);
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 month = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_month(&has_bits);
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_day(&has_bits);
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hour = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hour(&has_bits);
          hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 minute = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_minute(&has_bits);
          minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 second = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_second(&has_bits);
          second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 microsecond = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_microsecond(&has_bits);
          microsecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PDateTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PDateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 year = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_year(), target);
  }

  // optional int32 month = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_month(), target);
  }

  // optional int32 day = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_day(), target);
  }

  // optional int32 hour = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_hour(), target);
  }

  // optional int32 minute = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_minute(), target);
  }

  // optional int32 second = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_second(), target);
  }

  // optional int32 microsecond = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_microsecond(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PDateTime)
  return target;
}

size_t PDateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PDateTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int32 year = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_year());
    }

    // optional int32 month = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_month());
    }

    // optional int32 day = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_day());
    }

    // optional int32 hour = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hour());
    }

    // optional int32 minute = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_minute());
    }

    // optional int32 second = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_second());
    }

    // optional int32 microsecond = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_microsecond());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PDateTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PDateTime)
  GOOGLE_DCHECK_NE(&from, this);
  const PDateTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PDateTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PDateTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PDateTime)
    MergeFrom(*source);
  }
}

void PDateTime::MergeFrom(const PDateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PDateTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000002u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000004u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000008u) {
      hour_ = from.hour_;
    }
    if (cached_has_bits & 0x00000010u) {
      minute_ = from.minute_;
    }
    if (cached_has_bits & 0x00000020u) {
      second_ = from.second_;
    }
    if (cached_has_bits & 0x00000040u) {
      microsecond_ = from.microsecond_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PDateTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PDateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDateTime::CopyFrom(const PDateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PDateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDateTime::IsInitialized() const {
  return true;
}

void PDateTime::InternalSwap(PDateTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PDateTime, microsecond_)
      + sizeof(PDateTime::microsecond_)
      - PROTOBUF_FIELD_OFFSET(PDateTime, year_)>(
          reinterpret_cast<char*>(&year_),
          reinterpret_cast<char*>(&other->year_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PDateTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PValue::_Internal {
 public:
  using HasBits = decltype(std::declval<PValue>()._has_bits_);
  static const ::doris::PGenericType& type(const PValue* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_null(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_float_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_int32_value(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_int64_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_uint32_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_uint64_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_bool_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bytes_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::doris::PDateTime& datetime_value(const PValue* msg);
  static void set_has_datetime_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::doris::PGenericType&
PValue::_Internal::type(const PValue* msg) {
  return *msg->type_;
}
const ::doris::PDateTime&
PValue::_Internal::datetime_value(const PValue* msg) {
  return *msg->datetime_value_;
}
PValue::PValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PValue)
}
PValue::PValue(const PValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_value()) {
    string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_value(), 
      GetArena());
  }
  bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bytes_value()) {
    bytes_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bytes_value(), 
      GetArena());
  }
  if (from._internal_has_type()) {
    type_ = new ::doris::PGenericType(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_datetime_value()) {
    datetime_value_ = new ::doris::PDateTime(*from.datetime_value_);
  } else {
    datetime_value_ = nullptr;
  }
  ::memcpy(&double_value_, &from.double_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&uint64_value_) -
    reinterpret_cast<char*>(&double_value_)) + sizeof(uint64_value_));
  // @@protoc_insertion_point(copy_constructor:doris.PValue)
}

void PValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PValue_types_2eproto.base);
  string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&uint64_value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(uint64_value_));
}

PValue::~PValue() {
  // @@protoc_insertion_point(destructor:doris.PValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytes_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete datetime_value_;
}

void PValue::ArenaDtor(void* object) {
  PValue* _this = reinterpret_cast< PValue* >(object);
  (void)_this;
}
void PValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PValue& PValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PValue_types_2eproto.base);
  return *internal_default_instance();
}


void PValue::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      string_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bytes_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(datetime_value_ != nullptr);
      datetime_value_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&double_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&int64_value_) -
        reinterpret_cast<char*>(&double_value_)) + sizeof(int64_value_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&is_null_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uint64_value_) -
        reinterpret_cast<char*>(&is_null_)) + sizeof(uint64_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .doris.PGenericType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_null = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_null(&has_bits);
          is_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double double_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_double_value(&has_bits);
          double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float float_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_float_value(&has_bits);
          float_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 int32_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_int32_value(&has_bits);
          int32_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 int64_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_int64_value(&has_bits);
          int64_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uint32_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_uint32_value(&has_bits);
          uint32_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 uint64_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_uint64_value(&has_bits);
          uint64_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bool_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_bool_value(&has_bits);
          bool_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doris.PValue.string_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes bytes_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_bytes_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .doris.PDateTime datetime_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_datetime_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .doris.PGenericType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::type(this), target, stream);
  }

  // optional bool is_null = 2 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_null(), target);
  }

  // optional double double_value = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_double_value(), target);
  }

  // optional float float_value = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_float_value(), target);
  }

  // optional int32 int32_value = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_int32_value(), target);
  }

  // optional int64 int64_value = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_int64_value(), target);
  }

  // optional uint32 uint32_value = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_uint32_value(), target);
  }

  // optional uint64 uint64_value = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_uint64_value(), target);
  }

  // optional bool bool_value = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_bool_value(), target);
  }

  // optional string string_value = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "doris.PValue.string_value");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_string_value(), target);
  }

  // optional bytes bytes_value = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_bytes_value(), target);
  }

  // optional .doris.PDateTime datetime_value = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::datetime_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PValue)
  return target;
}

size_t PValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PValue)
  size_t total_size = 0;

  // required .doris.PGenericType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string string_value = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional bytes bytes_value = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_value());
    }

  }
  if (cached_has_bits & 0x000000f8u) {
    // optional .doris.PDateTime datetime_value = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *datetime_value_);
    }

    // optional double double_value = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional float float_value = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional int32 int32_value = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int32_value());
    }

    // optional int64 int64_value = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_int64_value());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool is_null = 2 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool bool_value = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional uint32 uint32_value = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_value());
    }

    // optional uint64 uint64_value = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uint64_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PValue)
  GOOGLE_DCHECK_NE(&from, this);
  const PValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PValue)
    MergeFrom(*source);
  }
}

void PValue::MergeFrom(const PValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bytes_value(from._internal_bytes_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_type()->::doris::PGenericType::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_datetime_value()->::doris::PDateTime::MergeFrom(from._internal_datetime_value());
    }
    if (cached_has_bits & 0x00000010u) {
      double_value_ = from.double_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      float_value_ = from.float_value_;
    }
    if (cached_has_bits & 0x00000040u) {
      int32_value_ = from.int32_value_;
    }
    if (cached_has_bits & 0x00000080u) {
      int64_value_ = from.int64_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      is_null_ = from.is_null_;
    }
    if (cached_has_bits & 0x00000200u) {
      bool_value_ = from.bool_value_;
    }
    if (cached_has_bits & 0x00000400u) {
      uint32_value_ = from.uint32_value_;
    }
    if (cached_has_bits & 0x00000800u) {
      uint64_value_ = from.uint64_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PValue::CopyFrom(const PValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_type()) {
    if (!type_->IsInitialized()) return false;
  }
  return true;
}

void PValue::InternalSwap(PValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  string_value_.Swap(&other->string_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bytes_value_.Swap(&other->bytes_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PValue, uint64_value_)
      + sizeof(PValue::uint64_value_)
      - PROTOBUF_FIELD_OFFSET(PValue, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PValues::_Internal {
 public:
  using HasBits = decltype(std::declval<PValues>()._has_bits_);
  static const ::doris::PGenericType& type(const PValues* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_null(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::doris::PGenericType&
PValues::_Internal::type(const PValues* msg) {
  return *msg->type_;
}
PValues::PValues(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  null_map_(arena),
  double_value_(arena),
  float_value_(arena),
  int32_value_(arena),
  int64_value_(arena),
  uint32_value_(arena),
  uint64_value_(arena),
  bool_value_(arena),
  string_value_(arena),
  bytes_value_(arena),
  datetime_value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PValues)
}
PValues::PValues(const PValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      null_map_(from.null_map_),
      double_value_(from.double_value_),
      float_value_(from.float_value_),
      int32_value_(from.int32_value_),
      int64_value_(from.int64_value_),
      uint32_value_(from.uint32_value_),
      uint64_value_(from.uint64_value_),
      bool_value_(from.bool_value_),
      string_value_(from.string_value_),
      bytes_value_(from.bytes_value_),
      datetime_value_(from.datetime_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_type()) {
    type_ = new ::doris::PGenericType(*from.type_);
  } else {
    type_ = nullptr;
  }
  has_null_ = from.has_null_;
  // @@protoc_insertion_point(copy_constructor:doris.PValues)
}

void PValues::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PValues_types_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&has_null_) -
      reinterpret_cast<char*>(&type_)) + sizeof(has_null_));
}

PValues::~PValues() {
  // @@protoc_insertion_point(destructor:doris.PValues)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PValues::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete type_;
}

void PValues::ArenaDtor(void* object) {
  PValues* _this = reinterpret_cast< PValues* >(object);
  (void)_this;
}
void PValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PValues& PValues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PValues_types_2eproto.base);
  return *internal_default_instance();
}


void PValues::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  null_map_.Clear();
  double_value_.Clear();
  float_value_.Clear();
  int32_value_.Clear();
  int64_value_.Clear();
  uint32_value_.Clear();
  uint64_value_.Clear();
  bool_value_.Clear();
  string_value_.Clear();
  bytes_value_.Clear();
  datetime_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(type_ != nullptr);
    type_->Clear();
  }
  has_null_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .doris.PGenericType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_null = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_has_null(&has_bits);
          has_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool null_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_null_map(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_null_map(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double double_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float float_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_float_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 int32_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_int32_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int32_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 int64_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_int64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_int64_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 uint32_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_uint32_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_uint32_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 uint64_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_uint64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_uint64_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool bool_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_bool_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string string_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doris.PValues.string_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes bytes_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bytes_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .doris.PDateTime datetime_value = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datetime_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .doris.PGenericType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::type(this), target, stream);
  }

  // optional bool has_null = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_has_null(), target);
  }

  // repeated bool null_map = 3;
  for (int i = 0, n = this->_internal_null_map_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_null_map(i), target);
  }

  // repeated double double_value = 4;
  for (int i = 0, n = this->_internal_double_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_double_value(i), target);
  }

  // repeated float float_value = 5;
  for (int i = 0, n = this->_internal_float_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_float_value(i), target);
  }

  // repeated int32 int32_value = 6;
  for (int i = 0, n = this->_internal_int32_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_int32_value(i), target);
  }

  // repeated int64 int64_value = 7;
  for (int i = 0, n = this->_internal_int64_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_int64_value(i), target);
  }

  // repeated uint32 uint32_value = 8;
  for (int i = 0, n = this->_internal_uint32_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_uint32_value(i), target);
  }

  // repeated uint64 uint64_value = 9;
  for (int i = 0, n = this->_internal_uint64_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_uint64_value(i), target);
  }

  // repeated bool bool_value = 10;
  for (int i = 0, n = this->_internal_bool_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_bool_value(i), target);
  }

  // repeated string string_value = 11;
  for (int i = 0, n = this->_internal_string_value_size(); i < n; i++) {
    const auto& s = this->_internal_string_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "doris.PValues.string_value");
    target = stream->WriteString(11, s, target);
  }

  // repeated bytes bytes_value = 12;
  for (int i = 0, n = this->_internal_bytes_value_size(); i < n; i++) {
    const auto& s = this->_internal_bytes_value(i);
    target = stream->WriteBytes(12, s, target);
  }

  // repeated .doris.PDateTime datetime_value = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datetime_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_datetime_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PValues)
  return target;
}

size_t PValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PValues)
  size_t total_size = 0;

  // required .doris.PGenericType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool null_map = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_null_map_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_null_map_size());
    total_size += data_size;
  }

  // repeated double double_value = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double_value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_double_value_size());
    total_size += data_size;
  }

  // repeated float float_value = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float_value_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_float_value_size());
    total_size += data_size;
  }

  // repeated int32 int32_value = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->int32_value_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_int32_value_size());
    total_size += data_size;
  }

  // repeated int64 int64_value = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->int64_value_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_int64_value_size());
    total_size += data_size;
  }

  // repeated uint32 uint32_value = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->uint32_value_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_uint32_value_size());
    total_size += data_size;
  }

  // repeated uint64 uint64_value = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->uint64_value_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_uint64_value_size());
    total_size += data_size;
  }

  // repeated bool bool_value = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bool_value_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bool_value_size());
    total_size += data_size;
  }

  // repeated string string_value = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(string_value_.size());
  for (int i = 0, n = string_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      string_value_.Get(i));
  }

  // repeated bytes bytes_value = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bytes_value_.size());
  for (int i = 0, n = bytes_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      bytes_value_.Get(i));
  }

  // repeated .doris.PDateTime datetime_value = 13;
  total_size += 1UL * this->_internal_datetime_value_size();
  for (const auto& msg : this->datetime_value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool has_null = 2 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PValues)
  GOOGLE_DCHECK_NE(&from, this);
  const PValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PValues)
    MergeFrom(*source);
  }
}

void PValues::MergeFrom(const PValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  null_map_.MergeFrom(from.null_map_);
  double_value_.MergeFrom(from.double_value_);
  float_value_.MergeFrom(from.float_value_);
  int32_value_.MergeFrom(from.int32_value_);
  int64_value_.MergeFrom(from.int64_value_);
  uint32_value_.MergeFrom(from.uint32_value_);
  uint64_value_.MergeFrom(from.uint64_value_);
  bool_value_.MergeFrom(from.bool_value_);
  string_value_.MergeFrom(from.string_value_);
  bytes_value_.MergeFrom(from.bytes_value_);
  datetime_value_.MergeFrom(from.datetime_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_type()->::doris::PGenericType::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      has_null_ = from.has_null_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PValues::CopyFrom(const PValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PValues::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_type()) {
    if (!type_->IsInitialized()) return false;
  }
  return true;
}

void PValues::InternalSwap(PValues* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  null_map_.InternalSwap(&other->null_map_);
  double_value_.InternalSwap(&other->double_value_);
  float_value_.InternalSwap(&other->float_value_);
  int32_value_.InternalSwap(&other->int32_value_);
  int64_value_.InternalSwap(&other->int64_value_);
  uint32_value_.InternalSwap(&other->uint32_value_);
  uint64_value_.InternalSwap(&other->uint64_value_);
  bool_value_.InternalSwap(&other->bool_value_);
  string_value_.InternalSwap(&other->string_value_);
  bytes_value_.InternalSwap(&other->bytes_value_);
  datetime_value_.InternalSwap(&other->datetime_value_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PValues, has_null_)
      + sizeof(PValues::has_null_)
      - PROTOBUF_FIELD_OFFSET(PValues, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PFunction_Property::_Internal {
 public:
  using HasBits = decltype(std::declval<PFunction_Property>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PFunction_Property::PFunction_Property(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PFunction.Property)
}
PFunction_Property::PFunction_Property(const PFunction_Property& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_val()) {
    val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_val(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:doris.PFunction.Property)
}

void PFunction_Property::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PFunction_Property_types_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PFunction_Property::~PFunction_Property() {
  // @@protoc_insertion_point(destructor:doris.PFunction.Property)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PFunction_Property::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PFunction_Property::ArenaDtor(void* object) {
  PFunction_Property* _this = reinterpret_cast< PFunction_Property* >(object);
  (void)_this;
}
void PFunction_Property::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PFunction_Property::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PFunction_Property& PFunction_Property::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PFunction_Property_types_2eproto.base);
  return *internal_default_instance();
}


void PFunction_Property::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PFunction.Property)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      val_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PFunction_Property::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doris.PFunction.Property.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doris.PFunction.Property.val");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PFunction_Property::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PFunction.Property)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "doris.PFunction.Property.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // required string val = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_val().data(), static_cast<int>(this->_internal_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "doris.PFunction.Property.val");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PFunction.Property)
  return target;
}

size_t PFunction_Property::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:doris.PFunction.Property)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (_internal_has_val()) {
    // required string val = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_val());
  }

  return total_size;
}
size_t PFunction_Property::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PFunction.Property)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());

    // required string val = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_val());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PFunction_Property::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PFunction.Property)
  GOOGLE_DCHECK_NE(&from, this);
  const PFunction_Property* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PFunction_Property>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PFunction.Property)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PFunction.Property)
    MergeFrom(*source);
  }
}

void PFunction_Property::MergeFrom(const PFunction_Property& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PFunction.Property)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_val(from._internal_val());
    }
  }
}

void PFunction_Property::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PFunction.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PFunction_Property::CopyFrom(const PFunction_Property& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PFunction.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PFunction_Property::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PFunction_Property::InternalSwap(PFunction_Property* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  val_.Swap(&other->val_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PFunction_Property::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PFunction::_Internal {
 public:
  using HasBits = decltype(std::declval<PFunction>()._has_bits_);
  static void set_has_function_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::doris::PGenericType& output(const PFunction* msg);
  static void set_has_output(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_variadic(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::doris::PGenericType&
PFunction::_Internal::output(const PFunction* msg) {
  return *msg->output_;
}
PFunction::PFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena),
  properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PFunction)
}
PFunction::PFunction(const PFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      inputs_(from.inputs_),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_function_name()) {
    function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_function_name(), 
      GetArena());
  }
  if (from._internal_has_output()) {
    output_ = new ::doris::PGenericType(*from.output_);
  } else {
    output_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&variadic_) -
    reinterpret_cast<char*>(&type_)) + sizeof(variadic_));
  // @@protoc_insertion_point(copy_constructor:doris.PFunction)
}

void PFunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PFunction_types_2eproto.base);
  function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&output_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&variadic_) -
      reinterpret_cast<char*>(&output_)) + sizeof(variadic_));
}

PFunction::~PFunction() {
  // @@protoc_insertion_point(destructor:doris.PFunction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  function_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete output_;
}

void PFunction::ArenaDtor(void* object) {
  PFunction* _this = reinterpret_cast< PFunction* >(object);
  (void)_this;
}
void PFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PFunction& PFunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PFunction_types_2eproto.base);
  return *internal_default_instance();
}


void PFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  properties_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      function_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(output_ != nullptr);
      output_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&variadic_) -
        reinterpret_cast<char*>(&type_)) + sizeof(variadic_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string function_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_function_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doris.PFunction.function_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .doris.PGenericType inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .doris.PGenericType output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .doris.PFunction.FunctionType type = 4 [default = UDF];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::doris::PFunction_FunctionType_IsValid(val))) {
            _internal_set_type(static_cast<::doris::PFunction_FunctionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool variadic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_variadic(&has_bits);
          variadic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .doris.PFunction.Property properties = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string function_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_function_name().data(), static_cast<int>(this->_internal_function_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "doris.PFunction.function_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_function_name(), target);
  }

  // repeated .doris.PGenericType inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  // optional .doris.PGenericType output = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::output(this), target, stream);
  }

  // optional .doris.PFunction.FunctionType type = 4 [default = UDF];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // optional bool variadic = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_variadic(), target);
  }

  // repeated .doris.PFunction.Property properties = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_properties(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PFunction)
  return target;
}

size_t PFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PFunction)
  size_t total_size = 0;

  // required string function_name = 1;
  if (_internal_has_function_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .doris.PGenericType inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .doris.PFunction.Property properties = 6;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .doris.PGenericType output = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *output_);
    }

    // optional .doris.PFunction.FunctionType type = 4 [default = UDF];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional bool variadic = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const PFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PFunction)
    MergeFrom(*source);
  }
}

void PFunction::MergeFrom(const PFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  properties_.MergeFrom(from.properties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_function_name(from._internal_function_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_output()->::doris::PGenericType::MergeFrom(from._internal_output());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      variadic_ = from.variadic_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PFunction::CopyFrom(const PFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PFunction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(inputs_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(properties_)) return false;
  if (_internal_has_output()) {
    if (!output_->IsInitialized()) return false;
  }
  return true;
}

void PFunction::InternalSwap(PFunction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  inputs_.InternalSwap(&other->inputs_);
  properties_.InternalSwap(&other->properties_);
  function_name_.Swap(&other->function_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PFunction, variadic_)
      + sizeof(PFunction::variadic_)
      - PROTOBUF_FIELD_OFFSET(PFunction, output_)>(
          reinterpret_cast<char*>(&output_),
          reinterpret_cast<char*>(&other->output_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PFunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PFunctionContext::_Internal {
 public:
  using HasBits = decltype(std::declval<PFunctionContext>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PFunctionContext::PFunctionContext(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PFunctionContext)
}
PFunctionContext::PFunctionContext(const PFunctionContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_data_(from.args_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:doris.PFunctionContext)
}

void PFunctionContext::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PFunctionContext_types_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PFunctionContext::~PFunctionContext() {
  // @@protoc_insertion_point(destructor:doris.PFunctionContext)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PFunctionContext::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PFunctionContext::ArenaDtor(void* object) {
  PFunctionContext* _this = reinterpret_cast< PFunctionContext* >(object);
  (void)_this;
}
void PFunctionContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PFunctionContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PFunctionContext& PFunctionContext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PFunctionContext_types_2eproto.base);
  return *internal_default_instance();
}


void PFunctionContext::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PFunctionContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PFunctionContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .doris.PValues args_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PFunctionContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PFunctionContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // repeated .doris.PValues args_data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_args_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PFunctionContext)
  return target;
}

size_t PFunctionContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PFunctionContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .doris.PValues args_data = 2;
  total_size += 1UL * this->_internal_args_data_size();
  for (const auto& msg : this->args_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bytes data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PFunctionContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PFunctionContext)
  GOOGLE_DCHECK_NE(&from, this);
  const PFunctionContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PFunctionContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PFunctionContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PFunctionContext)
    MergeFrom(*source);
  }
}

void PFunctionContext::MergeFrom(const PFunctionContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PFunctionContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_data_.MergeFrom(from.args_data_);
  if (from._internal_has_data()) {
    _internal_set_data(from._internal_data());
  }
}

void PFunctionContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PFunctionContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PFunctionContext::CopyFrom(const PFunctionContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PFunctionContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PFunctionContext::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_data_)) return false;
  return true;
}

void PFunctionContext::InternalSwap(PFunctionContext* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_data_.InternalSwap(&other->args_data_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PFunctionContext::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PHandShakeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PHandShakeRequest>()._has_bits_);
  static void set_has_hello(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PHandShakeRequest::PHandShakeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PHandShakeRequest)
}
PHandShakeRequest::PHandShakeRequest(const PHandShakeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hello_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hello()) {
    hello_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hello(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:doris.PHandShakeRequest)
}

void PHandShakeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PHandShakeRequest_types_2eproto.base);
  hello_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PHandShakeRequest::~PHandShakeRequest() {
  // @@protoc_insertion_point(destructor:doris.PHandShakeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PHandShakeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hello_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PHandShakeRequest::ArenaDtor(void* object) {
  PHandShakeRequest* _this = reinterpret_cast< PHandShakeRequest* >(object);
  (void)_this;
}
void PHandShakeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PHandShakeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PHandShakeRequest& PHandShakeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PHandShakeRequest_types_2eproto.base);
  return *internal_default_instance();
}


void PHandShakeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PHandShakeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hello_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PHandShakeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string hello = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hello();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doris.PHandShakeRequest.hello");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PHandShakeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PHandShakeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hello = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hello().data(), static_cast<int>(this->_internal_hello().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "doris.PHandShakeRequest.hello");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hello(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PHandShakeRequest)
  return target;
}

size_t PHandShakeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PHandShakeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string hello = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hello());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PHandShakeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PHandShakeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PHandShakeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PHandShakeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PHandShakeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PHandShakeRequest)
    MergeFrom(*source);
  }
}

void PHandShakeRequest::MergeFrom(const PHandShakeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PHandShakeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_hello()) {
    _internal_set_hello(from._internal_hello());
  }
}

void PHandShakeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PHandShakeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PHandShakeRequest::CopyFrom(const PHandShakeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PHandShakeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PHandShakeRequest::IsInitialized() const {
  return true;
}

void PHandShakeRequest::InternalSwap(PHandShakeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hello_.Swap(&other->hello_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PHandShakeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PHandShakeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PHandShakeResponse>()._has_bits_);
  static const ::doris::PStatus& status(const PHandShakeResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hello(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::doris::PStatus&
PHandShakeResponse::_Internal::status(const PHandShakeResponse* msg) {
  return *msg->status_;
}
PHandShakeResponse::PHandShakeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PHandShakeResponse)
}
PHandShakeResponse::PHandShakeResponse(const PHandShakeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hello_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hello()) {
    hello_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hello(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::doris::PStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:doris.PHandShakeResponse)
}

void PHandShakeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PHandShakeResponse_types_2eproto.base);
  hello_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

PHandShakeResponse::~PHandShakeResponse() {
  // @@protoc_insertion_point(destructor:doris.PHandShakeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PHandShakeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hello_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void PHandShakeResponse::ArenaDtor(void* object) {
  PHandShakeResponse* _this = reinterpret_cast< PHandShakeResponse* >(object);
  (void)_this;
}
void PHandShakeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PHandShakeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PHandShakeResponse& PHandShakeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PHandShakeResponse_types_2eproto.base);
  return *internal_default_instance();
}


void PHandShakeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PHandShakeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hello_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PHandShakeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .doris.PStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hello = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hello();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doris.PHandShakeResponse.hello");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PHandShakeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PHandShakeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .doris.PStatus status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // optional string hello = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hello().data(), static_cast<int>(this->_internal_hello().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "doris.PHandShakeResponse.hello");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hello(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PHandShakeResponse)
  return target;
}

size_t PHandShakeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PHandShakeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string hello = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hello());
    }

    // optional .doris.PStatus status = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PHandShakeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PHandShakeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PHandShakeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PHandShakeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PHandShakeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PHandShakeResponse)
    MergeFrom(*source);
  }
}

void PHandShakeResponse::MergeFrom(const PHandShakeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PHandShakeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hello(from._internal_hello());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_status()->::doris::PStatus::MergeFrom(from._internal_status());
    }
  }
}

void PHandShakeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PHandShakeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PHandShakeResponse::CopyFrom(const PHandShakeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PHandShakeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PHandShakeResponse::IsInitialized() const {
  if (_internal_has_status()) {
    if (!status_->IsInitialized()) return false;
  }
  return true;
}

void PHandShakeResponse::InternalSwap(PHandShakeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hello_.Swap(&other->hello_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PHandShakeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace doris
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::doris::PStatus* Arena::CreateMaybeMessage< ::doris::PStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PScalarType* Arena::CreateMaybeMessage< ::doris::PScalarType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PScalarType >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PStructField* Arena::CreateMaybeMessage< ::doris::PStructField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PStructField >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PTypeNode* Arena::CreateMaybeMessage< ::doris::PTypeNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PTypeNode >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PTypeDesc* Arena::CreateMaybeMessage< ::doris::PTypeDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PTypeDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PUniqueId* Arena::CreateMaybeMessage< ::doris::PUniqueId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PUniqueId >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PGenericType* Arena::CreateMaybeMessage< ::doris::PGenericType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PGenericType >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PList* Arena::CreateMaybeMessage< ::doris::PList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PList >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PMap* Arena::CreateMaybeMessage< ::doris::PMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PMap >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PField* Arena::CreateMaybeMessage< ::doris::PField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PField >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PStruct* Arena::CreateMaybeMessage< ::doris::PStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PDecimal* Arena::CreateMaybeMessage< ::doris::PDecimal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PDecimal >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PDateTime* Arena::CreateMaybeMessage< ::doris::PDateTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PDateTime >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PValue* Arena::CreateMaybeMessage< ::doris::PValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PValue >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PValues* Arena::CreateMaybeMessage< ::doris::PValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PValues >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PFunction_Property* Arena::CreateMaybeMessage< ::doris::PFunction_Property >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PFunction_Property >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PFunction* Arena::CreateMaybeMessage< ::doris::PFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PFunctionContext* Arena::CreateMaybeMessage< ::doris::PFunctionContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PFunctionContext >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PHandShakeRequest* Arena::CreateMaybeMessage< ::doris::PHandShakeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PHandShakeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PHandShakeResponse* Arena::CreateMaybeMessage< ::doris::PHandShakeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PHandShakeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
