// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: function_service.proto

#include "function_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PFunction_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PFunctionContext_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_function_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PRequestContext_function_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PStatus_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PValues_types_2eproto;
namespace doris {
class PRequestContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PRequestContext> _instance;
} _PRequestContext_default_instance_;
class PFunctionCallRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PFunctionCallRequest> _instance;
} _PFunctionCallRequest_default_instance_;
class PFunctionCallResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PFunctionCallResponse> _instance;
} _PFunctionCallResponse_default_instance_;
class PCheckFunctionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PCheckFunctionRequest> _instance;
} _PCheckFunctionRequest_default_instance_;
class PCheckFunctionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PCheckFunctionResponse> _instance;
} _PCheckFunctionResponse_default_instance_;
}  // namespace doris
static void InitDefaultsscc_info_PCheckFunctionRequest_function_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PCheckFunctionRequest_default_instance_;
    new (ptr) ::doris::PCheckFunctionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PCheckFunctionRequest_function_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PCheckFunctionRequest_function_5fservice_2eproto}, {
      &scc_info_PFunction_types_2eproto.base,}};

static void InitDefaultsscc_info_PCheckFunctionResponse_function_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PCheckFunctionResponse_default_instance_;
    new (ptr) ::doris::PCheckFunctionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PCheckFunctionResponse_function_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PCheckFunctionResponse_function_5fservice_2eproto}, {
      &scc_info_PStatus_types_2eproto.base,}};

static void InitDefaultsscc_info_PFunctionCallRequest_function_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PFunctionCallRequest_default_instance_;
    new (ptr) ::doris::PFunctionCallRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PFunctionCallRequest_function_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PFunctionCallRequest_function_5fservice_2eproto}, {
      &scc_info_PValues_types_2eproto.base,
      &scc_info_PRequestContext_function_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_PFunctionCallResponse_function_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PFunctionCallResponse_default_instance_;
    new (ptr) ::doris::PFunctionCallResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PFunctionCallResponse_function_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PFunctionCallResponse_function_5fservice_2eproto}, {
      &scc_info_PValues_types_2eproto.base,
      &scc_info_PStatus_types_2eproto.base,
      &scc_info_PRequestContext_function_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_PRequestContext_function_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::doris::_PRequestContext_default_instance_;
    new (ptr) ::doris::PRequestContext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PRequestContext_function_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PRequestContext_function_5fservice_2eproto}, {
      &scc_info_PFunctionContext_types_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_function_5fservice_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_function_5fservice_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_function_5fservice_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_function_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::doris::PRequestContext, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PRequestContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PRequestContext, id_),
  PROTOBUF_FIELD_OFFSET(::doris::PRequestContext, function_context_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::doris::PFunctionCallRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PFunctionCallRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PFunctionCallRequest, function_name_),
  PROTOBUF_FIELD_OFFSET(::doris::PFunctionCallRequest, args_),
  PROTOBUF_FIELD_OFFSET(::doris::PFunctionCallRequest, context_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::doris::PFunctionCallResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PFunctionCallResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PFunctionCallResponse, result_),
  PROTOBUF_FIELD_OFFSET(::doris::PFunctionCallResponse, status_),
  PROTOBUF_FIELD_OFFSET(::doris::PFunctionCallResponse, context_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::doris::PCheckFunctionRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PCheckFunctionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PCheckFunctionRequest, function_),
  PROTOBUF_FIELD_OFFSET(::doris::PCheckFunctionRequest, match_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::doris::PCheckFunctionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::doris::PCheckFunctionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::doris::PCheckFunctionResponse, status_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::doris::PRequestContext)},
  { 9, 17, sizeof(::doris::PFunctionCallRequest)},
  { 20, 28, sizeof(::doris::PFunctionCallResponse)},
  { 31, 38, sizeof(::doris::PCheckFunctionRequest)},
  { 40, 46, sizeof(::doris::PCheckFunctionResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PRequestContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PFunctionCallRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PFunctionCallResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PCheckFunctionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::doris::_PCheckFunctionResponse_default_instance_),
};

const char descriptor_table_protodef_function_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026function_service.proto\022\005doris\032\013types.p"
  "roto\"P\n\017PRequestContext\022\n\n\002id\030\001 \001(\t\0221\n\020f"
  "unction_context\030\002 \001(\0132\027.doris.PFunctionC"
  "ontext\"t\n\024PFunctionCallRequest\022\025\n\rfuncti"
  "on_name\030\001 \001(\t\022\034\n\004args\030\002 \003(\0132\016.doris.PVal"
  "ues\022\'\n\007context\030\003 \001(\0132\026.doris.PRequestCon"
  "text\"\200\001\n\025PFunctionCallResponse\022\036\n\006result"
  "\030\001 \003(\0132\016.doris.PValues\022\036\n\006status\030\002 \001(\0132\016"
  ".doris.PStatus\022\'\n\007context\030\003 \001(\0132\026.doris."
  "PRequestContext\"\347\001\n\025PCheckFunctionReques"
  "t\022\"\n\010function\030\001 \001(\0132\020.doris.PFunction\022:\n"
  "\nmatch_type\030\002 \001(\0162&.doris.PCheckFunction"
  "Request.MatchType\"n\n\tMatchType\022\r\n\tIDENTI"
  "CAL\020\000\022\025\n\021INDISTINGUISHABLE\020\001\022\020\n\014SUPERTYP"
  "E_OF\020\002\022\032\n\026NONSTRICT_SUPERTYPE_OF\020\003\022\r\n\tMA"
  "TCHABLE\020\004\"8\n\026PCheckFunctionResponse\022\036\n\006s"
  "tatus\030\001 \001(\0132\016.doris.PStatus2\344\001\n\020PFunctio"
  "nService\022D\n\007fn_call\022\033.doris.PFunctionCal"
  "lRequest\032\034.doris.PFunctionCallResponse\022G"
  "\n\010check_fn\022\034.doris.PCheckFunctionRequest"
  "\032\035.doris.PCheckFunctionResponse\022A\n\nhand_"
  "shake\022\030.doris.PHandShakeRequest\032\031.doris."
  "PHandShakeResponseB\033\n\026org.apache.doris.p"
  "roto\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_function_5fservice_2eproto_deps[1] = {
  &::descriptor_table_types_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_function_5fservice_2eproto_sccs[5] = {
  &scc_info_PCheckFunctionRequest_function_5fservice_2eproto.base,
  &scc_info_PCheckFunctionResponse_function_5fservice_2eproto.base,
  &scc_info_PFunctionCallRequest_function_5fservice_2eproto.base,
  &scc_info_PFunctionCallResponse_function_5fservice_2eproto.base,
  &scc_info_PRequestContext_function_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_function_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_function_5fservice_2eproto = {
  false, false, descriptor_table_protodef_function_5fservice_2eproto, "function_service.proto", 927,
  &descriptor_table_function_5fservice_2eproto_once, descriptor_table_function_5fservice_2eproto_sccs, descriptor_table_function_5fservice_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_function_5fservice_2eproto::offsets,
  file_level_metadata_function_5fservice_2eproto, 5, file_level_enum_descriptors_function_5fservice_2eproto, file_level_service_descriptors_function_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_function_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_function_5fservice_2eproto)), true);
namespace doris {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PCheckFunctionRequest_MatchType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_function_5fservice_2eproto);
  return file_level_enum_descriptors_function_5fservice_2eproto[0];
}
bool PCheckFunctionRequest_MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PCheckFunctionRequest_MatchType PCheckFunctionRequest::IDENTICAL;
constexpr PCheckFunctionRequest_MatchType PCheckFunctionRequest::INDISTINGUISHABLE;
constexpr PCheckFunctionRequest_MatchType PCheckFunctionRequest::SUPERTYPE_OF;
constexpr PCheckFunctionRequest_MatchType PCheckFunctionRequest::NONSTRICT_SUPERTYPE_OF;
constexpr PCheckFunctionRequest_MatchType PCheckFunctionRequest::MATCHABLE;
constexpr PCheckFunctionRequest_MatchType PCheckFunctionRequest::MatchType_MIN;
constexpr PCheckFunctionRequest_MatchType PCheckFunctionRequest::MatchType_MAX;
constexpr int PCheckFunctionRequest::MatchType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class PRequestContext::_Internal {
 public:
  using HasBits = decltype(std::declval<PRequestContext>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::doris::PFunctionContext& function_context(const PRequestContext* msg);
  static void set_has_function_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::doris::PFunctionContext&
PRequestContext::_Internal::function_context(const PRequestContext* msg) {
  return *msg->function_context_;
}
void PRequestContext::clear_function_context() {
  if (function_context_ != nullptr) function_context_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
PRequestContext::PRequestContext(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PRequestContext)
}
PRequestContext::PRequestContext(const PRequestContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  if (from._internal_has_function_context()) {
    function_context_ = new ::doris::PFunctionContext(*from.function_context_);
  } else {
    function_context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:doris.PRequestContext)
}

void PRequestContext::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PRequestContext_function_5fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_context_ = nullptr;
}

PRequestContext::~PRequestContext() {
  // @@protoc_insertion_point(destructor:doris.PRequestContext)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PRequestContext::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete function_context_;
}

void PRequestContext::ArenaDtor(void* object) {
  PRequestContext* _this = reinterpret_cast< PRequestContext* >(object);
  (void)_this;
}
void PRequestContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PRequestContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PRequestContext& PRequestContext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PRequestContext_function_5fservice_2eproto.base);
  return *internal_default_instance();
}


void PRequestContext::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PRequestContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(function_context_ != nullptr);
      function_context_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PRequestContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doris.PRequestContext.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .doris.PFunctionContext function_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_function_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PRequestContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PRequestContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "doris.PRequestContext.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional .doris.PFunctionContext function_context = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::function_context(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PRequestContext)
  return target;
}

size_t PRequestContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PRequestContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .doris.PFunctionContext function_context = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_context_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PRequestContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PRequestContext)
  GOOGLE_DCHECK_NE(&from, this);
  const PRequestContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PRequestContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PRequestContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PRequestContext)
    MergeFrom(*source);
  }
}

void PRequestContext::MergeFrom(const PRequestContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PRequestContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_function_context()->::doris::PFunctionContext::MergeFrom(from._internal_function_context());
    }
  }
}

void PRequestContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PRequestContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRequestContext::CopyFrom(const PRequestContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PRequestContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRequestContext::IsInitialized() const {
  if (_internal_has_function_context()) {
    if (!function_context_->IsInitialized()) return false;
  }
  return true;
}

void PRequestContext::InternalSwap(PRequestContext* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(function_context_, other->function_context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PRequestContext::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PFunctionCallRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PFunctionCallRequest>()._has_bits_);
  static void set_has_function_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::doris::PRequestContext& context(const PFunctionCallRequest* msg);
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::doris::PRequestContext&
PFunctionCallRequest::_Internal::context(const PFunctionCallRequest* msg) {
  return *msg->context_;
}
void PFunctionCallRequest::clear_args() {
  args_.Clear();
}
PFunctionCallRequest::PFunctionCallRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PFunctionCallRequest)
}
PFunctionCallRequest::PFunctionCallRequest(const PFunctionCallRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_function_name()) {
    function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_function_name(), 
      GetArena());
  }
  if (from._internal_has_context()) {
    context_ = new ::doris::PRequestContext(*from.context_);
  } else {
    context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:doris.PFunctionCallRequest)
}

void PFunctionCallRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PFunctionCallRequest_function_5fservice_2eproto.base);
  function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  context_ = nullptr;
}

PFunctionCallRequest::~PFunctionCallRequest() {
  // @@protoc_insertion_point(destructor:doris.PFunctionCallRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PFunctionCallRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  function_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete context_;
}

void PFunctionCallRequest::ArenaDtor(void* object) {
  PFunctionCallRequest* _this = reinterpret_cast< PFunctionCallRequest* >(object);
  (void)_this;
}
void PFunctionCallRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PFunctionCallRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PFunctionCallRequest& PFunctionCallRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PFunctionCallRequest_function_5fservice_2eproto.base);
  return *internal_default_instance();
}


void PFunctionCallRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PFunctionCallRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      function_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(context_ != nullptr);
      context_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PFunctionCallRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string function_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_function_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "doris.PFunctionCallRequest.function_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .doris.PValues args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .doris.PRequestContext context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PFunctionCallRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PFunctionCallRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string function_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_function_name().data(), static_cast<int>(this->_internal_function_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "doris.PFunctionCallRequest.function_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_function_name(), target);
  }

  // repeated .doris.PValues args = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_args(i), target, stream);
  }

  // optional .doris.PRequestContext context = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::context(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PFunctionCallRequest)
  return target;
}

size_t PFunctionCallRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PFunctionCallRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .doris.PValues args = 2;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string function_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_function_name());
    }

    // optional .doris.PRequestContext context = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *context_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PFunctionCallRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PFunctionCallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PFunctionCallRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PFunctionCallRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PFunctionCallRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PFunctionCallRequest)
    MergeFrom(*source);
  }
}

void PFunctionCallRequest::MergeFrom(const PFunctionCallRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PFunctionCallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_function_name(from._internal_function_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_context()->::doris::PRequestContext::MergeFrom(from._internal_context());
    }
  }
}

void PFunctionCallRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PFunctionCallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PFunctionCallRequest::CopyFrom(const PFunctionCallRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PFunctionCallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PFunctionCallRequest::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_)) return false;
  if (_internal_has_context()) {
    if (!context_->IsInitialized()) return false;
  }
  return true;
}

void PFunctionCallRequest::InternalSwap(PFunctionCallRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_.InternalSwap(&other->args_);
  function_name_.Swap(&other->function_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(context_, other->context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PFunctionCallRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PFunctionCallResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PFunctionCallResponse>()._has_bits_);
  static const ::doris::PStatus& status(const PFunctionCallResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::doris::PRequestContext& context(const PFunctionCallResponse* msg);
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::doris::PStatus&
PFunctionCallResponse::_Internal::status(const PFunctionCallResponse* msg) {
  return *msg->status_;
}
const ::doris::PRequestContext&
PFunctionCallResponse::_Internal::context(const PFunctionCallResponse* msg) {
  return *msg->context_;
}
void PFunctionCallResponse::clear_result() {
  result_.Clear();
}
void PFunctionCallResponse::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PFunctionCallResponse::PFunctionCallResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PFunctionCallResponse)
}
PFunctionCallResponse::PFunctionCallResponse(const PFunctionCallResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      result_(from.result_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::doris::PStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_context()) {
    context_ = new ::doris::PRequestContext(*from.context_);
  } else {
    context_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:doris.PFunctionCallResponse)
}

void PFunctionCallResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PFunctionCallResponse_function_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&context_) -
      reinterpret_cast<char*>(&status_)) + sizeof(context_));
}

PFunctionCallResponse::~PFunctionCallResponse() {
  // @@protoc_insertion_point(destructor:doris.PFunctionCallResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PFunctionCallResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete context_;
}

void PFunctionCallResponse::ArenaDtor(void* object) {
  PFunctionCallResponse* _this = reinterpret_cast< PFunctionCallResponse* >(object);
  (void)_this;
}
void PFunctionCallResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PFunctionCallResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PFunctionCallResponse& PFunctionCallResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PFunctionCallResponse_function_5fservice_2eproto.base);
  return *internal_default_instance();
}


void PFunctionCallResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PFunctionCallResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(context_ != nullptr);
      context_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PFunctionCallResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .doris.PValues result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .doris.PStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .doris.PRequestContext context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_context(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PFunctionCallResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PFunctionCallResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .doris.PValues result = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_result_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_result(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .doris.PStatus status = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  // optional .doris.PRequestContext context = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::context(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PFunctionCallResponse)
  return target;
}

size_t PFunctionCallResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PFunctionCallResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .doris.PValues result = 1;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .doris.PStatus status = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .doris.PRequestContext context = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *context_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PFunctionCallResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PFunctionCallResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PFunctionCallResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PFunctionCallResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PFunctionCallResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PFunctionCallResponse)
    MergeFrom(*source);
  }
}

void PFunctionCallResponse::MergeFrom(const PFunctionCallResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PFunctionCallResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_status()->::doris::PStatus::MergeFrom(from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_context()->::doris::PRequestContext::MergeFrom(from._internal_context());
    }
  }
}

void PFunctionCallResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PFunctionCallResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PFunctionCallResponse::CopyFrom(const PFunctionCallResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PFunctionCallResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PFunctionCallResponse::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(result_)) return false;
  if (_internal_has_status()) {
    if (!status_->IsInitialized()) return false;
  }
  if (_internal_has_context()) {
    if (!context_->IsInitialized()) return false;
  }
  return true;
}

void PFunctionCallResponse::InternalSwap(PFunctionCallResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  result_.InternalSwap(&other->result_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PFunctionCallResponse, context_)
      + sizeof(PFunctionCallResponse::context_)
      - PROTOBUF_FIELD_OFFSET(PFunctionCallResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PFunctionCallResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PCheckFunctionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PCheckFunctionRequest>()._has_bits_);
  static const ::doris::PFunction& function(const PCheckFunctionRequest* msg);
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::doris::PFunction&
PCheckFunctionRequest::_Internal::function(const PCheckFunctionRequest* msg) {
  return *msg->function_;
}
void PCheckFunctionRequest::clear_function() {
  if (function_ != nullptr) function_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PCheckFunctionRequest::PCheckFunctionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PCheckFunctionRequest)
}
PCheckFunctionRequest::PCheckFunctionRequest(const PCheckFunctionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_function()) {
    function_ = new ::doris::PFunction(*from.function_);
  } else {
    function_ = nullptr;
  }
  match_type_ = from.match_type_;
  // @@protoc_insertion_point(copy_constructor:doris.PCheckFunctionRequest)
}

void PCheckFunctionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PCheckFunctionRequest_function_5fservice_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&function_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&match_type_) -
      reinterpret_cast<char*>(&function_)) + sizeof(match_type_));
}

PCheckFunctionRequest::~PCheckFunctionRequest() {
  // @@protoc_insertion_point(destructor:doris.PCheckFunctionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PCheckFunctionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete function_;
}

void PCheckFunctionRequest::ArenaDtor(void* object) {
  PCheckFunctionRequest* _this = reinterpret_cast< PCheckFunctionRequest* >(object);
  (void)_this;
}
void PCheckFunctionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PCheckFunctionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PCheckFunctionRequest& PCheckFunctionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PCheckFunctionRequest_function_5fservice_2eproto.base);
  return *internal_default_instance();
}


void PCheckFunctionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PCheckFunctionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(function_ != nullptr);
    function_->Clear();
  }
  match_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCheckFunctionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .doris.PFunction function = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .doris.PCheckFunctionRequest.MatchType match_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::doris::PCheckFunctionRequest_MatchType_IsValid(val))) {
            _internal_set_match_type(static_cast<::doris::PCheckFunctionRequest_MatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PCheckFunctionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PCheckFunctionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .doris.PFunction function = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::function(this), target, stream);
  }

  // optional .doris.PCheckFunctionRequest.MatchType match_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_match_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PCheckFunctionRequest)
  return target;
}

size_t PCheckFunctionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PCheckFunctionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .doris.PFunction function = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_);
    }

    // optional .doris.PCheckFunctionRequest.MatchType match_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PCheckFunctionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PCheckFunctionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PCheckFunctionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PCheckFunctionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PCheckFunctionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PCheckFunctionRequest)
    MergeFrom(*source);
  }
}

void PCheckFunctionRequest::MergeFrom(const PCheckFunctionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PCheckFunctionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_function()->::doris::PFunction::MergeFrom(from._internal_function());
    }
    if (cached_has_bits & 0x00000002u) {
      match_type_ = from.match_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PCheckFunctionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PCheckFunctionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PCheckFunctionRequest::CopyFrom(const PCheckFunctionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PCheckFunctionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCheckFunctionRequest::IsInitialized() const {
  if (_internal_has_function()) {
    if (!function_->IsInitialized()) return false;
  }
  return true;
}

void PCheckFunctionRequest::InternalSwap(PCheckFunctionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PCheckFunctionRequest, match_type_)
      + sizeof(PCheckFunctionRequest::match_type_)
      - PROTOBUF_FIELD_OFFSET(PCheckFunctionRequest, function_)>(
          reinterpret_cast<char*>(&function_),
          reinterpret_cast<char*>(&other->function_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PCheckFunctionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PCheckFunctionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PCheckFunctionResponse>()._has_bits_);
  static const ::doris::PStatus& status(const PCheckFunctionResponse* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::doris::PStatus&
PCheckFunctionResponse::_Internal::status(const PCheckFunctionResponse* msg) {
  return *msg->status_;
}
void PCheckFunctionResponse::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PCheckFunctionResponse::PCheckFunctionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:doris.PCheckFunctionResponse)
}
PCheckFunctionResponse::PCheckFunctionResponse(const PCheckFunctionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::doris::PStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:doris.PCheckFunctionResponse)
}

void PCheckFunctionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PCheckFunctionResponse_function_5fservice_2eproto.base);
  status_ = nullptr;
}

PCheckFunctionResponse::~PCheckFunctionResponse() {
  // @@protoc_insertion_point(destructor:doris.PCheckFunctionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PCheckFunctionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void PCheckFunctionResponse::ArenaDtor(void* object) {
  PCheckFunctionResponse* _this = reinterpret_cast< PCheckFunctionResponse* >(object);
  (void)_this;
}
void PCheckFunctionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PCheckFunctionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PCheckFunctionResponse& PCheckFunctionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PCheckFunctionResponse_function_5fservice_2eproto.base);
  return *internal_default_instance();
}


void PCheckFunctionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PCheckFunctionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCheckFunctionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .doris.PStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PCheckFunctionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:doris.PCheckFunctionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .doris.PStatus status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PCheckFunctionResponse)
  return target;
}

size_t PCheckFunctionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PCheckFunctionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .doris.PStatus status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PCheckFunctionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PCheckFunctionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PCheckFunctionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PCheckFunctionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PCheckFunctionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PCheckFunctionResponse)
    MergeFrom(*source);
  }
}

void PCheckFunctionResponse::MergeFrom(const PCheckFunctionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PCheckFunctionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::doris::PStatus::MergeFrom(from._internal_status());
  }
}

void PCheckFunctionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PCheckFunctionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PCheckFunctionResponse::CopyFrom(const PCheckFunctionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PCheckFunctionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCheckFunctionResponse::IsInitialized() const {
  if (_internal_has_status()) {
    if (!status_->IsInitialized()) return false;
  }
  return true;
}

void PCheckFunctionResponse::InternalSwap(PCheckFunctionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PCheckFunctionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PFunctionService::~PFunctionService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* PFunctionService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_function_5fservice_2eproto);
  return file_level_service_descriptors_function_5fservice_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* PFunctionService::GetDescriptor() {
  return descriptor();
}

void PFunctionService::fn_call(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::doris::PFunctionCallRequest*,
                         ::doris::PFunctionCallResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method fn_call() not implemented.");
  done->Run();
}

void PFunctionService::check_fn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::doris::PCheckFunctionRequest*,
                         ::doris::PCheckFunctionResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method check_fn() not implemented.");
  done->Run();
}

void PFunctionService::hand_shake(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::doris::PHandShakeRequest*,
                         ::doris::PHandShakeResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method hand_shake() not implemented.");
  done->Run();
}

void PFunctionService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_function_5fservice_2eproto[0]);
  switch(method->index()) {
    case 0:
      fn_call(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::doris::PFunctionCallRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::doris::PFunctionCallResponse*>(
                 response),
             done);
      break;
    case 1:
      check_fn(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::doris::PCheckFunctionRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::doris::PCheckFunctionResponse*>(
                 response),
             done);
      break;
    case 2:
      hand_shake(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::doris::PHandShakeRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::doris::PHandShakeResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& PFunctionService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::doris::PFunctionCallRequest::default_instance();
    case 1:
      return ::doris::PCheckFunctionRequest::default_instance();
    case 2:
      return ::doris::PHandShakeRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& PFunctionService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::doris::PFunctionCallResponse::default_instance();
    case 1:
      return ::doris::PCheckFunctionResponse::default_instance();
    case 2:
      return ::doris::PHandShakeResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

PFunctionService_Stub::PFunctionService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PFunctionService_Stub::PFunctionService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
PFunctionService_Stub::~PFunctionService_Stub() {
  if (owns_channel_) delete channel_;
}

void PFunctionService_Stub::fn_call(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::doris::PFunctionCallRequest* request,
                              ::doris::PFunctionCallResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void PFunctionService_Stub::check_fn(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::doris::PCheckFunctionRequest* request,
                              ::doris::PCheckFunctionResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void PFunctionService_Stub::hand_shake(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::doris::PHandShakeRequest* request,
                              ::doris::PHandShakeResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace doris
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::doris::PRequestContext* Arena::CreateMaybeMessage< ::doris::PRequestContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PRequestContext >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PFunctionCallRequest* Arena::CreateMaybeMessage< ::doris::PFunctionCallRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PFunctionCallRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PFunctionCallResponse* Arena::CreateMaybeMessage< ::doris::PFunctionCallResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PFunctionCallResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PCheckFunctionRequest* Arena::CreateMaybeMessage< ::doris::PCheckFunctionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PCheckFunctionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::doris::PCheckFunctionResponse* Arena::CreateMaybeMessage< ::doris::PCheckFunctionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::doris::PCheckFunctionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
