/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.parquet.format;


/**
 * DEPRECATED: Common types used by frameworks(e.g. hive, pig) using parquet.
 * ConvertedType is superseded by LogicalType.  This enum should not be extended.
 * 
 * See LogicalTypes.md for conversion between ConvertedType and LogicalType.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-06-20")
public enum ConvertedType implements org.apache.thrift.TEnum {
  /**
   * a BYTE_ARRAY actually contains UTF8 encoded chars
   */
  UTF8(0),
  /**
   * a map is converted as an optional field containing a repeated key/value pair
   */
  MAP(1),
  /**
   * a key/value pair is converted into a group of two fields
   */
  MAP_KEY_VALUE(2),
  /**
   * a list is converted into an optional field containing a repeated field for its
   * values
   */
  LIST(3),
  /**
   * an enum is converted into a binary field
   */
  ENUM(4),
  /**
   * A decimal value.
   * 
   * This may be used to annotate binary or fixed primitive types. The
   * underlying byte array stores the unscaled value encoded as two's
   * complement using big-endian byte order (the most significant byte is the
   * zeroth element). The value of the decimal is the value * 10^{-scale}.
   * 
   * This must be accompanied by a (maximum) precision and a scale in the
   * SchemaElement. The precision specifies the number of digits in the decimal
   * and the scale stores the location of the decimal point. For example 1.23
   * would have precision 3 (3 total digits) and scale 2 (the decimal point is
   * 2 digits over).
   */
  DECIMAL(5),
  /**
   * A Date
   * 
   * Stored as days since Unix epoch, encoded as the INT32 physical type.
   * 
   */
  DATE(6),
  /**
   * A time
   * 
   * The total number of milliseconds since midnight.  The value is stored
   * as an INT32 physical type.
   */
  TIME_MILLIS(7),
  /**
   * A time.
   * 
   * The total number of microseconds since midnight.  The value is stored as
   * an INT64 physical type.
   */
  TIME_MICROS(8),
  /**
   * A date/time combination
   * 
   * Date and time recorded as milliseconds since the Unix epoch.  Recorded as
   * a physical type of INT64.
   */
  TIMESTAMP_MILLIS(9),
  /**
   * A date/time combination
   * 
   * Date and time recorded as microseconds since the Unix epoch.  The value is
   * stored as an INT64 physical type.
   */
  TIMESTAMP_MICROS(10),
  /**
   * An unsigned integer value.
   * 
   * The number describes the maximum number of meaningful data bits in
   * the stored value. 8, 16 and 32 bit values are stored using the
   * INT32 physical type.  64 bit values are stored using the INT64
   * physical type.
   * 
   */
  UINT_8(11),
  UINT_16(12),
  UINT_32(13),
  UINT_64(14),
  /**
   * A signed integer value.
   * 
   * The number describes the maximum number of meaningful data bits in
   * the stored value. 8, 16 and 32 bit values are stored using the
   * INT32 physical type.  64 bit values are stored using the INT64
   * physical type.
   * 
   */
  INT_8(15),
  INT_16(16),
  INT_32(17),
  INT_64(18),
  /**
   * An embedded JSON document
   * 
   * A JSON document embedded within a single UTF8 column.
   */
  JSON(19),
  /**
   * An embedded BSON document
   * 
   * A BSON document embedded within a single BINARY column.
   */
  BSON(20),
  /**
   * An interval of time
   * 
   * This type annotates data stored as a FIXED_LEN_BYTE_ARRAY of length 12
   * This data is composed of three separate little endian unsigned
   * integers.  Each stores a component of a duration of time.  The first
   * integer identifies the number of months associated with the duration,
   * the second identifies the number of days associated with the duration
   * and the third identifies the number of milliseconds associated with
   * the provided duration.  This duration of time is independent of any
   * particular timezone or date.
   */
  INTERVAL(21);

  private final int value;

  private ConvertedType(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  @Override
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  @org.apache.thrift.annotation.Nullable
  public static ConvertedType findByValue(int value) { 
    switch (value) {
      case 0:
        return UTF8;
      case 1:
        return MAP;
      case 2:
        return MAP_KEY_VALUE;
      case 3:
        return LIST;
      case 4:
        return ENUM;
      case 5:
        return DECIMAL;
      case 6:
        return DATE;
      case 7:
        return TIME_MILLIS;
      case 8:
        return TIME_MICROS;
      case 9:
        return TIMESTAMP_MILLIS;
      case 10:
        return TIMESTAMP_MICROS;
      case 11:
        return UINT_8;
      case 12:
        return UINT_16;
      case 13:
        return UINT_32;
      case 14:
        return UINT_64;
      case 15:
        return INT_8;
      case 16:
        return INT_16;
      case 17:
        return INT_32;
      case 18:
        return INT_64;
      case 19:
        return JSON;
      case 20:
        return BSON;
      case 21:
        return INTERVAL;
      default:
        return null;
    }
  }
}
