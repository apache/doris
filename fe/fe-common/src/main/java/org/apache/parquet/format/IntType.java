/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.parquet.format;

/**
 * Integer logical type annotation
 * 
 * bitWidth must be 8, 16, 32, or 64.
 * 
 * Allowed for physical types: INT32, INT64
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-07-19")
public class IntType implements org.apache.thrift.TBase<IntType, IntType._Fields>, java.io.Serializable, Cloneable, Comparable<IntType> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IntType");

  private static final org.apache.thrift.protocol.TField BIT_WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("bitWidth", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField IS_SIGNED_FIELD_DESC = new org.apache.thrift.protocol.TField("isSigned", org.apache.thrift.protocol.TType.BOOL, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IntTypeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IntTypeTupleSchemeFactory();

  public byte bitWidth; // required
  public boolean isSigned; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BIT_WIDTH((short)1, "bitWidth"),
    IS_SIGNED((short)2, "isSigned");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BIT_WIDTH
          return BIT_WIDTH;
        case 2: // IS_SIGNED
          return IS_SIGNED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BITWIDTH_ISSET_ID = 0;
  private static final int __ISSIGNED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BIT_WIDTH, new org.apache.thrift.meta_data.FieldMetaData("bitWidth", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.IS_SIGNED, new org.apache.thrift.meta_data.FieldMetaData("isSigned", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IntType.class, metaDataMap);
  }

  public IntType() {
  }

  public IntType(
    byte bitWidth,
    boolean isSigned)
  {
    this();
    this.bitWidth = bitWidth;
    setBitWidthIsSet(true);
    this.isSigned = isSigned;
    setIsSignedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IntType(IntType other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bitWidth = other.bitWidth;
    this.isSigned = other.isSigned;
  }

  @Override
  public IntType deepCopy() {
    return new IntType(this);
  }

  @Override
  public void clear() {
    setBitWidthIsSet(false);
    this.bitWidth = 0;
    setIsSignedIsSet(false);
    this.isSigned = false;
  }

  public byte getBitWidth() {
    return this.bitWidth;
  }

  public IntType setBitWidth(byte bitWidth) {
    this.bitWidth = bitWidth;
    setBitWidthIsSet(true);
    return this;
  }

  public void unsetBitWidth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BITWIDTH_ISSET_ID);
  }

  /** Returns true if field bitWidth is set (has been assigned a value) and false otherwise */
  public boolean isSetBitWidth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BITWIDTH_ISSET_ID);
  }

  public void setBitWidthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BITWIDTH_ISSET_ID, value);
  }

  public boolean isIsSigned() {
    return this.isSigned;
  }

  public IntType setIsSigned(boolean isSigned) {
    this.isSigned = isSigned;
    setIsSignedIsSet(true);
    return this;
  }

  public void unsetIsSigned() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSIGNED_ISSET_ID);
  }

  /** Returns true if field isSigned is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSigned() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSIGNED_ISSET_ID);
  }

  public void setIsSignedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSIGNED_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case BIT_WIDTH:
      if (value == null) {
        unsetBitWidth();
      } else {
        setBitWidth((java.lang.Byte)value);
      }
      break;

    case IS_SIGNED:
      if (value == null) {
        unsetIsSigned();
      } else {
        setIsSigned((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BIT_WIDTH:
      return getBitWidth();

    case IS_SIGNED:
      return isIsSigned();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BIT_WIDTH:
      return isSetBitWidth();
    case IS_SIGNED:
      return isSetIsSigned();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof IntType)
      return this.equals((IntType)that);
    return false;
  }

  public boolean equals(IntType that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_bitWidth = true;
    boolean that_present_bitWidth = true;
    if (this_present_bitWidth || that_present_bitWidth) {
      if (!(this_present_bitWidth && that_present_bitWidth))
        return false;
      if (this.bitWidth != that.bitWidth)
        return false;
    }

    boolean this_present_isSigned = true;
    boolean that_present_isSigned = true;
    if (this_present_isSigned || that_present_isSigned) {
      if (!(this_present_isSigned && that_present_isSigned))
        return false;
      if (this.isSigned != that.isSigned)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + (int) (bitWidth);

    hashCode = hashCode * 8191 + ((isSigned) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(IntType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetBitWidth(), other.isSetBitWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBitWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bitWidth, other.bitWidth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsSigned(), other.isSetIsSigned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSigned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSigned, other.isSigned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("IntType(");
    boolean first = true;

    sb.append("bitWidth:");
    sb.append(this.bitWidth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSigned:");
    sb.append(this.isSigned);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'bitWidth' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isSigned' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IntTypeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public IntTypeStandardScheme getScheme() {
      return new IntTypeStandardScheme();
    }
  }

  private static class IntTypeStandardScheme extends org.apache.thrift.scheme.StandardScheme<IntType> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, IntType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BIT_WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.bitWidth = iprot.readByte();
              struct.setBitWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_SIGNED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSigned = iprot.readBool();
              struct.setIsSignedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBitWidth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'bitWidth' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsSigned()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isSigned' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, IntType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BIT_WIDTH_FIELD_DESC);
      oprot.writeByte(struct.bitWidth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SIGNED_FIELD_DESC);
      oprot.writeBool(struct.isSigned);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IntTypeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public IntTypeTupleScheme getScheme() {
      return new IntTypeTupleScheme();
    }
  }

  private static class IntTypeTupleScheme extends org.apache.thrift.scheme.TupleScheme<IntType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IntType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeByte(struct.bitWidth);
      oprot.writeBool(struct.isSigned);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IntType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.bitWidth = iprot.readByte();
      struct.setBitWidthIsSet(true);
      struct.isSigned = iprot.readBool();
      struct.setIsSignedIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

