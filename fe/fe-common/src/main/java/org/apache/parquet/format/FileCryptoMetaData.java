/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.parquet.format;

/**
 * Crypto metadata for files with encrypted footer *
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-08-29")
public class FileCryptoMetaData implements org.apache.thrift.TBase<FileCryptoMetaData, FileCryptoMetaData._Fields>, java.io.Serializable, Cloneable, Comparable<FileCryptoMetaData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileCryptoMetaData");

  private static final org.apache.thrift.protocol.TField ENCRYPTION_ALGORITHM_FIELD_DESC = new org.apache.thrift.protocol.TField("encryption_algorithm", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("key_metadata", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FileCryptoMetaDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FileCryptoMetaDataTupleSchemeFactory();

  /**
   * Encryption algorithm. This field is only used for files
   * with encrypted footer. Files with plaintext footer store algorithm id
   * inside footer (FileMetaData structure).
   */
  public @org.apache.thrift.annotation.Nullable EncryptionAlgorithm encryption_algorithm; // required
  /**
   * Retrieval metadata of key used for encryption of footer,
   * and (possibly) columns *
   */
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer key_metadata; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Encryption algorithm. This field is only used for files
     * with encrypted footer. Files with plaintext footer store algorithm id
     * inside footer (FileMetaData structure).
     */
    ENCRYPTION_ALGORITHM((short)1, "encryption_algorithm"),
    /**
     * Retrieval metadata of key used for encryption of footer,
     * and (possibly) columns *
     */
    KEY_METADATA((short)2, "key_metadata");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENCRYPTION_ALGORITHM
          return ENCRYPTION_ALGORITHM;
        case 2: // KEY_METADATA
          return KEY_METADATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.KEY_METADATA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENCRYPTION_ALGORITHM, new org.apache.thrift.meta_data.FieldMetaData("encryption_algorithm", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EncryptionAlgorithm.class)));
    tmpMap.put(_Fields.KEY_METADATA, new org.apache.thrift.meta_data.FieldMetaData("key_metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileCryptoMetaData.class, metaDataMap);
  }

  public FileCryptoMetaData() {
  }

  public FileCryptoMetaData(
    EncryptionAlgorithm encryption_algorithm)
  {
    this();
    this.encryption_algorithm = encryption_algorithm;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileCryptoMetaData(FileCryptoMetaData other) {
    if (other.isSetEncryptionAlgorithm()) {
      this.encryption_algorithm = new EncryptionAlgorithm(other.encryption_algorithm);
    }
    if (other.isSetKeyMetadata()) {
      this.key_metadata = org.apache.thrift.TBaseHelper.copyBinary(other.key_metadata);
    }
  }

  @Override
  public FileCryptoMetaData deepCopy() {
    return new FileCryptoMetaData(this);
  }

  @Override
  public void clear() {
    this.encryption_algorithm = null;
    this.key_metadata = null;
  }

  /**
   * Encryption algorithm. This field is only used for files
   * with encrypted footer. Files with plaintext footer store algorithm id
   * inside footer (FileMetaData structure).
   */
  @org.apache.thrift.annotation.Nullable
  public EncryptionAlgorithm getEncryptionAlgorithm() {
    return this.encryption_algorithm;
  }

  /**
   * Encryption algorithm. This field is only used for files
   * with encrypted footer. Files with plaintext footer store algorithm id
   * inside footer (FileMetaData structure).
   */
  public FileCryptoMetaData setEncryptionAlgorithm(@org.apache.thrift.annotation.Nullable EncryptionAlgorithm encryption_algorithm) {
    this.encryption_algorithm = encryption_algorithm;
    return this;
  }

  public void unsetEncryptionAlgorithm() {
    this.encryption_algorithm = null;
  }

  /** Returns true if field encryption_algorithm is set (has been assigned a value) and false otherwise */
  public boolean isSetEncryptionAlgorithm() {
    return this.encryption_algorithm != null;
  }

  public void setEncryptionAlgorithmIsSet(boolean value) {
    if (!value) {
      this.encryption_algorithm = null;
    }
  }

  /**
   * Retrieval metadata of key used for encryption of footer,
   * and (possibly) columns *
   */
  public byte[] getKeyMetadata() {
    setKeyMetadata(org.apache.thrift.TBaseHelper.rightSize(key_metadata));
    return key_metadata == null ? null : key_metadata.array();
  }

  public java.nio.ByteBuffer bufferForKeyMetadata() {
    return org.apache.thrift.TBaseHelper.copyBinary(key_metadata);
  }

  /**
   * Retrieval metadata of key used for encryption of footer,
   * and (possibly) columns *
   */
  public FileCryptoMetaData setKeyMetadata(byte[] key_metadata) {
    this.key_metadata = key_metadata == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(key_metadata.clone());
    return this;
  }

  public FileCryptoMetaData setKeyMetadata(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer key_metadata) {
    this.key_metadata = org.apache.thrift.TBaseHelper.copyBinary(key_metadata);
    return this;
  }

  public void unsetKeyMetadata() {
    this.key_metadata = null;
  }

  /** Returns true if field key_metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyMetadata() {
    return this.key_metadata != null;
  }

  public void setKeyMetadataIsSet(boolean value) {
    if (!value) {
      this.key_metadata = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ENCRYPTION_ALGORITHM:
      if (value == null) {
        unsetEncryptionAlgorithm();
      } else {
        setEncryptionAlgorithm((EncryptionAlgorithm)value);
      }
      break;

    case KEY_METADATA:
      if (value == null) {
        unsetKeyMetadata();
      } else {
        if (value instanceof byte[]) {
          setKeyMetadata((byte[])value);
        } else {
          setKeyMetadata((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ENCRYPTION_ALGORITHM:
      return getEncryptionAlgorithm();

    case KEY_METADATA:
      return getKeyMetadata();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ENCRYPTION_ALGORITHM:
      return isSetEncryptionAlgorithm();
    case KEY_METADATA:
      return isSetKeyMetadata();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof FileCryptoMetaData)
      return this.equals((FileCryptoMetaData)that);
    return false;
  }

  public boolean equals(FileCryptoMetaData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_encryption_algorithm = true && this.isSetEncryptionAlgorithm();
    boolean that_present_encryption_algorithm = true && that.isSetEncryptionAlgorithm();
    if (this_present_encryption_algorithm || that_present_encryption_algorithm) {
      if (!(this_present_encryption_algorithm && that_present_encryption_algorithm))
        return false;
      if (!this.encryption_algorithm.equals(that.encryption_algorithm))
        return false;
    }

    boolean this_present_key_metadata = true && this.isSetKeyMetadata();
    boolean that_present_key_metadata = true && that.isSetKeyMetadata();
    if (this_present_key_metadata || that_present_key_metadata) {
      if (!(this_present_key_metadata && that_present_key_metadata))
        return false;
      if (!this.key_metadata.equals(that.key_metadata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetEncryptionAlgorithm()) ? 131071 : 524287);
    if (isSetEncryptionAlgorithm())
      hashCode = hashCode * 8191 + encryption_algorithm.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyMetadata()) ? 131071 : 524287);
    if (isSetKeyMetadata())
      hashCode = hashCode * 8191 + key_metadata.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(FileCryptoMetaData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetEncryptionAlgorithm(), other.isSetEncryptionAlgorithm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncryptionAlgorithm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryption_algorithm, other.encryption_algorithm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKeyMetadata(), other.isSetKeyMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_metadata, other.key_metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FileCryptoMetaData(");
    boolean first = true;

    sb.append("encryption_algorithm:");
    if (this.encryption_algorithm == null) {
      sb.append("null");
    } else {
      sb.append(this.encryption_algorithm);
    }
    first = false;
    if (isSetKeyMetadata()) {
      if (!first) sb.append(", ");
      sb.append("key_metadata:");
      if (this.key_metadata == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.key_metadata, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (encryption_algorithm == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'encryption_algorithm' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileCryptoMetaDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public FileCryptoMetaDataStandardScheme getScheme() {
      return new FileCryptoMetaDataStandardScheme();
    }
  }

  private static class FileCryptoMetaDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<FileCryptoMetaData> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, FileCryptoMetaData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENCRYPTION_ALGORITHM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.encryption_algorithm = new EncryptionAlgorithm();
              struct.encryption_algorithm.read(iprot);
              struct.setEncryptionAlgorithmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key_metadata = iprot.readBinary();
              struct.setKeyMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, FileCryptoMetaData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.encryption_algorithm != null) {
        oprot.writeFieldBegin(ENCRYPTION_ALGORITHM_FIELD_DESC);
        struct.encryption_algorithm.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.key_metadata != null) {
        if (struct.isSetKeyMetadata()) {
          oprot.writeFieldBegin(KEY_METADATA_FIELD_DESC);
          oprot.writeBinary(struct.key_metadata);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileCryptoMetaDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public FileCryptoMetaDataTupleScheme getScheme() {
      return new FileCryptoMetaDataTupleScheme();
    }
  }

  private static class FileCryptoMetaDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<FileCryptoMetaData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileCryptoMetaData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.encryption_algorithm.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetKeyMetadata()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetKeyMetadata()) {
        oprot.writeBinary(struct.key_metadata);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileCryptoMetaData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.encryption_algorithm = new EncryptionAlgorithm();
      struct.encryption_algorithm.read(iprot);
      struct.setEncryptionAlgorithmIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.key_metadata = iprot.readBinary();
        struct.setKeyMetadataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

