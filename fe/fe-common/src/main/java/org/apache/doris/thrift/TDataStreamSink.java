/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-08-29")
public class TDataStreamSink implements org.apache.thrift.TBase<TDataStreamSink, TDataStreamSink._Fields>, java.io.Serializable, Cloneable, Comparable<TDataStreamSink> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDataStreamSink");

  private static final org.apache.thrift.protocol.TField DEST_NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dest_node_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OUTPUT_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("output_partition", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField IGNORE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("ignore_not_found", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField OUTPUT_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("output_exprs", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField OUTPUT_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("output_tuple_id", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("conjuncts", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filters", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDataStreamSinkStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDataStreamSinkTupleSchemeFactory();

  public int dest_node_id; // required
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TDataPartition output_partition; // required
  public boolean ignore_not_found; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TExpr> output_exprs; // optional
  public int output_tuple_id; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TExpr> conjuncts; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TRuntimeFilterDesc> runtime_filters; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEST_NODE_ID((short)1, "dest_node_id"),
    OUTPUT_PARTITION((short)2, "output_partition"),
    IGNORE_NOT_FOUND((short)3, "ignore_not_found"),
    OUTPUT_EXPRS((short)4, "output_exprs"),
    OUTPUT_TUPLE_ID((short)5, "output_tuple_id"),
    CONJUNCTS((short)6, "conjuncts"),
    RUNTIME_FILTERS((short)7, "runtime_filters");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEST_NODE_ID
          return DEST_NODE_ID;
        case 2: // OUTPUT_PARTITION
          return OUTPUT_PARTITION;
        case 3: // IGNORE_NOT_FOUND
          return IGNORE_NOT_FOUND;
        case 4: // OUTPUT_EXPRS
          return OUTPUT_EXPRS;
        case 5: // OUTPUT_TUPLE_ID
          return OUTPUT_TUPLE_ID;
        case 6: // CONJUNCTS
          return CONJUNCTS;
        case 7: // RUNTIME_FILTERS
          return RUNTIME_FILTERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEST_NODE_ID_ISSET_ID = 0;
  private static final int __IGNORE_NOT_FOUND_ISSET_ID = 1;
  private static final int __OUTPUT_TUPLE_ID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IGNORE_NOT_FOUND,_Fields.OUTPUT_EXPRS,_Fields.OUTPUT_TUPLE_ID,_Fields.CONJUNCTS,_Fields.RUNTIME_FILTERS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEST_NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("dest_node_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TPlanNodeId")));
    tmpMap.put(_Fields.OUTPUT_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("output_partition", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TDataPartition.class)));
    tmpMap.put(_Fields.IGNORE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("ignore_not_found", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OUTPUT_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("output_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TExpr.class))));
    tmpMap.put(_Fields.OUTPUT_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("output_tuple_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TExpr.class))));
    tmpMap.put(_Fields.RUNTIME_FILTERS, new org.apache.thrift.meta_data.FieldMetaData("runtime_filters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TRuntimeFilterDesc.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDataStreamSink.class, metaDataMap);
  }

  public TDataStreamSink() {
  }

  public TDataStreamSink(
    int dest_node_id,
    org.apache.doris.thrift.TDataPartition output_partition)
  {
    this();
    this.dest_node_id = dest_node_id;
    setDestNodeIdIsSet(true);
    this.output_partition = output_partition;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDataStreamSink(TDataStreamSink other) {
    __isset_bitfield = other.__isset_bitfield;
    this.dest_node_id = other.dest_node_id;
    if (other.isSetOutputPartition()) {
      this.output_partition = new org.apache.doris.thrift.TDataPartition(other.output_partition);
    }
    this.ignore_not_found = other.ignore_not_found;
    if (other.isSetOutputExprs()) {
      java.util.List<org.apache.doris.thrift.TExpr> __this__output_exprs = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(other.output_exprs.size());
      for (org.apache.doris.thrift.TExpr other_element : other.output_exprs) {
        __this__output_exprs.add(new org.apache.doris.thrift.TExpr(other_element));
      }
      this.output_exprs = __this__output_exprs;
    }
    this.output_tuple_id = other.output_tuple_id;
    if (other.isSetConjuncts()) {
      java.util.List<org.apache.doris.thrift.TExpr> __this__conjuncts = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(other.conjuncts.size());
      for (org.apache.doris.thrift.TExpr other_element : other.conjuncts) {
        __this__conjuncts.add(new org.apache.doris.thrift.TExpr(other_element));
      }
      this.conjuncts = __this__conjuncts;
    }
    if (other.isSetRuntimeFilters()) {
      java.util.List<org.apache.doris.thrift.TRuntimeFilterDesc> __this__runtime_filters = new java.util.ArrayList<org.apache.doris.thrift.TRuntimeFilterDesc>(other.runtime_filters.size());
      for (org.apache.doris.thrift.TRuntimeFilterDesc other_element : other.runtime_filters) {
        __this__runtime_filters.add(new org.apache.doris.thrift.TRuntimeFilterDesc(other_element));
      }
      this.runtime_filters = __this__runtime_filters;
    }
  }

  @Override
  public TDataStreamSink deepCopy() {
    return new TDataStreamSink(this);
  }

  @Override
  public void clear() {
    setDestNodeIdIsSet(false);
    this.dest_node_id = 0;
    this.output_partition = null;
    setIgnoreNotFoundIsSet(false);
    this.ignore_not_found = false;
    this.output_exprs = null;
    setOutputTupleIdIsSet(false);
    this.output_tuple_id = 0;
    this.conjuncts = null;
    this.runtime_filters = null;
  }

  public int getDestNodeId() {
    return this.dest_node_id;
  }

  public TDataStreamSink setDestNodeId(int dest_node_id) {
    this.dest_node_id = dest_node_id;
    setDestNodeIdIsSet(true);
    return this;
  }

  public void unsetDestNodeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEST_NODE_ID_ISSET_ID);
  }

  /** Returns true if field dest_node_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDestNodeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEST_NODE_ID_ISSET_ID);
  }

  public void setDestNodeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEST_NODE_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TDataPartition getOutputPartition() {
    return this.output_partition;
  }

  public TDataStreamSink setOutputPartition(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TDataPartition output_partition) {
    this.output_partition = output_partition;
    return this;
  }

  public void unsetOutputPartition() {
    this.output_partition = null;
  }

  /** Returns true if field output_partition is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputPartition() {
    return this.output_partition != null;
  }

  public void setOutputPartitionIsSet(boolean value) {
    if (!value) {
      this.output_partition = null;
    }
  }

  public boolean isIgnoreNotFound() {
    return this.ignore_not_found;
  }

  public TDataStreamSink setIgnoreNotFound(boolean ignore_not_found) {
    this.ignore_not_found = ignore_not_found;
    setIgnoreNotFoundIsSet(true);
    return this;
  }

  public void unsetIgnoreNotFound() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IGNORE_NOT_FOUND_ISSET_ID);
  }

  /** Returns true if field ignore_not_found is set (has been assigned a value) and false otherwise */
  public boolean isSetIgnoreNotFound() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IGNORE_NOT_FOUND_ISSET_ID);
  }

  public void setIgnoreNotFoundIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IGNORE_NOT_FOUND_ISSET_ID, value);
  }

  public int getOutputExprsSize() {
    return (this.output_exprs == null) ? 0 : this.output_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TExpr> getOutputExprsIterator() {
    return (this.output_exprs == null) ? null : this.output_exprs.iterator();
  }

  public void addToOutputExprs(org.apache.doris.thrift.TExpr elem) {
    if (this.output_exprs == null) {
      this.output_exprs = new java.util.ArrayList<org.apache.doris.thrift.TExpr>();
    }
    this.output_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TExpr> getOutputExprs() {
    return this.output_exprs;
  }

  public TDataStreamSink setOutputExprs(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TExpr> output_exprs) {
    this.output_exprs = output_exprs;
    return this;
  }

  public void unsetOutputExprs() {
    this.output_exprs = null;
  }

  /** Returns true if field output_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputExprs() {
    return this.output_exprs != null;
  }

  public void setOutputExprsIsSet(boolean value) {
    if (!value) {
      this.output_exprs = null;
    }
  }

  public int getOutputTupleId() {
    return this.output_tuple_id;
  }

  public TDataStreamSink setOutputTupleId(int output_tuple_id) {
    this.output_tuple_id = output_tuple_id;
    setOutputTupleIdIsSet(true);
    return this;
  }

  public void unsetOutputTupleId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field output_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputTupleId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID);
  }

  public void setOutputTupleIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID, value);
  }

  public int getConjunctsSize() {
    return (this.conjuncts == null) ? 0 : this.conjuncts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TExpr> getConjunctsIterator() {
    return (this.conjuncts == null) ? null : this.conjuncts.iterator();
  }

  public void addToConjuncts(org.apache.doris.thrift.TExpr elem) {
    if (this.conjuncts == null) {
      this.conjuncts = new java.util.ArrayList<org.apache.doris.thrift.TExpr>();
    }
    this.conjuncts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TExpr> getConjuncts() {
    return this.conjuncts;
  }

  public TDataStreamSink setConjuncts(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TExpr> conjuncts) {
    this.conjuncts = conjuncts;
    return this;
  }

  public void unsetConjuncts() {
    this.conjuncts = null;
  }

  /** Returns true if field conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetConjuncts() {
    return this.conjuncts != null;
  }

  public void setConjunctsIsSet(boolean value) {
    if (!value) {
      this.conjuncts = null;
    }
  }

  public int getRuntimeFiltersSize() {
    return (this.runtime_filters == null) ? 0 : this.runtime_filters.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TRuntimeFilterDesc> getRuntimeFiltersIterator() {
    return (this.runtime_filters == null) ? null : this.runtime_filters.iterator();
  }

  public void addToRuntimeFilters(org.apache.doris.thrift.TRuntimeFilterDesc elem) {
    if (this.runtime_filters == null) {
      this.runtime_filters = new java.util.ArrayList<org.apache.doris.thrift.TRuntimeFilterDesc>();
    }
    this.runtime_filters.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TRuntimeFilterDesc> getRuntimeFilters() {
    return this.runtime_filters;
  }

  public TDataStreamSink setRuntimeFilters(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TRuntimeFilterDesc> runtime_filters) {
    this.runtime_filters = runtime_filters;
    return this;
  }

  public void unsetRuntimeFilters() {
    this.runtime_filters = null;
  }

  /** Returns true if field runtime_filters is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntimeFilters() {
    return this.runtime_filters != null;
  }

  public void setRuntimeFiltersIsSet(boolean value) {
    if (!value) {
      this.runtime_filters = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DEST_NODE_ID:
      if (value == null) {
        unsetDestNodeId();
      } else {
        setDestNodeId((java.lang.Integer)value);
      }
      break;

    case OUTPUT_PARTITION:
      if (value == null) {
        unsetOutputPartition();
      } else {
        setOutputPartition((org.apache.doris.thrift.TDataPartition)value);
      }
      break;

    case IGNORE_NOT_FOUND:
      if (value == null) {
        unsetIgnoreNotFound();
      } else {
        setIgnoreNotFound((java.lang.Boolean)value);
      }
      break;

    case OUTPUT_EXPRS:
      if (value == null) {
        unsetOutputExprs();
      } else {
        setOutputExprs((java.util.List<org.apache.doris.thrift.TExpr>)value);
      }
      break;

    case OUTPUT_TUPLE_ID:
      if (value == null) {
        unsetOutputTupleId();
      } else {
        setOutputTupleId((java.lang.Integer)value);
      }
      break;

    case CONJUNCTS:
      if (value == null) {
        unsetConjuncts();
      } else {
        setConjuncts((java.util.List<org.apache.doris.thrift.TExpr>)value);
      }
      break;

    case RUNTIME_FILTERS:
      if (value == null) {
        unsetRuntimeFilters();
      } else {
        setRuntimeFilters((java.util.List<org.apache.doris.thrift.TRuntimeFilterDesc>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DEST_NODE_ID:
      return getDestNodeId();

    case OUTPUT_PARTITION:
      return getOutputPartition();

    case IGNORE_NOT_FOUND:
      return isIgnoreNotFound();

    case OUTPUT_EXPRS:
      return getOutputExprs();

    case OUTPUT_TUPLE_ID:
      return getOutputTupleId();

    case CONJUNCTS:
      return getConjuncts();

    case RUNTIME_FILTERS:
      return getRuntimeFilters();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DEST_NODE_ID:
      return isSetDestNodeId();
    case OUTPUT_PARTITION:
      return isSetOutputPartition();
    case IGNORE_NOT_FOUND:
      return isSetIgnoreNotFound();
    case OUTPUT_EXPRS:
      return isSetOutputExprs();
    case OUTPUT_TUPLE_ID:
      return isSetOutputTupleId();
    case CONJUNCTS:
      return isSetConjuncts();
    case RUNTIME_FILTERS:
      return isSetRuntimeFilters();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TDataStreamSink)
      return this.equals((TDataStreamSink)that);
    return false;
  }

  public boolean equals(TDataStreamSink that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_dest_node_id = true;
    boolean that_present_dest_node_id = true;
    if (this_present_dest_node_id || that_present_dest_node_id) {
      if (!(this_present_dest_node_id && that_present_dest_node_id))
        return false;
      if (this.dest_node_id != that.dest_node_id)
        return false;
    }

    boolean this_present_output_partition = true && this.isSetOutputPartition();
    boolean that_present_output_partition = true && that.isSetOutputPartition();
    if (this_present_output_partition || that_present_output_partition) {
      if (!(this_present_output_partition && that_present_output_partition))
        return false;
      if (!this.output_partition.equals(that.output_partition))
        return false;
    }

    boolean this_present_ignore_not_found = true && this.isSetIgnoreNotFound();
    boolean that_present_ignore_not_found = true && that.isSetIgnoreNotFound();
    if (this_present_ignore_not_found || that_present_ignore_not_found) {
      if (!(this_present_ignore_not_found && that_present_ignore_not_found))
        return false;
      if (this.ignore_not_found != that.ignore_not_found)
        return false;
    }

    boolean this_present_output_exprs = true && this.isSetOutputExprs();
    boolean that_present_output_exprs = true && that.isSetOutputExprs();
    if (this_present_output_exprs || that_present_output_exprs) {
      if (!(this_present_output_exprs && that_present_output_exprs))
        return false;
      if (!this.output_exprs.equals(that.output_exprs))
        return false;
    }

    boolean this_present_output_tuple_id = true && this.isSetOutputTupleId();
    boolean that_present_output_tuple_id = true && that.isSetOutputTupleId();
    if (this_present_output_tuple_id || that_present_output_tuple_id) {
      if (!(this_present_output_tuple_id && that_present_output_tuple_id))
        return false;
      if (this.output_tuple_id != that.output_tuple_id)
        return false;
    }

    boolean this_present_conjuncts = true && this.isSetConjuncts();
    boolean that_present_conjuncts = true && that.isSetConjuncts();
    if (this_present_conjuncts || that_present_conjuncts) {
      if (!(this_present_conjuncts && that_present_conjuncts))
        return false;
      if (!this.conjuncts.equals(that.conjuncts))
        return false;
    }

    boolean this_present_runtime_filters = true && this.isSetRuntimeFilters();
    boolean that_present_runtime_filters = true && that.isSetRuntimeFilters();
    if (this_present_runtime_filters || that_present_runtime_filters) {
      if (!(this_present_runtime_filters && that_present_runtime_filters))
        return false;
      if (!this.runtime_filters.equals(that.runtime_filters))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + dest_node_id;

    hashCode = hashCode * 8191 + ((isSetOutputPartition()) ? 131071 : 524287);
    if (isSetOutputPartition())
      hashCode = hashCode * 8191 + output_partition.hashCode();

    hashCode = hashCode * 8191 + ((isSetIgnoreNotFound()) ? 131071 : 524287);
    if (isSetIgnoreNotFound())
      hashCode = hashCode * 8191 + ((ignore_not_found) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetOutputExprs()) ? 131071 : 524287);
    if (isSetOutputExprs())
      hashCode = hashCode * 8191 + output_exprs.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutputTupleId()) ? 131071 : 524287);
    if (isSetOutputTupleId())
      hashCode = hashCode * 8191 + output_tuple_id;

    hashCode = hashCode * 8191 + ((isSetConjuncts()) ? 131071 : 524287);
    if (isSetConjuncts())
      hashCode = hashCode * 8191 + conjuncts.hashCode();

    hashCode = hashCode * 8191 + ((isSetRuntimeFilters()) ? 131071 : 524287);
    if (isSetRuntimeFilters())
      hashCode = hashCode * 8191 + runtime_filters.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TDataStreamSink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetDestNodeId(), other.isSetDestNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dest_node_id, other.dest_node_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutputPartition(), other.isSetOutputPartition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputPartition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_partition, other.output_partition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIgnoreNotFound(), other.isSetIgnoreNotFound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIgnoreNotFound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ignore_not_found, other.ignore_not_found);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutputExprs(), other.isSetOutputExprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputExprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_exprs, other.output_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutputTupleId(), other.isSetOutputTupleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputTupleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_tuple_id, other.output_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConjuncts(), other.isSetConjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conjuncts, other.conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRuntimeFilters(), other.isSetRuntimeFilters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntimeFilters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filters, other.runtime_filters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDataStreamSink(");
    boolean first = true;

    sb.append("dest_node_id:");
    sb.append(this.dest_node_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("output_partition:");
    if (this.output_partition == null) {
      sb.append("null");
    } else {
      sb.append(this.output_partition);
    }
    first = false;
    if (isSetIgnoreNotFound()) {
      if (!first) sb.append(", ");
      sb.append("ignore_not_found:");
      sb.append(this.ignore_not_found);
      first = false;
    }
    if (isSetOutputExprs()) {
      if (!first) sb.append(", ");
      sb.append("output_exprs:");
      if (this.output_exprs == null) {
        sb.append("null");
      } else {
        sb.append(this.output_exprs);
      }
      first = false;
    }
    if (isSetOutputTupleId()) {
      if (!first) sb.append(", ");
      sb.append("output_tuple_id:");
      sb.append(this.output_tuple_id);
      first = false;
    }
    if (isSetConjuncts()) {
      if (!first) sb.append(", ");
      sb.append("conjuncts:");
      if (this.conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.conjuncts);
      }
      first = false;
    }
    if (isSetRuntimeFilters()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filters:");
      if (this.runtime_filters == null) {
        sb.append("null");
      } else {
        sb.append(this.runtime_filters);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'dest_node_id' because it's a primitive and you chose the non-beans generator.
    if (output_partition == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'output_partition' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (output_partition != null) {
      output_partition.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDataStreamSinkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDataStreamSinkStandardScheme getScheme() {
      return new TDataStreamSinkStandardScheme();
    }
  }

  private static class TDataStreamSinkStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDataStreamSink> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TDataStreamSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEST_NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dest_node_id = iprot.readI32();
              struct.setDestNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OUTPUT_PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.output_partition = new org.apache.doris.thrift.TDataPartition();
              struct.output_partition.read(iprot);
              struct.setOutputPartitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IGNORE_NOT_FOUND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ignore_not_found = iprot.readBool();
              struct.setIgnoreNotFoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OUTPUT_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                struct.output_exprs = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(_list52.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _elem53;
                for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                {
                  _elem53 = new org.apache.doris.thrift.TExpr();
                  _elem53.read(iprot);
                  struct.output_exprs.add(_elem53);
                }
                iprot.readListEnd();
              }
              struct.setOutputExprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OUTPUT_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.output_tuple_id = iprot.readI32();
              struct.setOutputTupleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list55 = iprot.readListBegin();
                struct.conjuncts = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(_list55.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _elem56;
                for (int _i57 = 0; _i57 < _list55.size; ++_i57)
                {
                  _elem56 = new org.apache.doris.thrift.TExpr();
                  _elem56.read(iprot);
                  struct.conjuncts.add(_elem56);
                }
                iprot.readListEnd();
              }
              struct.setConjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RUNTIME_FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                struct.runtime_filters = new java.util.ArrayList<org.apache.doris.thrift.TRuntimeFilterDesc>(_list58.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TRuntimeFilterDesc _elem59;
                for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                {
                  _elem59 = new org.apache.doris.thrift.TRuntimeFilterDesc();
                  _elem59.read(iprot);
                  struct.runtime_filters.add(_elem59);
                }
                iprot.readListEnd();
              }
              struct.setRuntimeFiltersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDestNodeId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dest_node_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TDataStreamSink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DEST_NODE_ID_FIELD_DESC);
      oprot.writeI32(struct.dest_node_id);
      oprot.writeFieldEnd();
      if (struct.output_partition != null) {
        oprot.writeFieldBegin(OUTPUT_PARTITION_FIELD_DESC);
        struct.output_partition.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIgnoreNotFound()) {
        oprot.writeFieldBegin(IGNORE_NOT_FOUND_FIELD_DESC);
        oprot.writeBool(struct.ignore_not_found);
        oprot.writeFieldEnd();
      }
      if (struct.output_exprs != null) {
        if (struct.isSetOutputExprs()) {
          oprot.writeFieldBegin(OUTPUT_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.output_exprs.size()));
            for (org.apache.doris.thrift.TExpr _iter61 : struct.output_exprs)
            {
              _iter61.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOutputTupleId()) {
        oprot.writeFieldBegin(OUTPUT_TUPLE_ID_FIELD_DESC);
        oprot.writeI32(struct.output_tuple_id);
        oprot.writeFieldEnd();
      }
      if (struct.conjuncts != null) {
        if (struct.isSetConjuncts()) {
          oprot.writeFieldBegin(CONJUNCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.conjuncts.size()));
            for (org.apache.doris.thrift.TExpr _iter62 : struct.conjuncts)
            {
              _iter62.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.runtime_filters != null) {
        if (struct.isSetRuntimeFilters()) {
          oprot.writeFieldBegin(RUNTIME_FILTERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.runtime_filters.size()));
            for (org.apache.doris.thrift.TRuntimeFilterDesc _iter63 : struct.runtime_filters)
            {
              _iter63.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDataStreamSinkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDataStreamSinkTupleScheme getScheme() {
      return new TDataStreamSinkTupleScheme();
    }
  }

  private static class TDataStreamSinkTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDataStreamSink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDataStreamSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.dest_node_id);
      struct.output_partition.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIgnoreNotFound()) {
        optionals.set(0);
      }
      if (struct.isSetOutputExprs()) {
        optionals.set(1);
      }
      if (struct.isSetOutputTupleId()) {
        optionals.set(2);
      }
      if (struct.isSetConjuncts()) {
        optionals.set(3);
      }
      if (struct.isSetRuntimeFilters()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetIgnoreNotFound()) {
        oprot.writeBool(struct.ignore_not_found);
      }
      if (struct.isSetOutputExprs()) {
        {
          oprot.writeI32(struct.output_exprs.size());
          for (org.apache.doris.thrift.TExpr _iter64 : struct.output_exprs)
          {
            _iter64.write(oprot);
          }
        }
      }
      if (struct.isSetOutputTupleId()) {
        oprot.writeI32(struct.output_tuple_id);
      }
      if (struct.isSetConjuncts()) {
        {
          oprot.writeI32(struct.conjuncts.size());
          for (org.apache.doris.thrift.TExpr _iter65 : struct.conjuncts)
          {
            _iter65.write(oprot);
          }
        }
      }
      if (struct.isSetRuntimeFilters()) {
        {
          oprot.writeI32(struct.runtime_filters.size());
          for (org.apache.doris.thrift.TRuntimeFilterDesc _iter66 : struct.runtime_filters)
          {
            _iter66.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDataStreamSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.dest_node_id = iprot.readI32();
      struct.setDestNodeIdIsSet(true);
      struct.output_partition = new org.apache.doris.thrift.TDataPartition();
      struct.output_partition.read(iprot);
      struct.setOutputPartitionIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.ignore_not_found = iprot.readBool();
        struct.setIgnoreNotFoundIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list67 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.output_exprs = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(_list67.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _elem68;
          for (int _i69 = 0; _i69 < _list67.size; ++_i69)
          {
            _elem68 = new org.apache.doris.thrift.TExpr();
            _elem68.read(iprot);
            struct.output_exprs.add(_elem68);
          }
        }
        struct.setOutputExprsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.output_tuple_id = iprot.readI32();
        struct.setOutputTupleIdIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list70 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.conjuncts = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(_list70.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _elem71;
          for (int _i72 = 0; _i72 < _list70.size; ++_i72)
          {
            _elem71 = new org.apache.doris.thrift.TExpr();
            _elem71.read(iprot);
            struct.conjuncts.add(_elem71);
          }
        }
        struct.setConjunctsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list73 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.runtime_filters = new java.util.ArrayList<org.apache.doris.thrift.TRuntimeFilterDesc>(_list73.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TRuntimeFilterDesc _elem74;
          for (int _i75 = 0; _i75 < _list73.size; ++_i75)
          {
            _elem74 = new org.apache.doris.thrift.TRuntimeFilterDesc();
            _elem74.read(iprot);
            struct.runtime_filters.add(_elem74);
          }
        }
        struct.setRuntimeFiltersIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

