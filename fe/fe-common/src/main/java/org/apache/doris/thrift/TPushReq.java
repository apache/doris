/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-06-29")
public class TPushReq implements org.apache.thrift.TBase<TPushReq, TPushReq._Fields>, java.io.Serializable, Cloneable, Comparable<TPushReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPushReq");

  private static final org.apache.thrift.protocol.TField TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_hash", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("version_hash", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField PUSH_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("push_type", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField HTTP_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("http_file_path", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField HTTP_FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("http_file_size", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField DELETE_CONDITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("delete_conditions", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField NEED_DECOMPRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("need_decompress", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField TRANSACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transaction_id", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField IS_SCHEMA_CHANGING_FIELD_DESC = new org.apache.thrift.protocol.TField("is_schema_changing", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField BROKER_SCAN_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("broker_scan_range", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField DESC_TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("desc_tbl", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField COLUMNS_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("columns_desc", org.apache.thrift.protocol.TType.LIST, (short)16);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPushReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPushReqTupleSchemeFactory();

  public long tablet_id; // required
  public int schema_hash; // required
  public long version; // required
  public long version_hash; // required
  public long timeout; // required
  /**
   * 
   * @see org.apache.doris.thrift.TPushType
   */
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TPushType push_type; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String http_file_path; // optional
  public long http_file_size; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TCondition> delete_conditions; // optional
  public boolean need_decompress; // optional
  public long transaction_id; // optional
  public long partition_id; // optional
  public boolean is_schema_changing; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TBrokerScanRange broker_scan_range; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TDescriptorTable desc_tbl; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TColumn> columns_desc; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLET_ID((short)1, "tablet_id"),
    SCHEMA_HASH((short)2, "schema_hash"),
    VERSION((short)3, "version"),
    VERSION_HASH((short)4, "version_hash"),
    TIMEOUT((short)5, "timeout"),
    /**
     * 
     * @see org.apache.doris.thrift.TPushType
     */
    PUSH_TYPE((short)6, "push_type"),
    HTTP_FILE_PATH((short)7, "http_file_path"),
    HTTP_FILE_SIZE((short)8, "http_file_size"),
    DELETE_CONDITIONS((short)9, "delete_conditions"),
    NEED_DECOMPRESS((short)10, "need_decompress"),
    TRANSACTION_ID((short)11, "transaction_id"),
    PARTITION_ID((short)12, "partition_id"),
    IS_SCHEMA_CHANGING((short)13, "is_schema_changing"),
    BROKER_SCAN_RANGE((short)14, "broker_scan_range"),
    DESC_TBL((short)15, "desc_tbl"),
    COLUMNS_DESC((short)16, "columns_desc");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLET_ID
          return TABLET_ID;
        case 2: // SCHEMA_HASH
          return SCHEMA_HASH;
        case 3: // VERSION
          return VERSION;
        case 4: // VERSION_HASH
          return VERSION_HASH;
        case 5: // TIMEOUT
          return TIMEOUT;
        case 6: // PUSH_TYPE
          return PUSH_TYPE;
        case 7: // HTTP_FILE_PATH
          return HTTP_FILE_PATH;
        case 8: // HTTP_FILE_SIZE
          return HTTP_FILE_SIZE;
        case 9: // DELETE_CONDITIONS
          return DELETE_CONDITIONS;
        case 10: // NEED_DECOMPRESS
          return NEED_DECOMPRESS;
        case 11: // TRANSACTION_ID
          return TRANSACTION_ID;
        case 12: // PARTITION_ID
          return PARTITION_ID;
        case 13: // IS_SCHEMA_CHANGING
          return IS_SCHEMA_CHANGING;
        case 14: // BROKER_SCAN_RANGE
          return BROKER_SCAN_RANGE;
        case 15: // DESC_TBL
          return DESC_TBL;
        case 16: // COLUMNS_DESC
          return COLUMNS_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLET_ID_ISSET_ID = 0;
  private static final int __SCHEMA_HASH_ISSET_ID = 1;
  private static final int __VERSION_ISSET_ID = 2;
  private static final int __VERSION_HASH_ISSET_ID = 3;
  private static final int __TIMEOUT_ISSET_ID = 4;
  private static final int __HTTP_FILE_SIZE_ISSET_ID = 5;
  private static final int __NEED_DECOMPRESS_ISSET_ID = 6;
  private static final int __TRANSACTION_ID_ISSET_ID = 7;
  private static final int __PARTITION_ID_ISSET_ID = 8;
  private static final int __IS_SCHEMA_CHANGING_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.HTTP_FILE_PATH,_Fields.HTTP_FILE_SIZE,_Fields.DELETE_CONDITIONS,_Fields.NEED_DECOMPRESS,_Fields.TRANSACTION_ID,_Fields.PARTITION_ID,_Fields.IS_SCHEMA_CHANGING,_Fields.BROKER_SCAN_RANGE,_Fields.DESC_TBL,_Fields.COLUMNS_DESC};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("tablet_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTabletId")));
    tmpMap.put(_Fields.SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("schema_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TSchemaHash")));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersion")));
    tmpMap.put(_Fields.VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("version_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersionHash")));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PUSH_TYPE, new org.apache.thrift.meta_data.FieldMetaData("push_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.doris.thrift.TPushType.class)));
    tmpMap.put(_Fields.HTTP_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("http_file_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HTTP_FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("http_file_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DELETE_CONDITIONS, new org.apache.thrift.meta_data.FieldMetaData("delete_conditions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TCondition.class))));
    tmpMap.put(_Fields.NEED_DECOMPRESS, new org.apache.thrift.meta_data.FieldMetaData("need_decompress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TRANSACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("transaction_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTransactionId")));
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partition_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TPartitionId")));
    tmpMap.put(_Fields.IS_SCHEMA_CHANGING, new org.apache.thrift.meta_data.FieldMetaData("is_schema_changing", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BROKER_SCAN_RANGE, new org.apache.thrift.meta_data.FieldMetaData("broker_scan_range", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TBrokerScanRange.class)));
    tmpMap.put(_Fields.DESC_TBL, new org.apache.thrift.meta_data.FieldMetaData("desc_tbl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TDescriptorTable.class)));
    tmpMap.put(_Fields.COLUMNS_DESC, new org.apache.thrift.meta_data.FieldMetaData("columns_desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TColumn.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPushReq.class, metaDataMap);
  }

  public TPushReq() {
  }

  public TPushReq(
    long tablet_id,
    int schema_hash,
    long version,
    long version_hash,
    long timeout,
    org.apache.doris.thrift.TPushType push_type)
  {
    this();
    this.tablet_id = tablet_id;
    setTabletIdIsSet(true);
    this.schema_hash = schema_hash;
    setSchemaHashIsSet(true);
    this.version = version;
    setVersionIsSet(true);
    this.version_hash = version_hash;
    setVersionHashIsSet(true);
    this.timeout = timeout;
    setTimeoutIsSet(true);
    this.push_type = push_type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPushReq(TPushReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tablet_id = other.tablet_id;
    this.schema_hash = other.schema_hash;
    this.version = other.version;
    this.version_hash = other.version_hash;
    this.timeout = other.timeout;
    if (other.isSetPushType()) {
      this.push_type = other.push_type;
    }
    if (other.isSetHttpFilePath()) {
      this.http_file_path = other.http_file_path;
    }
    this.http_file_size = other.http_file_size;
    if (other.isSetDeleteConditions()) {
      java.util.List<org.apache.doris.thrift.TCondition> __this__delete_conditions = new java.util.ArrayList<org.apache.doris.thrift.TCondition>(other.delete_conditions.size());
      for (org.apache.doris.thrift.TCondition other_element : other.delete_conditions) {
        __this__delete_conditions.add(new org.apache.doris.thrift.TCondition(other_element));
      }
      this.delete_conditions = __this__delete_conditions;
    }
    this.need_decompress = other.need_decompress;
    this.transaction_id = other.transaction_id;
    this.partition_id = other.partition_id;
    this.is_schema_changing = other.is_schema_changing;
    if (other.isSetBrokerScanRange()) {
      this.broker_scan_range = new org.apache.doris.thrift.TBrokerScanRange(other.broker_scan_range);
    }
    if (other.isSetDescTbl()) {
      this.desc_tbl = new org.apache.doris.thrift.TDescriptorTable(other.desc_tbl);
    }
    if (other.isSetColumnsDesc()) {
      java.util.List<org.apache.doris.thrift.TColumn> __this__columns_desc = new java.util.ArrayList<org.apache.doris.thrift.TColumn>(other.columns_desc.size());
      for (org.apache.doris.thrift.TColumn other_element : other.columns_desc) {
        __this__columns_desc.add(new org.apache.doris.thrift.TColumn(other_element));
      }
      this.columns_desc = __this__columns_desc;
    }
  }

  @Override
  public TPushReq deepCopy() {
    return new TPushReq(this);
  }

  @Override
  public void clear() {
    setTabletIdIsSet(false);
    this.tablet_id = 0;
    setSchemaHashIsSet(false);
    this.schema_hash = 0;
    setVersionIsSet(false);
    this.version = 0;
    setVersionHashIsSet(false);
    this.version_hash = 0;
    setTimeoutIsSet(false);
    this.timeout = 0;
    this.push_type = null;
    this.http_file_path = null;
    setHttpFileSizeIsSet(false);
    this.http_file_size = 0;
    this.delete_conditions = null;
    setNeedDecompressIsSet(false);
    this.need_decompress = false;
    setTransactionIdIsSet(false);
    this.transaction_id = 0;
    setPartitionIdIsSet(false);
    this.partition_id = 0;
    setIsSchemaChangingIsSet(false);
    this.is_schema_changing = false;
    this.broker_scan_range = null;
    this.desc_tbl = null;
    this.columns_desc = null;
  }

  public long getTabletId() {
    return this.tablet_id;
  }

  public TPushReq setTabletId(long tablet_id) {
    this.tablet_id = tablet_id;
    setTabletIdIsSet(true);
    return this;
  }

  public void unsetTabletId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  /** Returns true if field tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTabletId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  public void setTabletIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLET_ID_ISSET_ID, value);
  }

  public int getSchemaHash() {
    return this.schema_hash;
  }

  public TPushReq setSchemaHash(int schema_hash) {
    this.schema_hash = schema_hash;
    setSchemaHashIsSet(true);
    return this;
  }

  public void unsetSchemaHash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetSchemaHash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  public void setSchemaHashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID, value);
  }

  public long getVersion() {
    return this.version;
  }

  public TPushReq setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public long getVersionHash() {
    return this.version_hash;
  }

  public TPushReq setVersionHash(long version_hash) {
    this.version_hash = version_hash;
    setVersionHashIsSet(true);
    return this;
  }

  public void unsetVersionHash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_HASH_ISSET_ID);
  }

  /** Returns true if field version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionHash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_HASH_ISSET_ID);
  }

  public void setVersionHashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_HASH_ISSET_ID, value);
  }

  public long getTimeout() {
    return this.timeout;
  }

  public TPushReq setTimeout(long timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  /**
   * 
   * @see org.apache.doris.thrift.TPushType
   */
  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TPushType getPushType() {
    return this.push_type;
  }

  /**
   * 
   * @see org.apache.doris.thrift.TPushType
   */
  public TPushReq setPushType(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TPushType push_type) {
    this.push_type = push_type;
    return this;
  }

  public void unsetPushType() {
    this.push_type = null;
  }

  /** Returns true if field push_type is set (has been assigned a value) and false otherwise */
  public boolean isSetPushType() {
    return this.push_type != null;
  }

  public void setPushTypeIsSet(boolean value) {
    if (!value) {
      this.push_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHttpFilePath() {
    return this.http_file_path;
  }

  public TPushReq setHttpFilePath(@org.apache.thrift.annotation.Nullable java.lang.String http_file_path) {
    this.http_file_path = http_file_path;
    return this;
  }

  public void unsetHttpFilePath() {
    this.http_file_path = null;
  }

  /** Returns true if field http_file_path is set (has been assigned a value) and false otherwise */
  public boolean isSetHttpFilePath() {
    return this.http_file_path != null;
  }

  public void setHttpFilePathIsSet(boolean value) {
    if (!value) {
      this.http_file_path = null;
    }
  }

  public long getHttpFileSize() {
    return this.http_file_size;
  }

  public TPushReq setHttpFileSize(long http_file_size) {
    this.http_file_size = http_file_size;
    setHttpFileSizeIsSet(true);
    return this;
  }

  public void unsetHttpFileSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HTTP_FILE_SIZE_ISSET_ID);
  }

  /** Returns true if field http_file_size is set (has been assigned a value) and false otherwise */
  public boolean isSetHttpFileSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HTTP_FILE_SIZE_ISSET_ID);
  }

  public void setHttpFileSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HTTP_FILE_SIZE_ISSET_ID, value);
  }

  public int getDeleteConditionsSize() {
    return (this.delete_conditions == null) ? 0 : this.delete_conditions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TCondition> getDeleteConditionsIterator() {
    return (this.delete_conditions == null) ? null : this.delete_conditions.iterator();
  }

  public void addToDeleteConditions(org.apache.doris.thrift.TCondition elem) {
    if (this.delete_conditions == null) {
      this.delete_conditions = new java.util.ArrayList<org.apache.doris.thrift.TCondition>();
    }
    this.delete_conditions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TCondition> getDeleteConditions() {
    return this.delete_conditions;
  }

  public TPushReq setDeleteConditions(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TCondition> delete_conditions) {
    this.delete_conditions = delete_conditions;
    return this;
  }

  public void unsetDeleteConditions() {
    this.delete_conditions = null;
  }

  /** Returns true if field delete_conditions is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleteConditions() {
    return this.delete_conditions != null;
  }

  public void setDeleteConditionsIsSet(boolean value) {
    if (!value) {
      this.delete_conditions = null;
    }
  }

  public boolean isNeedDecompress() {
    return this.need_decompress;
  }

  public TPushReq setNeedDecompress(boolean need_decompress) {
    this.need_decompress = need_decompress;
    setNeedDecompressIsSet(true);
    return this;
  }

  public void unsetNeedDecompress() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEED_DECOMPRESS_ISSET_ID);
  }

  /** Returns true if field need_decompress is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedDecompress() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEED_DECOMPRESS_ISSET_ID);
  }

  public void setNeedDecompressIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEED_DECOMPRESS_ISSET_ID, value);
  }

  public long getTransactionId() {
    return this.transaction_id;
  }

  public TPushReq setTransactionId(long transaction_id) {
    this.transaction_id = transaction_id;
    setTransactionIdIsSet(true);
    return this;
  }

  public void unsetTransactionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSACTION_ID_ISSET_ID);
  }

  /** Returns true if field transaction_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSACTION_ID_ISSET_ID);
  }

  public void setTransactionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSACTION_ID_ISSET_ID, value);
  }

  public long getPartitionId() {
    return this.partition_id;
  }

  public TPushReq setPartitionId(long partition_id) {
    this.partition_id = partition_id;
    setPartitionIdIsSet(true);
    return this;
  }

  public void unsetPartitionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  /** Returns true if field partition_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  public void setPartitionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID_ISSET_ID, value);
  }

  public boolean isIsSchemaChanging() {
    return this.is_schema_changing;
  }

  public TPushReq setIsSchemaChanging(boolean is_schema_changing) {
    this.is_schema_changing = is_schema_changing;
    setIsSchemaChangingIsSet(true);
    return this;
  }

  public void unsetIsSchemaChanging() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_SCHEMA_CHANGING_ISSET_ID);
  }

  /** Returns true if field is_schema_changing is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSchemaChanging() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_SCHEMA_CHANGING_ISSET_ID);
  }

  public void setIsSchemaChangingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_SCHEMA_CHANGING_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TBrokerScanRange getBrokerScanRange() {
    return this.broker_scan_range;
  }

  public TPushReq setBrokerScanRange(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TBrokerScanRange broker_scan_range) {
    this.broker_scan_range = broker_scan_range;
    return this;
  }

  public void unsetBrokerScanRange() {
    this.broker_scan_range = null;
  }

  /** Returns true if field broker_scan_range is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerScanRange() {
    return this.broker_scan_range != null;
  }

  public void setBrokerScanRangeIsSet(boolean value) {
    if (!value) {
      this.broker_scan_range = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TDescriptorTable getDescTbl() {
    return this.desc_tbl;
  }

  public TPushReq setDescTbl(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TDescriptorTable desc_tbl) {
    this.desc_tbl = desc_tbl;
    return this;
  }

  public void unsetDescTbl() {
    this.desc_tbl = null;
  }

  /** Returns true if field desc_tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetDescTbl() {
    return this.desc_tbl != null;
  }

  public void setDescTblIsSet(boolean value) {
    if (!value) {
      this.desc_tbl = null;
    }
  }

  public int getColumnsDescSize() {
    return (this.columns_desc == null) ? 0 : this.columns_desc.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TColumn> getColumnsDescIterator() {
    return (this.columns_desc == null) ? null : this.columns_desc.iterator();
  }

  public void addToColumnsDesc(org.apache.doris.thrift.TColumn elem) {
    if (this.columns_desc == null) {
      this.columns_desc = new java.util.ArrayList<org.apache.doris.thrift.TColumn>();
    }
    this.columns_desc.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TColumn> getColumnsDesc() {
    return this.columns_desc;
  }

  public TPushReq setColumnsDesc(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TColumn> columns_desc) {
    this.columns_desc = columns_desc;
    return this;
  }

  public void unsetColumnsDesc() {
    this.columns_desc = null;
  }

  /** Returns true if field columns_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnsDesc() {
    return this.columns_desc != null;
  }

  public void setColumnsDescIsSet(boolean value) {
    if (!value) {
      this.columns_desc = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLET_ID:
      if (value == null) {
        unsetTabletId();
      } else {
        setTabletId((java.lang.Long)value);
      }
      break;

    case SCHEMA_HASH:
      if (value == null) {
        unsetSchemaHash();
      } else {
        setSchemaHash((java.lang.Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.Long)value);
      }
      break;

    case VERSION_HASH:
      if (value == null) {
        unsetVersionHash();
      } else {
        setVersionHash((java.lang.Long)value);
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((java.lang.Long)value);
      }
      break;

    case PUSH_TYPE:
      if (value == null) {
        unsetPushType();
      } else {
        setPushType((org.apache.doris.thrift.TPushType)value);
      }
      break;

    case HTTP_FILE_PATH:
      if (value == null) {
        unsetHttpFilePath();
      } else {
        setHttpFilePath((java.lang.String)value);
      }
      break;

    case HTTP_FILE_SIZE:
      if (value == null) {
        unsetHttpFileSize();
      } else {
        setHttpFileSize((java.lang.Long)value);
      }
      break;

    case DELETE_CONDITIONS:
      if (value == null) {
        unsetDeleteConditions();
      } else {
        setDeleteConditions((java.util.List<org.apache.doris.thrift.TCondition>)value);
      }
      break;

    case NEED_DECOMPRESS:
      if (value == null) {
        unsetNeedDecompress();
      } else {
        setNeedDecompress((java.lang.Boolean)value);
      }
      break;

    case TRANSACTION_ID:
      if (value == null) {
        unsetTransactionId();
      } else {
        setTransactionId((java.lang.Long)value);
      }
      break;

    case PARTITION_ID:
      if (value == null) {
        unsetPartitionId();
      } else {
        setPartitionId((java.lang.Long)value);
      }
      break;

    case IS_SCHEMA_CHANGING:
      if (value == null) {
        unsetIsSchemaChanging();
      } else {
        setIsSchemaChanging((java.lang.Boolean)value);
      }
      break;

    case BROKER_SCAN_RANGE:
      if (value == null) {
        unsetBrokerScanRange();
      } else {
        setBrokerScanRange((org.apache.doris.thrift.TBrokerScanRange)value);
      }
      break;

    case DESC_TBL:
      if (value == null) {
        unsetDescTbl();
      } else {
        setDescTbl((org.apache.doris.thrift.TDescriptorTable)value);
      }
      break;

    case COLUMNS_DESC:
      if (value == null) {
        unsetColumnsDesc();
      } else {
        setColumnsDesc((java.util.List<org.apache.doris.thrift.TColumn>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLET_ID:
      return getTabletId();

    case SCHEMA_HASH:
      return getSchemaHash();

    case VERSION:
      return getVersion();

    case VERSION_HASH:
      return getVersionHash();

    case TIMEOUT:
      return getTimeout();

    case PUSH_TYPE:
      return getPushType();

    case HTTP_FILE_PATH:
      return getHttpFilePath();

    case HTTP_FILE_SIZE:
      return getHttpFileSize();

    case DELETE_CONDITIONS:
      return getDeleteConditions();

    case NEED_DECOMPRESS:
      return isNeedDecompress();

    case TRANSACTION_ID:
      return getTransactionId();

    case PARTITION_ID:
      return getPartitionId();

    case IS_SCHEMA_CHANGING:
      return isIsSchemaChanging();

    case BROKER_SCAN_RANGE:
      return getBrokerScanRange();

    case DESC_TBL:
      return getDescTbl();

    case COLUMNS_DESC:
      return getColumnsDesc();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLET_ID:
      return isSetTabletId();
    case SCHEMA_HASH:
      return isSetSchemaHash();
    case VERSION:
      return isSetVersion();
    case VERSION_HASH:
      return isSetVersionHash();
    case TIMEOUT:
      return isSetTimeout();
    case PUSH_TYPE:
      return isSetPushType();
    case HTTP_FILE_PATH:
      return isSetHttpFilePath();
    case HTTP_FILE_SIZE:
      return isSetHttpFileSize();
    case DELETE_CONDITIONS:
      return isSetDeleteConditions();
    case NEED_DECOMPRESS:
      return isSetNeedDecompress();
    case TRANSACTION_ID:
      return isSetTransactionId();
    case PARTITION_ID:
      return isSetPartitionId();
    case IS_SCHEMA_CHANGING:
      return isSetIsSchemaChanging();
    case BROKER_SCAN_RANGE:
      return isSetBrokerScanRange();
    case DESC_TBL:
      return isSetDescTbl();
    case COLUMNS_DESC:
      return isSetColumnsDesc();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TPushReq)
      return this.equals((TPushReq)that);
    return false;
  }

  public boolean equals(TPushReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tablet_id = true;
    boolean that_present_tablet_id = true;
    if (this_present_tablet_id || that_present_tablet_id) {
      if (!(this_present_tablet_id && that_present_tablet_id))
        return false;
      if (this.tablet_id != that.tablet_id)
        return false;
    }

    boolean this_present_schema_hash = true;
    boolean that_present_schema_hash = true;
    if (this_present_schema_hash || that_present_schema_hash) {
      if (!(this_present_schema_hash && that_present_schema_hash))
        return false;
      if (this.schema_hash != that.schema_hash)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_version_hash = true;
    boolean that_present_version_hash = true;
    if (this_present_version_hash || that_present_version_hash) {
      if (!(this_present_version_hash && that_present_version_hash))
        return false;
      if (this.version_hash != that.version_hash)
        return false;
    }

    boolean this_present_timeout = true;
    boolean that_present_timeout = true;
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    boolean this_present_push_type = true && this.isSetPushType();
    boolean that_present_push_type = true && that.isSetPushType();
    if (this_present_push_type || that_present_push_type) {
      if (!(this_present_push_type && that_present_push_type))
        return false;
      if (!this.push_type.equals(that.push_type))
        return false;
    }

    boolean this_present_http_file_path = true && this.isSetHttpFilePath();
    boolean that_present_http_file_path = true && that.isSetHttpFilePath();
    if (this_present_http_file_path || that_present_http_file_path) {
      if (!(this_present_http_file_path && that_present_http_file_path))
        return false;
      if (!this.http_file_path.equals(that.http_file_path))
        return false;
    }

    boolean this_present_http_file_size = true && this.isSetHttpFileSize();
    boolean that_present_http_file_size = true && that.isSetHttpFileSize();
    if (this_present_http_file_size || that_present_http_file_size) {
      if (!(this_present_http_file_size && that_present_http_file_size))
        return false;
      if (this.http_file_size != that.http_file_size)
        return false;
    }

    boolean this_present_delete_conditions = true && this.isSetDeleteConditions();
    boolean that_present_delete_conditions = true && that.isSetDeleteConditions();
    if (this_present_delete_conditions || that_present_delete_conditions) {
      if (!(this_present_delete_conditions && that_present_delete_conditions))
        return false;
      if (!this.delete_conditions.equals(that.delete_conditions))
        return false;
    }

    boolean this_present_need_decompress = true && this.isSetNeedDecompress();
    boolean that_present_need_decompress = true && that.isSetNeedDecompress();
    if (this_present_need_decompress || that_present_need_decompress) {
      if (!(this_present_need_decompress && that_present_need_decompress))
        return false;
      if (this.need_decompress != that.need_decompress)
        return false;
    }

    boolean this_present_transaction_id = true && this.isSetTransactionId();
    boolean that_present_transaction_id = true && that.isSetTransactionId();
    if (this_present_transaction_id || that_present_transaction_id) {
      if (!(this_present_transaction_id && that_present_transaction_id))
        return false;
      if (this.transaction_id != that.transaction_id)
        return false;
    }

    boolean this_present_partition_id = true && this.isSetPartitionId();
    boolean that_present_partition_id = true && that.isSetPartitionId();
    if (this_present_partition_id || that_present_partition_id) {
      if (!(this_present_partition_id && that_present_partition_id))
        return false;
      if (this.partition_id != that.partition_id)
        return false;
    }

    boolean this_present_is_schema_changing = true && this.isSetIsSchemaChanging();
    boolean that_present_is_schema_changing = true && that.isSetIsSchemaChanging();
    if (this_present_is_schema_changing || that_present_is_schema_changing) {
      if (!(this_present_is_schema_changing && that_present_is_schema_changing))
        return false;
      if (this.is_schema_changing != that.is_schema_changing)
        return false;
    }

    boolean this_present_broker_scan_range = true && this.isSetBrokerScanRange();
    boolean that_present_broker_scan_range = true && that.isSetBrokerScanRange();
    if (this_present_broker_scan_range || that_present_broker_scan_range) {
      if (!(this_present_broker_scan_range && that_present_broker_scan_range))
        return false;
      if (!this.broker_scan_range.equals(that.broker_scan_range))
        return false;
    }

    boolean this_present_desc_tbl = true && this.isSetDescTbl();
    boolean that_present_desc_tbl = true && that.isSetDescTbl();
    if (this_present_desc_tbl || that_present_desc_tbl) {
      if (!(this_present_desc_tbl && that_present_desc_tbl))
        return false;
      if (!this.desc_tbl.equals(that.desc_tbl))
        return false;
    }

    boolean this_present_columns_desc = true && this.isSetColumnsDesc();
    boolean that_present_columns_desc = true && that.isSetColumnsDesc();
    if (this_present_columns_desc || that_present_columns_desc) {
      if (!(this_present_columns_desc && that_present_columns_desc))
        return false;
      if (!this.columns_desc.equals(that.columns_desc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tablet_id);

    hashCode = hashCode * 8191 + schema_hash;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version_hash);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timeout);

    hashCode = hashCode * 8191 + ((isSetPushType()) ? 131071 : 524287);
    if (isSetPushType())
      hashCode = hashCode * 8191 + push_type.getValue();

    hashCode = hashCode * 8191 + ((isSetHttpFilePath()) ? 131071 : 524287);
    if (isSetHttpFilePath())
      hashCode = hashCode * 8191 + http_file_path.hashCode();

    hashCode = hashCode * 8191 + ((isSetHttpFileSize()) ? 131071 : 524287);
    if (isSetHttpFileSize())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(http_file_size);

    hashCode = hashCode * 8191 + ((isSetDeleteConditions()) ? 131071 : 524287);
    if (isSetDeleteConditions())
      hashCode = hashCode * 8191 + delete_conditions.hashCode();

    hashCode = hashCode * 8191 + ((isSetNeedDecompress()) ? 131071 : 524287);
    if (isSetNeedDecompress())
      hashCode = hashCode * 8191 + ((need_decompress) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTransactionId()) ? 131071 : 524287);
    if (isSetTransactionId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(transaction_id);

    hashCode = hashCode * 8191 + ((isSetPartitionId()) ? 131071 : 524287);
    if (isSetPartitionId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partition_id);

    hashCode = hashCode * 8191 + ((isSetIsSchemaChanging()) ? 131071 : 524287);
    if (isSetIsSchemaChanging())
      hashCode = hashCode * 8191 + ((is_schema_changing) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBrokerScanRange()) ? 131071 : 524287);
    if (isSetBrokerScanRange())
      hashCode = hashCode * 8191 + broker_scan_range.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescTbl()) ? 131071 : 524287);
    if (isSetDescTbl())
      hashCode = hashCode * 8191 + desc_tbl.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnsDesc()) ? 131071 : 524287);
    if (isSetColumnsDesc())
      hashCode = hashCode * 8191 + columns_desc.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TPushReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTabletId(), other.isSetTabletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTabletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_id, other.tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchemaHash(), other.isSetSchemaHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchemaHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_hash, other.schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersionHash(), other.isSetVersionHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_hash, other.version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimeout(), other.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, other.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPushType(), other.isSetPushType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.push_type, other.push_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHttpFilePath(), other.isSetHttpFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttpFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.http_file_path, other.http_file_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHttpFileSize(), other.isSetHttpFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHttpFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.http_file_size, other.http_file_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDeleteConditions(), other.isSetDeleteConditions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleteConditions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delete_conditions, other.delete_conditions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNeedDecompress(), other.isSetNeedDecompress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedDecompress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.need_decompress, other.need_decompress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTransactionId(), other.isSetTransactionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transaction_id, other.transaction_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartitionId(), other.isSetPartitionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id, other.partition_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsSchemaChanging(), other.isSetIsSchemaChanging());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSchemaChanging()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_schema_changing, other.is_schema_changing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBrokerScanRange(), other.isSetBrokerScanRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerScanRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.broker_scan_range, other.broker_scan_range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDescTbl(), other.isSetDescTbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescTbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc_tbl, other.desc_tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnsDesc(), other.isSetColumnsDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnsDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns_desc, other.columns_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPushReq(");
    boolean first = true;

    sb.append("tablet_id:");
    sb.append(this.tablet_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("schema_hash:");
    sb.append(this.schema_hash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version_hash:");
    sb.append(this.version_hash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeout:");
    sb.append(this.timeout);
    first = false;
    if (!first) sb.append(", ");
    sb.append("push_type:");
    if (this.push_type == null) {
      sb.append("null");
    } else {
      sb.append(this.push_type);
    }
    first = false;
    if (isSetHttpFilePath()) {
      if (!first) sb.append(", ");
      sb.append("http_file_path:");
      if (this.http_file_path == null) {
        sb.append("null");
      } else {
        sb.append(this.http_file_path);
      }
      first = false;
    }
    if (isSetHttpFileSize()) {
      if (!first) sb.append(", ");
      sb.append("http_file_size:");
      sb.append(this.http_file_size);
      first = false;
    }
    if (isSetDeleteConditions()) {
      if (!first) sb.append(", ");
      sb.append("delete_conditions:");
      if (this.delete_conditions == null) {
        sb.append("null");
      } else {
        sb.append(this.delete_conditions);
      }
      first = false;
    }
    if (isSetNeedDecompress()) {
      if (!first) sb.append(", ");
      sb.append("need_decompress:");
      sb.append(this.need_decompress);
      first = false;
    }
    if (isSetTransactionId()) {
      if (!first) sb.append(", ");
      sb.append("transaction_id:");
      sb.append(this.transaction_id);
      first = false;
    }
    if (isSetPartitionId()) {
      if (!first) sb.append(", ");
      sb.append("partition_id:");
      sb.append(this.partition_id);
      first = false;
    }
    if (isSetIsSchemaChanging()) {
      if (!first) sb.append(", ");
      sb.append("is_schema_changing:");
      sb.append(this.is_schema_changing);
      first = false;
    }
    if (isSetBrokerScanRange()) {
      if (!first) sb.append(", ");
      sb.append("broker_scan_range:");
      if (this.broker_scan_range == null) {
        sb.append("null");
      } else {
        sb.append(this.broker_scan_range);
      }
      first = false;
    }
    if (isSetDescTbl()) {
      if (!first) sb.append(", ");
      sb.append("desc_tbl:");
      if (this.desc_tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.desc_tbl);
      }
      first = false;
    }
    if (isSetColumnsDesc()) {
      if (!first) sb.append(", ");
      sb.append("columns_desc:");
      if (this.columns_desc == null) {
        sb.append("null");
      } else {
        sb.append(this.columns_desc);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'tablet_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'schema_hash' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'version' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'version_hash' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'timeout' because it's a primitive and you chose the non-beans generator.
    if (push_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'push_type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (broker_scan_range != null) {
      broker_scan_range.validate();
    }
    if (desc_tbl != null) {
      desc_tbl.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPushReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPushReqStandardScheme getScheme() {
      return new TPushReqStandardScheme();
    }
  }

  private static class TPushReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPushReq> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TPushReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_id = iprot.readI64();
              struct.setTabletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schema_hash = iprot.readI32();
              struct.setSchemaHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version_hash = iprot.readI64();
              struct.setVersionHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timeout = iprot.readI64();
              struct.setTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PUSH_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.push_type = org.apache.doris.thrift.TPushType.findByValue(iprot.readI32());
              struct.setPushTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HTTP_FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.http_file_path = iprot.readString();
              struct.setHttpFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // HTTP_FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.http_file_size = iprot.readI64();
              struct.setHttpFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DELETE_CONDITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                struct.delete_conditions = new java.util.ArrayList<org.apache.doris.thrift.TCondition>(_list88.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TCondition _elem89;
                for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                {
                  _elem89 = new org.apache.doris.thrift.TCondition();
                  _elem89.read(iprot);
                  struct.delete_conditions.add(_elem89);
                }
                iprot.readListEnd();
              }
              struct.setDeleteConditionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NEED_DECOMPRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.need_decompress = iprot.readBool();
              struct.setNeedDecompressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TRANSACTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.transaction_id = iprot.readI64();
              struct.setTransactionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_id = iprot.readI64();
              struct.setPartitionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_SCHEMA_CHANGING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_schema_changing = iprot.readBool();
              struct.setIsSchemaChangingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BROKER_SCAN_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.broker_scan_range = new org.apache.doris.thrift.TBrokerScanRange();
              struct.broker_scan_range.read(iprot);
              struct.setBrokerScanRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DESC_TBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.desc_tbl = new org.apache.doris.thrift.TDescriptorTable();
              struct.desc_tbl.read(iprot);
              struct.setDescTblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // COLUMNS_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list91 = iprot.readListBegin();
                struct.columns_desc = new java.util.ArrayList<org.apache.doris.thrift.TColumn>(_list91.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TColumn _elem92;
                for (int _i93 = 0; _i93 < _list91.size; ++_i93)
                {
                  _elem92 = new org.apache.doris.thrift.TColumn();
                  _elem92.read(iprot);
                  struct.columns_desc.add(_elem92);
                }
                iprot.readListEnd();
              }
              struct.setColumnsDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTabletId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tablet_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSchemaHash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'schema_hash' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVersion()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVersionHash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'version_hash' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTimeout()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeout' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TPushReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TABLET_ID_FIELD_DESC);
      oprot.writeI64(struct.tablet_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCHEMA_HASH_FIELD_DESC);
      oprot.writeI32(struct.schema_hash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI64(struct.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_HASH_FIELD_DESC);
      oprot.writeI64(struct.version_hash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
      oprot.writeI64(struct.timeout);
      oprot.writeFieldEnd();
      if (struct.push_type != null) {
        oprot.writeFieldBegin(PUSH_TYPE_FIELD_DESC);
        oprot.writeI32(struct.push_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.http_file_path != null) {
        if (struct.isSetHttpFilePath()) {
          oprot.writeFieldBegin(HTTP_FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.http_file_path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHttpFileSize()) {
        oprot.writeFieldBegin(HTTP_FILE_SIZE_FIELD_DESC);
        oprot.writeI64(struct.http_file_size);
        oprot.writeFieldEnd();
      }
      if (struct.delete_conditions != null) {
        if (struct.isSetDeleteConditions()) {
          oprot.writeFieldBegin(DELETE_CONDITIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.delete_conditions.size()));
            for (org.apache.doris.thrift.TCondition _iter94 : struct.delete_conditions)
            {
              _iter94.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNeedDecompress()) {
        oprot.writeFieldBegin(NEED_DECOMPRESS_FIELD_DESC);
        oprot.writeBool(struct.need_decompress);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTransactionId()) {
        oprot.writeFieldBegin(TRANSACTION_ID_FIELD_DESC);
        oprot.writeI64(struct.transaction_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartitionId()) {
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI64(struct.partition_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsSchemaChanging()) {
        oprot.writeFieldBegin(IS_SCHEMA_CHANGING_FIELD_DESC);
        oprot.writeBool(struct.is_schema_changing);
        oprot.writeFieldEnd();
      }
      if (struct.broker_scan_range != null) {
        if (struct.isSetBrokerScanRange()) {
          oprot.writeFieldBegin(BROKER_SCAN_RANGE_FIELD_DESC);
          struct.broker_scan_range.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc_tbl != null) {
        if (struct.isSetDescTbl()) {
          oprot.writeFieldBegin(DESC_TBL_FIELD_DESC);
          struct.desc_tbl.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.columns_desc != null) {
        if (struct.isSetColumnsDesc()) {
          oprot.writeFieldBegin(COLUMNS_DESC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns_desc.size()));
            for (org.apache.doris.thrift.TColumn _iter95 : struct.columns_desc)
            {
              _iter95.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPushReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPushReqTupleScheme getScheme() {
      return new TPushReqTupleScheme();
    }
  }

  private static class TPushReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPushReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPushReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.tablet_id);
      oprot.writeI32(struct.schema_hash);
      oprot.writeI64(struct.version);
      oprot.writeI64(struct.version_hash);
      oprot.writeI64(struct.timeout);
      oprot.writeI32(struct.push_type.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHttpFilePath()) {
        optionals.set(0);
      }
      if (struct.isSetHttpFileSize()) {
        optionals.set(1);
      }
      if (struct.isSetDeleteConditions()) {
        optionals.set(2);
      }
      if (struct.isSetNeedDecompress()) {
        optionals.set(3);
      }
      if (struct.isSetTransactionId()) {
        optionals.set(4);
      }
      if (struct.isSetPartitionId()) {
        optionals.set(5);
      }
      if (struct.isSetIsSchemaChanging()) {
        optionals.set(6);
      }
      if (struct.isSetBrokerScanRange()) {
        optionals.set(7);
      }
      if (struct.isSetDescTbl()) {
        optionals.set(8);
      }
      if (struct.isSetColumnsDesc()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetHttpFilePath()) {
        oprot.writeString(struct.http_file_path);
      }
      if (struct.isSetHttpFileSize()) {
        oprot.writeI64(struct.http_file_size);
      }
      if (struct.isSetDeleteConditions()) {
        {
          oprot.writeI32(struct.delete_conditions.size());
          for (org.apache.doris.thrift.TCondition _iter96 : struct.delete_conditions)
          {
            _iter96.write(oprot);
          }
        }
      }
      if (struct.isSetNeedDecompress()) {
        oprot.writeBool(struct.need_decompress);
      }
      if (struct.isSetTransactionId()) {
        oprot.writeI64(struct.transaction_id);
      }
      if (struct.isSetPartitionId()) {
        oprot.writeI64(struct.partition_id);
      }
      if (struct.isSetIsSchemaChanging()) {
        oprot.writeBool(struct.is_schema_changing);
      }
      if (struct.isSetBrokerScanRange()) {
        struct.broker_scan_range.write(oprot);
      }
      if (struct.isSetDescTbl()) {
        struct.desc_tbl.write(oprot);
      }
      if (struct.isSetColumnsDesc()) {
        {
          oprot.writeI32(struct.columns_desc.size());
          for (org.apache.doris.thrift.TColumn _iter97 : struct.columns_desc)
          {
            _iter97.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPushReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tablet_id = iprot.readI64();
      struct.setTabletIdIsSet(true);
      struct.schema_hash = iprot.readI32();
      struct.setSchemaHashIsSet(true);
      struct.version = iprot.readI64();
      struct.setVersionIsSet(true);
      struct.version_hash = iprot.readI64();
      struct.setVersionHashIsSet(true);
      struct.timeout = iprot.readI64();
      struct.setTimeoutIsSet(true);
      struct.push_type = org.apache.doris.thrift.TPushType.findByValue(iprot.readI32());
      struct.setPushTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.http_file_path = iprot.readString();
        struct.setHttpFilePathIsSet(true);
      }
      if (incoming.get(1)) {
        struct.http_file_size = iprot.readI64();
        struct.setHttpFileSizeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list98 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.delete_conditions = new java.util.ArrayList<org.apache.doris.thrift.TCondition>(_list98.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TCondition _elem99;
          for (int _i100 = 0; _i100 < _list98.size; ++_i100)
          {
            _elem99 = new org.apache.doris.thrift.TCondition();
            _elem99.read(iprot);
            struct.delete_conditions.add(_elem99);
          }
        }
        struct.setDeleteConditionsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.need_decompress = iprot.readBool();
        struct.setNeedDecompressIsSet(true);
      }
      if (incoming.get(4)) {
        struct.transaction_id = iprot.readI64();
        struct.setTransactionIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.partition_id = iprot.readI64();
        struct.setPartitionIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.is_schema_changing = iprot.readBool();
        struct.setIsSchemaChangingIsSet(true);
      }
      if (incoming.get(7)) {
        struct.broker_scan_range = new org.apache.doris.thrift.TBrokerScanRange();
        struct.broker_scan_range.read(iprot);
        struct.setBrokerScanRangeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.desc_tbl = new org.apache.doris.thrift.TDescriptorTable();
        struct.desc_tbl.read(iprot);
        struct.setDescTblIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list101 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.columns_desc = new java.util.ArrayList<org.apache.doris.thrift.TColumn>(_list101.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TColumn _elem102;
          for (int _i103 = 0; _i103 < _list101.size; ++_i103)
          {
            _elem102 = new org.apache.doris.thrift.TColumn();
            _elem102.read(iprot);
            struct.columns_desc.add(_elem102);
          }
        }
        struct.setColumnsDescIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

