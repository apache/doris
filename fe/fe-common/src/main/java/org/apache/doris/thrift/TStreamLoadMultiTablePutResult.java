/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-08-29")
public class TStreamLoadMultiTablePutResult implements org.apache.thrift.TBase<TStreamLoadMultiTablePutResult, TStreamLoadMultiTablePutResult._Fields>, java.io.Serializable, Cloneable, Comparable<TStreamLoadMultiTablePutResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStreamLoadMultiTablePutResult");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PIPELINE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeline_params", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TStreamLoadMultiTablePutResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TStreamLoadMultiTablePutResultTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TStatus status; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TExecPlanFragmentParams> params; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TPipelineFragmentParams> pipeline_params; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    PARAMS((short)2, "params"),
    PIPELINE_PARAMS((short)3, "pipeline_params");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // PARAMS
          return PARAMS;
        case 3: // PIPELINE_PARAMS
          return PIPELINE_PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PARAMS,_Fields.PIPELINE_PARAMS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TStatus.class)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TExecPlanFragmentParams.class))));
    tmpMap.put(_Fields.PIPELINE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("pipeline_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TPipelineFragmentParams.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStreamLoadMultiTablePutResult.class, metaDataMap);
  }

  public TStreamLoadMultiTablePutResult() {
  }

  public TStreamLoadMultiTablePutResult(
    org.apache.doris.thrift.TStatus status)
  {
    this();
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStreamLoadMultiTablePutResult(TStreamLoadMultiTablePutResult other) {
    if (other.isSetStatus()) {
      this.status = new org.apache.doris.thrift.TStatus(other.status);
    }
    if (other.isSetParams()) {
      java.util.List<org.apache.doris.thrift.TExecPlanFragmentParams> __this__params = new java.util.ArrayList<org.apache.doris.thrift.TExecPlanFragmentParams>(other.params.size());
      for (org.apache.doris.thrift.TExecPlanFragmentParams other_element : other.params) {
        __this__params.add(new org.apache.doris.thrift.TExecPlanFragmentParams(other_element));
      }
      this.params = __this__params;
    }
    if (other.isSetPipelineParams()) {
      java.util.List<org.apache.doris.thrift.TPipelineFragmentParams> __this__pipeline_params = new java.util.ArrayList<org.apache.doris.thrift.TPipelineFragmentParams>(other.pipeline_params.size());
      for (org.apache.doris.thrift.TPipelineFragmentParams other_element : other.pipeline_params) {
        __this__pipeline_params.add(new org.apache.doris.thrift.TPipelineFragmentParams(other_element));
      }
      this.pipeline_params = __this__pipeline_params;
    }
  }

  @Override
  public TStreamLoadMultiTablePutResult deepCopy() {
    return new TStreamLoadMultiTablePutResult(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.params = null;
    this.pipeline_params = null;
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TStatus getStatus() {
    return this.status;
  }

  public TStreamLoadMultiTablePutResult setStatus(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getParamsSize() {
    return (this.params == null) ? 0 : this.params.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TExecPlanFragmentParams> getParamsIterator() {
    return (this.params == null) ? null : this.params.iterator();
  }

  public void addToParams(org.apache.doris.thrift.TExecPlanFragmentParams elem) {
    if (this.params == null) {
      this.params = new java.util.ArrayList<org.apache.doris.thrift.TExecPlanFragmentParams>();
    }
    this.params.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TExecPlanFragmentParams> getParams() {
    return this.params;
  }

  public TStreamLoadMultiTablePutResult setParams(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TExecPlanFragmentParams> params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public int getPipelineParamsSize() {
    return (this.pipeline_params == null) ? 0 : this.pipeline_params.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TPipelineFragmentParams> getPipelineParamsIterator() {
    return (this.pipeline_params == null) ? null : this.pipeline_params.iterator();
  }

  public void addToPipelineParams(org.apache.doris.thrift.TPipelineFragmentParams elem) {
    if (this.pipeline_params == null) {
      this.pipeline_params = new java.util.ArrayList<org.apache.doris.thrift.TPipelineFragmentParams>();
    }
    this.pipeline_params.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TPipelineFragmentParams> getPipelineParams() {
    return this.pipeline_params;
  }

  public TStreamLoadMultiTablePutResult setPipelineParams(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TPipelineFragmentParams> pipeline_params) {
    this.pipeline_params = pipeline_params;
    return this;
  }

  public void unsetPipelineParams() {
    this.pipeline_params = null;
  }

  /** Returns true if field pipeline_params is set (has been assigned a value) and false otherwise */
  public boolean isSetPipelineParams() {
    return this.pipeline_params != null;
  }

  public void setPipelineParamsIsSet(boolean value) {
    if (!value) {
      this.pipeline_params = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((org.apache.doris.thrift.TStatus)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((java.util.List<org.apache.doris.thrift.TExecPlanFragmentParams>)value);
      }
      break;

    case PIPELINE_PARAMS:
      if (value == null) {
        unsetPipelineParams();
      } else {
        setPipelineParams((java.util.List<org.apache.doris.thrift.TPipelineFragmentParams>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case PARAMS:
      return getParams();

    case PIPELINE_PARAMS:
      return getPipelineParams();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case PARAMS:
      return isSetParams();
    case PIPELINE_PARAMS:
      return isSetPipelineParams();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TStreamLoadMultiTablePutResult)
      return this.equals((TStreamLoadMultiTablePutResult)that);
    return false;
  }

  public boolean equals(TStreamLoadMultiTablePutResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_pipeline_params = true && this.isSetPipelineParams();
    boolean that_present_pipeline_params = true && that.isSetPipelineParams();
    if (this_present_pipeline_params || that_present_pipeline_params) {
      if (!(this_present_pipeline_params && that_present_pipeline_params))
        return false;
      if (!this.pipeline_params.equals(that.pipeline_params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
    if (isSetParams())
      hashCode = hashCode * 8191 + params.hashCode();

    hashCode = hashCode * 8191 + ((isSetPipelineParams()) ? 131071 : 524287);
    if (isSetPipelineParams())
      hashCode = hashCode * 8191 + pipeline_params.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TStreamLoadMultiTablePutResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetParams(), other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPipelineParams(), other.isSetPipelineParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipelineParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeline_params, other.pipeline_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TStreamLoadMultiTablePutResult(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetParams()) {
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
    }
    if (isSetPipelineParams()) {
      if (!first) sb.append(", ");
      sb.append("pipeline_params:");
      if (this.pipeline_params == null) {
        sb.append("null");
      } else {
        sb.append(this.pipeline_params);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStreamLoadMultiTablePutResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStreamLoadMultiTablePutResultStandardScheme getScheme() {
      return new TStreamLoadMultiTablePutResultStandardScheme();
    }
  }

  private static class TStreamLoadMultiTablePutResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TStreamLoadMultiTablePutResult> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TStreamLoadMultiTablePutResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new org.apache.doris.thrift.TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list258 = iprot.readListBegin();
                struct.params = new java.util.ArrayList<org.apache.doris.thrift.TExecPlanFragmentParams>(_list258.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExecPlanFragmentParams _elem259;
                for (int _i260 = 0; _i260 < _list258.size; ++_i260)
                {
                  _elem259 = new org.apache.doris.thrift.TExecPlanFragmentParams();
                  _elem259.read(iprot);
                  struct.params.add(_elem259);
                }
                iprot.readListEnd();
              }
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PIPELINE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list261 = iprot.readListBegin();
                struct.pipeline_params = new java.util.ArrayList<org.apache.doris.thrift.TPipelineFragmentParams>(_list261.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TPipelineFragmentParams _elem262;
                for (int _i263 = 0; _i263 < _list261.size; ++_i263)
                {
                  _elem262 = new org.apache.doris.thrift.TPipelineFragmentParams();
                  _elem262.read(iprot);
                  struct.pipeline_params.add(_elem262);
                }
                iprot.readListEnd();
              }
              struct.setPipelineParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TStreamLoadMultiTablePutResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.params != null) {
        if (struct.isSetParams()) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.params.size()));
            for (org.apache.doris.thrift.TExecPlanFragmentParams _iter264 : struct.params)
            {
              _iter264.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.pipeline_params != null) {
        if (struct.isSetPipelineParams()) {
          oprot.writeFieldBegin(PIPELINE_PARAMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.pipeline_params.size()));
            for (org.apache.doris.thrift.TPipelineFragmentParams _iter265 : struct.pipeline_params)
            {
              _iter265.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStreamLoadMultiTablePutResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStreamLoadMultiTablePutResultTupleScheme getScheme() {
      return new TStreamLoadMultiTablePutResultTupleScheme();
    }
  }

  private static class TStreamLoadMultiTablePutResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TStreamLoadMultiTablePutResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStreamLoadMultiTablePutResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.status.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetParams()) {
        optionals.set(0);
      }
      if (struct.isSetPipelineParams()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetParams()) {
        {
          oprot.writeI32(struct.params.size());
          for (org.apache.doris.thrift.TExecPlanFragmentParams _iter266 : struct.params)
          {
            _iter266.write(oprot);
          }
        }
      }
      if (struct.isSetPipelineParams()) {
        {
          oprot.writeI32(struct.pipeline_params.size());
          for (org.apache.doris.thrift.TPipelineFragmentParams _iter267 : struct.pipeline_params)
          {
            _iter267.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStreamLoadMultiTablePutResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.status = new org.apache.doris.thrift.TStatus();
      struct.status.read(iprot);
      struct.setStatusIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list268 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.params = new java.util.ArrayList<org.apache.doris.thrift.TExecPlanFragmentParams>(_list268.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExecPlanFragmentParams _elem269;
          for (int _i270 = 0; _i270 < _list268.size; ++_i270)
          {
            _elem269 = new org.apache.doris.thrift.TExecPlanFragmentParams();
            _elem269.read(iprot);
            struct.params.add(_elem269);
          }
        }
        struct.setParamsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list271 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.pipeline_params = new java.util.ArrayList<org.apache.doris.thrift.TPipelineFragmentParams>(_list271.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TPipelineFragmentParams _elem272;
          for (int _i273 = 0; _i273 < _list271.size; ++_i273)
          {
            _elem272 = new org.apache.doris.thrift.TPipelineFragmentParams();
            _elem272.read(iprot);
            struct.pipeline_params.add(_elem272);
          }
        }
        struct.setPipelineParamsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

