/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-06-20")
public class TIcebergFileDesc implements org.apache.thrift.TBase<TIcebergFileDesc, TIcebergFileDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TIcebergFileDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TIcebergFileDesc");

  private static final org.apache.thrift.protocol.TField FORMAT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("format_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DELETE_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("delete_files", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField DELETE_TABLE_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("delete_table_tuple_id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FILE_SELECT_CONJUNCT_FIELD_DESC = new org.apache.thrift.protocol.TField("file_select_conjunct", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TIcebergFileDescStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TIcebergFileDescTupleSchemeFactory();

  public int format_version; // optional
  public int content; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TIcebergDeleteFileDesc> delete_files; // optional
  public int delete_table_tuple_id; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr file_select_conjunct; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FORMAT_VERSION((short)1, "format_version"),
    CONTENT((short)2, "content"),
    DELETE_FILES((short)3, "delete_files"),
    DELETE_TABLE_TUPLE_ID((short)4, "delete_table_tuple_id"),
    FILE_SELECT_CONJUNCT((short)5, "file_select_conjunct");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FORMAT_VERSION
          return FORMAT_VERSION;
        case 2: // CONTENT
          return CONTENT;
        case 3: // DELETE_FILES
          return DELETE_FILES;
        case 4: // DELETE_TABLE_TUPLE_ID
          return DELETE_TABLE_TUPLE_ID;
        case 5: // FILE_SELECT_CONJUNCT
          return FILE_SELECT_CONJUNCT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FORMAT_VERSION_ISSET_ID = 0;
  private static final int __CONTENT_ISSET_ID = 1;
  private static final int __DELETE_TABLE_TUPLE_ID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FORMAT_VERSION,_Fields.CONTENT,_Fields.DELETE_FILES,_Fields.DELETE_TABLE_TUPLE_ID,_Fields.FILE_SELECT_CONJUNCT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FORMAT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("format_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DELETE_FILES, new org.apache.thrift.meta_data.FieldMetaData("delete_files", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIcebergDeleteFileDesc.class))));
    tmpMap.put(_Fields.DELETE_TABLE_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("delete_table_tuple_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.FILE_SELECT_CONJUNCT, new org.apache.thrift.meta_data.FieldMetaData("file_select_conjunct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TExpr.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TIcebergFileDesc.class, metaDataMap);
  }

  public TIcebergFileDesc() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TIcebergFileDesc(TIcebergFileDesc other) {
    __isset_bitfield = other.__isset_bitfield;
    this.format_version = other.format_version;
    this.content = other.content;
    if (other.isSetDeleteFiles()) {
      java.util.List<TIcebergDeleteFileDesc> __this__delete_files = new java.util.ArrayList<TIcebergDeleteFileDesc>(other.delete_files.size());
      for (TIcebergDeleteFileDesc other_element : other.delete_files) {
        __this__delete_files.add(new TIcebergDeleteFileDesc(other_element));
      }
      this.delete_files = __this__delete_files;
    }
    this.delete_table_tuple_id = other.delete_table_tuple_id;
    if (other.isSetFileSelectConjunct()) {
      this.file_select_conjunct = new org.apache.doris.thrift.TExpr(other.file_select_conjunct);
    }
  }

  @Override
  public TIcebergFileDesc deepCopy() {
    return new TIcebergFileDesc(this);
  }

  @Override
  public void clear() {
    setFormatVersionIsSet(false);
    this.format_version = 0;
    setContentIsSet(false);
    this.content = 0;
    this.delete_files = null;
    setDeleteTableTupleIdIsSet(false);
    this.delete_table_tuple_id = 0;
    this.file_select_conjunct = null;
  }

  public int getFormatVersion() {
    return this.format_version;
  }

  public TIcebergFileDesc setFormatVersion(int format_version) {
    this.format_version = format_version;
    setFormatVersionIsSet(true);
    return this;
  }

  public void unsetFormatVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FORMAT_VERSION_ISSET_ID);
  }

  /** Returns true if field format_version is set (has been assigned a value) and false otherwise */
  public boolean isSetFormatVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FORMAT_VERSION_ISSET_ID);
  }

  public void setFormatVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FORMAT_VERSION_ISSET_ID, value);
  }

  public int getContent() {
    return this.content;
  }

  public TIcebergFileDesc setContent(int content) {
    this.content = content;
    setContentIsSet(true);
    return this;
  }

  public void unsetContent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONTENT_ISSET_ID);
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONTENT_ISSET_ID);
  }

  public void setContentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONTENT_ISSET_ID, value);
  }

  public int getDeleteFilesSize() {
    return (this.delete_files == null) ? 0 : this.delete_files.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TIcebergDeleteFileDesc> getDeleteFilesIterator() {
    return (this.delete_files == null) ? null : this.delete_files.iterator();
  }

  public void addToDeleteFiles(TIcebergDeleteFileDesc elem) {
    if (this.delete_files == null) {
      this.delete_files = new java.util.ArrayList<TIcebergDeleteFileDesc>();
    }
    this.delete_files.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TIcebergDeleteFileDesc> getDeleteFiles() {
    return this.delete_files;
  }

  public TIcebergFileDesc setDeleteFiles(@org.apache.thrift.annotation.Nullable java.util.List<TIcebergDeleteFileDesc> delete_files) {
    this.delete_files = delete_files;
    return this;
  }

  public void unsetDeleteFiles() {
    this.delete_files = null;
  }

  /** Returns true if field delete_files is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleteFiles() {
    return this.delete_files != null;
  }

  public void setDeleteFilesIsSet(boolean value) {
    if (!value) {
      this.delete_files = null;
    }
  }

  public int getDeleteTableTupleId() {
    return this.delete_table_tuple_id;
  }

  public TIcebergFileDesc setDeleteTableTupleId(int delete_table_tuple_id) {
    this.delete_table_tuple_id = delete_table_tuple_id;
    setDeleteTableTupleIdIsSet(true);
    return this;
  }

  public void unsetDeleteTableTupleId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DELETE_TABLE_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field delete_table_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleteTableTupleId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DELETE_TABLE_TUPLE_ID_ISSET_ID);
  }

  public void setDeleteTableTupleIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DELETE_TABLE_TUPLE_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TExpr getFileSelectConjunct() {
    return this.file_select_conjunct;
  }

  public TIcebergFileDesc setFileSelectConjunct(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr file_select_conjunct) {
    this.file_select_conjunct = file_select_conjunct;
    return this;
  }

  public void unsetFileSelectConjunct() {
    this.file_select_conjunct = null;
  }

  /** Returns true if field file_select_conjunct is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSelectConjunct() {
    return this.file_select_conjunct != null;
  }

  public void setFileSelectConjunctIsSet(boolean value) {
    if (!value) {
      this.file_select_conjunct = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FORMAT_VERSION:
      if (value == null) {
        unsetFormatVersion();
      } else {
        setFormatVersion((java.lang.Integer)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((java.lang.Integer)value);
      }
      break;

    case DELETE_FILES:
      if (value == null) {
        unsetDeleteFiles();
      } else {
        setDeleteFiles((java.util.List<TIcebergDeleteFileDesc>)value);
      }
      break;

    case DELETE_TABLE_TUPLE_ID:
      if (value == null) {
        unsetDeleteTableTupleId();
      } else {
        setDeleteTableTupleId((java.lang.Integer)value);
      }
      break;

    case FILE_SELECT_CONJUNCT:
      if (value == null) {
        unsetFileSelectConjunct();
      } else {
        setFileSelectConjunct((org.apache.doris.thrift.TExpr)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FORMAT_VERSION:
      return getFormatVersion();

    case CONTENT:
      return getContent();

    case DELETE_FILES:
      return getDeleteFiles();

    case DELETE_TABLE_TUPLE_ID:
      return getDeleteTableTupleId();

    case FILE_SELECT_CONJUNCT:
      return getFileSelectConjunct();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FORMAT_VERSION:
      return isSetFormatVersion();
    case CONTENT:
      return isSetContent();
    case DELETE_FILES:
      return isSetDeleteFiles();
    case DELETE_TABLE_TUPLE_ID:
      return isSetDeleteTableTupleId();
    case FILE_SELECT_CONJUNCT:
      return isSetFileSelectConjunct();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TIcebergFileDesc)
      return this.equals((TIcebergFileDesc)that);
    return false;
  }

  public boolean equals(TIcebergFileDesc that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_format_version = true && this.isSetFormatVersion();
    boolean that_present_format_version = true && that.isSetFormatVersion();
    if (this_present_format_version || that_present_format_version) {
      if (!(this_present_format_version && that_present_format_version))
        return false;
      if (this.format_version != that.format_version)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (this.content != that.content)
        return false;
    }

    boolean this_present_delete_files = true && this.isSetDeleteFiles();
    boolean that_present_delete_files = true && that.isSetDeleteFiles();
    if (this_present_delete_files || that_present_delete_files) {
      if (!(this_present_delete_files && that_present_delete_files))
        return false;
      if (!this.delete_files.equals(that.delete_files))
        return false;
    }

    boolean this_present_delete_table_tuple_id = true && this.isSetDeleteTableTupleId();
    boolean that_present_delete_table_tuple_id = true && that.isSetDeleteTableTupleId();
    if (this_present_delete_table_tuple_id || that_present_delete_table_tuple_id) {
      if (!(this_present_delete_table_tuple_id && that_present_delete_table_tuple_id))
        return false;
      if (this.delete_table_tuple_id != that.delete_table_tuple_id)
        return false;
    }

    boolean this_present_file_select_conjunct = true && this.isSetFileSelectConjunct();
    boolean that_present_file_select_conjunct = true && that.isSetFileSelectConjunct();
    if (this_present_file_select_conjunct || that_present_file_select_conjunct) {
      if (!(this_present_file_select_conjunct && that_present_file_select_conjunct))
        return false;
      if (!this.file_select_conjunct.equals(that.file_select_conjunct))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFormatVersion()) ? 131071 : 524287);
    if (isSetFormatVersion())
      hashCode = hashCode * 8191 + format_version;

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content;

    hashCode = hashCode * 8191 + ((isSetDeleteFiles()) ? 131071 : 524287);
    if (isSetDeleteFiles())
      hashCode = hashCode * 8191 + delete_files.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeleteTableTupleId()) ? 131071 : 524287);
    if (isSetDeleteTableTupleId())
      hashCode = hashCode * 8191 + delete_table_tuple_id;

    hashCode = hashCode * 8191 + ((isSetFileSelectConjunct()) ? 131071 : 524287);
    if (isSetFileSelectConjunct())
      hashCode = hashCode * 8191 + file_select_conjunct.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TIcebergFileDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFormatVersion(), other.isSetFormatVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormatVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format_version, other.format_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetContent(), other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDeleteFiles(), other.isSetDeleteFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleteFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delete_files, other.delete_files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDeleteTableTupleId(), other.isSetDeleteTableTupleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleteTableTupleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delete_table_tuple_id, other.delete_table_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileSelectConjunct(), other.isSetFileSelectConjunct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSelectConjunct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_select_conjunct, other.file_select_conjunct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TIcebergFileDesc(");
    boolean first = true;

    if (isSetFormatVersion()) {
      sb.append("format_version:");
      sb.append(this.format_version);
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      sb.append(this.content);
      first = false;
    }
    if (isSetDeleteFiles()) {
      if (!first) sb.append(", ");
      sb.append("delete_files:");
      if (this.delete_files == null) {
        sb.append("null");
      } else {
        sb.append(this.delete_files);
      }
      first = false;
    }
    if (isSetDeleteTableTupleId()) {
      if (!first) sb.append(", ");
      sb.append("delete_table_tuple_id:");
      sb.append(this.delete_table_tuple_id);
      first = false;
    }
    if (isSetFileSelectConjunct()) {
      if (!first) sb.append(", ");
      sb.append("file_select_conjunct:");
      if (this.file_select_conjunct == null) {
        sb.append("null");
      } else {
        sb.append(this.file_select_conjunct);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (file_select_conjunct != null) {
      file_select_conjunct.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TIcebergFileDescStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIcebergFileDescStandardScheme getScheme() {
      return new TIcebergFileDescStandardScheme();
    }
  }

  private static class TIcebergFileDescStandardScheme extends org.apache.thrift.scheme.StandardScheme<TIcebergFileDesc> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TIcebergFileDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FORMAT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.format_version = iprot.readI32();
              struct.setFormatVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.content = iprot.readI32();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DELETE_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list110 = iprot.readListBegin();
                struct.delete_files = new java.util.ArrayList<TIcebergDeleteFileDesc>(_list110.size);
                @org.apache.thrift.annotation.Nullable TIcebergDeleteFileDesc _elem111;
                for (int _i112 = 0; _i112 < _list110.size; ++_i112)
                {
                  _elem111 = new TIcebergDeleteFileDesc();
                  _elem111.read(iprot);
                  struct.delete_files.add(_elem111);
                }
                iprot.readListEnd();
              }
              struct.setDeleteFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DELETE_TABLE_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.delete_table_tuple_id = iprot.readI32();
              struct.setDeleteTableTupleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILE_SELECT_CONJUNCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.file_select_conjunct = new org.apache.doris.thrift.TExpr();
              struct.file_select_conjunct.read(iprot);
              struct.setFileSelectConjunctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TIcebergFileDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetFormatVersion()) {
        oprot.writeFieldBegin(FORMAT_VERSION_FIELD_DESC);
        oprot.writeI32(struct.format_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetContent()) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeI32(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.delete_files != null) {
        if (struct.isSetDeleteFiles()) {
          oprot.writeFieldBegin(DELETE_FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.delete_files.size()));
            for (TIcebergDeleteFileDesc _iter113 : struct.delete_files)
            {
              _iter113.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDeleteTableTupleId()) {
        oprot.writeFieldBegin(DELETE_TABLE_TUPLE_ID_FIELD_DESC);
        oprot.writeI32(struct.delete_table_tuple_id);
        oprot.writeFieldEnd();
      }
      if (struct.file_select_conjunct != null) {
        if (struct.isSetFileSelectConjunct()) {
          oprot.writeFieldBegin(FILE_SELECT_CONJUNCT_FIELD_DESC);
          struct.file_select_conjunct.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TIcebergFileDescTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIcebergFileDescTupleScheme getScheme() {
      return new TIcebergFileDescTupleScheme();
    }
  }

  private static class TIcebergFileDescTupleScheme extends org.apache.thrift.scheme.TupleScheme<TIcebergFileDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TIcebergFileDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFormatVersion()) {
        optionals.set(0);
      }
      if (struct.isSetContent()) {
        optionals.set(1);
      }
      if (struct.isSetDeleteFiles()) {
        optionals.set(2);
      }
      if (struct.isSetDeleteTableTupleId()) {
        optionals.set(3);
      }
      if (struct.isSetFileSelectConjunct()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetFormatVersion()) {
        oprot.writeI32(struct.format_version);
      }
      if (struct.isSetContent()) {
        oprot.writeI32(struct.content);
      }
      if (struct.isSetDeleteFiles()) {
        {
          oprot.writeI32(struct.delete_files.size());
          for (TIcebergDeleteFileDesc _iter114 : struct.delete_files)
          {
            _iter114.write(oprot);
          }
        }
      }
      if (struct.isSetDeleteTableTupleId()) {
        oprot.writeI32(struct.delete_table_tuple_id);
      }
      if (struct.isSetFileSelectConjunct()) {
        struct.file_select_conjunct.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TIcebergFileDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.format_version = iprot.readI32();
        struct.setFormatVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.content = iprot.readI32();
        struct.setContentIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list115 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.delete_files = new java.util.ArrayList<TIcebergDeleteFileDesc>(_list115.size);
          @org.apache.thrift.annotation.Nullable TIcebergDeleteFileDesc _elem116;
          for (int _i117 = 0; _i117 < _list115.size; ++_i117)
          {
            _elem116 = new TIcebergDeleteFileDesc();
            _elem116.read(iprot);
            struct.delete_files.add(_elem116);
          }
        }
        struct.setDeleteFilesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.delete_table_tuple_id = iprot.readI32();
        struct.setDeleteTableTupleIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.file_select_conjunct = new org.apache.doris.thrift.TExpr();
        struct.file_select_conjunct.read(iprot);
        struct.setFileSelectConjunctIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

