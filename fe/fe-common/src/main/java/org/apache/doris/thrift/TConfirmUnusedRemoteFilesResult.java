/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-06-29")
public class TConfirmUnusedRemoteFilesResult implements org.apache.thrift.TBase<TConfirmUnusedRemoteFilesResult, TConfirmUnusedRemoteFilesResult._Fields>, java.io.Serializable, Cloneable, Comparable<TConfirmUnusedRemoteFilesResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TConfirmUnusedRemoteFilesResult");

  private static final org.apache.thrift.protocol.TField CONFIRMED_TABLETS_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmed_tablets", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TConfirmUnusedRemoteFilesResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TConfirmUnusedRemoteFilesResultTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> confirmed_tablets; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONFIRMED_TABLETS((short)1, "confirmed_tablets");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONFIRMED_TABLETS
          return CONFIRMED_TABLETS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CONFIRMED_TABLETS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONFIRMED_TABLETS, new org.apache.thrift.meta_data.FieldMetaData("confirmed_tablets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "TTabletId"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TConfirmUnusedRemoteFilesResult.class, metaDataMap);
  }

  public TConfirmUnusedRemoteFilesResult() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TConfirmUnusedRemoteFilesResult(TConfirmUnusedRemoteFilesResult other) {
    if (other.isSetConfirmedTablets()) {
      java.util.List<java.lang.Long> __this__confirmed_tablets = new java.util.ArrayList<java.lang.Long>(other.confirmed_tablets.size());
      for (java.lang.Long other_element : other.confirmed_tablets) {
        __this__confirmed_tablets.add(other_element);
      }
      this.confirmed_tablets = __this__confirmed_tablets;
    }
  }

  @Override
  public TConfirmUnusedRemoteFilesResult deepCopy() {
    return new TConfirmUnusedRemoteFilesResult(this);
  }

  @Override
  public void clear() {
    this.confirmed_tablets = null;
  }

  public int getConfirmedTabletsSize() {
    return (this.confirmed_tablets == null) ? 0 : this.confirmed_tablets.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getConfirmedTabletsIterator() {
    return (this.confirmed_tablets == null) ? null : this.confirmed_tablets.iterator();
  }

  public void addToConfirmedTablets(long elem) {
    if (this.confirmed_tablets == null) {
      this.confirmed_tablets = new java.util.ArrayList<java.lang.Long>();
    }
    this.confirmed_tablets.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getConfirmedTablets() {
    return this.confirmed_tablets;
  }

  public TConfirmUnusedRemoteFilesResult setConfirmedTablets(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> confirmed_tablets) {
    this.confirmed_tablets = confirmed_tablets;
    return this;
  }

  public void unsetConfirmedTablets() {
    this.confirmed_tablets = null;
  }

  /** Returns true if field confirmed_tablets is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmedTablets() {
    return this.confirmed_tablets != null;
  }

  public void setConfirmedTabletsIsSet(boolean value) {
    if (!value) {
      this.confirmed_tablets = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CONFIRMED_TABLETS:
      if (value == null) {
        unsetConfirmedTablets();
      } else {
        setConfirmedTablets((java.util.List<java.lang.Long>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CONFIRMED_TABLETS:
      return getConfirmedTablets();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CONFIRMED_TABLETS:
      return isSetConfirmedTablets();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TConfirmUnusedRemoteFilesResult)
      return this.equals((TConfirmUnusedRemoteFilesResult)that);
    return false;
  }

  public boolean equals(TConfirmUnusedRemoteFilesResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_confirmed_tablets = true && this.isSetConfirmedTablets();
    boolean that_present_confirmed_tablets = true && that.isSetConfirmedTablets();
    if (this_present_confirmed_tablets || that_present_confirmed_tablets) {
      if (!(this_present_confirmed_tablets && that_present_confirmed_tablets))
        return false;
      if (!this.confirmed_tablets.equals(that.confirmed_tablets))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetConfirmedTablets()) ? 131071 : 524287);
    if (isSetConfirmedTablets())
      hashCode = hashCode * 8191 + confirmed_tablets.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TConfirmUnusedRemoteFilesResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetConfirmedTablets(), other.isSetConfirmedTablets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmedTablets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmed_tablets, other.confirmed_tablets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TConfirmUnusedRemoteFilesResult(");
    boolean first = true;

    if (isSetConfirmedTablets()) {
      sb.append("confirmed_tablets:");
      if (this.confirmed_tablets == null) {
        sb.append("null");
      } else {
        sb.append(this.confirmed_tablets);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TConfirmUnusedRemoteFilesResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TConfirmUnusedRemoteFilesResultStandardScheme getScheme() {
      return new TConfirmUnusedRemoteFilesResultStandardScheme();
    }
  }

  private static class TConfirmUnusedRemoteFilesResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TConfirmUnusedRemoteFilesResult> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TConfirmUnusedRemoteFilesResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONFIRMED_TABLETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list348 = iprot.readListBegin();
                struct.confirmed_tablets = new java.util.ArrayList<java.lang.Long>(_list348.size);
                long _elem349;
                for (int _i350 = 0; _i350 < _list348.size; ++_i350)
                {
                  _elem349 = iprot.readI64();
                  struct.confirmed_tablets.add(_elem349);
                }
                iprot.readListEnd();
              }
              struct.setConfirmedTabletsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TConfirmUnusedRemoteFilesResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.confirmed_tablets != null) {
        if (struct.isSetConfirmedTablets()) {
          oprot.writeFieldBegin(CONFIRMED_TABLETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.confirmed_tablets.size()));
            for (long _iter351 : struct.confirmed_tablets)
            {
              oprot.writeI64(_iter351);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TConfirmUnusedRemoteFilesResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TConfirmUnusedRemoteFilesResultTupleScheme getScheme() {
      return new TConfirmUnusedRemoteFilesResultTupleScheme();
    }
  }

  private static class TConfirmUnusedRemoteFilesResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TConfirmUnusedRemoteFilesResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TConfirmUnusedRemoteFilesResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetConfirmedTablets()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetConfirmedTablets()) {
        {
          oprot.writeI32(struct.confirmed_tablets.size());
          for (long _iter352 : struct.confirmed_tablets)
          {
            oprot.writeI64(_iter352);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TConfirmUnusedRemoteFilesResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list353 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.confirmed_tablets = new java.util.ArrayList<java.lang.Long>(_list353.size);
          long _elem354;
          for (int _i355 = 0; _i355 < _list353.size; ++_i355)
          {
            _elem354 = iprot.readI64();
            struct.confirmed_tablets.add(_elem354);
          }
        }
        struct.setConfirmedTabletsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

