/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-06-20")
public class TStreamLoadPutRequest implements org.apache.thrift.TBase<TStreamLoadPutRequest, TStreamLoadPutRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TStreamLoadPutRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStreamLoadPutRequest");

  private static final org.apache.thrift.protocol.TField CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("passwd", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("tbl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ip", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LOAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loadId", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnId", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField FORMAT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("formatType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField WHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("where", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField COLUMN_SEPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("columnSeparator", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitions", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField AUTH_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("auth_code", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField NEGATIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("negative", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField STRICT_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("strictMode", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField TIMEZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("timezone", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField EXEC_MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("execMemLimit", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField IS_TEMP_PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("isTempPartition", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField STRIP_OUTER_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("strip_outer_array", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField JSONPATHS_FIELD_DESC = new org.apache.thrift.protocol.TField("jsonpaths", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField THRIFT_RPC_TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("thrift_rpc_timeout_ms", org.apache.thrift.protocol.TType.I64, (short)25);
  private static final org.apache.thrift.protocol.TField JSON_ROOT_FIELD_DESC = new org.apache.thrift.protocol.TField("json_root", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField MERGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("merge_type", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField DELETE_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("delete_condition", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField SEQUENCE_COL_FIELD_DESC = new org.apache.thrift.protocol.TField("sequence_col", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField NUM_AS_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("num_as_string", org.apache.thrift.protocol.TType.BOOL, (short)30);
  private static final org.apache.thrift.protocol.TField FUZZY_PARSE_FIELD_DESC = new org.apache.thrift.protocol.TField("fuzzy_parse", org.apache.thrift.protocol.TType.BOOL, (short)31);
  private static final org.apache.thrift.protocol.TField LINE_DELIMITER_FIELD_DESC = new org.apache.thrift.protocol.TField("line_delimiter", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField READ_JSON_BY_LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("read_json_by_line", org.apache.thrift.protocol.TType.BOOL, (short)33);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField SEND_BATCH_PARALLELISM_FIELD_DESC = new org.apache.thrift.protocol.TField("send_batch_parallelism", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField MAX_FILTER_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("max_filter_ratio", org.apache.thrift.protocol.TType.DOUBLE, (short)36);
  private static final org.apache.thrift.protocol.TField LOAD_TO_SINGLE_TABLET_FIELD_DESC = new org.apache.thrift.protocol.TField("load_to_single_tablet", org.apache.thrift.protocol.TType.BOOL, (short)37);
  private static final org.apache.thrift.protocol.TField HEADER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("header_type", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField HIDDEN_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("hidden_columns", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField COMPRESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("compress_type", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("file_size", org.apache.thrift.protocol.TType.I64, (short)41);
  private static final org.apache.thrift.protocol.TField TRIM_DOUBLE_QUOTES_FIELD_DESC = new org.apache.thrift.protocol.TField("trim_double_quotes", org.apache.thrift.protocol.TType.BOOL, (short)42);
  private static final org.apache.thrift.protocol.TField SKIP_LINES_FIELD_DESC = new org.apache.thrift.protocol.TField("skip_lines", org.apache.thrift.protocol.TType.I32, (short)43);
  private static final org.apache.thrift.protocol.TField ENABLE_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_profile", org.apache.thrift.protocol.TType.BOOL, (short)44);
  private static final org.apache.thrift.protocol.TField PARTIAL_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("partial_update", org.apache.thrift.protocol.TType.BOOL, (short)45);
  private static final org.apache.thrift.protocol.TField TABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("table_names", org.apache.thrift.protocol.TType.LIST, (short)46);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TStreamLoadPutRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TStreamLoadPutRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String cluster; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String user; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String passwd; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String db; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String tbl; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String user_ip; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId loadId; // required
  public long txnId; // required
  /**
   * 
   * @see org.apache.doris.thrift.TFileType
   */
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TFileType fileType; // required
  /**
   * 
   * @see org.apache.doris.thrift.TFileFormatType
   */
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TFileFormatType formatType; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String path; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String columns; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String where; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String columnSeparator; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String partitions; // optional
  public long auth_code; // optional
  public boolean negative; // optional
  public int timeout; // optional
  public boolean strictMode; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String timezone; // optional
  public long execMemLimit; // optional
  public boolean isTempPartition; // optional
  public boolean strip_outer_array; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String jsonpaths; // optional
  public long thrift_rpc_timeout_ms; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String json_root; // optional
  /**
   * 
   * @see org.apache.doris.thrift.TMergeType
   */
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TMergeType merge_type; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String delete_condition; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sequence_col; // optional
  public boolean num_as_string; // optional
  public boolean fuzzy_parse; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String line_delimiter; // optional
  public boolean read_json_by_line; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String token; // optional
  public int send_batch_parallelism; // optional
  public double max_filter_ratio; // optional
  public boolean load_to_single_tablet; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String header_type; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String hidden_columns; // optional
  /**
   * 
   * @see org.apache.doris.thrift.TFileCompressType
   */
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TFileCompressType compress_type; // optional
  public long file_size; // optional
  public boolean trim_double_quotes; // optional
  public int skip_lines; // optional
  public boolean enable_profile; // optional
  public boolean partial_update; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> table_names; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLUSTER((short)1, "cluster"),
    USER((short)2, "user"),
    PASSWD((short)3, "passwd"),
    DB((short)4, "db"),
    TBL((short)5, "tbl"),
    USER_IP((short)6, "user_ip"),
    LOAD_ID((short)7, "loadId"),
    TXN_ID((short)8, "txnId"),
    /**
     * 
     * @see org.apache.doris.thrift.TFileType
     */
    FILE_TYPE((short)9, "fileType"),
    /**
     * 
     * @see org.apache.doris.thrift.TFileFormatType
     */
    FORMAT_TYPE((short)10, "formatType"),
    PATH((short)11, "path"),
    COLUMNS((short)12, "columns"),
    WHERE((short)13, "where"),
    COLUMN_SEPARATOR((short)14, "columnSeparator"),
    PARTITIONS((short)15, "partitions"),
    AUTH_CODE((short)16, "auth_code"),
    NEGATIVE((short)17, "negative"),
    TIMEOUT((short)18, "timeout"),
    STRICT_MODE((short)19, "strictMode"),
    TIMEZONE((short)20, "timezone"),
    EXEC_MEM_LIMIT((short)21, "execMemLimit"),
    IS_TEMP_PARTITION((short)22, "isTempPartition"),
    STRIP_OUTER_ARRAY((short)23, "strip_outer_array"),
    JSONPATHS((short)24, "jsonpaths"),
    THRIFT_RPC_TIMEOUT_MS((short)25, "thrift_rpc_timeout_ms"),
    JSON_ROOT((short)26, "json_root"),
    /**
     * 
     * @see org.apache.doris.thrift.TMergeType
     */
    MERGE_TYPE((short)27, "merge_type"),
    DELETE_CONDITION((short)28, "delete_condition"),
    SEQUENCE_COL((short)29, "sequence_col"),
    NUM_AS_STRING((short)30, "num_as_string"),
    FUZZY_PARSE((short)31, "fuzzy_parse"),
    LINE_DELIMITER((short)32, "line_delimiter"),
    READ_JSON_BY_LINE((short)33, "read_json_by_line"),
    TOKEN((short)34, "token"),
    SEND_BATCH_PARALLELISM((short)35, "send_batch_parallelism"),
    MAX_FILTER_RATIO((short)36, "max_filter_ratio"),
    LOAD_TO_SINGLE_TABLET((short)37, "load_to_single_tablet"),
    HEADER_TYPE((short)38, "header_type"),
    HIDDEN_COLUMNS((short)39, "hidden_columns"),
    /**
     * 
     * @see org.apache.doris.thrift.TFileCompressType
     */
    COMPRESS_TYPE((short)40, "compress_type"),
    FILE_SIZE((short)41, "file_size"),
    TRIM_DOUBLE_QUOTES((short)42, "trim_double_quotes"),
    SKIP_LINES((short)43, "skip_lines"),
    ENABLE_PROFILE((short)44, "enable_profile"),
    PARTIAL_UPDATE((short)45, "partial_update"),
    TABLE_NAMES((short)46, "table_names");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLUSTER
          return CLUSTER;
        case 2: // USER
          return USER;
        case 3: // PASSWD
          return PASSWD;
        case 4: // DB
          return DB;
        case 5: // TBL
          return TBL;
        case 6: // USER_IP
          return USER_IP;
        case 7: // LOAD_ID
          return LOAD_ID;
        case 8: // TXN_ID
          return TXN_ID;
        case 9: // FILE_TYPE
          return FILE_TYPE;
        case 10: // FORMAT_TYPE
          return FORMAT_TYPE;
        case 11: // PATH
          return PATH;
        case 12: // COLUMNS
          return COLUMNS;
        case 13: // WHERE
          return WHERE;
        case 14: // COLUMN_SEPARATOR
          return COLUMN_SEPARATOR;
        case 15: // PARTITIONS
          return PARTITIONS;
        case 16: // AUTH_CODE
          return AUTH_CODE;
        case 17: // NEGATIVE
          return NEGATIVE;
        case 18: // TIMEOUT
          return TIMEOUT;
        case 19: // STRICT_MODE
          return STRICT_MODE;
        case 20: // TIMEZONE
          return TIMEZONE;
        case 21: // EXEC_MEM_LIMIT
          return EXEC_MEM_LIMIT;
        case 22: // IS_TEMP_PARTITION
          return IS_TEMP_PARTITION;
        case 23: // STRIP_OUTER_ARRAY
          return STRIP_OUTER_ARRAY;
        case 24: // JSONPATHS
          return JSONPATHS;
        case 25: // THRIFT_RPC_TIMEOUT_MS
          return THRIFT_RPC_TIMEOUT_MS;
        case 26: // JSON_ROOT
          return JSON_ROOT;
        case 27: // MERGE_TYPE
          return MERGE_TYPE;
        case 28: // DELETE_CONDITION
          return DELETE_CONDITION;
        case 29: // SEQUENCE_COL
          return SEQUENCE_COL;
        case 30: // NUM_AS_STRING
          return NUM_AS_STRING;
        case 31: // FUZZY_PARSE
          return FUZZY_PARSE;
        case 32: // LINE_DELIMITER
          return LINE_DELIMITER;
        case 33: // READ_JSON_BY_LINE
          return READ_JSON_BY_LINE;
        case 34: // TOKEN
          return TOKEN;
        case 35: // SEND_BATCH_PARALLELISM
          return SEND_BATCH_PARALLELISM;
        case 36: // MAX_FILTER_RATIO
          return MAX_FILTER_RATIO;
        case 37: // LOAD_TO_SINGLE_TABLET
          return LOAD_TO_SINGLE_TABLET;
        case 38: // HEADER_TYPE
          return HEADER_TYPE;
        case 39: // HIDDEN_COLUMNS
          return HIDDEN_COLUMNS;
        case 40: // COMPRESS_TYPE
          return COMPRESS_TYPE;
        case 41: // FILE_SIZE
          return FILE_SIZE;
        case 42: // TRIM_DOUBLE_QUOTES
          return TRIM_DOUBLE_QUOTES;
        case 43: // SKIP_LINES
          return SKIP_LINES;
        case 44: // ENABLE_PROFILE
          return ENABLE_PROFILE;
        case 45: // PARTIAL_UPDATE
          return PARTIAL_UPDATE;
        case 46: // TABLE_NAMES
          return TABLE_NAMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TXNID_ISSET_ID = 0;
  private static final int __AUTH_CODE_ISSET_ID = 1;
  private static final int __NEGATIVE_ISSET_ID = 2;
  private static final int __TIMEOUT_ISSET_ID = 3;
  private static final int __STRICTMODE_ISSET_ID = 4;
  private static final int __EXECMEMLIMIT_ISSET_ID = 5;
  private static final int __ISTEMPPARTITION_ISSET_ID = 6;
  private static final int __STRIP_OUTER_ARRAY_ISSET_ID = 7;
  private static final int __THRIFT_RPC_TIMEOUT_MS_ISSET_ID = 8;
  private static final int __NUM_AS_STRING_ISSET_ID = 9;
  private static final int __FUZZY_PARSE_ISSET_ID = 10;
  private static final int __READ_JSON_BY_LINE_ISSET_ID = 11;
  private static final int __SEND_BATCH_PARALLELISM_ISSET_ID = 12;
  private static final int __MAX_FILTER_RATIO_ISSET_ID = 13;
  private static final int __LOAD_TO_SINGLE_TABLET_ISSET_ID = 14;
  private static final int __FILE_SIZE_ISSET_ID = 15;
  private static final int __TRIM_DOUBLE_QUOTES_ISSET_ID = 16;
  private static final int __SKIP_LINES_ISSET_ID = 17;
  private static final int __ENABLE_PROFILE_ISSET_ID = 18;
  private static final int __PARTIAL_UPDATE_ISSET_ID = 19;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CLUSTER,_Fields.USER_IP,_Fields.PATH,_Fields.COLUMNS,_Fields.WHERE,_Fields.COLUMN_SEPARATOR,_Fields.PARTITIONS,_Fields.AUTH_CODE,_Fields.NEGATIVE,_Fields.TIMEOUT,_Fields.STRICT_MODE,_Fields.TIMEZONE,_Fields.EXEC_MEM_LIMIT,_Fields.IS_TEMP_PARTITION,_Fields.STRIP_OUTER_ARRAY,_Fields.JSONPATHS,_Fields.THRIFT_RPC_TIMEOUT_MS,_Fields.JSON_ROOT,_Fields.MERGE_TYPE,_Fields.DELETE_CONDITION,_Fields.SEQUENCE_COL,_Fields.NUM_AS_STRING,_Fields.FUZZY_PARSE,_Fields.LINE_DELIMITER,_Fields.READ_JSON_BY_LINE,_Fields.TOKEN,_Fields.SEND_BATCH_PARALLELISM,_Fields.MAX_FILTER_RATIO,_Fields.LOAD_TO_SINGLE_TABLET,_Fields.HEADER_TYPE,_Fields.HIDDEN_COLUMNS,_Fields.COMPRESS_TYPE,_Fields.FILE_SIZE,_Fields.TRIM_DOUBLE_QUOTES,_Fields.SKIP_LINES,_Fields.ENABLE_PROFILE,_Fields.PARTIAL_UPDATE,_Fields.TABLE_NAMES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("cluster", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWD, new org.apache.thrift.meta_data.FieldMetaData("passwd", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TBL, new org.apache.thrift.meta_data.FieldMetaData("tbl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IP, new org.apache.thrift.meta_data.FieldMetaData("user_ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAD_ID, new org.apache.thrift.meta_data.FieldMetaData("loadId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txnId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.doris.thrift.TFileType.class)));
    tmpMap.put(_Fields.FORMAT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("formatType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.doris.thrift.TFileFormatType.class)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WHERE, new org.apache.thrift.meta_data.FieldMetaData("where", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_SEPARATOR, new org.apache.thrift.meta_data.FieldMetaData("columnSeparator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("partitions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTH_CODE, new org.apache.thrift.meta_data.FieldMetaData("auth_code", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEGATIVE, new org.apache.thrift.meta_data.FieldMetaData("negative", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STRICT_MODE, new org.apache.thrift.meta_data.FieldMetaData("strictMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TIMEZONE, new org.apache.thrift.meta_data.FieldMetaData("timezone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXEC_MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("execMemLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_TEMP_PARTITION, new org.apache.thrift.meta_data.FieldMetaData("isTempPartition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STRIP_OUTER_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("strip_outer_array", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.JSONPATHS, new org.apache.thrift.meta_data.FieldMetaData("jsonpaths", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THRIFT_RPC_TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("thrift_rpc_timeout_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JSON_ROOT, new org.apache.thrift.meta_data.FieldMetaData("json_root", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MERGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("merge_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.doris.thrift.TMergeType.class)));
    tmpMap.put(_Fields.DELETE_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("delete_condition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEQUENCE_COL, new org.apache.thrift.meta_data.FieldMetaData("sequence_col", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_AS_STRING, new org.apache.thrift.meta_data.FieldMetaData("num_as_string", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FUZZY_PARSE, new org.apache.thrift.meta_data.FieldMetaData("fuzzy_parse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LINE_DELIMITER, new org.apache.thrift.meta_data.FieldMetaData("line_delimiter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.READ_JSON_BY_LINE, new org.apache.thrift.meta_data.FieldMetaData("read_json_by_line", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEND_BATCH_PARALLELISM, new org.apache.thrift.meta_data.FieldMetaData("send_batch_parallelism", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_FILTER_RATIO, new org.apache.thrift.meta_data.FieldMetaData("max_filter_ratio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAD_TO_SINGLE_TABLET, new org.apache.thrift.meta_data.FieldMetaData("load_to_single_tablet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HEADER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("header_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIDDEN_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("hidden_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPRESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("compress_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.doris.thrift.TFileCompressType.class)));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("file_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRIM_DOUBLE_QUOTES, new org.apache.thrift.meta_data.FieldMetaData("trim_double_quotes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SKIP_LINES, new org.apache.thrift.meta_data.FieldMetaData("skip_lines", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENABLE_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("enable_profile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARTIAL_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("partial_update", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("table_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStreamLoadPutRequest.class, metaDataMap);
  }

  public TStreamLoadPutRequest() {
  }

  public TStreamLoadPutRequest(
    java.lang.String user,
    java.lang.String passwd,
    java.lang.String db,
    java.lang.String tbl,
    org.apache.doris.thrift.TUniqueId loadId,
    long txnId,
    org.apache.doris.thrift.TFileType fileType,
    org.apache.doris.thrift.TFileFormatType formatType)
  {
    this();
    this.user = user;
    this.passwd = passwd;
    this.db = db;
    this.tbl = tbl;
    this.loadId = loadId;
    this.txnId = txnId;
    setTxnIdIsSet(true);
    this.fileType = fileType;
    this.formatType = formatType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStreamLoadPutRequest(TStreamLoadPutRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCluster()) {
      this.cluster = other.cluster;
    }
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetPasswd()) {
      this.passwd = other.passwd;
    }
    if (other.isSetDb()) {
      this.db = other.db;
    }
    if (other.isSetTbl()) {
      this.tbl = other.tbl;
    }
    if (other.isSetUserIp()) {
      this.user_ip = other.user_ip;
    }
    if (other.isSetLoadId()) {
      this.loadId = new org.apache.doris.thrift.TUniqueId(other.loadId);
    }
    this.txnId = other.txnId;
    if (other.isSetFileType()) {
      this.fileType = other.fileType;
    }
    if (other.isSetFormatType()) {
      this.formatType = other.formatType;
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetColumns()) {
      this.columns = other.columns;
    }
    if (other.isSetWhere()) {
      this.where = other.where;
    }
    if (other.isSetColumnSeparator()) {
      this.columnSeparator = other.columnSeparator;
    }
    if (other.isSetPartitions()) {
      this.partitions = other.partitions;
    }
    this.auth_code = other.auth_code;
    this.negative = other.negative;
    this.timeout = other.timeout;
    this.strictMode = other.strictMode;
    if (other.isSetTimezone()) {
      this.timezone = other.timezone;
    }
    this.execMemLimit = other.execMemLimit;
    this.isTempPartition = other.isTempPartition;
    this.strip_outer_array = other.strip_outer_array;
    if (other.isSetJsonpaths()) {
      this.jsonpaths = other.jsonpaths;
    }
    this.thrift_rpc_timeout_ms = other.thrift_rpc_timeout_ms;
    if (other.isSetJsonRoot()) {
      this.json_root = other.json_root;
    }
    if (other.isSetMergeType()) {
      this.merge_type = other.merge_type;
    }
    if (other.isSetDeleteCondition()) {
      this.delete_condition = other.delete_condition;
    }
    if (other.isSetSequenceCol()) {
      this.sequence_col = other.sequence_col;
    }
    this.num_as_string = other.num_as_string;
    this.fuzzy_parse = other.fuzzy_parse;
    if (other.isSetLineDelimiter()) {
      this.line_delimiter = other.line_delimiter;
    }
    this.read_json_by_line = other.read_json_by_line;
    if (other.isSetToken()) {
      this.token = other.token;
    }
    this.send_batch_parallelism = other.send_batch_parallelism;
    this.max_filter_ratio = other.max_filter_ratio;
    this.load_to_single_tablet = other.load_to_single_tablet;
    if (other.isSetHeaderType()) {
      this.header_type = other.header_type;
    }
    if (other.isSetHiddenColumns()) {
      this.hidden_columns = other.hidden_columns;
    }
    if (other.isSetCompressType()) {
      this.compress_type = other.compress_type;
    }
    this.file_size = other.file_size;
    this.trim_double_quotes = other.trim_double_quotes;
    this.skip_lines = other.skip_lines;
    this.enable_profile = other.enable_profile;
    this.partial_update = other.partial_update;
    if (other.isSetTableNames()) {
      java.util.List<java.lang.String> __this__table_names = new java.util.ArrayList<java.lang.String>(other.table_names);
      this.table_names = __this__table_names;
    }
  }

  @Override
  public TStreamLoadPutRequest deepCopy() {
    return new TStreamLoadPutRequest(this);
  }

  @Override
  public void clear() {
    this.cluster = null;
    this.user = null;
    this.passwd = null;
    this.db = null;
    this.tbl = null;
    this.user_ip = null;
    this.loadId = null;
    setTxnIdIsSet(false);
    this.txnId = 0;
    this.fileType = null;
    this.formatType = null;
    this.path = null;
    this.columns = null;
    this.where = null;
    this.columnSeparator = null;
    this.partitions = null;
    setAuthCodeIsSet(false);
    this.auth_code = 0;
    setNegativeIsSet(false);
    this.negative = false;
    setTimeoutIsSet(false);
    this.timeout = 0;
    setStrictModeIsSet(false);
    this.strictMode = false;
    this.timezone = null;
    setExecMemLimitIsSet(false);
    this.execMemLimit = 0;
    setIsTempPartitionIsSet(false);
    this.isTempPartition = false;
    setStripOuterArrayIsSet(false);
    this.strip_outer_array = false;
    this.jsonpaths = null;
    setThriftRpcTimeoutMsIsSet(false);
    this.thrift_rpc_timeout_ms = 0;
    this.json_root = null;
    this.merge_type = null;
    this.delete_condition = null;
    this.sequence_col = null;
    setNumAsStringIsSet(false);
    this.num_as_string = false;
    setFuzzyParseIsSet(false);
    this.fuzzy_parse = false;
    this.line_delimiter = null;
    setReadJsonByLineIsSet(false);
    this.read_json_by_line = false;
    this.token = null;
    setSendBatchParallelismIsSet(false);
    this.send_batch_parallelism = 0;
    setMaxFilterRatioIsSet(false);
    this.max_filter_ratio = 0.0;
    setLoadToSingleTabletIsSet(false);
    this.load_to_single_tablet = false;
    this.header_type = null;
    this.hidden_columns = null;
    this.compress_type = null;
    setFileSizeIsSet(false);
    this.file_size = 0;
    setTrimDoubleQuotesIsSet(false);
    this.trim_double_quotes = false;
    setSkipLinesIsSet(false);
    this.skip_lines = 0;
    setEnableProfileIsSet(false);
    this.enable_profile = false;
    setPartialUpdateIsSet(false);
    this.partial_update = false;
    this.table_names = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCluster() {
    return this.cluster;
  }

  public TStreamLoadPutRequest setCluster(@org.apache.thrift.annotation.Nullable java.lang.String cluster) {
    this.cluster = cluster;
    return this;
  }

  public void unsetCluster() {
    this.cluster = null;
  }

  /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster() {
    return this.cluster != null;
  }

  public void setClusterIsSet(boolean value) {
    if (!value) {
      this.cluster = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUser() {
    return this.user;
  }

  public TStreamLoadPutRequest setUser(@org.apache.thrift.annotation.Nullable java.lang.String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPasswd() {
    return this.passwd;
  }

  public TStreamLoadPutRequest setPasswd(@org.apache.thrift.annotation.Nullable java.lang.String passwd) {
    this.passwd = passwd;
    return this;
  }

  public void unsetPasswd() {
    this.passwd = null;
  }

  /** Returns true if field passwd is set (has been assigned a value) and false otherwise */
  public boolean isSetPasswd() {
    return this.passwd != null;
  }

  public void setPasswdIsSet(boolean value) {
    if (!value) {
      this.passwd = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb() {
    return this.db;
  }

  public TStreamLoadPutRequest setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
    this.db = db;
    return this;
  }

  public void unsetDb() {
    this.db = null;
  }

  /** Returns true if field db is set (has been assigned a value) and false otherwise */
  public boolean isSetDb() {
    return this.db != null;
  }

  public void setDbIsSet(boolean value) {
    if (!value) {
      this.db = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTbl() {
    return this.tbl;
  }

  public TStreamLoadPutRequest setTbl(@org.apache.thrift.annotation.Nullable java.lang.String tbl) {
    this.tbl = tbl;
    return this;
  }

  public void unsetTbl() {
    this.tbl = null;
  }

  /** Returns true if field tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetTbl() {
    return this.tbl != null;
  }

  public void setTblIsSet(boolean value) {
    if (!value) {
      this.tbl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUserIp() {
    return this.user_ip;
  }

  public TStreamLoadPutRequest setUserIp(@org.apache.thrift.annotation.Nullable java.lang.String user_ip) {
    this.user_ip = user_ip;
    return this;
  }

  public void unsetUserIp() {
    this.user_ip = null;
  }

  /** Returns true if field user_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIp() {
    return this.user_ip != null;
  }

  public void setUserIpIsSet(boolean value) {
    if (!value) {
      this.user_ip = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TUniqueId getLoadId() {
    return this.loadId;
  }

  public TStreamLoadPutRequest setLoadId(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId loadId) {
    this.loadId = loadId;
    return this;
  }

  public void unsetLoadId() {
    this.loadId = null;
  }

  /** Returns true if field loadId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadId() {
    return this.loadId != null;
  }

  public void setLoadIdIsSet(boolean value) {
    if (!value) {
      this.loadId = null;
    }
  }

  public long getTxnId() {
    return this.txnId;
  }

  public TStreamLoadPutRequest setTxnId(long txnId) {
    this.txnId = txnId;
    setTxnIdIsSet(true);
    return this;
  }

  public void unsetTxnId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
  }

  /** Returns true if field txnId is set (has been assigned a value) and false otherwise */
  public boolean isSetTxnId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
  }

  public void setTxnIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
  }

  /**
   * 
   * @see org.apache.doris.thrift.TFileType
   */
  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TFileType getFileType() {
    return this.fileType;
  }

  /**
   * 
   * @see org.apache.doris.thrift.TFileType
   */
  public TStreamLoadPutRequest setFileType(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TFileType fileType) {
    this.fileType = fileType;
    return this;
  }

  public void unsetFileType() {
    this.fileType = null;
  }

  /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileType() {
    return this.fileType != null;
  }

  public void setFileTypeIsSet(boolean value) {
    if (!value) {
      this.fileType = null;
    }
  }

  /**
   * 
   * @see org.apache.doris.thrift.TFileFormatType
   */
  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TFileFormatType getFormatType() {
    return this.formatType;
  }

  /**
   * 
   * @see org.apache.doris.thrift.TFileFormatType
   */
  public TStreamLoadPutRequest setFormatType(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TFileFormatType formatType) {
    this.formatType = formatType;
    return this;
  }

  public void unsetFormatType() {
    this.formatType = null;
  }

  /** Returns true if field formatType is set (has been assigned a value) and false otherwise */
  public boolean isSetFormatType() {
    return this.formatType != null;
  }

  public void setFormatTypeIsSet(boolean value) {
    if (!value) {
      this.formatType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPath() {
    return this.path;
  }

  public TStreamLoadPutRequest setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumns() {
    return this.columns;
  }

  public TStreamLoadPutRequest setColumns(@org.apache.thrift.annotation.Nullable java.lang.String columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getWhere() {
    return this.where;
  }

  public TStreamLoadPutRequest setWhere(@org.apache.thrift.annotation.Nullable java.lang.String where) {
    this.where = where;
    return this;
  }

  public void unsetWhere() {
    this.where = null;
  }

  /** Returns true if field where is set (has been assigned a value) and false otherwise */
  public boolean isSetWhere() {
    return this.where != null;
  }

  public void setWhereIsSet(boolean value) {
    if (!value) {
      this.where = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumnSeparator() {
    return this.columnSeparator;
  }

  public TStreamLoadPutRequest setColumnSeparator(@org.apache.thrift.annotation.Nullable java.lang.String columnSeparator) {
    this.columnSeparator = columnSeparator;
    return this;
  }

  public void unsetColumnSeparator() {
    this.columnSeparator = null;
  }

  /** Returns true if field columnSeparator is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnSeparator() {
    return this.columnSeparator != null;
  }

  public void setColumnSeparatorIsSet(boolean value) {
    if (!value) {
      this.columnSeparator = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPartitions() {
    return this.partitions;
  }

  public TStreamLoadPutRequest setPartitions(@org.apache.thrift.annotation.Nullable java.lang.String partitions) {
    this.partitions = partitions;
    return this;
  }

  public void unsetPartitions() {
    this.partitions = null;
  }

  /** Returns true if field partitions is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitions() {
    return this.partitions != null;
  }

  public void setPartitionsIsSet(boolean value) {
    if (!value) {
      this.partitions = null;
    }
  }

  public long getAuthCode() {
    return this.auth_code;
  }

  public TStreamLoadPutRequest setAuthCode(long auth_code) {
    this.auth_code = auth_code;
    setAuthCodeIsSet(true);
    return this;
  }

  public void unsetAuthCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTH_CODE_ISSET_ID);
  }

  /** Returns true if field auth_code is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTH_CODE_ISSET_ID);
  }

  public void setAuthCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTH_CODE_ISSET_ID, value);
  }

  public boolean isNegative() {
    return this.negative;
  }

  public TStreamLoadPutRequest setNegative(boolean negative) {
    this.negative = negative;
    setNegativeIsSet(true);
    return this;
  }

  public void unsetNegative() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEGATIVE_ISSET_ID);
  }

  /** Returns true if field negative is set (has been assigned a value) and false otherwise */
  public boolean isSetNegative() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEGATIVE_ISSET_ID);
  }

  public void setNegativeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEGATIVE_ISSET_ID, value);
  }

  public int getTimeout() {
    return this.timeout;
  }

  public TStreamLoadPutRequest setTimeout(int timeout) {
    this.timeout = timeout;
    setTimeoutIsSet(true);
    return this;
  }

  public void unsetTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMEOUT_ISSET_ID);
  }

  public void setTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMEOUT_ISSET_ID, value);
  }

  public boolean isStrictMode() {
    return this.strictMode;
  }

  public TStreamLoadPutRequest setStrictMode(boolean strictMode) {
    this.strictMode = strictMode;
    setStrictModeIsSet(true);
    return this;
  }

  public void unsetStrictMode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STRICTMODE_ISSET_ID);
  }

  /** Returns true if field strictMode is set (has been assigned a value) and false otherwise */
  public boolean isSetStrictMode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STRICTMODE_ISSET_ID);
  }

  public void setStrictModeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STRICTMODE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTimezone() {
    return this.timezone;
  }

  public TStreamLoadPutRequest setTimezone(@org.apache.thrift.annotation.Nullable java.lang.String timezone) {
    this.timezone = timezone;
    return this;
  }

  public void unsetTimezone() {
    this.timezone = null;
  }

  /** Returns true if field timezone is set (has been assigned a value) and false otherwise */
  public boolean isSetTimezone() {
    return this.timezone != null;
  }

  public void setTimezoneIsSet(boolean value) {
    if (!value) {
      this.timezone = null;
    }
  }

  public long getExecMemLimit() {
    return this.execMemLimit;
  }

  public TStreamLoadPutRequest setExecMemLimit(long execMemLimit) {
    this.execMemLimit = execMemLimit;
    setExecMemLimitIsSet(true);
    return this;
  }

  public void unsetExecMemLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXECMEMLIMIT_ISSET_ID);
  }

  /** Returns true if field execMemLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetExecMemLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXECMEMLIMIT_ISSET_ID);
  }

  public void setExecMemLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXECMEMLIMIT_ISSET_ID, value);
  }

  public boolean isIsTempPartition() {
    return this.isTempPartition;
  }

  public TStreamLoadPutRequest setIsTempPartition(boolean isTempPartition) {
    this.isTempPartition = isTempPartition;
    setIsTempPartitionIsSet(true);
    return this;
  }

  public void unsetIsTempPartition() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISTEMPPARTITION_ISSET_ID);
  }

  /** Returns true if field isTempPartition is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTempPartition() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISTEMPPARTITION_ISSET_ID);
  }

  public void setIsTempPartitionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISTEMPPARTITION_ISSET_ID, value);
  }

  public boolean isStripOuterArray() {
    return this.strip_outer_array;
  }

  public TStreamLoadPutRequest setStripOuterArray(boolean strip_outer_array) {
    this.strip_outer_array = strip_outer_array;
    setStripOuterArrayIsSet(true);
    return this;
  }

  public void unsetStripOuterArray() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STRIP_OUTER_ARRAY_ISSET_ID);
  }

  /** Returns true if field strip_outer_array is set (has been assigned a value) and false otherwise */
  public boolean isSetStripOuterArray() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STRIP_OUTER_ARRAY_ISSET_ID);
  }

  public void setStripOuterArrayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STRIP_OUTER_ARRAY_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJsonpaths() {
    return this.jsonpaths;
  }

  public TStreamLoadPutRequest setJsonpaths(@org.apache.thrift.annotation.Nullable java.lang.String jsonpaths) {
    this.jsonpaths = jsonpaths;
    return this;
  }

  public void unsetJsonpaths() {
    this.jsonpaths = null;
  }

  /** Returns true if field jsonpaths is set (has been assigned a value) and false otherwise */
  public boolean isSetJsonpaths() {
    return this.jsonpaths != null;
  }

  public void setJsonpathsIsSet(boolean value) {
    if (!value) {
      this.jsonpaths = null;
    }
  }

  public long getThriftRpcTimeoutMs() {
    return this.thrift_rpc_timeout_ms;
  }

  public TStreamLoadPutRequest setThriftRpcTimeoutMs(long thrift_rpc_timeout_ms) {
    this.thrift_rpc_timeout_ms = thrift_rpc_timeout_ms;
    setThriftRpcTimeoutMsIsSet(true);
    return this;
  }

  public void unsetThriftRpcTimeoutMs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THRIFT_RPC_TIMEOUT_MS_ISSET_ID);
  }

  /** Returns true if field thrift_rpc_timeout_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetThriftRpcTimeoutMs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THRIFT_RPC_TIMEOUT_MS_ISSET_ID);
  }

  public void setThriftRpcTimeoutMsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THRIFT_RPC_TIMEOUT_MS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJsonRoot() {
    return this.json_root;
  }

  public TStreamLoadPutRequest setJsonRoot(@org.apache.thrift.annotation.Nullable java.lang.String json_root) {
    this.json_root = json_root;
    return this;
  }

  public void unsetJsonRoot() {
    this.json_root = null;
  }

  /** Returns true if field json_root is set (has been assigned a value) and false otherwise */
  public boolean isSetJsonRoot() {
    return this.json_root != null;
  }

  public void setJsonRootIsSet(boolean value) {
    if (!value) {
      this.json_root = null;
    }
  }

  /**
   * 
   * @see org.apache.doris.thrift.TMergeType
   */
  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TMergeType getMergeType() {
    return this.merge_type;
  }

  /**
   * 
   * @see org.apache.doris.thrift.TMergeType
   */
  public TStreamLoadPutRequest setMergeType(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TMergeType merge_type) {
    this.merge_type = merge_type;
    return this;
  }

  public void unsetMergeType() {
    this.merge_type = null;
  }

  /** Returns true if field merge_type is set (has been assigned a value) and false otherwise */
  public boolean isSetMergeType() {
    return this.merge_type != null;
  }

  public void setMergeTypeIsSet(boolean value) {
    if (!value) {
      this.merge_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDeleteCondition() {
    return this.delete_condition;
  }

  public TStreamLoadPutRequest setDeleteCondition(@org.apache.thrift.annotation.Nullable java.lang.String delete_condition) {
    this.delete_condition = delete_condition;
    return this;
  }

  public void unsetDeleteCondition() {
    this.delete_condition = null;
  }

  /** Returns true if field delete_condition is set (has been assigned a value) and false otherwise */
  public boolean isSetDeleteCondition() {
    return this.delete_condition != null;
  }

  public void setDeleteConditionIsSet(boolean value) {
    if (!value) {
      this.delete_condition = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSequenceCol() {
    return this.sequence_col;
  }

  public TStreamLoadPutRequest setSequenceCol(@org.apache.thrift.annotation.Nullable java.lang.String sequence_col) {
    this.sequence_col = sequence_col;
    return this;
  }

  public void unsetSequenceCol() {
    this.sequence_col = null;
  }

  /** Returns true if field sequence_col is set (has been assigned a value) and false otherwise */
  public boolean isSetSequenceCol() {
    return this.sequence_col != null;
  }

  public void setSequenceColIsSet(boolean value) {
    if (!value) {
      this.sequence_col = null;
    }
  }

  public boolean isNumAsString() {
    return this.num_as_string;
  }

  public TStreamLoadPutRequest setNumAsString(boolean num_as_string) {
    this.num_as_string = num_as_string;
    setNumAsStringIsSet(true);
    return this;
  }

  public void unsetNumAsString() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_AS_STRING_ISSET_ID);
  }

  /** Returns true if field num_as_string is set (has been assigned a value) and false otherwise */
  public boolean isSetNumAsString() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_AS_STRING_ISSET_ID);
  }

  public void setNumAsStringIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_AS_STRING_ISSET_ID, value);
  }

  public boolean isFuzzyParse() {
    return this.fuzzy_parse;
  }

  public TStreamLoadPutRequest setFuzzyParse(boolean fuzzy_parse) {
    this.fuzzy_parse = fuzzy_parse;
    setFuzzyParseIsSet(true);
    return this;
  }

  public void unsetFuzzyParse() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FUZZY_PARSE_ISSET_ID);
  }

  /** Returns true if field fuzzy_parse is set (has been assigned a value) and false otherwise */
  public boolean isSetFuzzyParse() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FUZZY_PARSE_ISSET_ID);
  }

  public void setFuzzyParseIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FUZZY_PARSE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLineDelimiter() {
    return this.line_delimiter;
  }

  public TStreamLoadPutRequest setLineDelimiter(@org.apache.thrift.annotation.Nullable java.lang.String line_delimiter) {
    this.line_delimiter = line_delimiter;
    return this;
  }

  public void unsetLineDelimiter() {
    this.line_delimiter = null;
  }

  /** Returns true if field line_delimiter is set (has been assigned a value) and false otherwise */
  public boolean isSetLineDelimiter() {
    return this.line_delimiter != null;
  }

  public void setLineDelimiterIsSet(boolean value) {
    if (!value) {
      this.line_delimiter = null;
    }
  }

  public boolean isReadJsonByLine() {
    return this.read_json_by_line;
  }

  public TStreamLoadPutRequest setReadJsonByLine(boolean read_json_by_line) {
    this.read_json_by_line = read_json_by_line;
    setReadJsonByLineIsSet(true);
    return this;
  }

  public void unsetReadJsonByLine() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __READ_JSON_BY_LINE_ISSET_ID);
  }

  /** Returns true if field read_json_by_line is set (has been assigned a value) and false otherwise */
  public boolean isSetReadJsonByLine() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __READ_JSON_BY_LINE_ISSET_ID);
  }

  public void setReadJsonByLineIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __READ_JSON_BY_LINE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getToken() {
    return this.token;
  }

  public TStreamLoadPutRequest setToken(@org.apache.thrift.annotation.Nullable java.lang.String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public int getSendBatchParallelism() {
    return this.send_batch_parallelism;
  }

  public TStreamLoadPutRequest setSendBatchParallelism(int send_batch_parallelism) {
    this.send_batch_parallelism = send_batch_parallelism;
    setSendBatchParallelismIsSet(true);
    return this;
  }

  public void unsetSendBatchParallelism() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEND_BATCH_PARALLELISM_ISSET_ID);
  }

  /** Returns true if field send_batch_parallelism is set (has been assigned a value) and false otherwise */
  public boolean isSetSendBatchParallelism() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEND_BATCH_PARALLELISM_ISSET_ID);
  }

  public void setSendBatchParallelismIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEND_BATCH_PARALLELISM_ISSET_ID, value);
  }

  public double getMaxFilterRatio() {
    return this.max_filter_ratio;
  }

  public TStreamLoadPutRequest setMaxFilterRatio(double max_filter_ratio) {
    this.max_filter_ratio = max_filter_ratio;
    setMaxFilterRatioIsSet(true);
    return this;
  }

  public void unsetMaxFilterRatio() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_FILTER_RATIO_ISSET_ID);
  }

  /** Returns true if field max_filter_ratio is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxFilterRatio() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_FILTER_RATIO_ISSET_ID);
  }

  public void setMaxFilterRatioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_FILTER_RATIO_ISSET_ID, value);
  }

  public boolean isLoadToSingleTablet() {
    return this.load_to_single_tablet;
  }

  public TStreamLoadPutRequest setLoadToSingleTablet(boolean load_to_single_tablet) {
    this.load_to_single_tablet = load_to_single_tablet;
    setLoadToSingleTabletIsSet(true);
    return this;
  }

  public void unsetLoadToSingleTablet() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOAD_TO_SINGLE_TABLET_ISSET_ID);
  }

  /** Returns true if field load_to_single_tablet is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadToSingleTablet() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOAD_TO_SINGLE_TABLET_ISSET_ID);
  }

  public void setLoadToSingleTabletIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOAD_TO_SINGLE_TABLET_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHeaderType() {
    return this.header_type;
  }

  public TStreamLoadPutRequest setHeaderType(@org.apache.thrift.annotation.Nullable java.lang.String header_type) {
    this.header_type = header_type;
    return this;
  }

  public void unsetHeaderType() {
    this.header_type = null;
  }

  /** Returns true if field header_type is set (has been assigned a value) and false otherwise */
  public boolean isSetHeaderType() {
    return this.header_type != null;
  }

  public void setHeaderTypeIsSet(boolean value) {
    if (!value) {
      this.header_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHiddenColumns() {
    return this.hidden_columns;
  }

  public TStreamLoadPutRequest setHiddenColumns(@org.apache.thrift.annotation.Nullable java.lang.String hidden_columns) {
    this.hidden_columns = hidden_columns;
    return this;
  }

  public void unsetHiddenColumns() {
    this.hidden_columns = null;
  }

  /** Returns true if field hidden_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetHiddenColumns() {
    return this.hidden_columns != null;
  }

  public void setHiddenColumnsIsSet(boolean value) {
    if (!value) {
      this.hidden_columns = null;
    }
  }

  /**
   * 
   * @see org.apache.doris.thrift.TFileCompressType
   */
  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TFileCompressType getCompressType() {
    return this.compress_type;
  }

  /**
   * 
   * @see org.apache.doris.thrift.TFileCompressType
   */
  public TStreamLoadPutRequest setCompressType(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TFileCompressType compress_type) {
    this.compress_type = compress_type;
    return this;
  }

  public void unsetCompressType() {
    this.compress_type = null;
  }

  /** Returns true if field compress_type is set (has been assigned a value) and false otherwise */
  public boolean isSetCompressType() {
    return this.compress_type != null;
  }

  public void setCompressTypeIsSet(boolean value) {
    if (!value) {
      this.compress_type = null;
    }
  }

  public long getFileSize() {
    return this.file_size;
  }

  public TStreamLoadPutRequest setFileSize(long file_size) {
    this.file_size = file_size;
    setFileSizeIsSet(true);
    return this;
  }

  public void unsetFileSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILE_SIZE_ISSET_ID);
  }

  /** Returns true if field file_size is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILE_SIZE_ISSET_ID);
  }

  public void setFileSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILE_SIZE_ISSET_ID, value);
  }

  public boolean isTrimDoubleQuotes() {
    return this.trim_double_quotes;
  }

  public TStreamLoadPutRequest setTrimDoubleQuotes(boolean trim_double_quotes) {
    this.trim_double_quotes = trim_double_quotes;
    setTrimDoubleQuotesIsSet(true);
    return this;
  }

  public void unsetTrimDoubleQuotes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRIM_DOUBLE_QUOTES_ISSET_ID);
  }

  /** Returns true if field trim_double_quotes is set (has been assigned a value) and false otherwise */
  public boolean isSetTrimDoubleQuotes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRIM_DOUBLE_QUOTES_ISSET_ID);
  }

  public void setTrimDoubleQuotesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRIM_DOUBLE_QUOTES_ISSET_ID, value);
  }

  public int getSkipLines() {
    return this.skip_lines;
  }

  public TStreamLoadPutRequest setSkipLines(int skip_lines) {
    this.skip_lines = skip_lines;
    setSkipLinesIsSet(true);
    return this;
  }

  public void unsetSkipLines() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SKIP_LINES_ISSET_ID);
  }

  /** Returns true if field skip_lines is set (has been assigned a value) and false otherwise */
  public boolean isSetSkipLines() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SKIP_LINES_ISSET_ID);
  }

  public void setSkipLinesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SKIP_LINES_ISSET_ID, value);
  }

  public boolean isEnableProfile() {
    return this.enable_profile;
  }

  public TStreamLoadPutRequest setEnableProfile(boolean enable_profile) {
    this.enable_profile = enable_profile;
    setEnableProfileIsSet(true);
    return this;
  }

  public void unsetEnableProfile() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_PROFILE_ISSET_ID);
  }

  /** Returns true if field enable_profile is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableProfile() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_PROFILE_ISSET_ID);
  }

  public void setEnableProfileIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_PROFILE_ISSET_ID, value);
  }

  public boolean isPartialUpdate() {
    return this.partial_update;
  }

  public TStreamLoadPutRequest setPartialUpdate(boolean partial_update) {
    this.partial_update = partial_update;
    setPartialUpdateIsSet(true);
    return this;
  }

  public void unsetPartialUpdate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTIAL_UPDATE_ISSET_ID);
  }

  /** Returns true if field partial_update is set (has been assigned a value) and false otherwise */
  public boolean isSetPartialUpdate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTIAL_UPDATE_ISSET_ID);
  }

  public void setPartialUpdateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTIAL_UPDATE_ISSET_ID, value);
  }

  public int getTableNamesSize() {
    return (this.table_names == null) ? 0 : this.table_names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getTableNamesIterator() {
    return (this.table_names == null) ? null : this.table_names.iterator();
  }

  public void addToTableNames(java.lang.String elem) {
    if (this.table_names == null) {
      this.table_names = new java.util.ArrayList<java.lang.String>();
    }
    this.table_names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getTableNames() {
    return this.table_names;
  }

  public TStreamLoadPutRequest setTableNames(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> table_names) {
    this.table_names = table_names;
    return this;
  }

  public void unsetTableNames() {
    this.table_names = null;
  }

  /** Returns true if field table_names is set (has been assigned a value) and false otherwise */
  public boolean isSetTableNames() {
    return this.table_names != null;
  }

  public void setTableNamesIsSet(boolean value) {
    if (!value) {
      this.table_names = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CLUSTER:
      if (value == null) {
        unsetCluster();
      } else {
        setCluster((java.lang.String)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((java.lang.String)value);
      }
      break;

    case PASSWD:
      if (value == null) {
        unsetPasswd();
      } else {
        setPasswd((java.lang.String)value);
      }
      break;

    case DB:
      if (value == null) {
        unsetDb();
      } else {
        setDb((java.lang.String)value);
      }
      break;

    case TBL:
      if (value == null) {
        unsetTbl();
      } else {
        setTbl((java.lang.String)value);
      }
      break;

    case USER_IP:
      if (value == null) {
        unsetUserIp();
      } else {
        setUserIp((java.lang.String)value);
      }
      break;

    case LOAD_ID:
      if (value == null) {
        unsetLoadId();
      } else {
        setLoadId((org.apache.doris.thrift.TUniqueId)value);
      }
      break;

    case TXN_ID:
      if (value == null) {
        unsetTxnId();
      } else {
        setTxnId((java.lang.Long)value);
      }
      break;

    case FILE_TYPE:
      if (value == null) {
        unsetFileType();
      } else {
        setFileType((org.apache.doris.thrift.TFileType)value);
      }
      break;

    case FORMAT_TYPE:
      if (value == null) {
        unsetFormatType();
      } else {
        setFormatType((org.apache.doris.thrift.TFileFormatType)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((java.lang.String)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((java.lang.String)value);
      }
      break;

    case WHERE:
      if (value == null) {
        unsetWhere();
      } else {
        setWhere((java.lang.String)value);
      }
      break;

    case COLUMN_SEPARATOR:
      if (value == null) {
        unsetColumnSeparator();
      } else {
        setColumnSeparator((java.lang.String)value);
      }
      break;

    case PARTITIONS:
      if (value == null) {
        unsetPartitions();
      } else {
        setPartitions((java.lang.String)value);
      }
      break;

    case AUTH_CODE:
      if (value == null) {
        unsetAuthCode();
      } else {
        setAuthCode((java.lang.Long)value);
      }
      break;

    case NEGATIVE:
      if (value == null) {
        unsetNegative();
      } else {
        setNegative((java.lang.Boolean)value);
      }
      break;

    case TIMEOUT:
      if (value == null) {
        unsetTimeout();
      } else {
        setTimeout((java.lang.Integer)value);
      }
      break;

    case STRICT_MODE:
      if (value == null) {
        unsetStrictMode();
      } else {
        setStrictMode((java.lang.Boolean)value);
      }
      break;

    case TIMEZONE:
      if (value == null) {
        unsetTimezone();
      } else {
        setTimezone((java.lang.String)value);
      }
      break;

    case EXEC_MEM_LIMIT:
      if (value == null) {
        unsetExecMemLimit();
      } else {
        setExecMemLimit((java.lang.Long)value);
      }
      break;

    case IS_TEMP_PARTITION:
      if (value == null) {
        unsetIsTempPartition();
      } else {
        setIsTempPartition((java.lang.Boolean)value);
      }
      break;

    case STRIP_OUTER_ARRAY:
      if (value == null) {
        unsetStripOuterArray();
      } else {
        setStripOuterArray((java.lang.Boolean)value);
      }
      break;

    case JSONPATHS:
      if (value == null) {
        unsetJsonpaths();
      } else {
        setJsonpaths((java.lang.String)value);
      }
      break;

    case THRIFT_RPC_TIMEOUT_MS:
      if (value == null) {
        unsetThriftRpcTimeoutMs();
      } else {
        setThriftRpcTimeoutMs((java.lang.Long)value);
      }
      break;

    case JSON_ROOT:
      if (value == null) {
        unsetJsonRoot();
      } else {
        setJsonRoot((java.lang.String)value);
      }
      break;

    case MERGE_TYPE:
      if (value == null) {
        unsetMergeType();
      } else {
        setMergeType((org.apache.doris.thrift.TMergeType)value);
      }
      break;

    case DELETE_CONDITION:
      if (value == null) {
        unsetDeleteCondition();
      } else {
        setDeleteCondition((java.lang.String)value);
      }
      break;

    case SEQUENCE_COL:
      if (value == null) {
        unsetSequenceCol();
      } else {
        setSequenceCol((java.lang.String)value);
      }
      break;

    case NUM_AS_STRING:
      if (value == null) {
        unsetNumAsString();
      } else {
        setNumAsString((java.lang.Boolean)value);
      }
      break;

    case FUZZY_PARSE:
      if (value == null) {
        unsetFuzzyParse();
      } else {
        setFuzzyParse((java.lang.Boolean)value);
      }
      break;

    case LINE_DELIMITER:
      if (value == null) {
        unsetLineDelimiter();
      } else {
        setLineDelimiter((java.lang.String)value);
      }
      break;

    case READ_JSON_BY_LINE:
      if (value == null) {
        unsetReadJsonByLine();
      } else {
        setReadJsonByLine((java.lang.Boolean)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((java.lang.String)value);
      }
      break;

    case SEND_BATCH_PARALLELISM:
      if (value == null) {
        unsetSendBatchParallelism();
      } else {
        setSendBatchParallelism((java.lang.Integer)value);
      }
      break;

    case MAX_FILTER_RATIO:
      if (value == null) {
        unsetMaxFilterRatio();
      } else {
        setMaxFilterRatio((java.lang.Double)value);
      }
      break;

    case LOAD_TO_SINGLE_TABLET:
      if (value == null) {
        unsetLoadToSingleTablet();
      } else {
        setLoadToSingleTablet((java.lang.Boolean)value);
      }
      break;

    case HEADER_TYPE:
      if (value == null) {
        unsetHeaderType();
      } else {
        setHeaderType((java.lang.String)value);
      }
      break;

    case HIDDEN_COLUMNS:
      if (value == null) {
        unsetHiddenColumns();
      } else {
        setHiddenColumns((java.lang.String)value);
      }
      break;

    case COMPRESS_TYPE:
      if (value == null) {
        unsetCompressType();
      } else {
        setCompressType((org.apache.doris.thrift.TFileCompressType)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFileSize();
      } else {
        setFileSize((java.lang.Long)value);
      }
      break;

    case TRIM_DOUBLE_QUOTES:
      if (value == null) {
        unsetTrimDoubleQuotes();
      } else {
        setTrimDoubleQuotes((java.lang.Boolean)value);
      }
      break;

    case SKIP_LINES:
      if (value == null) {
        unsetSkipLines();
      } else {
        setSkipLines((java.lang.Integer)value);
      }
      break;

    case ENABLE_PROFILE:
      if (value == null) {
        unsetEnableProfile();
      } else {
        setEnableProfile((java.lang.Boolean)value);
      }
      break;

    case PARTIAL_UPDATE:
      if (value == null) {
        unsetPartialUpdate();
      } else {
        setPartialUpdate((java.lang.Boolean)value);
      }
      break;

    case TABLE_NAMES:
      if (value == null) {
        unsetTableNames();
      } else {
        setTableNames((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CLUSTER:
      return getCluster();

    case USER:
      return getUser();

    case PASSWD:
      return getPasswd();

    case DB:
      return getDb();

    case TBL:
      return getTbl();

    case USER_IP:
      return getUserIp();

    case LOAD_ID:
      return getLoadId();

    case TXN_ID:
      return getTxnId();

    case FILE_TYPE:
      return getFileType();

    case FORMAT_TYPE:
      return getFormatType();

    case PATH:
      return getPath();

    case COLUMNS:
      return getColumns();

    case WHERE:
      return getWhere();

    case COLUMN_SEPARATOR:
      return getColumnSeparator();

    case PARTITIONS:
      return getPartitions();

    case AUTH_CODE:
      return getAuthCode();

    case NEGATIVE:
      return isNegative();

    case TIMEOUT:
      return getTimeout();

    case STRICT_MODE:
      return isStrictMode();

    case TIMEZONE:
      return getTimezone();

    case EXEC_MEM_LIMIT:
      return getExecMemLimit();

    case IS_TEMP_PARTITION:
      return isIsTempPartition();

    case STRIP_OUTER_ARRAY:
      return isStripOuterArray();

    case JSONPATHS:
      return getJsonpaths();

    case THRIFT_RPC_TIMEOUT_MS:
      return getThriftRpcTimeoutMs();

    case JSON_ROOT:
      return getJsonRoot();

    case MERGE_TYPE:
      return getMergeType();

    case DELETE_CONDITION:
      return getDeleteCondition();

    case SEQUENCE_COL:
      return getSequenceCol();

    case NUM_AS_STRING:
      return isNumAsString();

    case FUZZY_PARSE:
      return isFuzzyParse();

    case LINE_DELIMITER:
      return getLineDelimiter();

    case READ_JSON_BY_LINE:
      return isReadJsonByLine();

    case TOKEN:
      return getToken();

    case SEND_BATCH_PARALLELISM:
      return getSendBatchParallelism();

    case MAX_FILTER_RATIO:
      return getMaxFilterRatio();

    case LOAD_TO_SINGLE_TABLET:
      return isLoadToSingleTablet();

    case HEADER_TYPE:
      return getHeaderType();

    case HIDDEN_COLUMNS:
      return getHiddenColumns();

    case COMPRESS_TYPE:
      return getCompressType();

    case FILE_SIZE:
      return getFileSize();

    case TRIM_DOUBLE_QUOTES:
      return isTrimDoubleQuotes();

    case SKIP_LINES:
      return getSkipLines();

    case ENABLE_PROFILE:
      return isEnableProfile();

    case PARTIAL_UPDATE:
      return isPartialUpdate();

    case TABLE_NAMES:
      return getTableNames();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CLUSTER:
      return isSetCluster();
    case USER:
      return isSetUser();
    case PASSWD:
      return isSetPasswd();
    case DB:
      return isSetDb();
    case TBL:
      return isSetTbl();
    case USER_IP:
      return isSetUserIp();
    case LOAD_ID:
      return isSetLoadId();
    case TXN_ID:
      return isSetTxnId();
    case FILE_TYPE:
      return isSetFileType();
    case FORMAT_TYPE:
      return isSetFormatType();
    case PATH:
      return isSetPath();
    case COLUMNS:
      return isSetColumns();
    case WHERE:
      return isSetWhere();
    case COLUMN_SEPARATOR:
      return isSetColumnSeparator();
    case PARTITIONS:
      return isSetPartitions();
    case AUTH_CODE:
      return isSetAuthCode();
    case NEGATIVE:
      return isSetNegative();
    case TIMEOUT:
      return isSetTimeout();
    case STRICT_MODE:
      return isSetStrictMode();
    case TIMEZONE:
      return isSetTimezone();
    case EXEC_MEM_LIMIT:
      return isSetExecMemLimit();
    case IS_TEMP_PARTITION:
      return isSetIsTempPartition();
    case STRIP_OUTER_ARRAY:
      return isSetStripOuterArray();
    case JSONPATHS:
      return isSetJsonpaths();
    case THRIFT_RPC_TIMEOUT_MS:
      return isSetThriftRpcTimeoutMs();
    case JSON_ROOT:
      return isSetJsonRoot();
    case MERGE_TYPE:
      return isSetMergeType();
    case DELETE_CONDITION:
      return isSetDeleteCondition();
    case SEQUENCE_COL:
      return isSetSequenceCol();
    case NUM_AS_STRING:
      return isSetNumAsString();
    case FUZZY_PARSE:
      return isSetFuzzyParse();
    case LINE_DELIMITER:
      return isSetLineDelimiter();
    case READ_JSON_BY_LINE:
      return isSetReadJsonByLine();
    case TOKEN:
      return isSetToken();
    case SEND_BATCH_PARALLELISM:
      return isSetSendBatchParallelism();
    case MAX_FILTER_RATIO:
      return isSetMaxFilterRatio();
    case LOAD_TO_SINGLE_TABLET:
      return isSetLoadToSingleTablet();
    case HEADER_TYPE:
      return isSetHeaderType();
    case HIDDEN_COLUMNS:
      return isSetHiddenColumns();
    case COMPRESS_TYPE:
      return isSetCompressType();
    case FILE_SIZE:
      return isSetFileSize();
    case TRIM_DOUBLE_QUOTES:
      return isSetTrimDoubleQuotes();
    case SKIP_LINES:
      return isSetSkipLines();
    case ENABLE_PROFILE:
      return isSetEnableProfile();
    case PARTIAL_UPDATE:
      return isSetPartialUpdate();
    case TABLE_NAMES:
      return isSetTableNames();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TStreamLoadPutRequest)
      return this.equals((TStreamLoadPutRequest)that);
    return false;
  }

  public boolean equals(TStreamLoadPutRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cluster = true && this.isSetCluster();
    boolean that_present_cluster = true && that.isSetCluster();
    if (this_present_cluster || that_present_cluster) {
      if (!(this_present_cluster && that_present_cluster))
        return false;
      if (!this.cluster.equals(that.cluster))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_passwd = true && this.isSetPasswd();
    boolean that_present_passwd = true && that.isSetPasswd();
    if (this_present_passwd || that_present_passwd) {
      if (!(this_present_passwd && that_present_passwd))
        return false;
      if (!this.passwd.equals(that.passwd))
        return false;
    }

    boolean this_present_db = true && this.isSetDb();
    boolean that_present_db = true && that.isSetDb();
    if (this_present_db || that_present_db) {
      if (!(this_present_db && that_present_db))
        return false;
      if (!this.db.equals(that.db))
        return false;
    }

    boolean this_present_tbl = true && this.isSetTbl();
    boolean that_present_tbl = true && that.isSetTbl();
    if (this_present_tbl || that_present_tbl) {
      if (!(this_present_tbl && that_present_tbl))
        return false;
      if (!this.tbl.equals(that.tbl))
        return false;
    }

    boolean this_present_user_ip = true && this.isSetUserIp();
    boolean that_present_user_ip = true && that.isSetUserIp();
    if (this_present_user_ip || that_present_user_ip) {
      if (!(this_present_user_ip && that_present_user_ip))
        return false;
      if (!this.user_ip.equals(that.user_ip))
        return false;
    }

    boolean this_present_loadId = true && this.isSetLoadId();
    boolean that_present_loadId = true && that.isSetLoadId();
    if (this_present_loadId || that_present_loadId) {
      if (!(this_present_loadId && that_present_loadId))
        return false;
      if (!this.loadId.equals(that.loadId))
        return false;
    }

    boolean this_present_txnId = true;
    boolean that_present_txnId = true;
    if (this_present_txnId || that_present_txnId) {
      if (!(this_present_txnId && that_present_txnId))
        return false;
      if (this.txnId != that.txnId)
        return false;
    }

    boolean this_present_fileType = true && this.isSetFileType();
    boolean that_present_fileType = true && that.isSetFileType();
    if (this_present_fileType || that_present_fileType) {
      if (!(this_present_fileType && that_present_fileType))
        return false;
      if (!this.fileType.equals(that.fileType))
        return false;
    }

    boolean this_present_formatType = true && this.isSetFormatType();
    boolean that_present_formatType = true && that.isSetFormatType();
    if (this_present_formatType || that_present_formatType) {
      if (!(this_present_formatType && that_present_formatType))
        return false;
      if (!this.formatType.equals(that.formatType))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_where = true && this.isSetWhere();
    boolean that_present_where = true && that.isSetWhere();
    if (this_present_where || that_present_where) {
      if (!(this_present_where && that_present_where))
        return false;
      if (!this.where.equals(that.where))
        return false;
    }

    boolean this_present_columnSeparator = true && this.isSetColumnSeparator();
    boolean that_present_columnSeparator = true && that.isSetColumnSeparator();
    if (this_present_columnSeparator || that_present_columnSeparator) {
      if (!(this_present_columnSeparator && that_present_columnSeparator))
        return false;
      if (!this.columnSeparator.equals(that.columnSeparator))
        return false;
    }

    boolean this_present_partitions = true && this.isSetPartitions();
    boolean that_present_partitions = true && that.isSetPartitions();
    if (this_present_partitions || that_present_partitions) {
      if (!(this_present_partitions && that_present_partitions))
        return false;
      if (!this.partitions.equals(that.partitions))
        return false;
    }

    boolean this_present_auth_code = true && this.isSetAuthCode();
    boolean that_present_auth_code = true && that.isSetAuthCode();
    if (this_present_auth_code || that_present_auth_code) {
      if (!(this_present_auth_code && that_present_auth_code))
        return false;
      if (this.auth_code != that.auth_code)
        return false;
    }

    boolean this_present_negative = true && this.isSetNegative();
    boolean that_present_negative = true && that.isSetNegative();
    if (this_present_negative || that_present_negative) {
      if (!(this_present_negative && that_present_negative))
        return false;
      if (this.negative != that.negative)
        return false;
    }

    boolean this_present_timeout = true && this.isSetTimeout();
    boolean that_present_timeout = true && that.isSetTimeout();
    if (this_present_timeout || that_present_timeout) {
      if (!(this_present_timeout && that_present_timeout))
        return false;
      if (this.timeout != that.timeout)
        return false;
    }

    boolean this_present_strictMode = true && this.isSetStrictMode();
    boolean that_present_strictMode = true && that.isSetStrictMode();
    if (this_present_strictMode || that_present_strictMode) {
      if (!(this_present_strictMode && that_present_strictMode))
        return false;
      if (this.strictMode != that.strictMode)
        return false;
    }

    boolean this_present_timezone = true && this.isSetTimezone();
    boolean that_present_timezone = true && that.isSetTimezone();
    if (this_present_timezone || that_present_timezone) {
      if (!(this_present_timezone && that_present_timezone))
        return false;
      if (!this.timezone.equals(that.timezone))
        return false;
    }

    boolean this_present_execMemLimit = true && this.isSetExecMemLimit();
    boolean that_present_execMemLimit = true && that.isSetExecMemLimit();
    if (this_present_execMemLimit || that_present_execMemLimit) {
      if (!(this_present_execMemLimit && that_present_execMemLimit))
        return false;
      if (this.execMemLimit != that.execMemLimit)
        return false;
    }

    boolean this_present_isTempPartition = true && this.isSetIsTempPartition();
    boolean that_present_isTempPartition = true && that.isSetIsTempPartition();
    if (this_present_isTempPartition || that_present_isTempPartition) {
      if (!(this_present_isTempPartition && that_present_isTempPartition))
        return false;
      if (this.isTempPartition != that.isTempPartition)
        return false;
    }

    boolean this_present_strip_outer_array = true && this.isSetStripOuterArray();
    boolean that_present_strip_outer_array = true && that.isSetStripOuterArray();
    if (this_present_strip_outer_array || that_present_strip_outer_array) {
      if (!(this_present_strip_outer_array && that_present_strip_outer_array))
        return false;
      if (this.strip_outer_array != that.strip_outer_array)
        return false;
    }

    boolean this_present_jsonpaths = true && this.isSetJsonpaths();
    boolean that_present_jsonpaths = true && that.isSetJsonpaths();
    if (this_present_jsonpaths || that_present_jsonpaths) {
      if (!(this_present_jsonpaths && that_present_jsonpaths))
        return false;
      if (!this.jsonpaths.equals(that.jsonpaths))
        return false;
    }

    boolean this_present_thrift_rpc_timeout_ms = true && this.isSetThriftRpcTimeoutMs();
    boolean that_present_thrift_rpc_timeout_ms = true && that.isSetThriftRpcTimeoutMs();
    if (this_present_thrift_rpc_timeout_ms || that_present_thrift_rpc_timeout_ms) {
      if (!(this_present_thrift_rpc_timeout_ms && that_present_thrift_rpc_timeout_ms))
        return false;
      if (this.thrift_rpc_timeout_ms != that.thrift_rpc_timeout_ms)
        return false;
    }

    boolean this_present_json_root = true && this.isSetJsonRoot();
    boolean that_present_json_root = true && that.isSetJsonRoot();
    if (this_present_json_root || that_present_json_root) {
      if (!(this_present_json_root && that_present_json_root))
        return false;
      if (!this.json_root.equals(that.json_root))
        return false;
    }

    boolean this_present_merge_type = true && this.isSetMergeType();
    boolean that_present_merge_type = true && that.isSetMergeType();
    if (this_present_merge_type || that_present_merge_type) {
      if (!(this_present_merge_type && that_present_merge_type))
        return false;
      if (!this.merge_type.equals(that.merge_type))
        return false;
    }

    boolean this_present_delete_condition = true && this.isSetDeleteCondition();
    boolean that_present_delete_condition = true && that.isSetDeleteCondition();
    if (this_present_delete_condition || that_present_delete_condition) {
      if (!(this_present_delete_condition && that_present_delete_condition))
        return false;
      if (!this.delete_condition.equals(that.delete_condition))
        return false;
    }

    boolean this_present_sequence_col = true && this.isSetSequenceCol();
    boolean that_present_sequence_col = true && that.isSetSequenceCol();
    if (this_present_sequence_col || that_present_sequence_col) {
      if (!(this_present_sequence_col && that_present_sequence_col))
        return false;
      if (!this.sequence_col.equals(that.sequence_col))
        return false;
    }

    boolean this_present_num_as_string = true && this.isSetNumAsString();
    boolean that_present_num_as_string = true && that.isSetNumAsString();
    if (this_present_num_as_string || that_present_num_as_string) {
      if (!(this_present_num_as_string && that_present_num_as_string))
        return false;
      if (this.num_as_string != that.num_as_string)
        return false;
    }

    boolean this_present_fuzzy_parse = true && this.isSetFuzzyParse();
    boolean that_present_fuzzy_parse = true && that.isSetFuzzyParse();
    if (this_present_fuzzy_parse || that_present_fuzzy_parse) {
      if (!(this_present_fuzzy_parse && that_present_fuzzy_parse))
        return false;
      if (this.fuzzy_parse != that.fuzzy_parse)
        return false;
    }

    boolean this_present_line_delimiter = true && this.isSetLineDelimiter();
    boolean that_present_line_delimiter = true && that.isSetLineDelimiter();
    if (this_present_line_delimiter || that_present_line_delimiter) {
      if (!(this_present_line_delimiter && that_present_line_delimiter))
        return false;
      if (!this.line_delimiter.equals(that.line_delimiter))
        return false;
    }

    boolean this_present_read_json_by_line = true && this.isSetReadJsonByLine();
    boolean that_present_read_json_by_line = true && that.isSetReadJsonByLine();
    if (this_present_read_json_by_line || that_present_read_json_by_line) {
      if (!(this_present_read_json_by_line && that_present_read_json_by_line))
        return false;
      if (this.read_json_by_line != that.read_json_by_line)
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_send_batch_parallelism = true && this.isSetSendBatchParallelism();
    boolean that_present_send_batch_parallelism = true && that.isSetSendBatchParallelism();
    if (this_present_send_batch_parallelism || that_present_send_batch_parallelism) {
      if (!(this_present_send_batch_parallelism && that_present_send_batch_parallelism))
        return false;
      if (this.send_batch_parallelism != that.send_batch_parallelism)
        return false;
    }

    boolean this_present_max_filter_ratio = true && this.isSetMaxFilterRatio();
    boolean that_present_max_filter_ratio = true && that.isSetMaxFilterRatio();
    if (this_present_max_filter_ratio || that_present_max_filter_ratio) {
      if (!(this_present_max_filter_ratio && that_present_max_filter_ratio))
        return false;
      if (this.max_filter_ratio != that.max_filter_ratio)
        return false;
    }

    boolean this_present_load_to_single_tablet = true && this.isSetLoadToSingleTablet();
    boolean that_present_load_to_single_tablet = true && that.isSetLoadToSingleTablet();
    if (this_present_load_to_single_tablet || that_present_load_to_single_tablet) {
      if (!(this_present_load_to_single_tablet && that_present_load_to_single_tablet))
        return false;
      if (this.load_to_single_tablet != that.load_to_single_tablet)
        return false;
    }

    boolean this_present_header_type = true && this.isSetHeaderType();
    boolean that_present_header_type = true && that.isSetHeaderType();
    if (this_present_header_type || that_present_header_type) {
      if (!(this_present_header_type && that_present_header_type))
        return false;
      if (!this.header_type.equals(that.header_type))
        return false;
    }

    boolean this_present_hidden_columns = true && this.isSetHiddenColumns();
    boolean that_present_hidden_columns = true && that.isSetHiddenColumns();
    if (this_present_hidden_columns || that_present_hidden_columns) {
      if (!(this_present_hidden_columns && that_present_hidden_columns))
        return false;
      if (!this.hidden_columns.equals(that.hidden_columns))
        return false;
    }

    boolean this_present_compress_type = true && this.isSetCompressType();
    boolean that_present_compress_type = true && that.isSetCompressType();
    if (this_present_compress_type || that_present_compress_type) {
      if (!(this_present_compress_type && that_present_compress_type))
        return false;
      if (!this.compress_type.equals(that.compress_type))
        return false;
    }

    boolean this_present_file_size = true && this.isSetFileSize();
    boolean that_present_file_size = true && that.isSetFileSize();
    if (this_present_file_size || that_present_file_size) {
      if (!(this_present_file_size && that_present_file_size))
        return false;
      if (this.file_size != that.file_size)
        return false;
    }

    boolean this_present_trim_double_quotes = true && this.isSetTrimDoubleQuotes();
    boolean that_present_trim_double_quotes = true && that.isSetTrimDoubleQuotes();
    if (this_present_trim_double_quotes || that_present_trim_double_quotes) {
      if (!(this_present_trim_double_quotes && that_present_trim_double_quotes))
        return false;
      if (this.trim_double_quotes != that.trim_double_quotes)
        return false;
    }

    boolean this_present_skip_lines = true && this.isSetSkipLines();
    boolean that_present_skip_lines = true && that.isSetSkipLines();
    if (this_present_skip_lines || that_present_skip_lines) {
      if (!(this_present_skip_lines && that_present_skip_lines))
        return false;
      if (this.skip_lines != that.skip_lines)
        return false;
    }

    boolean this_present_enable_profile = true && this.isSetEnableProfile();
    boolean that_present_enable_profile = true && that.isSetEnableProfile();
    if (this_present_enable_profile || that_present_enable_profile) {
      if (!(this_present_enable_profile && that_present_enable_profile))
        return false;
      if (this.enable_profile != that.enable_profile)
        return false;
    }

    boolean this_present_partial_update = true && this.isSetPartialUpdate();
    boolean that_present_partial_update = true && that.isSetPartialUpdate();
    if (this_present_partial_update || that_present_partial_update) {
      if (!(this_present_partial_update && that_present_partial_update))
        return false;
      if (this.partial_update != that.partial_update)
        return false;
    }

    boolean this_present_table_names = true && this.isSetTableNames();
    boolean that_present_table_names = true && that.isSetTableNames();
    if (this_present_table_names || that_present_table_names) {
      if (!(this_present_table_names && that_present_table_names))
        return false;
      if (!this.table_names.equals(that.table_names))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCluster()) ? 131071 : 524287);
    if (isSetCluster())
      hashCode = hashCode * 8191 + cluster.hashCode();

    hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
    if (isSetUser())
      hashCode = hashCode * 8191 + user.hashCode();

    hashCode = hashCode * 8191 + ((isSetPasswd()) ? 131071 : 524287);
    if (isSetPasswd())
      hashCode = hashCode * 8191 + passwd.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
    if (isSetDb())
      hashCode = hashCode * 8191 + db.hashCode();

    hashCode = hashCode * 8191 + ((isSetTbl()) ? 131071 : 524287);
    if (isSetTbl())
      hashCode = hashCode * 8191 + tbl.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserIp()) ? 131071 : 524287);
    if (isSetUserIp())
      hashCode = hashCode * 8191 + user_ip.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoadId()) ? 131071 : 524287);
    if (isSetLoadId())
      hashCode = hashCode * 8191 + loadId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txnId);

    hashCode = hashCode * 8191 + ((isSetFileType()) ? 131071 : 524287);
    if (isSetFileType())
      hashCode = hashCode * 8191 + fileType.getValue();

    hashCode = hashCode * 8191 + ((isSetFormatType()) ? 131071 : 524287);
    if (isSetFormatType())
      hashCode = hashCode * 8191 + formatType.getValue();

    hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
    if (isSetPath())
      hashCode = hashCode * 8191 + path.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumns()) ? 131071 : 524287);
    if (isSetColumns())
      hashCode = hashCode * 8191 + columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetWhere()) ? 131071 : 524287);
    if (isSetWhere())
      hashCode = hashCode * 8191 + where.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnSeparator()) ? 131071 : 524287);
    if (isSetColumnSeparator())
      hashCode = hashCode * 8191 + columnSeparator.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartitions()) ? 131071 : 524287);
    if (isSetPartitions())
      hashCode = hashCode * 8191 + partitions.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuthCode()) ? 131071 : 524287);
    if (isSetAuthCode())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(auth_code);

    hashCode = hashCode * 8191 + ((isSetNegative()) ? 131071 : 524287);
    if (isSetNegative())
      hashCode = hashCode * 8191 + ((negative) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTimeout()) ? 131071 : 524287);
    if (isSetTimeout())
      hashCode = hashCode * 8191 + timeout;

    hashCode = hashCode * 8191 + ((isSetStrictMode()) ? 131071 : 524287);
    if (isSetStrictMode())
      hashCode = hashCode * 8191 + ((strictMode) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTimezone()) ? 131071 : 524287);
    if (isSetTimezone())
      hashCode = hashCode * 8191 + timezone.hashCode();

    hashCode = hashCode * 8191 + ((isSetExecMemLimit()) ? 131071 : 524287);
    if (isSetExecMemLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(execMemLimit);

    hashCode = hashCode * 8191 + ((isSetIsTempPartition()) ? 131071 : 524287);
    if (isSetIsTempPartition())
      hashCode = hashCode * 8191 + ((isTempPartition) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetStripOuterArray()) ? 131071 : 524287);
    if (isSetStripOuterArray())
      hashCode = hashCode * 8191 + ((strip_outer_array) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetJsonpaths()) ? 131071 : 524287);
    if (isSetJsonpaths())
      hashCode = hashCode * 8191 + jsonpaths.hashCode();

    hashCode = hashCode * 8191 + ((isSetThriftRpcTimeoutMs()) ? 131071 : 524287);
    if (isSetThriftRpcTimeoutMs())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(thrift_rpc_timeout_ms);

    hashCode = hashCode * 8191 + ((isSetJsonRoot()) ? 131071 : 524287);
    if (isSetJsonRoot())
      hashCode = hashCode * 8191 + json_root.hashCode();

    hashCode = hashCode * 8191 + ((isSetMergeType()) ? 131071 : 524287);
    if (isSetMergeType())
      hashCode = hashCode * 8191 + merge_type.getValue();

    hashCode = hashCode * 8191 + ((isSetDeleteCondition()) ? 131071 : 524287);
    if (isSetDeleteCondition())
      hashCode = hashCode * 8191 + delete_condition.hashCode();

    hashCode = hashCode * 8191 + ((isSetSequenceCol()) ? 131071 : 524287);
    if (isSetSequenceCol())
      hashCode = hashCode * 8191 + sequence_col.hashCode();

    hashCode = hashCode * 8191 + ((isSetNumAsString()) ? 131071 : 524287);
    if (isSetNumAsString())
      hashCode = hashCode * 8191 + ((num_as_string) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetFuzzyParse()) ? 131071 : 524287);
    if (isSetFuzzyParse())
      hashCode = hashCode * 8191 + ((fuzzy_parse) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetLineDelimiter()) ? 131071 : 524287);
    if (isSetLineDelimiter())
      hashCode = hashCode * 8191 + line_delimiter.hashCode();

    hashCode = hashCode * 8191 + ((isSetReadJsonByLine()) ? 131071 : 524287);
    if (isSetReadJsonByLine())
      hashCode = hashCode * 8191 + ((read_json_by_line) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
    if (isSetToken())
      hashCode = hashCode * 8191 + token.hashCode();

    hashCode = hashCode * 8191 + ((isSetSendBatchParallelism()) ? 131071 : 524287);
    if (isSetSendBatchParallelism())
      hashCode = hashCode * 8191 + send_batch_parallelism;

    hashCode = hashCode * 8191 + ((isSetMaxFilterRatio()) ? 131071 : 524287);
    if (isSetMaxFilterRatio())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_filter_ratio);

    hashCode = hashCode * 8191 + ((isSetLoadToSingleTablet()) ? 131071 : 524287);
    if (isSetLoadToSingleTablet())
      hashCode = hashCode * 8191 + ((load_to_single_tablet) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetHeaderType()) ? 131071 : 524287);
    if (isSetHeaderType())
      hashCode = hashCode * 8191 + header_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetHiddenColumns()) ? 131071 : 524287);
    if (isSetHiddenColumns())
      hashCode = hashCode * 8191 + hidden_columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompressType()) ? 131071 : 524287);
    if (isSetCompressType())
      hashCode = hashCode * 8191 + compress_type.getValue();

    hashCode = hashCode * 8191 + ((isSetFileSize()) ? 131071 : 524287);
    if (isSetFileSize())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(file_size);

    hashCode = hashCode * 8191 + ((isSetTrimDoubleQuotes()) ? 131071 : 524287);
    if (isSetTrimDoubleQuotes())
      hashCode = hashCode * 8191 + ((trim_double_quotes) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSkipLines()) ? 131071 : 524287);
    if (isSetSkipLines())
      hashCode = hashCode * 8191 + skip_lines;

    hashCode = hashCode * 8191 + ((isSetEnableProfile()) ? 131071 : 524287);
    if (isSetEnableProfile())
      hashCode = hashCode * 8191 + ((enable_profile) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPartialUpdate()) ? 131071 : 524287);
    if (isSetPartialUpdate())
      hashCode = hashCode * 8191 + ((partial_update) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTableNames()) ? 131071 : 524287);
    if (isSetTableNames())
      hashCode = hashCode * 8191 + table_names.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TStreamLoadPutRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCluster(), other.isSetCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster, other.cluster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUser(), other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPasswd(), other.isSetPasswd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPasswd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwd, other.passwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb(), other.isSetDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTbl(), other.isSetTbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbl, other.tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUserIp(), other.isSetUserIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ip, other.user_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoadId(), other.isSetLoadId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadId, other.loadId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTxnId(), other.isSetTxnId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxnId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnId, other.txnId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileType(), other.isSetFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFormatType(), other.isSetFormatType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormatType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.formatType, other.formatType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumns(), other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWhere(), other.isSetWhere());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhere()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.where, other.where);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnSeparator(), other.isSetColumnSeparator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnSeparator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnSeparator, other.columnSeparator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartitions(), other.isSetPartitions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitions, other.partitions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAuthCode(), other.isSetAuthCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth_code, other.auth_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNegative(), other.isSetNegative());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNegative()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.negative, other.negative);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimeout(), other.isSetTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, other.timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStrictMode(), other.isSetStrictMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrictMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strictMode, other.strictMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimezone(), other.isSetTimezone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimezone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timezone, other.timezone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExecMemLimit(), other.isSetExecMemLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecMemLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execMemLimit, other.execMemLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsTempPartition(), other.isSetIsTempPartition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTempPartition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTempPartition, other.isTempPartition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStripOuterArray(), other.isSetStripOuterArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStripOuterArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strip_outer_array, other.strip_outer_array);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJsonpaths(), other.isSetJsonpaths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJsonpaths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jsonpaths, other.jsonpaths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetThriftRpcTimeoutMs(), other.isSetThriftRpcTimeoutMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThriftRpcTimeoutMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thrift_rpc_timeout_ms, other.thrift_rpc_timeout_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJsonRoot(), other.isSetJsonRoot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJsonRoot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json_root, other.json_root);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMergeType(), other.isSetMergeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMergeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merge_type, other.merge_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDeleteCondition(), other.isSetDeleteCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeleteCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delete_condition, other.delete_condition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSequenceCol(), other.isSetSequenceCol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSequenceCol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sequence_col, other.sequence_col);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumAsString(), other.isSetNumAsString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumAsString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_as_string, other.num_as_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFuzzyParse(), other.isSetFuzzyParse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFuzzyParse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fuzzy_parse, other.fuzzy_parse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLineDelimiter(), other.isSetLineDelimiter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineDelimiter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line_delimiter, other.line_delimiter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReadJsonByLine(), other.isSetReadJsonByLine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadJsonByLine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read_json_by_line, other.read_json_by_line);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetToken(), other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSendBatchParallelism(), other.isSetSendBatchParallelism());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendBatchParallelism()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.send_batch_parallelism, other.send_batch_parallelism);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxFilterRatio(), other.isSetMaxFilterRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxFilterRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_filter_ratio, other.max_filter_ratio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoadToSingleTablet(), other.isSetLoadToSingleTablet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadToSingleTablet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_to_single_tablet, other.load_to_single_tablet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHeaderType(), other.isSetHeaderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeaderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header_type, other.header_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHiddenColumns(), other.isSetHiddenColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHiddenColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hidden_columns, other.hidden_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCompressType(), other.isSetCompressType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompressType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compress_type, other.compress_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileSize(), other.isSetFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_size, other.file_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrimDoubleQuotes(), other.isSetTrimDoubleQuotes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrimDoubleQuotes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trim_double_quotes, other.trim_double_quotes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSkipLines(), other.isSetSkipLines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkipLines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skip_lines, other.skip_lines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableProfile(), other.isSetEnableProfile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableProfile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_profile, other.enable_profile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartialUpdate(), other.isSetPartialUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartialUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partial_update, other.partial_update);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTableNames(), other.isSetTableNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_names, other.table_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TStreamLoadPutRequest(");
    boolean first = true;

    if (isSetCluster()) {
      sb.append("cluster:");
      if (this.cluster == null) {
        sb.append("null");
      } else {
        sb.append(this.cluster);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passwd:");
    if (this.passwd == null) {
      sb.append("null");
    } else {
      sb.append(this.passwd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("db:");
    if (this.db == null) {
      sb.append("null");
    } else {
      sb.append(this.db);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tbl:");
    if (this.tbl == null) {
      sb.append("null");
    } else {
      sb.append(this.tbl);
    }
    first = false;
    if (isSetUserIp()) {
      if (!first) sb.append(", ");
      sb.append("user_ip:");
      if (this.user_ip == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ip);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("loadId:");
    if (this.loadId == null) {
      sb.append("null");
    } else {
      sb.append(this.loadId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("txnId:");
    sb.append(this.txnId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileType:");
    if (this.fileType == null) {
      sb.append("null");
    } else {
      sb.append(this.fileType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("formatType:");
    if (this.formatType == null) {
      sb.append("null");
    } else {
      sb.append(this.formatType);
    }
    first = false;
    if (isSetPath()) {
      if (!first) sb.append(", ");
      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
    }
    if (isSetColumns()) {
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
    }
    if (isSetWhere()) {
      if (!first) sb.append(", ");
      sb.append("where:");
      if (this.where == null) {
        sb.append("null");
      } else {
        sb.append(this.where);
      }
      first = false;
    }
    if (isSetColumnSeparator()) {
      if (!first) sb.append(", ");
      sb.append("columnSeparator:");
      if (this.columnSeparator == null) {
        sb.append("null");
      } else {
        sb.append(this.columnSeparator);
      }
      first = false;
    }
    if (isSetPartitions()) {
      if (!first) sb.append(", ");
      sb.append("partitions:");
      if (this.partitions == null) {
        sb.append("null");
      } else {
        sb.append(this.partitions);
      }
      first = false;
    }
    if (isSetAuthCode()) {
      if (!first) sb.append(", ");
      sb.append("auth_code:");
      sb.append(this.auth_code);
      first = false;
    }
    if (isSetNegative()) {
      if (!first) sb.append(", ");
      sb.append("negative:");
      sb.append(this.negative);
      first = false;
    }
    if (isSetTimeout()) {
      if (!first) sb.append(", ");
      sb.append("timeout:");
      sb.append(this.timeout);
      first = false;
    }
    if (isSetStrictMode()) {
      if (!first) sb.append(", ");
      sb.append("strictMode:");
      sb.append(this.strictMode);
      first = false;
    }
    if (isSetTimezone()) {
      if (!first) sb.append(", ");
      sb.append("timezone:");
      if (this.timezone == null) {
        sb.append("null");
      } else {
        sb.append(this.timezone);
      }
      first = false;
    }
    if (isSetExecMemLimit()) {
      if (!first) sb.append(", ");
      sb.append("execMemLimit:");
      sb.append(this.execMemLimit);
      first = false;
    }
    if (isSetIsTempPartition()) {
      if (!first) sb.append(", ");
      sb.append("isTempPartition:");
      sb.append(this.isTempPartition);
      first = false;
    }
    if (isSetStripOuterArray()) {
      if (!first) sb.append(", ");
      sb.append("strip_outer_array:");
      sb.append(this.strip_outer_array);
      first = false;
    }
    if (isSetJsonpaths()) {
      if (!first) sb.append(", ");
      sb.append("jsonpaths:");
      if (this.jsonpaths == null) {
        sb.append("null");
      } else {
        sb.append(this.jsonpaths);
      }
      first = false;
    }
    if (isSetThriftRpcTimeoutMs()) {
      if (!first) sb.append(", ");
      sb.append("thrift_rpc_timeout_ms:");
      sb.append(this.thrift_rpc_timeout_ms);
      first = false;
    }
    if (isSetJsonRoot()) {
      if (!first) sb.append(", ");
      sb.append("json_root:");
      if (this.json_root == null) {
        sb.append("null");
      } else {
        sb.append(this.json_root);
      }
      first = false;
    }
    if (isSetMergeType()) {
      if (!first) sb.append(", ");
      sb.append("merge_type:");
      if (this.merge_type == null) {
        sb.append("null");
      } else {
        sb.append(this.merge_type);
      }
      first = false;
    }
    if (isSetDeleteCondition()) {
      if (!first) sb.append(", ");
      sb.append("delete_condition:");
      if (this.delete_condition == null) {
        sb.append("null");
      } else {
        sb.append(this.delete_condition);
      }
      first = false;
    }
    if (isSetSequenceCol()) {
      if (!first) sb.append(", ");
      sb.append("sequence_col:");
      if (this.sequence_col == null) {
        sb.append("null");
      } else {
        sb.append(this.sequence_col);
      }
      first = false;
    }
    if (isSetNumAsString()) {
      if (!first) sb.append(", ");
      sb.append("num_as_string:");
      sb.append(this.num_as_string);
      first = false;
    }
    if (isSetFuzzyParse()) {
      if (!first) sb.append(", ");
      sb.append("fuzzy_parse:");
      sb.append(this.fuzzy_parse);
      first = false;
    }
    if (isSetLineDelimiter()) {
      if (!first) sb.append(", ");
      sb.append("line_delimiter:");
      if (this.line_delimiter == null) {
        sb.append("null");
      } else {
        sb.append(this.line_delimiter);
      }
      first = false;
    }
    if (isSetReadJsonByLine()) {
      if (!first) sb.append(", ");
      sb.append("read_json_by_line:");
      sb.append(this.read_json_by_line);
      first = false;
    }
    if (isSetToken()) {
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
    }
    if (isSetSendBatchParallelism()) {
      if (!first) sb.append(", ");
      sb.append("send_batch_parallelism:");
      sb.append(this.send_batch_parallelism);
      first = false;
    }
    if (isSetMaxFilterRatio()) {
      if (!first) sb.append(", ");
      sb.append("max_filter_ratio:");
      sb.append(this.max_filter_ratio);
      first = false;
    }
    if (isSetLoadToSingleTablet()) {
      if (!first) sb.append(", ");
      sb.append("load_to_single_tablet:");
      sb.append(this.load_to_single_tablet);
      first = false;
    }
    if (isSetHeaderType()) {
      if (!first) sb.append(", ");
      sb.append("header_type:");
      if (this.header_type == null) {
        sb.append("null");
      } else {
        sb.append(this.header_type);
      }
      first = false;
    }
    if (isSetHiddenColumns()) {
      if (!first) sb.append(", ");
      sb.append("hidden_columns:");
      if (this.hidden_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.hidden_columns);
      }
      first = false;
    }
    if (isSetCompressType()) {
      if (!first) sb.append(", ");
      sb.append("compress_type:");
      if (this.compress_type == null) {
        sb.append("null");
      } else {
        sb.append(this.compress_type);
      }
      first = false;
    }
    if (isSetFileSize()) {
      if (!first) sb.append(", ");
      sb.append("file_size:");
      sb.append(this.file_size);
      first = false;
    }
    if (isSetTrimDoubleQuotes()) {
      if (!first) sb.append(", ");
      sb.append("trim_double_quotes:");
      sb.append(this.trim_double_quotes);
      first = false;
    }
    if (isSetSkipLines()) {
      if (!first) sb.append(", ");
      sb.append("skip_lines:");
      sb.append(this.skip_lines);
      first = false;
    }
    if (isSetEnableProfile()) {
      if (!first) sb.append(", ");
      sb.append("enable_profile:");
      sb.append(this.enable_profile);
      first = false;
    }
    if (isSetPartialUpdate()) {
      if (!first) sb.append(", ");
      sb.append("partial_update:");
      sb.append(this.partial_update);
      first = false;
    }
    if (isSetTableNames()) {
      if (!first) sb.append(", ");
      sb.append("table_names:");
      if (this.table_names == null) {
        sb.append("null");
      } else {
        sb.append(this.table_names);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (user == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user' was not present! Struct: " + toString());
    }
    if (passwd == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'passwd' was not present! Struct: " + toString());
    }
    if (db == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'db' was not present! Struct: " + toString());
    }
    if (tbl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tbl' was not present! Struct: " + toString());
    }
    if (loadId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'loadId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'txnId' because it's a primitive and you chose the non-beans generator.
    if (fileType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fileType' was not present! Struct: " + toString());
    }
    if (formatType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'formatType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (loadId != null) {
      loadId.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStreamLoadPutRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStreamLoadPutRequestStandardScheme getScheme() {
      return new TStreamLoadPutRequestStandardScheme();
    }
  }

  private static class TStreamLoadPutRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TStreamLoadPutRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TStreamLoadPutRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLUSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cluster = iprot.readString();
              struct.setClusterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passwd = iprot.readString();
              struct.setPasswdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db = iprot.readString();
              struct.setDbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tbl = iprot.readString();
              struct.setTblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_ip = iprot.readString();
              struct.setUserIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOAD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.loadId = new org.apache.doris.thrift.TUniqueId();
              struct.loadId.read(iprot);
              struct.setLoadIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TXN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.txnId = iprot.readI64();
              struct.setTxnIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileType = org.apache.doris.thrift.TFileType.findByValue(iprot.readI32());
              struct.setFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FORMAT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.formatType = org.apache.doris.thrift.TFileFormatType.findByValue(iprot.readI32());
              struct.setFormatTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columns = iprot.readString();
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // WHERE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.where = iprot.readString();
              struct.setWhereIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // COLUMN_SEPARATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.columnSeparator = iprot.readString();
              struct.setColumnSeparatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PARTITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partitions = iprot.readString();
              struct.setPartitionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // AUTH_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.auth_code = iprot.readI64();
              struct.setAuthCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // NEGATIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.negative = iprot.readBool();
              struct.setNegativeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeout = iprot.readI32();
              struct.setTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // STRICT_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.strictMode = iprot.readBool();
              struct.setStrictModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TIMEZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timezone = iprot.readString();
              struct.setTimezoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // EXEC_MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execMemLimit = iprot.readI64();
              struct.setExecMemLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // IS_TEMP_PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isTempPartition = iprot.readBool();
              struct.setIsTempPartitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // STRIP_OUTER_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.strip_outer_array = iprot.readBool();
              struct.setStripOuterArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // JSONPATHS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jsonpaths = iprot.readString();
              struct.setJsonpathsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // THRIFT_RPC_TIMEOUT_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.thrift_rpc_timeout_ms = iprot.readI64();
              struct.setThriftRpcTimeoutMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // JSON_ROOT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.json_root = iprot.readString();
              struct.setJsonRootIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // MERGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.merge_type = org.apache.doris.thrift.TMergeType.findByValue(iprot.readI32());
              struct.setMergeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // DELETE_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.delete_condition = iprot.readString();
              struct.setDeleteConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // SEQUENCE_COL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sequence_col = iprot.readString();
              struct.setSequenceColIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // NUM_AS_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.num_as_string = iprot.readBool();
              struct.setNumAsStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // FUZZY_PARSE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.fuzzy_parse = iprot.readBool();
              struct.setFuzzyParseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // LINE_DELIMITER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.line_delimiter = iprot.readString();
              struct.setLineDelimiterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // READ_JSON_BY_LINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.read_json_by_line = iprot.readBool();
              struct.setReadJsonByLineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // SEND_BATCH_PARALLELISM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.send_batch_parallelism = iprot.readI32();
              struct.setSendBatchParallelismIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // MAX_FILTER_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.max_filter_ratio = iprot.readDouble();
              struct.setMaxFilterRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // LOAD_TO_SINGLE_TABLET
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.load_to_single_tablet = iprot.readBool();
              struct.setLoadToSingleTabletIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // HEADER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.header_type = iprot.readString();
              struct.setHeaderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // HIDDEN_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hidden_columns = iprot.readString();
              struct.setHiddenColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // COMPRESS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compress_type = org.apache.doris.thrift.TFileCompressType.findByValue(iprot.readI32());
              struct.setCompressTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.file_size = iprot.readI64();
              struct.setFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // TRIM_DOUBLE_QUOTES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.trim_double_quotes = iprot.readBool();
              struct.setTrimDoubleQuotesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // SKIP_LINES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.skip_lines = iprot.readI32();
              struct.setSkipLinesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // ENABLE_PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_profile = iprot.readBool();
              struct.setEnableProfileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // PARTIAL_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.partial_update = iprot.readBool();
              struct.setPartialUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // TABLE_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list250 = iprot.readListBegin();
                struct.table_names = new java.util.ArrayList<java.lang.String>(_list250.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem251;
                for (int _i252 = 0; _i252 < _list250.size; ++_i252)
                {
                  _elem251 = iprot.readString();
                  struct.table_names.add(_elem251);
                }
                iprot.readListEnd();
              }
              struct.setTableNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTxnId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'txnId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TStreamLoadPutRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cluster != null) {
        if (struct.isSetCluster()) {
          oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
          oprot.writeString(struct.cluster);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(struct.user);
        oprot.writeFieldEnd();
      }
      if (struct.passwd != null) {
        oprot.writeFieldBegin(PASSWD_FIELD_DESC);
        oprot.writeString(struct.passwd);
        oprot.writeFieldEnd();
      }
      if (struct.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(struct.db);
        oprot.writeFieldEnd();
      }
      if (struct.tbl != null) {
        oprot.writeFieldBegin(TBL_FIELD_DESC);
        oprot.writeString(struct.tbl);
        oprot.writeFieldEnd();
      }
      if (struct.user_ip != null) {
        if (struct.isSetUserIp()) {
          oprot.writeFieldBegin(USER_IP_FIELD_DESC);
          oprot.writeString(struct.user_ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.loadId != null) {
        oprot.writeFieldBegin(LOAD_ID_FIELD_DESC);
        struct.loadId.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
      oprot.writeI64(struct.txnId);
      oprot.writeFieldEnd();
      if (struct.fileType != null) {
        oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.fileType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.formatType != null) {
        oprot.writeFieldBegin(FORMAT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.formatType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.path != null) {
        if (struct.isSetPath()) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.columns != null) {
        if (struct.isSetColumns()) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          oprot.writeString(struct.columns);
          oprot.writeFieldEnd();
        }
      }
      if (struct.where != null) {
        if (struct.isSetWhere()) {
          oprot.writeFieldBegin(WHERE_FIELD_DESC);
          oprot.writeString(struct.where);
          oprot.writeFieldEnd();
        }
      }
      if (struct.columnSeparator != null) {
        if (struct.isSetColumnSeparator()) {
          oprot.writeFieldBegin(COLUMN_SEPARATOR_FIELD_DESC);
          oprot.writeString(struct.columnSeparator);
          oprot.writeFieldEnd();
        }
      }
      if (struct.partitions != null) {
        if (struct.isSetPartitions()) {
          oprot.writeFieldBegin(PARTITIONS_FIELD_DESC);
          oprot.writeString(struct.partitions);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAuthCode()) {
        oprot.writeFieldBegin(AUTH_CODE_FIELD_DESC);
        oprot.writeI64(struct.auth_code);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNegative()) {
        oprot.writeFieldBegin(NEGATIVE_FIELD_DESC);
        oprot.writeBool(struct.negative);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimeout()) {
        oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
        oprot.writeI32(struct.timeout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStrictMode()) {
        oprot.writeFieldBegin(STRICT_MODE_FIELD_DESC);
        oprot.writeBool(struct.strictMode);
        oprot.writeFieldEnd();
      }
      if (struct.timezone != null) {
        if (struct.isSetTimezone()) {
          oprot.writeFieldBegin(TIMEZONE_FIELD_DESC);
          oprot.writeString(struct.timezone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExecMemLimit()) {
        oprot.writeFieldBegin(EXEC_MEM_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.execMemLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsTempPartition()) {
        oprot.writeFieldBegin(IS_TEMP_PARTITION_FIELD_DESC);
        oprot.writeBool(struct.isTempPartition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStripOuterArray()) {
        oprot.writeFieldBegin(STRIP_OUTER_ARRAY_FIELD_DESC);
        oprot.writeBool(struct.strip_outer_array);
        oprot.writeFieldEnd();
      }
      if (struct.jsonpaths != null) {
        if (struct.isSetJsonpaths()) {
          oprot.writeFieldBegin(JSONPATHS_FIELD_DESC);
          oprot.writeString(struct.jsonpaths);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetThriftRpcTimeoutMs()) {
        oprot.writeFieldBegin(THRIFT_RPC_TIMEOUT_MS_FIELD_DESC);
        oprot.writeI64(struct.thrift_rpc_timeout_ms);
        oprot.writeFieldEnd();
      }
      if (struct.json_root != null) {
        if (struct.isSetJsonRoot()) {
          oprot.writeFieldBegin(JSON_ROOT_FIELD_DESC);
          oprot.writeString(struct.json_root);
          oprot.writeFieldEnd();
        }
      }
      if (struct.merge_type != null) {
        if (struct.isSetMergeType()) {
          oprot.writeFieldBegin(MERGE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.merge_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.delete_condition != null) {
        if (struct.isSetDeleteCondition()) {
          oprot.writeFieldBegin(DELETE_CONDITION_FIELD_DESC);
          oprot.writeString(struct.delete_condition);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sequence_col != null) {
        if (struct.isSetSequenceCol()) {
          oprot.writeFieldBegin(SEQUENCE_COL_FIELD_DESC);
          oprot.writeString(struct.sequence_col);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNumAsString()) {
        oprot.writeFieldBegin(NUM_AS_STRING_FIELD_DESC);
        oprot.writeBool(struct.num_as_string);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFuzzyParse()) {
        oprot.writeFieldBegin(FUZZY_PARSE_FIELD_DESC);
        oprot.writeBool(struct.fuzzy_parse);
        oprot.writeFieldEnd();
      }
      if (struct.line_delimiter != null) {
        if (struct.isSetLineDelimiter()) {
          oprot.writeFieldBegin(LINE_DELIMITER_FIELD_DESC);
          oprot.writeString(struct.line_delimiter);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReadJsonByLine()) {
        oprot.writeFieldBegin(READ_JSON_BY_LINE_FIELD_DESC);
        oprot.writeBool(struct.read_json_by_line);
        oprot.writeFieldEnd();
      }
      if (struct.token != null) {
        if (struct.isSetToken()) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSendBatchParallelism()) {
        oprot.writeFieldBegin(SEND_BATCH_PARALLELISM_FIELD_DESC);
        oprot.writeI32(struct.send_batch_parallelism);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxFilterRatio()) {
        oprot.writeFieldBegin(MAX_FILTER_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.max_filter_ratio);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLoadToSingleTablet()) {
        oprot.writeFieldBegin(LOAD_TO_SINGLE_TABLET_FIELD_DESC);
        oprot.writeBool(struct.load_to_single_tablet);
        oprot.writeFieldEnd();
      }
      if (struct.header_type != null) {
        if (struct.isSetHeaderType()) {
          oprot.writeFieldBegin(HEADER_TYPE_FIELD_DESC);
          oprot.writeString(struct.header_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hidden_columns != null) {
        if (struct.isSetHiddenColumns()) {
          oprot.writeFieldBegin(HIDDEN_COLUMNS_FIELD_DESC);
          oprot.writeString(struct.hidden_columns);
          oprot.writeFieldEnd();
        }
      }
      if (struct.compress_type != null) {
        if (struct.isSetCompressType()) {
          oprot.writeFieldBegin(COMPRESS_TYPE_FIELD_DESC);
          oprot.writeI32(struct.compress_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFileSize()) {
        oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
        oprot.writeI64(struct.file_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTrimDoubleQuotes()) {
        oprot.writeFieldBegin(TRIM_DOUBLE_QUOTES_FIELD_DESC);
        oprot.writeBool(struct.trim_double_quotes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSkipLines()) {
        oprot.writeFieldBegin(SKIP_LINES_FIELD_DESC);
        oprot.writeI32(struct.skip_lines);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableProfile()) {
        oprot.writeFieldBegin(ENABLE_PROFILE_FIELD_DESC);
        oprot.writeBool(struct.enable_profile);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartialUpdate()) {
        oprot.writeFieldBegin(PARTIAL_UPDATE_FIELD_DESC);
        oprot.writeBool(struct.partial_update);
        oprot.writeFieldEnd();
      }
      if (struct.table_names != null) {
        if (struct.isSetTableNames()) {
          oprot.writeFieldBegin(TABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.table_names.size()));
            for (java.lang.String _iter253 : struct.table_names)
            {
              oprot.writeString(_iter253);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStreamLoadPutRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStreamLoadPutRequestTupleScheme getScheme() {
      return new TStreamLoadPutRequestTupleScheme();
    }
  }

  private static class TStreamLoadPutRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TStreamLoadPutRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStreamLoadPutRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.user);
      oprot.writeString(struct.passwd);
      oprot.writeString(struct.db);
      oprot.writeString(struct.tbl);
      struct.loadId.write(oprot);
      oprot.writeI64(struct.txnId);
      oprot.writeI32(struct.fileType.getValue());
      oprot.writeI32(struct.formatType.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCluster()) {
        optionals.set(0);
      }
      if (struct.isSetUserIp()) {
        optionals.set(1);
      }
      if (struct.isSetPath()) {
        optionals.set(2);
      }
      if (struct.isSetColumns()) {
        optionals.set(3);
      }
      if (struct.isSetWhere()) {
        optionals.set(4);
      }
      if (struct.isSetColumnSeparator()) {
        optionals.set(5);
      }
      if (struct.isSetPartitions()) {
        optionals.set(6);
      }
      if (struct.isSetAuthCode()) {
        optionals.set(7);
      }
      if (struct.isSetNegative()) {
        optionals.set(8);
      }
      if (struct.isSetTimeout()) {
        optionals.set(9);
      }
      if (struct.isSetStrictMode()) {
        optionals.set(10);
      }
      if (struct.isSetTimezone()) {
        optionals.set(11);
      }
      if (struct.isSetExecMemLimit()) {
        optionals.set(12);
      }
      if (struct.isSetIsTempPartition()) {
        optionals.set(13);
      }
      if (struct.isSetStripOuterArray()) {
        optionals.set(14);
      }
      if (struct.isSetJsonpaths()) {
        optionals.set(15);
      }
      if (struct.isSetThriftRpcTimeoutMs()) {
        optionals.set(16);
      }
      if (struct.isSetJsonRoot()) {
        optionals.set(17);
      }
      if (struct.isSetMergeType()) {
        optionals.set(18);
      }
      if (struct.isSetDeleteCondition()) {
        optionals.set(19);
      }
      if (struct.isSetSequenceCol()) {
        optionals.set(20);
      }
      if (struct.isSetNumAsString()) {
        optionals.set(21);
      }
      if (struct.isSetFuzzyParse()) {
        optionals.set(22);
      }
      if (struct.isSetLineDelimiter()) {
        optionals.set(23);
      }
      if (struct.isSetReadJsonByLine()) {
        optionals.set(24);
      }
      if (struct.isSetToken()) {
        optionals.set(25);
      }
      if (struct.isSetSendBatchParallelism()) {
        optionals.set(26);
      }
      if (struct.isSetMaxFilterRatio()) {
        optionals.set(27);
      }
      if (struct.isSetLoadToSingleTablet()) {
        optionals.set(28);
      }
      if (struct.isSetHeaderType()) {
        optionals.set(29);
      }
      if (struct.isSetHiddenColumns()) {
        optionals.set(30);
      }
      if (struct.isSetCompressType()) {
        optionals.set(31);
      }
      if (struct.isSetFileSize()) {
        optionals.set(32);
      }
      if (struct.isSetTrimDoubleQuotes()) {
        optionals.set(33);
      }
      if (struct.isSetSkipLines()) {
        optionals.set(34);
      }
      if (struct.isSetEnableProfile()) {
        optionals.set(35);
      }
      if (struct.isSetPartialUpdate()) {
        optionals.set(36);
      }
      if (struct.isSetTableNames()) {
        optionals.set(37);
      }
      oprot.writeBitSet(optionals, 38);
      if (struct.isSetCluster()) {
        oprot.writeString(struct.cluster);
      }
      if (struct.isSetUserIp()) {
        oprot.writeString(struct.user_ip);
      }
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
      if (struct.isSetColumns()) {
        oprot.writeString(struct.columns);
      }
      if (struct.isSetWhere()) {
        oprot.writeString(struct.where);
      }
      if (struct.isSetColumnSeparator()) {
        oprot.writeString(struct.columnSeparator);
      }
      if (struct.isSetPartitions()) {
        oprot.writeString(struct.partitions);
      }
      if (struct.isSetAuthCode()) {
        oprot.writeI64(struct.auth_code);
      }
      if (struct.isSetNegative()) {
        oprot.writeBool(struct.negative);
      }
      if (struct.isSetTimeout()) {
        oprot.writeI32(struct.timeout);
      }
      if (struct.isSetStrictMode()) {
        oprot.writeBool(struct.strictMode);
      }
      if (struct.isSetTimezone()) {
        oprot.writeString(struct.timezone);
      }
      if (struct.isSetExecMemLimit()) {
        oprot.writeI64(struct.execMemLimit);
      }
      if (struct.isSetIsTempPartition()) {
        oprot.writeBool(struct.isTempPartition);
      }
      if (struct.isSetStripOuterArray()) {
        oprot.writeBool(struct.strip_outer_array);
      }
      if (struct.isSetJsonpaths()) {
        oprot.writeString(struct.jsonpaths);
      }
      if (struct.isSetThriftRpcTimeoutMs()) {
        oprot.writeI64(struct.thrift_rpc_timeout_ms);
      }
      if (struct.isSetJsonRoot()) {
        oprot.writeString(struct.json_root);
      }
      if (struct.isSetMergeType()) {
        oprot.writeI32(struct.merge_type.getValue());
      }
      if (struct.isSetDeleteCondition()) {
        oprot.writeString(struct.delete_condition);
      }
      if (struct.isSetSequenceCol()) {
        oprot.writeString(struct.sequence_col);
      }
      if (struct.isSetNumAsString()) {
        oprot.writeBool(struct.num_as_string);
      }
      if (struct.isSetFuzzyParse()) {
        oprot.writeBool(struct.fuzzy_parse);
      }
      if (struct.isSetLineDelimiter()) {
        oprot.writeString(struct.line_delimiter);
      }
      if (struct.isSetReadJsonByLine()) {
        oprot.writeBool(struct.read_json_by_line);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetSendBatchParallelism()) {
        oprot.writeI32(struct.send_batch_parallelism);
      }
      if (struct.isSetMaxFilterRatio()) {
        oprot.writeDouble(struct.max_filter_ratio);
      }
      if (struct.isSetLoadToSingleTablet()) {
        oprot.writeBool(struct.load_to_single_tablet);
      }
      if (struct.isSetHeaderType()) {
        oprot.writeString(struct.header_type);
      }
      if (struct.isSetHiddenColumns()) {
        oprot.writeString(struct.hidden_columns);
      }
      if (struct.isSetCompressType()) {
        oprot.writeI32(struct.compress_type.getValue());
      }
      if (struct.isSetFileSize()) {
        oprot.writeI64(struct.file_size);
      }
      if (struct.isSetTrimDoubleQuotes()) {
        oprot.writeBool(struct.trim_double_quotes);
      }
      if (struct.isSetSkipLines()) {
        oprot.writeI32(struct.skip_lines);
      }
      if (struct.isSetEnableProfile()) {
        oprot.writeBool(struct.enable_profile);
      }
      if (struct.isSetPartialUpdate()) {
        oprot.writeBool(struct.partial_update);
      }
      if (struct.isSetTableNames()) {
        {
          oprot.writeI32(struct.table_names.size());
          for (java.lang.String _iter254 : struct.table_names)
          {
            oprot.writeString(_iter254);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStreamLoadPutRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.user = iprot.readString();
      struct.setUserIsSet(true);
      struct.passwd = iprot.readString();
      struct.setPasswdIsSet(true);
      struct.db = iprot.readString();
      struct.setDbIsSet(true);
      struct.tbl = iprot.readString();
      struct.setTblIsSet(true);
      struct.loadId = new org.apache.doris.thrift.TUniqueId();
      struct.loadId.read(iprot);
      struct.setLoadIdIsSet(true);
      struct.txnId = iprot.readI64();
      struct.setTxnIdIsSet(true);
      struct.fileType = org.apache.doris.thrift.TFileType.findByValue(iprot.readI32());
      struct.setFileTypeIsSet(true);
      struct.formatType = org.apache.doris.thrift.TFileFormatType.findByValue(iprot.readI32());
      struct.setFormatTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(38);
      if (incoming.get(0)) {
        struct.cluster = iprot.readString();
        struct.setClusterIsSet(true);
      }
      if (incoming.get(1)) {
        struct.user_ip = iprot.readString();
        struct.setUserIpIsSet(true);
      }
      if (incoming.get(2)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
      if (incoming.get(3)) {
        struct.columns = iprot.readString();
        struct.setColumnsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.where = iprot.readString();
        struct.setWhereIsSet(true);
      }
      if (incoming.get(5)) {
        struct.columnSeparator = iprot.readString();
        struct.setColumnSeparatorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.partitions = iprot.readString();
        struct.setPartitionsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.auth_code = iprot.readI64();
        struct.setAuthCodeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.negative = iprot.readBool();
        struct.setNegativeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.timeout = iprot.readI32();
        struct.setTimeoutIsSet(true);
      }
      if (incoming.get(10)) {
        struct.strictMode = iprot.readBool();
        struct.setStrictModeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.timezone = iprot.readString();
        struct.setTimezoneIsSet(true);
      }
      if (incoming.get(12)) {
        struct.execMemLimit = iprot.readI64();
        struct.setExecMemLimitIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isTempPartition = iprot.readBool();
        struct.setIsTempPartitionIsSet(true);
      }
      if (incoming.get(14)) {
        struct.strip_outer_array = iprot.readBool();
        struct.setStripOuterArrayIsSet(true);
      }
      if (incoming.get(15)) {
        struct.jsonpaths = iprot.readString();
        struct.setJsonpathsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.thrift_rpc_timeout_ms = iprot.readI64();
        struct.setThriftRpcTimeoutMsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.json_root = iprot.readString();
        struct.setJsonRootIsSet(true);
      }
      if (incoming.get(18)) {
        struct.merge_type = org.apache.doris.thrift.TMergeType.findByValue(iprot.readI32());
        struct.setMergeTypeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.delete_condition = iprot.readString();
        struct.setDeleteConditionIsSet(true);
      }
      if (incoming.get(20)) {
        struct.sequence_col = iprot.readString();
        struct.setSequenceColIsSet(true);
      }
      if (incoming.get(21)) {
        struct.num_as_string = iprot.readBool();
        struct.setNumAsStringIsSet(true);
      }
      if (incoming.get(22)) {
        struct.fuzzy_parse = iprot.readBool();
        struct.setFuzzyParseIsSet(true);
      }
      if (incoming.get(23)) {
        struct.line_delimiter = iprot.readString();
        struct.setLineDelimiterIsSet(true);
      }
      if (incoming.get(24)) {
        struct.read_json_by_line = iprot.readBool();
        struct.setReadJsonByLineIsSet(true);
      }
      if (incoming.get(25)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(26)) {
        struct.send_batch_parallelism = iprot.readI32();
        struct.setSendBatchParallelismIsSet(true);
      }
      if (incoming.get(27)) {
        struct.max_filter_ratio = iprot.readDouble();
        struct.setMaxFilterRatioIsSet(true);
      }
      if (incoming.get(28)) {
        struct.load_to_single_tablet = iprot.readBool();
        struct.setLoadToSingleTabletIsSet(true);
      }
      if (incoming.get(29)) {
        struct.header_type = iprot.readString();
        struct.setHeaderTypeIsSet(true);
      }
      if (incoming.get(30)) {
        struct.hidden_columns = iprot.readString();
        struct.setHiddenColumnsIsSet(true);
      }
      if (incoming.get(31)) {
        struct.compress_type = org.apache.doris.thrift.TFileCompressType.findByValue(iprot.readI32());
        struct.setCompressTypeIsSet(true);
      }
      if (incoming.get(32)) {
        struct.file_size = iprot.readI64();
        struct.setFileSizeIsSet(true);
      }
      if (incoming.get(33)) {
        struct.trim_double_quotes = iprot.readBool();
        struct.setTrimDoubleQuotesIsSet(true);
      }
      if (incoming.get(34)) {
        struct.skip_lines = iprot.readI32();
        struct.setSkipLinesIsSet(true);
      }
      if (incoming.get(35)) {
        struct.enable_profile = iprot.readBool();
        struct.setEnableProfileIsSet(true);
      }
      if (incoming.get(36)) {
        struct.partial_update = iprot.readBool();
        struct.setPartialUpdateIsSet(true);
      }
      if (incoming.get(37)) {
        {
          org.apache.thrift.protocol.TList _list255 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.table_names = new java.util.ArrayList<java.lang.String>(_list255.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem256;
          for (int _i257 = 0; _i257 < _list255.size; ++_i257)
          {
            _elem256 = iprot.readString();
            struct.table_names.add(_elem256);
          }
        }
        struct.setTableNamesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

