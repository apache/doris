/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-08-29")
public class TCreateTableParams implements org.apache.thrift.TBase<TCreateTableParams, TCreateTableParams._Fields>, java.io.Serializable, Cloneable, Comparable<TCreateTableParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCreateTableParams");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ENGINE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("engine_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IF_NOT_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("if_not_exists", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField PARTITION_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_desc", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField ROW_FORMAT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("row_format_type", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TCreateTableParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TCreateTableParamsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TTableName table_name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String engine_name; // optional
  public boolean if_not_exists; // optional
  public @org.apache.thrift.annotation.Nullable TPartitionDesc partition_desc; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String row_format_type; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "table_name"),
    ENGINE_NAME((short)3, "engine_name"),
    IF_NOT_EXISTS((short)4, "if_not_exists"),
    PARTITION_DESC((short)5, "partition_desc"),
    ROW_FORMAT_TYPE((short)6, "row_format_type"),
    PROPERTIES((short)7, "properties");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 3: // ENGINE_NAME
          return ENGINE_NAME;
        case 4: // IF_NOT_EXISTS
          return IF_NOT_EXISTS;
        case 5: // PARTITION_DESC
          return PARTITION_DESC;
        case 6: // ROW_FORMAT_TYPE
          return ROW_FORMAT_TYPE;
        case 7: // PROPERTIES
          return PROPERTIES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IF_NOT_EXISTS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ENGINE_NAME,_Fields.IF_NOT_EXISTS,_Fields.PARTITION_DESC,_Fields.ROW_FORMAT_TYPE,_Fields.PROPERTIES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTableName.class)));
    tmpMap.put(_Fields.ENGINE_NAME, new org.apache.thrift.meta_data.FieldMetaData("engine_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IF_NOT_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("if_not_exists", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARTITION_DESC, new org.apache.thrift.meta_data.FieldMetaData("partition_desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPartitionDesc.class)));
    tmpMap.put(_Fields.ROW_FORMAT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("row_format_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCreateTableParams.class, metaDataMap);
  }

  public TCreateTableParams() {
  }

  public TCreateTableParams(
    TTableName table_name)
  {
    this();
    this.table_name = table_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCreateTableParams(TCreateTableParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTableName()) {
      this.table_name = new TTableName(other.table_name);
    }
    if (other.isSetEngineName()) {
      this.engine_name = other.engine_name;
    }
    this.if_not_exists = other.if_not_exists;
    if (other.isSetPartitionDesc()) {
      this.partition_desc = new TPartitionDesc(other.partition_desc);
    }
    if (other.isSetRowFormatType()) {
      this.row_format_type = other.row_format_type;
    }
    if (other.isSetProperties()) {
      java.util.Map<java.lang.String,java.lang.String> __this__properties = new java.util.HashMap<java.lang.String,java.lang.String>(other.properties);
      this.properties = __this__properties;
    }
  }

  @Override
  public TCreateTableParams deepCopy() {
    return new TCreateTableParams(this);
  }

  @Override
  public void clear() {
    this.table_name = null;
    this.engine_name = null;
    setIfNotExistsIsSet(false);
    this.if_not_exists = false;
    this.partition_desc = null;
    this.row_format_type = null;
    this.properties = null;
  }

  @org.apache.thrift.annotation.Nullable
  public TTableName getTableName() {
    return this.table_name;
  }

  public TCreateTableParams setTableName(@org.apache.thrift.annotation.Nullable TTableName table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTableName() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.table_name != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEngineName() {
    return this.engine_name;
  }

  public TCreateTableParams setEngineName(@org.apache.thrift.annotation.Nullable java.lang.String engine_name) {
    this.engine_name = engine_name;
    return this;
  }

  public void unsetEngineName() {
    this.engine_name = null;
  }

  /** Returns true if field engine_name is set (has been assigned a value) and false otherwise */
  public boolean isSetEngineName() {
    return this.engine_name != null;
  }

  public void setEngineNameIsSet(boolean value) {
    if (!value) {
      this.engine_name = null;
    }
  }

  public boolean isIfNotExists() {
    return this.if_not_exists;
  }

  public TCreateTableParams setIfNotExists(boolean if_not_exists) {
    this.if_not_exists = if_not_exists;
    setIfNotExistsIsSet(true);
    return this;
  }

  public void unsetIfNotExists() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IF_NOT_EXISTS_ISSET_ID);
  }

  /** Returns true if field if_not_exists is set (has been assigned a value) and false otherwise */
  public boolean isSetIfNotExists() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IF_NOT_EXISTS_ISSET_ID);
  }

  public void setIfNotExistsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IF_NOT_EXISTS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TPartitionDesc getPartitionDesc() {
    return this.partition_desc;
  }

  public TCreateTableParams setPartitionDesc(@org.apache.thrift.annotation.Nullable TPartitionDesc partition_desc) {
    this.partition_desc = partition_desc;
    return this;
  }

  public void unsetPartitionDesc() {
    this.partition_desc = null;
  }

  /** Returns true if field partition_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionDesc() {
    return this.partition_desc != null;
  }

  public void setPartitionDescIsSet(boolean value) {
    if (!value) {
      this.partition_desc = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRowFormatType() {
    return this.row_format_type;
  }

  public TCreateTableParams setRowFormatType(@org.apache.thrift.annotation.Nullable java.lang.String row_format_type) {
    this.row_format_type = row_format_type;
    return this;
  }

  public void unsetRowFormatType() {
    this.row_format_type = null;
  }

  /** Returns true if field row_format_type is set (has been assigned a value) and false otherwise */
  public boolean isSetRowFormatType() {
    return this.row_format_type != null;
  }

  public void setRowFormatTypeIsSet(boolean value) {
    if (!value) {
      this.row_format_type = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(java.lang.String key, java.lang.String val) {
    if (this.properties == null) {
      this.properties = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.properties.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getProperties() {
    return this.properties;
  }

  public TCreateTableParams setProperties(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((TTableName)value);
      }
      break;

    case ENGINE_NAME:
      if (value == null) {
        unsetEngineName();
      } else {
        setEngineName((java.lang.String)value);
      }
      break;

    case IF_NOT_EXISTS:
      if (value == null) {
        unsetIfNotExists();
      } else {
        setIfNotExists((java.lang.Boolean)value);
      }
      break;

    case PARTITION_DESC:
      if (value == null) {
        unsetPartitionDesc();
      } else {
        setPartitionDesc((TPartitionDesc)value);
      }
      break;

    case ROW_FORMAT_TYPE:
      if (value == null) {
        unsetRowFormatType();
      } else {
        setRowFormatType((java.lang.String)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTableName();

    case ENGINE_NAME:
      return getEngineName();

    case IF_NOT_EXISTS:
      return isIfNotExists();

    case PARTITION_DESC:
      return getPartitionDesc();

    case ROW_FORMAT_TYPE:
      return getRowFormatType();

    case PROPERTIES:
      return getProperties();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTableName();
    case ENGINE_NAME:
      return isSetEngineName();
    case IF_NOT_EXISTS:
      return isSetIfNotExists();
    case PARTITION_DESC:
      return isSetPartitionDesc();
    case ROW_FORMAT_TYPE:
      return isSetRowFormatType();
    case PROPERTIES:
      return isSetProperties();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TCreateTableParams)
      return this.equals((TCreateTableParams)that);
    return false;
  }

  public boolean equals(TCreateTableParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_table_name = true && this.isSetTableName();
    boolean that_present_table_name = true && that.isSetTableName();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_engine_name = true && this.isSetEngineName();
    boolean that_present_engine_name = true && that.isSetEngineName();
    if (this_present_engine_name || that_present_engine_name) {
      if (!(this_present_engine_name && that_present_engine_name))
        return false;
      if (!this.engine_name.equals(that.engine_name))
        return false;
    }

    boolean this_present_if_not_exists = true && this.isSetIfNotExists();
    boolean that_present_if_not_exists = true && that.isSetIfNotExists();
    if (this_present_if_not_exists || that_present_if_not_exists) {
      if (!(this_present_if_not_exists && that_present_if_not_exists))
        return false;
      if (this.if_not_exists != that.if_not_exists)
        return false;
    }

    boolean this_present_partition_desc = true && this.isSetPartitionDesc();
    boolean that_present_partition_desc = true && that.isSetPartitionDesc();
    if (this_present_partition_desc || that_present_partition_desc) {
      if (!(this_present_partition_desc && that_present_partition_desc))
        return false;
      if (!this.partition_desc.equals(that.partition_desc))
        return false;
    }

    boolean this_present_row_format_type = true && this.isSetRowFormatType();
    boolean that_present_row_format_type = true && that.isSetRowFormatType();
    if (this_present_row_format_type || that_present_row_format_type) {
      if (!(this_present_row_format_type && that_present_row_format_type))
        return false;
      if (!this.row_format_type.equals(that.row_format_type))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTableName()) ? 131071 : 524287);
    if (isSetTableName())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetEngineName()) ? 131071 : 524287);
    if (isSetEngineName())
      hashCode = hashCode * 8191 + engine_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetIfNotExists()) ? 131071 : 524287);
    if (isSetIfNotExists())
      hashCode = hashCode * 8191 + ((if_not_exists) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPartitionDesc()) ? 131071 : 524287);
    if (isSetPartitionDesc())
      hashCode = hashCode * 8191 + partition_desc.hashCode();

    hashCode = hashCode * 8191 + ((isSetRowFormatType()) ? 131071 : 524287);
    if (isSetRowFormatType())
      hashCode = hashCode * 8191 + row_format_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetProperties()) ? 131071 : 524287);
    if (isSetProperties())
      hashCode = hashCode * 8191 + properties.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TCreateTableParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTableName(), other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEngineName(), other.isSetEngineName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngineName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engine_name, other.engine_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIfNotExists(), other.isSetIfNotExists());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIfNotExists()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.if_not_exists, other.if_not_exists);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartitionDesc(), other.isSetPartitionDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_desc, other.partition_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRowFormatType(), other.isSetRowFormatType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowFormatType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_format_type, other.row_format_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProperties(), other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TCreateTableParams(");
    boolean first = true;

    sb.append("table_name:");
    if (this.table_name == null) {
      sb.append("null");
    } else {
      sb.append(this.table_name);
    }
    first = false;
    if (isSetEngineName()) {
      if (!first) sb.append(", ");
      sb.append("engine_name:");
      if (this.engine_name == null) {
        sb.append("null");
      } else {
        sb.append(this.engine_name);
      }
      first = false;
    }
    if (isSetIfNotExists()) {
      if (!first) sb.append(", ");
      sb.append("if_not_exists:");
      sb.append(this.if_not_exists);
      first = false;
    }
    if (isSetPartitionDesc()) {
      if (!first) sb.append(", ");
      sb.append("partition_desc:");
      if (this.partition_desc == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_desc);
      }
      first = false;
    }
    if (isSetRowFormatType()) {
      if (!first) sb.append(", ");
      sb.append("row_format_type:");
      if (this.row_format_type == null) {
        sb.append("null");
      } else {
        sb.append(this.row_format_type);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (table_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_name' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (table_name != null) {
      table_name.validate();
    }
    if (partition_desc != null) {
      partition_desc.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCreateTableParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TCreateTableParamsStandardScheme getScheme() {
      return new TCreateTableParamsStandardScheme();
    }
  }

  private static class TCreateTableParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TCreateTableParams> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TCreateTableParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_name = new TTableName();
              struct.table_name.read(iprot);
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENGINE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engine_name = iprot.readString();
              struct.setEngineNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IF_NOT_EXISTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.if_not_exists = iprot.readBool();
              struct.setIfNotExistsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARTITION_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.partition_desc = new TPartitionDesc();
              struct.partition_desc.read(iprot);
              struct.setPartitionDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ROW_FORMAT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.row_format_type = iprot.readString();
              struct.setRowFormatTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map32 = iprot.readMapBegin();
                struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map32.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key33;
                @org.apache.thrift.annotation.Nullable java.lang.String _val34;
                for (int _i35 = 0; _i35 < _map32.size; ++_i35)
                {
                  _key33 = iprot.readString();
                  _val34 = iprot.readString();
                  struct.properties.put(_key33, _val34);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TCreateTableParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        struct.table_name.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.engine_name != null) {
        if (struct.isSetEngineName()) {
          oprot.writeFieldBegin(ENGINE_NAME_FIELD_DESC);
          oprot.writeString(struct.engine_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIfNotExists()) {
        oprot.writeFieldBegin(IF_NOT_EXISTS_FIELD_DESC);
        oprot.writeBool(struct.if_not_exists);
        oprot.writeFieldEnd();
      }
      if (struct.partition_desc != null) {
        if (struct.isSetPartitionDesc()) {
          oprot.writeFieldBegin(PARTITION_DESC_FIELD_DESC);
          struct.partition_desc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.row_format_type != null) {
        if (struct.isSetRowFormatType()) {
          oprot.writeFieldBegin(ROW_FORMAT_TYPE_FIELD_DESC);
          oprot.writeString(struct.row_format_type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter36 : struct.properties.entrySet())
            {
              oprot.writeString(_iter36.getKey());
              oprot.writeString(_iter36.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCreateTableParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TCreateTableParamsTupleScheme getScheme() {
      return new TCreateTableParamsTupleScheme();
    }
  }

  private static class TCreateTableParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TCreateTableParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCreateTableParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.table_name.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEngineName()) {
        optionals.set(0);
      }
      if (struct.isSetIfNotExists()) {
        optionals.set(1);
      }
      if (struct.isSetPartitionDesc()) {
        optionals.set(2);
      }
      if (struct.isSetRowFormatType()) {
        optionals.set(3);
      }
      if (struct.isSetProperties()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetEngineName()) {
        oprot.writeString(struct.engine_name);
      }
      if (struct.isSetIfNotExists()) {
        oprot.writeBool(struct.if_not_exists);
      }
      if (struct.isSetPartitionDesc()) {
        struct.partition_desc.write(oprot);
      }
      if (struct.isSetRowFormatType()) {
        oprot.writeString(struct.row_format_type);
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter37 : struct.properties.entrySet())
          {
            oprot.writeString(_iter37.getKey());
            oprot.writeString(_iter37.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCreateTableParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.table_name = new TTableName();
      struct.table_name.read(iprot);
      struct.setTableNameIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.engine_name = iprot.readString();
        struct.setEngineNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.if_not_exists = iprot.readBool();
        struct.setIfNotExistsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.partition_desc = new TPartitionDesc();
        struct.partition_desc.read(iprot);
        struct.setPartitionDescIsSet(true);
      }
      if (incoming.get(3)) {
        struct.row_format_type = iprot.readString();
        struct.setRowFormatTypeIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.properties = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map38.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key39;
          @org.apache.thrift.annotation.Nullable java.lang.String _val40;
          for (int _i41 = 0; _i41 < _map38.size; ++_i41)
          {
            _key39 = iprot.readString();
            _val40 = iprot.readString();
            struct.properties.put(_key39, _val40);
          }
        }
        struct.setPropertiesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

