/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-06-20")
public class TQueryExecRequest implements org.apache.thrift.TBase<TQueryExecRequest, TQueryExecRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TQueryExecRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueryExecRequest");

  private static final org.apache.thrift.protocol.TField DESC_TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("desc_tbl", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FRAGMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("fragments", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DEST_FRAGMENT_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("dest_fragment_idx", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PER_NODE_SCAN_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("per_node_scan_ranges", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField RESULT_SET_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("result_set_metadata", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField QUERY_GLOBALS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_globals", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField STMT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stmt_type", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField IS_BLOCK_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("is_block_query", org.apache.thrift.protocol.TType.BOOL, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TQueryExecRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TQueryExecRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TDescriptorTable desc_tbl; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TPlanFragment> fragments; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> dest_fragment_idx; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<org.apache.doris.thrift.TScanRangeLocations>> per_node_scan_ranges; // optional
  public @org.apache.thrift.annotation.Nullable TResultSetMetadata result_set_metadata; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TQueryGlobals query_globals; // required
  /**
   * 
   * @see org.apache.doris.thrift.TStmtType
   */
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TStmtType stmt_type; // required
  public boolean is_block_query; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DESC_TBL((short)1, "desc_tbl"),
    FRAGMENTS((short)2, "fragments"),
    DEST_FRAGMENT_IDX((short)3, "dest_fragment_idx"),
    PER_NODE_SCAN_RANGES((short)4, "per_node_scan_ranges"),
    RESULT_SET_METADATA((short)5, "result_set_metadata"),
    QUERY_GLOBALS((short)7, "query_globals"),
    /**
     * 
     * @see org.apache.doris.thrift.TStmtType
     */
    STMT_TYPE((short)9, "stmt_type"),
    IS_BLOCK_QUERY((short)10, "is_block_query");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DESC_TBL
          return DESC_TBL;
        case 2: // FRAGMENTS
          return FRAGMENTS;
        case 3: // DEST_FRAGMENT_IDX
          return DEST_FRAGMENT_IDX;
        case 4: // PER_NODE_SCAN_RANGES
          return PER_NODE_SCAN_RANGES;
        case 5: // RESULT_SET_METADATA
          return RESULT_SET_METADATA;
        case 7: // QUERY_GLOBALS
          return QUERY_GLOBALS;
        case 9: // STMT_TYPE
          return STMT_TYPE;
        case 10: // IS_BLOCK_QUERY
          return IS_BLOCK_QUERY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_BLOCK_QUERY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DESC_TBL,_Fields.DEST_FRAGMENT_IDX,_Fields.PER_NODE_SCAN_RANGES,_Fields.RESULT_SET_METADATA,_Fields.IS_BLOCK_QUERY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DESC_TBL, new org.apache.thrift.meta_data.FieldMetaData("desc_tbl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TDescriptorTable.class)));
    tmpMap.put(_Fields.FRAGMENTS, new org.apache.thrift.meta_data.FieldMetaData("fragments", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TPlanFragment.class))));
    tmpMap.put(_Fields.DEST_FRAGMENT_IDX, new org.apache.thrift.meta_data.FieldMetaData("dest_fragment_idx", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PER_NODE_SCAN_RANGES, new org.apache.thrift.meta_data.FieldMetaData("per_node_scan_ranges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TScanRangeLocations.class)))));
    tmpMap.put(_Fields.RESULT_SET_METADATA, new org.apache.thrift.meta_data.FieldMetaData("result_set_metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResultSetMetadata.class)));
    tmpMap.put(_Fields.QUERY_GLOBALS, new org.apache.thrift.meta_data.FieldMetaData("query_globals", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TQueryGlobals.class)));
    tmpMap.put(_Fields.STMT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stmt_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.doris.thrift.TStmtType.class)));
    tmpMap.put(_Fields.IS_BLOCK_QUERY, new org.apache.thrift.meta_data.FieldMetaData("is_block_query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueryExecRequest.class, metaDataMap);
  }

  public TQueryExecRequest() {
  }

  public TQueryExecRequest(
    java.util.List<org.apache.doris.thrift.TPlanFragment> fragments,
    org.apache.doris.thrift.TQueryGlobals query_globals,
    org.apache.doris.thrift.TStmtType stmt_type)
  {
    this();
    this.fragments = fragments;
    this.query_globals = query_globals;
    this.stmt_type = stmt_type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueryExecRequest(TQueryExecRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDescTbl()) {
      this.desc_tbl = new org.apache.doris.thrift.TDescriptorTable(other.desc_tbl);
    }
    if (other.isSetFragments()) {
      java.util.List<org.apache.doris.thrift.TPlanFragment> __this__fragments = new java.util.ArrayList<org.apache.doris.thrift.TPlanFragment>(other.fragments.size());
      for (org.apache.doris.thrift.TPlanFragment other_element : other.fragments) {
        __this__fragments.add(new org.apache.doris.thrift.TPlanFragment(other_element));
      }
      this.fragments = __this__fragments;
    }
    if (other.isSetDestFragmentIdx()) {
      java.util.List<java.lang.Integer> __this__dest_fragment_idx = new java.util.ArrayList<java.lang.Integer>(other.dest_fragment_idx);
      this.dest_fragment_idx = __this__dest_fragment_idx;
    }
    if (other.isSetPerNodeScanRanges()) {
      java.util.Map<java.lang.Integer,java.util.List<org.apache.doris.thrift.TScanRangeLocations>> __this__per_node_scan_ranges = new java.util.HashMap<java.lang.Integer,java.util.List<org.apache.doris.thrift.TScanRangeLocations>>(other.per_node_scan_ranges.size());
      for (java.util.Map.Entry<java.lang.Integer, java.util.List<org.apache.doris.thrift.TScanRangeLocations>> other_element : other.per_node_scan_ranges.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        java.util.List<org.apache.doris.thrift.TScanRangeLocations> other_element_value = other_element.getValue();

        java.lang.Integer __this__per_node_scan_ranges_copy_key = other_element_key;

        java.util.List<org.apache.doris.thrift.TScanRangeLocations> __this__per_node_scan_ranges_copy_value = new java.util.ArrayList<org.apache.doris.thrift.TScanRangeLocations>(other_element_value.size());
        for (org.apache.doris.thrift.TScanRangeLocations other_element_value_element : other_element_value) {
          __this__per_node_scan_ranges_copy_value.add(new org.apache.doris.thrift.TScanRangeLocations(other_element_value_element));
        }

        __this__per_node_scan_ranges.put(__this__per_node_scan_ranges_copy_key, __this__per_node_scan_ranges_copy_value);
      }
      this.per_node_scan_ranges = __this__per_node_scan_ranges;
    }
    if (other.isSetResultSetMetadata()) {
      this.result_set_metadata = new TResultSetMetadata(other.result_set_metadata);
    }
    if (other.isSetQueryGlobals()) {
      this.query_globals = new org.apache.doris.thrift.TQueryGlobals(other.query_globals);
    }
    if (other.isSetStmtType()) {
      this.stmt_type = other.stmt_type;
    }
    this.is_block_query = other.is_block_query;
  }

  @Override
  public TQueryExecRequest deepCopy() {
    return new TQueryExecRequest(this);
  }

  @Override
  public void clear() {
    this.desc_tbl = null;
    this.fragments = null;
    this.dest_fragment_idx = null;
    this.per_node_scan_ranges = null;
    this.result_set_metadata = null;
    this.query_globals = null;
    this.stmt_type = null;
    setIsBlockQueryIsSet(false);
    this.is_block_query = false;
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TDescriptorTable getDescTbl() {
    return this.desc_tbl;
  }

  public TQueryExecRequest setDescTbl(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TDescriptorTable desc_tbl) {
    this.desc_tbl = desc_tbl;
    return this;
  }

  public void unsetDescTbl() {
    this.desc_tbl = null;
  }

  /** Returns true if field desc_tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetDescTbl() {
    return this.desc_tbl != null;
  }

  public void setDescTblIsSet(boolean value) {
    if (!value) {
      this.desc_tbl = null;
    }
  }

  public int getFragmentsSize() {
    return (this.fragments == null) ? 0 : this.fragments.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TPlanFragment> getFragmentsIterator() {
    return (this.fragments == null) ? null : this.fragments.iterator();
  }

  public void addToFragments(org.apache.doris.thrift.TPlanFragment elem) {
    if (this.fragments == null) {
      this.fragments = new java.util.ArrayList<org.apache.doris.thrift.TPlanFragment>();
    }
    this.fragments.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TPlanFragment> getFragments() {
    return this.fragments;
  }

  public TQueryExecRequest setFragments(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TPlanFragment> fragments) {
    this.fragments = fragments;
    return this;
  }

  public void unsetFragments() {
    this.fragments = null;
  }

  /** Returns true if field fragments is set (has been assigned a value) and false otherwise */
  public boolean isSetFragments() {
    return this.fragments != null;
  }

  public void setFragmentsIsSet(boolean value) {
    if (!value) {
      this.fragments = null;
    }
  }

  public int getDestFragmentIdxSize() {
    return (this.dest_fragment_idx == null) ? 0 : this.dest_fragment_idx.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getDestFragmentIdxIterator() {
    return (this.dest_fragment_idx == null) ? null : this.dest_fragment_idx.iterator();
  }

  public void addToDestFragmentIdx(int elem) {
    if (this.dest_fragment_idx == null) {
      this.dest_fragment_idx = new java.util.ArrayList<java.lang.Integer>();
    }
    this.dest_fragment_idx.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getDestFragmentIdx() {
    return this.dest_fragment_idx;
  }

  public TQueryExecRequest setDestFragmentIdx(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> dest_fragment_idx) {
    this.dest_fragment_idx = dest_fragment_idx;
    return this;
  }

  public void unsetDestFragmentIdx() {
    this.dest_fragment_idx = null;
  }

  /** Returns true if field dest_fragment_idx is set (has been assigned a value) and false otherwise */
  public boolean isSetDestFragmentIdx() {
    return this.dest_fragment_idx != null;
  }

  public void setDestFragmentIdxIsSet(boolean value) {
    if (!value) {
      this.dest_fragment_idx = null;
    }
  }

  public int getPerNodeScanRangesSize() {
    return (this.per_node_scan_ranges == null) ? 0 : this.per_node_scan_ranges.size();
  }

  public void putToPerNodeScanRanges(int key, java.util.List<org.apache.doris.thrift.TScanRangeLocations> val) {
    if (this.per_node_scan_ranges == null) {
      this.per_node_scan_ranges = new java.util.HashMap<java.lang.Integer,java.util.List<org.apache.doris.thrift.TScanRangeLocations>>();
    }
    this.per_node_scan_ranges.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.util.List<org.apache.doris.thrift.TScanRangeLocations>> getPerNodeScanRanges() {
    return this.per_node_scan_ranges;
  }

  public TQueryExecRequest setPerNodeScanRanges(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<org.apache.doris.thrift.TScanRangeLocations>> per_node_scan_ranges) {
    this.per_node_scan_ranges = per_node_scan_ranges;
    return this;
  }

  public void unsetPerNodeScanRanges() {
    this.per_node_scan_ranges = null;
  }

  /** Returns true if field per_node_scan_ranges is set (has been assigned a value) and false otherwise */
  public boolean isSetPerNodeScanRanges() {
    return this.per_node_scan_ranges != null;
  }

  public void setPerNodeScanRangesIsSet(boolean value) {
    if (!value) {
      this.per_node_scan_ranges = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TResultSetMetadata getResultSetMetadata() {
    return this.result_set_metadata;
  }

  public TQueryExecRequest setResultSetMetadata(@org.apache.thrift.annotation.Nullable TResultSetMetadata result_set_metadata) {
    this.result_set_metadata = result_set_metadata;
    return this;
  }

  public void unsetResultSetMetadata() {
    this.result_set_metadata = null;
  }

  /** Returns true if field result_set_metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetResultSetMetadata() {
    return this.result_set_metadata != null;
  }

  public void setResultSetMetadataIsSet(boolean value) {
    if (!value) {
      this.result_set_metadata = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TQueryGlobals getQueryGlobals() {
    return this.query_globals;
  }

  public TQueryExecRequest setQueryGlobals(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TQueryGlobals query_globals) {
    this.query_globals = query_globals;
    return this;
  }

  public void unsetQueryGlobals() {
    this.query_globals = null;
  }

  /** Returns true if field query_globals is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryGlobals() {
    return this.query_globals != null;
  }

  public void setQueryGlobalsIsSet(boolean value) {
    if (!value) {
      this.query_globals = null;
    }
  }

  /**
   * 
   * @see org.apache.doris.thrift.TStmtType
   */
  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TStmtType getStmtType() {
    return this.stmt_type;
  }

  /**
   * 
   * @see org.apache.doris.thrift.TStmtType
   */
  public TQueryExecRequest setStmtType(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TStmtType stmt_type) {
    this.stmt_type = stmt_type;
    return this;
  }

  public void unsetStmtType() {
    this.stmt_type = null;
  }

  /** Returns true if field stmt_type is set (has been assigned a value) and false otherwise */
  public boolean isSetStmtType() {
    return this.stmt_type != null;
  }

  public void setStmtTypeIsSet(boolean value) {
    if (!value) {
      this.stmt_type = null;
    }
  }

  public boolean isIsBlockQuery() {
    return this.is_block_query;
  }

  public TQueryExecRequest setIsBlockQuery(boolean is_block_query) {
    this.is_block_query = is_block_query;
    setIsBlockQueryIsSet(true);
    return this;
  }

  public void unsetIsBlockQuery() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_BLOCK_QUERY_ISSET_ID);
  }

  /** Returns true if field is_block_query is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBlockQuery() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_BLOCK_QUERY_ISSET_ID);
  }

  public void setIsBlockQueryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_BLOCK_QUERY_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DESC_TBL:
      if (value == null) {
        unsetDescTbl();
      } else {
        setDescTbl((org.apache.doris.thrift.TDescriptorTable)value);
      }
      break;

    case FRAGMENTS:
      if (value == null) {
        unsetFragments();
      } else {
        setFragments((java.util.List<org.apache.doris.thrift.TPlanFragment>)value);
      }
      break;

    case DEST_FRAGMENT_IDX:
      if (value == null) {
        unsetDestFragmentIdx();
      } else {
        setDestFragmentIdx((java.util.List<java.lang.Integer>)value);
      }
      break;

    case PER_NODE_SCAN_RANGES:
      if (value == null) {
        unsetPerNodeScanRanges();
      } else {
        setPerNodeScanRanges((java.util.Map<java.lang.Integer,java.util.List<org.apache.doris.thrift.TScanRangeLocations>>)value);
      }
      break;

    case RESULT_SET_METADATA:
      if (value == null) {
        unsetResultSetMetadata();
      } else {
        setResultSetMetadata((TResultSetMetadata)value);
      }
      break;

    case QUERY_GLOBALS:
      if (value == null) {
        unsetQueryGlobals();
      } else {
        setQueryGlobals((org.apache.doris.thrift.TQueryGlobals)value);
      }
      break;

    case STMT_TYPE:
      if (value == null) {
        unsetStmtType();
      } else {
        setStmtType((org.apache.doris.thrift.TStmtType)value);
      }
      break;

    case IS_BLOCK_QUERY:
      if (value == null) {
        unsetIsBlockQuery();
      } else {
        setIsBlockQuery((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DESC_TBL:
      return getDescTbl();

    case FRAGMENTS:
      return getFragments();

    case DEST_FRAGMENT_IDX:
      return getDestFragmentIdx();

    case PER_NODE_SCAN_RANGES:
      return getPerNodeScanRanges();

    case RESULT_SET_METADATA:
      return getResultSetMetadata();

    case QUERY_GLOBALS:
      return getQueryGlobals();

    case STMT_TYPE:
      return getStmtType();

    case IS_BLOCK_QUERY:
      return isIsBlockQuery();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DESC_TBL:
      return isSetDescTbl();
    case FRAGMENTS:
      return isSetFragments();
    case DEST_FRAGMENT_IDX:
      return isSetDestFragmentIdx();
    case PER_NODE_SCAN_RANGES:
      return isSetPerNodeScanRanges();
    case RESULT_SET_METADATA:
      return isSetResultSetMetadata();
    case QUERY_GLOBALS:
      return isSetQueryGlobals();
    case STMT_TYPE:
      return isSetStmtType();
    case IS_BLOCK_QUERY:
      return isSetIsBlockQuery();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TQueryExecRequest)
      return this.equals((TQueryExecRequest)that);
    return false;
  }

  public boolean equals(TQueryExecRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_desc_tbl = true && this.isSetDescTbl();
    boolean that_present_desc_tbl = true && that.isSetDescTbl();
    if (this_present_desc_tbl || that_present_desc_tbl) {
      if (!(this_present_desc_tbl && that_present_desc_tbl))
        return false;
      if (!this.desc_tbl.equals(that.desc_tbl))
        return false;
    }

    boolean this_present_fragments = true && this.isSetFragments();
    boolean that_present_fragments = true && that.isSetFragments();
    if (this_present_fragments || that_present_fragments) {
      if (!(this_present_fragments && that_present_fragments))
        return false;
      if (!this.fragments.equals(that.fragments))
        return false;
    }

    boolean this_present_dest_fragment_idx = true && this.isSetDestFragmentIdx();
    boolean that_present_dest_fragment_idx = true && that.isSetDestFragmentIdx();
    if (this_present_dest_fragment_idx || that_present_dest_fragment_idx) {
      if (!(this_present_dest_fragment_idx && that_present_dest_fragment_idx))
        return false;
      if (!this.dest_fragment_idx.equals(that.dest_fragment_idx))
        return false;
    }

    boolean this_present_per_node_scan_ranges = true && this.isSetPerNodeScanRanges();
    boolean that_present_per_node_scan_ranges = true && that.isSetPerNodeScanRanges();
    if (this_present_per_node_scan_ranges || that_present_per_node_scan_ranges) {
      if (!(this_present_per_node_scan_ranges && that_present_per_node_scan_ranges))
        return false;
      if (!this.per_node_scan_ranges.equals(that.per_node_scan_ranges))
        return false;
    }

    boolean this_present_result_set_metadata = true && this.isSetResultSetMetadata();
    boolean that_present_result_set_metadata = true && that.isSetResultSetMetadata();
    if (this_present_result_set_metadata || that_present_result_set_metadata) {
      if (!(this_present_result_set_metadata && that_present_result_set_metadata))
        return false;
      if (!this.result_set_metadata.equals(that.result_set_metadata))
        return false;
    }

    boolean this_present_query_globals = true && this.isSetQueryGlobals();
    boolean that_present_query_globals = true && that.isSetQueryGlobals();
    if (this_present_query_globals || that_present_query_globals) {
      if (!(this_present_query_globals && that_present_query_globals))
        return false;
      if (!this.query_globals.equals(that.query_globals))
        return false;
    }

    boolean this_present_stmt_type = true && this.isSetStmtType();
    boolean that_present_stmt_type = true && that.isSetStmtType();
    if (this_present_stmt_type || that_present_stmt_type) {
      if (!(this_present_stmt_type && that_present_stmt_type))
        return false;
      if (!this.stmt_type.equals(that.stmt_type))
        return false;
    }

    boolean this_present_is_block_query = true && this.isSetIsBlockQuery();
    boolean that_present_is_block_query = true && that.isSetIsBlockQuery();
    if (this_present_is_block_query || that_present_is_block_query) {
      if (!(this_present_is_block_query && that_present_is_block_query))
        return false;
      if (this.is_block_query != that.is_block_query)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDescTbl()) ? 131071 : 524287);
    if (isSetDescTbl())
      hashCode = hashCode * 8191 + desc_tbl.hashCode();

    hashCode = hashCode * 8191 + ((isSetFragments()) ? 131071 : 524287);
    if (isSetFragments())
      hashCode = hashCode * 8191 + fragments.hashCode();

    hashCode = hashCode * 8191 + ((isSetDestFragmentIdx()) ? 131071 : 524287);
    if (isSetDestFragmentIdx())
      hashCode = hashCode * 8191 + dest_fragment_idx.hashCode();

    hashCode = hashCode * 8191 + ((isSetPerNodeScanRanges()) ? 131071 : 524287);
    if (isSetPerNodeScanRanges())
      hashCode = hashCode * 8191 + per_node_scan_ranges.hashCode();

    hashCode = hashCode * 8191 + ((isSetResultSetMetadata()) ? 131071 : 524287);
    if (isSetResultSetMetadata())
      hashCode = hashCode * 8191 + result_set_metadata.hashCode();

    hashCode = hashCode * 8191 + ((isSetQueryGlobals()) ? 131071 : 524287);
    if (isSetQueryGlobals())
      hashCode = hashCode * 8191 + query_globals.hashCode();

    hashCode = hashCode * 8191 + ((isSetStmtType()) ? 131071 : 524287);
    if (isSetStmtType())
      hashCode = hashCode * 8191 + stmt_type.getValue();

    hashCode = hashCode * 8191 + ((isSetIsBlockQuery()) ? 131071 : 524287);
    if (isSetIsBlockQuery())
      hashCode = hashCode * 8191 + ((is_block_query) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TQueryExecRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetDescTbl(), other.isSetDescTbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescTbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc_tbl, other.desc_tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFragments(), other.isSetFragments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragments, other.fragments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDestFragmentIdx(), other.isSetDestFragmentIdx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestFragmentIdx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dest_fragment_idx, other.dest_fragment_idx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPerNodeScanRanges(), other.isSetPerNodeScanRanges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerNodeScanRanges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.per_node_scan_ranges, other.per_node_scan_ranges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResultSetMetadata(), other.isSetResultSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_set_metadata, other.result_set_metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryGlobals(), other.isSetQueryGlobals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryGlobals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_globals, other.query_globals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStmtType(), other.isSetStmtType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStmtType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stmt_type, other.stmt_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsBlockQuery(), other.isSetIsBlockQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBlockQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_block_query, other.is_block_query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TQueryExecRequest(");
    boolean first = true;

    if (isSetDescTbl()) {
      sb.append("desc_tbl:");
      if (this.desc_tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.desc_tbl);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("fragments:");
    if (this.fragments == null) {
      sb.append("null");
    } else {
      sb.append(this.fragments);
    }
    first = false;
    if (isSetDestFragmentIdx()) {
      if (!first) sb.append(", ");
      sb.append("dest_fragment_idx:");
      if (this.dest_fragment_idx == null) {
        sb.append("null");
      } else {
        sb.append(this.dest_fragment_idx);
      }
      first = false;
    }
    if (isSetPerNodeScanRanges()) {
      if (!first) sb.append(", ");
      sb.append("per_node_scan_ranges:");
      if (this.per_node_scan_ranges == null) {
        sb.append("null");
      } else {
        sb.append(this.per_node_scan_ranges);
      }
      first = false;
    }
    if (isSetResultSetMetadata()) {
      if (!first) sb.append(", ");
      sb.append("result_set_metadata:");
      if (this.result_set_metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.result_set_metadata);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("query_globals:");
    if (this.query_globals == null) {
      sb.append("null");
    } else {
      sb.append(this.query_globals);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stmt_type:");
    if (this.stmt_type == null) {
      sb.append("null");
    } else {
      sb.append(this.stmt_type);
    }
    first = false;
    if (isSetIsBlockQuery()) {
      if (!first) sb.append(", ");
      sb.append("is_block_query:");
      sb.append(this.is_block_query);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (fragments == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'fragments' was not present! Struct: " + toString());
    }
    if (query_globals == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query_globals' was not present! Struct: " + toString());
    }
    if (stmt_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stmt_type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (desc_tbl != null) {
      desc_tbl.validate();
    }
    if (result_set_metadata != null) {
      result_set_metadata.validate();
    }
    if (query_globals != null) {
      query_globals.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueryExecRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TQueryExecRequestStandardScheme getScheme() {
      return new TQueryExecRequestStandardScheme();
    }
  }

  private static class TQueryExecRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TQueryExecRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueryExecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DESC_TBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.desc_tbl = new org.apache.doris.thrift.TDescriptorTable();
              struct.desc_tbl.read(iprot);
              struct.setDescTblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAGMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                struct.fragments = new java.util.ArrayList<org.apache.doris.thrift.TPlanFragment>(_list66.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TPlanFragment _elem67;
                for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                {
                  _elem67 = new org.apache.doris.thrift.TPlanFragment();
                  _elem67.read(iprot);
                  struct.fragments.add(_elem67);
                }
                iprot.readListEnd();
              }
              struct.setFragmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEST_FRAGMENT_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list69 = iprot.readListBegin();
                struct.dest_fragment_idx = new java.util.ArrayList<java.lang.Integer>(_list69.size);
                int _elem70;
                for (int _i71 = 0; _i71 < _list69.size; ++_i71)
                {
                  _elem70 = iprot.readI32();
                  struct.dest_fragment_idx.add(_elem70);
                }
                iprot.readListEnd();
              }
              struct.setDestFragmentIdxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PER_NODE_SCAN_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map72 = iprot.readMapBegin();
                struct.per_node_scan_ranges = new java.util.HashMap<java.lang.Integer,java.util.List<org.apache.doris.thrift.TScanRangeLocations>>(2*_map72.size);
                int _key73;
                @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TScanRangeLocations> _val74;
                for (int _i75 = 0; _i75 < _map72.size; ++_i75)
                {
                  _key73 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                    _val74 = new java.util.ArrayList<org.apache.doris.thrift.TScanRangeLocations>(_list76.size);
                    @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TScanRangeLocations _elem77;
                    for (int _i78 = 0; _i78 < _list76.size; ++_i78)
                    {
                      _elem77 = new org.apache.doris.thrift.TScanRangeLocations();
                      _elem77.read(iprot);
                      _val74.add(_elem77);
                    }
                    iprot.readListEnd();
                  }
                  struct.per_node_scan_ranges.put(_key73, _val74);
                }
                iprot.readMapEnd();
              }
              struct.setPerNodeScanRangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESULT_SET_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.result_set_metadata = new TResultSetMetadata();
              struct.result_set_metadata.read(iprot);
              struct.setResultSetMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUERY_GLOBALS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_globals = new org.apache.doris.thrift.TQueryGlobals();
              struct.query_globals.read(iprot);
              struct.setQueryGlobalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STMT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stmt_type = org.apache.doris.thrift.TStmtType.findByValue(iprot.readI32());
              struct.setStmtTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_BLOCK_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_block_query = iprot.readBool();
              struct.setIsBlockQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueryExecRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.desc_tbl != null) {
        if (struct.isSetDescTbl()) {
          oprot.writeFieldBegin(DESC_TBL_FIELD_DESC);
          struct.desc_tbl.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fragments != null) {
        oprot.writeFieldBegin(FRAGMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fragments.size()));
          for (org.apache.doris.thrift.TPlanFragment _iter79 : struct.fragments)
          {
            _iter79.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.dest_fragment_idx != null) {
        if (struct.isSetDestFragmentIdx()) {
          oprot.writeFieldBegin(DEST_FRAGMENT_IDX_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.dest_fragment_idx.size()));
            for (int _iter80 : struct.dest_fragment_idx)
            {
              oprot.writeI32(_iter80);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.per_node_scan_ranges != null) {
        if (struct.isSetPerNodeScanRanges()) {
          oprot.writeFieldBegin(PER_NODE_SCAN_RANGES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.per_node_scan_ranges.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.util.List<org.apache.doris.thrift.TScanRangeLocations>> _iter81 : struct.per_node_scan_ranges.entrySet())
            {
              oprot.writeI32(_iter81.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter81.getValue().size()));
                for (org.apache.doris.thrift.TScanRangeLocations _iter82 : _iter81.getValue())
                {
                  _iter82.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.result_set_metadata != null) {
        if (struct.isSetResultSetMetadata()) {
          oprot.writeFieldBegin(RESULT_SET_METADATA_FIELD_DESC);
          struct.result_set_metadata.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_globals != null) {
        oprot.writeFieldBegin(QUERY_GLOBALS_FIELD_DESC);
        struct.query_globals.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.stmt_type != null) {
        oprot.writeFieldBegin(STMT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.stmt_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsBlockQuery()) {
        oprot.writeFieldBegin(IS_BLOCK_QUERY_FIELD_DESC);
        oprot.writeBool(struct.is_block_query);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueryExecRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TQueryExecRequestTupleScheme getScheme() {
      return new TQueryExecRequestTupleScheme();
    }
  }

  private static class TQueryExecRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TQueryExecRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueryExecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.fragments.size());
        for (org.apache.doris.thrift.TPlanFragment _iter83 : struct.fragments)
        {
          _iter83.write(oprot);
        }
      }
      struct.query_globals.write(oprot);
      oprot.writeI32(struct.stmt_type.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDescTbl()) {
        optionals.set(0);
      }
      if (struct.isSetDestFragmentIdx()) {
        optionals.set(1);
      }
      if (struct.isSetPerNodeScanRanges()) {
        optionals.set(2);
      }
      if (struct.isSetResultSetMetadata()) {
        optionals.set(3);
      }
      if (struct.isSetIsBlockQuery()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetDescTbl()) {
        struct.desc_tbl.write(oprot);
      }
      if (struct.isSetDestFragmentIdx()) {
        {
          oprot.writeI32(struct.dest_fragment_idx.size());
          for (int _iter84 : struct.dest_fragment_idx)
          {
            oprot.writeI32(_iter84);
          }
        }
      }
      if (struct.isSetPerNodeScanRanges()) {
        {
          oprot.writeI32(struct.per_node_scan_ranges.size());
          for (java.util.Map.Entry<java.lang.Integer, java.util.List<org.apache.doris.thrift.TScanRangeLocations>> _iter85 : struct.per_node_scan_ranges.entrySet())
          {
            oprot.writeI32(_iter85.getKey());
            {
              oprot.writeI32(_iter85.getValue().size());
              for (org.apache.doris.thrift.TScanRangeLocations _iter86 : _iter85.getValue())
              {
                _iter86.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetResultSetMetadata()) {
        struct.result_set_metadata.write(oprot);
      }
      if (struct.isSetIsBlockQuery()) {
        oprot.writeBool(struct.is_block_query);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueryExecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list87 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.fragments = new java.util.ArrayList<org.apache.doris.thrift.TPlanFragment>(_list87.size);
        @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TPlanFragment _elem88;
        for (int _i89 = 0; _i89 < _list87.size; ++_i89)
        {
          _elem88 = new org.apache.doris.thrift.TPlanFragment();
          _elem88.read(iprot);
          struct.fragments.add(_elem88);
        }
      }
      struct.setFragmentsIsSet(true);
      struct.query_globals = new org.apache.doris.thrift.TQueryGlobals();
      struct.query_globals.read(iprot);
      struct.setQueryGlobalsIsSet(true);
      struct.stmt_type = org.apache.doris.thrift.TStmtType.findByValue(iprot.readI32());
      struct.setStmtTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.desc_tbl = new org.apache.doris.thrift.TDescriptorTable();
        struct.desc_tbl.read(iprot);
        struct.setDescTblIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list90 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.dest_fragment_idx = new java.util.ArrayList<java.lang.Integer>(_list90.size);
          int _elem91;
          for (int _i92 = 0; _i92 < _list90.size; ++_i92)
          {
            _elem91 = iprot.readI32();
            struct.dest_fragment_idx.add(_elem91);
          }
        }
        struct.setDestFragmentIdxIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map93 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST); 
          struct.per_node_scan_ranges = new java.util.HashMap<java.lang.Integer,java.util.List<org.apache.doris.thrift.TScanRangeLocations>>(2*_map93.size);
          int _key94;
          @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TScanRangeLocations> _val95;
          for (int _i96 = 0; _i96 < _map93.size; ++_i96)
          {
            _key94 = iprot.readI32();
            {
              org.apache.thrift.protocol.TList _list97 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
              _val95 = new java.util.ArrayList<org.apache.doris.thrift.TScanRangeLocations>(_list97.size);
              @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TScanRangeLocations _elem98;
              for (int _i99 = 0; _i99 < _list97.size; ++_i99)
              {
                _elem98 = new org.apache.doris.thrift.TScanRangeLocations();
                _elem98.read(iprot);
                _val95.add(_elem98);
              }
            }
            struct.per_node_scan_ranges.put(_key94, _val95);
          }
        }
        struct.setPerNodeScanRangesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.result_set_metadata = new TResultSetMetadata();
        struct.result_set_metadata.read(iprot);
        struct.setResultSetMetadataIsSet(true);
      }
      if (incoming.get(4)) {
        struct.is_block_query = iprot.readBool();
        struct.setIsBlockQueryIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

