/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-06-29")
public class TReportExecStatusParams implements org.apache.thrift.TBase<TReportExecStatusParams, TReportExecStatusParams._Fields>, java.io.Serializable, Cloneable, Comparable<TReportExecStatusParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TReportExecStatusParams");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("query_id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField BACKEND_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("backend_num", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FRAGMENT_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_instance_id", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField DONE_FIELD_DESC = new org.apache.thrift.protocol.TField("done", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("profile", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField ERROR_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("error_log", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField DELTA_URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("delta_urls", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField LOAD_COUNTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("load_counters", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField TRACKING_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("tracking_url", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField EXPORT_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("export_files", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField COMMIT_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("commitInfos", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField LOADED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("loaded_rows", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField BACKEND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("backend_id", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField LOADED_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("loaded_bytes", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField ERROR_TABLET_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("errorTabletInfos", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField FRAGMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_id", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField QUERY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("query_type", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField LOAD_CHANNEL_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("loadChannelProfile", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField FINISHED_SCAN_RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("finished_scan_ranges", org.apache.thrift.protocol.TType.I32, (short)22);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TReportExecStatusParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TReportExecStatusParamsTupleSchemeFactory();

  /**
   * 
   * @see FrontendServiceVersion
   */
  public @org.apache.thrift.annotation.Nullable FrontendServiceVersion protocol_version; // required
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId query_id; // optional
  public int backend_num; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId fragment_instance_id; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TStatus status; // optional
  public boolean done; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TRuntimeProfileTree profile; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> error_log; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> delta_urls; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> load_counters; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String tracking_url; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> export_files; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TTabletCommitInfo> commitInfos; // optional
  public long loaded_rows; // optional
  public long backend_id; // optional
  public long loaded_bytes; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TErrorTabletInfo> errorTabletInfos; // optional
  public int fragment_id; // optional
  /**
   * 
   * @see org.apache.doris.thrift.TQueryType
   */
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TQueryType query_type; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TRuntimeProfileTree loadChannelProfile; // optional
  public int finished_scan_ranges; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see FrontendServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    QUERY_ID((short)2, "query_id"),
    BACKEND_NUM((short)3, "backend_num"),
    FRAGMENT_INSTANCE_ID((short)4, "fragment_instance_id"),
    STATUS((short)5, "status"),
    DONE((short)6, "done"),
    PROFILE((short)7, "profile"),
    ERROR_LOG((short)9, "error_log"),
    DELTA_URLS((short)10, "delta_urls"),
    LOAD_COUNTERS((short)11, "load_counters"),
    TRACKING_URL((short)12, "tracking_url"),
    EXPORT_FILES((short)13, "export_files"),
    COMMIT_INFOS((short)14, "commitInfos"),
    LOADED_ROWS((short)15, "loaded_rows"),
    BACKEND_ID((short)16, "backend_id"),
    LOADED_BYTES((short)17, "loaded_bytes"),
    ERROR_TABLET_INFOS((short)18, "errorTabletInfos"),
    FRAGMENT_ID((short)19, "fragment_id"),
    /**
     * 
     * @see org.apache.doris.thrift.TQueryType
     */
    QUERY_TYPE((short)20, "query_type"),
    LOAD_CHANNEL_PROFILE((short)21, "loadChannelProfile"),
    FINISHED_SCAN_RANGES((short)22, "finished_scan_ranges");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // QUERY_ID
          return QUERY_ID;
        case 3: // BACKEND_NUM
          return BACKEND_NUM;
        case 4: // FRAGMENT_INSTANCE_ID
          return FRAGMENT_INSTANCE_ID;
        case 5: // STATUS
          return STATUS;
        case 6: // DONE
          return DONE;
        case 7: // PROFILE
          return PROFILE;
        case 9: // ERROR_LOG
          return ERROR_LOG;
        case 10: // DELTA_URLS
          return DELTA_URLS;
        case 11: // LOAD_COUNTERS
          return LOAD_COUNTERS;
        case 12: // TRACKING_URL
          return TRACKING_URL;
        case 13: // EXPORT_FILES
          return EXPORT_FILES;
        case 14: // COMMIT_INFOS
          return COMMIT_INFOS;
        case 15: // LOADED_ROWS
          return LOADED_ROWS;
        case 16: // BACKEND_ID
          return BACKEND_ID;
        case 17: // LOADED_BYTES
          return LOADED_BYTES;
        case 18: // ERROR_TABLET_INFOS
          return ERROR_TABLET_INFOS;
        case 19: // FRAGMENT_ID
          return FRAGMENT_ID;
        case 20: // QUERY_TYPE
          return QUERY_TYPE;
        case 21: // LOAD_CHANNEL_PROFILE
          return LOAD_CHANNEL_PROFILE;
        case 22: // FINISHED_SCAN_RANGES
          return FINISHED_SCAN_RANGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BACKEND_NUM_ISSET_ID = 0;
  private static final int __DONE_ISSET_ID = 1;
  private static final int __LOADED_ROWS_ISSET_ID = 2;
  private static final int __BACKEND_ID_ISSET_ID = 3;
  private static final int __LOADED_BYTES_ISSET_ID = 4;
  private static final int __FRAGMENT_ID_ISSET_ID = 5;
  private static final int __FINISHED_SCAN_RANGES_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.QUERY_ID,_Fields.BACKEND_NUM,_Fields.FRAGMENT_INSTANCE_ID,_Fields.STATUS,_Fields.DONE,_Fields.PROFILE,_Fields.ERROR_LOG,_Fields.DELTA_URLS,_Fields.LOAD_COUNTERS,_Fields.TRACKING_URL,_Fields.EXPORT_FILES,_Fields.COMMIT_INFOS,_Fields.LOADED_ROWS,_Fields.BACKEND_ID,_Fields.LOADED_BYTES,_Fields.ERROR_TABLET_INFOS,_Fields.FRAGMENT_ID,_Fields.QUERY_TYPE,_Fields.LOAD_CHANNEL_PROFILE,_Fields.FINISHED_SCAN_RANGES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FrontendServiceVersion.class)));
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("query_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.BACKEND_NUM, new org.apache.thrift.meta_data.FieldMetaData("backend_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FRAGMENT_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("fragment_instance_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TStatus.class)));
    tmpMap.put(_Fields.DONE, new org.apache.thrift.meta_data.FieldMetaData("done", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PROFILE, new org.apache.thrift.meta_data.FieldMetaData("profile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TRuntimeProfileTree.class)));
    tmpMap.put(_Fields.ERROR_LOG, new org.apache.thrift.meta_data.FieldMetaData("error_log", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DELTA_URLS, new org.apache.thrift.meta_data.FieldMetaData("delta_urls", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LOAD_COUNTERS, new org.apache.thrift.meta_data.FieldMetaData("load_counters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TRACKING_URL, new org.apache.thrift.meta_data.FieldMetaData("tracking_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPORT_FILES, new org.apache.thrift.meta_data.FieldMetaData("export_files", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COMMIT_INFOS, new org.apache.thrift.meta_data.FieldMetaData("commitInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TTabletCommitInfo.class))));
    tmpMap.put(_Fields.LOADED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("loaded_rows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BACKEND_ID, new org.apache.thrift.meta_data.FieldMetaData("backend_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOADED_BYTES, new org.apache.thrift.meta_data.FieldMetaData("loaded_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ERROR_TABLET_INFOS, new org.apache.thrift.meta_data.FieldMetaData("errorTabletInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TErrorTabletInfo.class))));
    tmpMap.put(_Fields.FRAGMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("fragment_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUERY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("query_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.doris.thrift.TQueryType.class)));
    tmpMap.put(_Fields.LOAD_CHANNEL_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("loadChannelProfile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TRuntimeProfileTree.class)));
    tmpMap.put(_Fields.FINISHED_SCAN_RANGES, new org.apache.thrift.meta_data.FieldMetaData("finished_scan_ranges", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TReportExecStatusParams.class, metaDataMap);
  }

  public TReportExecStatusParams() {
  }

  public TReportExecStatusParams(
    FrontendServiceVersion protocol_version)
  {
    this();
    this.protocol_version = protocol_version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TReportExecStatusParams(TReportExecStatusParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProtocolVersion()) {
      this.protocol_version = other.protocol_version;
    }
    if (other.isSetQueryId()) {
      this.query_id = new org.apache.doris.thrift.TUniqueId(other.query_id);
    }
    this.backend_num = other.backend_num;
    if (other.isSetFragmentInstanceId()) {
      this.fragment_instance_id = new org.apache.doris.thrift.TUniqueId(other.fragment_instance_id);
    }
    if (other.isSetStatus()) {
      this.status = new org.apache.doris.thrift.TStatus(other.status);
    }
    this.done = other.done;
    if (other.isSetProfile()) {
      this.profile = new org.apache.doris.thrift.TRuntimeProfileTree(other.profile);
    }
    if (other.isSetErrorLog()) {
      java.util.List<java.lang.String> __this__error_log = new java.util.ArrayList<java.lang.String>(other.error_log);
      this.error_log = __this__error_log;
    }
    if (other.isSetDeltaUrls()) {
      java.util.List<java.lang.String> __this__delta_urls = new java.util.ArrayList<java.lang.String>(other.delta_urls);
      this.delta_urls = __this__delta_urls;
    }
    if (other.isSetLoadCounters()) {
      java.util.Map<java.lang.String,java.lang.String> __this__load_counters = new java.util.HashMap<java.lang.String,java.lang.String>(other.load_counters);
      this.load_counters = __this__load_counters;
    }
    if (other.isSetTrackingUrl()) {
      this.tracking_url = other.tracking_url;
    }
    if (other.isSetExportFiles()) {
      java.util.List<java.lang.String> __this__export_files = new java.util.ArrayList<java.lang.String>(other.export_files);
      this.export_files = __this__export_files;
    }
    if (other.isSetCommitInfos()) {
      java.util.List<org.apache.doris.thrift.TTabletCommitInfo> __this__commitInfos = new java.util.ArrayList<org.apache.doris.thrift.TTabletCommitInfo>(other.commitInfos.size());
      for (org.apache.doris.thrift.TTabletCommitInfo other_element : other.commitInfos) {
        __this__commitInfos.add(new org.apache.doris.thrift.TTabletCommitInfo(other_element));
      }
      this.commitInfos = __this__commitInfos;
    }
    this.loaded_rows = other.loaded_rows;
    this.backend_id = other.backend_id;
    this.loaded_bytes = other.loaded_bytes;
    if (other.isSetErrorTabletInfos()) {
      java.util.List<org.apache.doris.thrift.TErrorTabletInfo> __this__errorTabletInfos = new java.util.ArrayList<org.apache.doris.thrift.TErrorTabletInfo>(other.errorTabletInfos.size());
      for (org.apache.doris.thrift.TErrorTabletInfo other_element : other.errorTabletInfos) {
        __this__errorTabletInfos.add(new org.apache.doris.thrift.TErrorTabletInfo(other_element));
      }
      this.errorTabletInfos = __this__errorTabletInfos;
    }
    this.fragment_id = other.fragment_id;
    if (other.isSetQueryType()) {
      this.query_type = other.query_type;
    }
    if (other.isSetLoadChannelProfile()) {
      this.loadChannelProfile = new org.apache.doris.thrift.TRuntimeProfileTree(other.loadChannelProfile);
    }
    this.finished_scan_ranges = other.finished_scan_ranges;
  }

  @Override
  public TReportExecStatusParams deepCopy() {
    return new TReportExecStatusParams(this);
  }

  @Override
  public void clear() {
    this.protocol_version = null;
    this.query_id = null;
    setBackendNumIsSet(false);
    this.backend_num = 0;
    this.fragment_instance_id = null;
    this.status = null;
    setDoneIsSet(false);
    this.done = false;
    this.profile = null;
    this.error_log = null;
    this.delta_urls = null;
    this.load_counters = null;
    this.tracking_url = null;
    this.export_files = null;
    this.commitInfos = null;
    setLoadedRowsIsSet(false);
    this.loaded_rows = 0;
    setBackendIdIsSet(false);
    this.backend_id = 0;
    setLoadedBytesIsSet(false);
    this.loaded_bytes = 0;
    this.errorTabletInfos = null;
    setFragmentIdIsSet(false);
    this.fragment_id = 0;
    this.query_type = null;
    this.loadChannelProfile = null;
    setFinishedScanRangesIsSet(false);
    this.finished_scan_ranges = 0;
  }

  /**
   * 
   * @see FrontendServiceVersion
   */
  @org.apache.thrift.annotation.Nullable
  public FrontendServiceVersion getProtocolVersion() {
    return this.protocol_version;
  }

  /**
   * 
   * @see FrontendServiceVersion
   */
  public TReportExecStatusParams setProtocolVersion(@org.apache.thrift.annotation.Nullable FrontendServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
    return this;
  }

  public void unsetProtocolVersion() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocolVersion() {
    return this.protocol_version != null;
  }

  public void setProtocolVersionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TUniqueId getQueryId() {
    return this.query_id;
  }

  public TReportExecStatusParams setQueryId(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId query_id) {
    this.query_id = query_id;
    return this;
  }

  public void unsetQueryId() {
    this.query_id = null;
  }

  /** Returns true if field query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryId() {
    return this.query_id != null;
  }

  public void setQueryIdIsSet(boolean value) {
    if (!value) {
      this.query_id = null;
    }
  }

  public int getBackendNum() {
    return this.backend_num;
  }

  public TReportExecStatusParams setBackendNum(int backend_num) {
    this.backend_num = backend_num;
    setBackendNumIsSet(true);
    return this;
  }

  public void unsetBackendNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  /** Returns true if field backend_num is set (has been assigned a value) and false otherwise */
  public boolean isSetBackendNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  public void setBackendNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TUniqueId getFragmentInstanceId() {
    return this.fragment_instance_id;
  }

  public TReportExecStatusParams setFragmentInstanceId(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId fragment_instance_id) {
    this.fragment_instance_id = fragment_instance_id;
    return this;
  }

  public void unsetFragmentInstanceId() {
    this.fragment_instance_id = null;
  }

  /** Returns true if field fragment_instance_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFragmentInstanceId() {
    return this.fragment_instance_id != null;
  }

  public void setFragmentInstanceIdIsSet(boolean value) {
    if (!value) {
      this.fragment_instance_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TStatus getStatus() {
    return this.status;
  }

  public TReportExecStatusParams setStatus(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public boolean isDone() {
    return this.done;
  }

  public TReportExecStatusParams setDone(boolean done) {
    this.done = done;
    setDoneIsSet(true);
    return this;
  }

  public void unsetDone() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DONE_ISSET_ID);
  }

  /** Returns true if field done is set (has been assigned a value) and false otherwise */
  public boolean isSetDone() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DONE_ISSET_ID);
  }

  public void setDoneIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DONE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TRuntimeProfileTree getProfile() {
    return this.profile;
  }

  public TReportExecStatusParams setProfile(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TRuntimeProfileTree profile) {
    this.profile = profile;
    return this;
  }

  public void unsetProfile() {
    this.profile = null;
  }

  /** Returns true if field profile is set (has been assigned a value) and false otherwise */
  public boolean isSetProfile() {
    return this.profile != null;
  }

  public void setProfileIsSet(boolean value) {
    if (!value) {
      this.profile = null;
    }
  }

  public int getErrorLogSize() {
    return (this.error_log == null) ? 0 : this.error_log.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getErrorLogIterator() {
    return (this.error_log == null) ? null : this.error_log.iterator();
  }

  public void addToErrorLog(java.lang.String elem) {
    if (this.error_log == null) {
      this.error_log = new java.util.ArrayList<java.lang.String>();
    }
    this.error_log.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getErrorLog() {
    return this.error_log;
  }

  public TReportExecStatusParams setErrorLog(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> error_log) {
    this.error_log = error_log;
    return this;
  }

  public void unsetErrorLog() {
    this.error_log = null;
  }

  /** Returns true if field error_log is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorLog() {
    return this.error_log != null;
  }

  public void setErrorLogIsSet(boolean value) {
    if (!value) {
      this.error_log = null;
    }
  }

  public int getDeltaUrlsSize() {
    return (this.delta_urls == null) ? 0 : this.delta_urls.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getDeltaUrlsIterator() {
    return (this.delta_urls == null) ? null : this.delta_urls.iterator();
  }

  public void addToDeltaUrls(java.lang.String elem) {
    if (this.delta_urls == null) {
      this.delta_urls = new java.util.ArrayList<java.lang.String>();
    }
    this.delta_urls.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getDeltaUrls() {
    return this.delta_urls;
  }

  public TReportExecStatusParams setDeltaUrls(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> delta_urls) {
    this.delta_urls = delta_urls;
    return this;
  }

  public void unsetDeltaUrls() {
    this.delta_urls = null;
  }

  /** Returns true if field delta_urls is set (has been assigned a value) and false otherwise */
  public boolean isSetDeltaUrls() {
    return this.delta_urls != null;
  }

  public void setDeltaUrlsIsSet(boolean value) {
    if (!value) {
      this.delta_urls = null;
    }
  }

  public int getLoadCountersSize() {
    return (this.load_counters == null) ? 0 : this.load_counters.size();
  }

  public void putToLoadCounters(java.lang.String key, java.lang.String val) {
    if (this.load_counters == null) {
      this.load_counters = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.load_counters.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getLoadCounters() {
    return this.load_counters;
  }

  public TReportExecStatusParams setLoadCounters(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> load_counters) {
    this.load_counters = load_counters;
    return this;
  }

  public void unsetLoadCounters() {
    this.load_counters = null;
  }

  /** Returns true if field load_counters is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadCounters() {
    return this.load_counters != null;
  }

  public void setLoadCountersIsSet(boolean value) {
    if (!value) {
      this.load_counters = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTrackingUrl() {
    return this.tracking_url;
  }

  public TReportExecStatusParams setTrackingUrl(@org.apache.thrift.annotation.Nullable java.lang.String tracking_url) {
    this.tracking_url = tracking_url;
    return this;
  }

  public void unsetTrackingUrl() {
    this.tracking_url = null;
  }

  /** Returns true if field tracking_url is set (has been assigned a value) and false otherwise */
  public boolean isSetTrackingUrl() {
    return this.tracking_url != null;
  }

  public void setTrackingUrlIsSet(boolean value) {
    if (!value) {
      this.tracking_url = null;
    }
  }

  public int getExportFilesSize() {
    return (this.export_files == null) ? 0 : this.export_files.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getExportFilesIterator() {
    return (this.export_files == null) ? null : this.export_files.iterator();
  }

  public void addToExportFiles(java.lang.String elem) {
    if (this.export_files == null) {
      this.export_files = new java.util.ArrayList<java.lang.String>();
    }
    this.export_files.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getExportFiles() {
    return this.export_files;
  }

  public TReportExecStatusParams setExportFiles(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> export_files) {
    this.export_files = export_files;
    return this;
  }

  public void unsetExportFiles() {
    this.export_files = null;
  }

  /** Returns true if field export_files is set (has been assigned a value) and false otherwise */
  public boolean isSetExportFiles() {
    return this.export_files != null;
  }

  public void setExportFilesIsSet(boolean value) {
    if (!value) {
      this.export_files = null;
    }
  }

  public int getCommitInfosSize() {
    return (this.commitInfos == null) ? 0 : this.commitInfos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TTabletCommitInfo> getCommitInfosIterator() {
    return (this.commitInfos == null) ? null : this.commitInfos.iterator();
  }

  public void addToCommitInfos(org.apache.doris.thrift.TTabletCommitInfo elem) {
    if (this.commitInfos == null) {
      this.commitInfos = new java.util.ArrayList<org.apache.doris.thrift.TTabletCommitInfo>();
    }
    this.commitInfos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TTabletCommitInfo> getCommitInfos() {
    return this.commitInfos;
  }

  public TReportExecStatusParams setCommitInfos(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TTabletCommitInfo> commitInfos) {
    this.commitInfos = commitInfos;
    return this;
  }

  public void unsetCommitInfos() {
    this.commitInfos = null;
  }

  /** Returns true if field commitInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitInfos() {
    return this.commitInfos != null;
  }

  public void setCommitInfosIsSet(boolean value) {
    if (!value) {
      this.commitInfos = null;
    }
  }

  public long getLoadedRows() {
    return this.loaded_rows;
  }

  public TReportExecStatusParams setLoadedRows(long loaded_rows) {
    this.loaded_rows = loaded_rows;
    setLoadedRowsIsSet(true);
    return this;
  }

  public void unsetLoadedRows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOADED_ROWS_ISSET_ID);
  }

  /** Returns true if field loaded_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadedRows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOADED_ROWS_ISSET_ID);
  }

  public void setLoadedRowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOADED_ROWS_ISSET_ID, value);
  }

  public long getBackendId() {
    return this.backend_id;
  }

  public TReportExecStatusParams setBackendId(long backend_id) {
    this.backend_id = backend_id;
    setBackendIdIsSet(true);
    return this;
  }

  public void unsetBackendId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BACKEND_ID_ISSET_ID);
  }

  /** Returns true if field backend_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBackendId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BACKEND_ID_ISSET_ID);
  }

  public void setBackendIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BACKEND_ID_ISSET_ID, value);
  }

  public long getLoadedBytes() {
    return this.loaded_bytes;
  }

  public TReportExecStatusParams setLoadedBytes(long loaded_bytes) {
    this.loaded_bytes = loaded_bytes;
    setLoadedBytesIsSet(true);
    return this;
  }

  public void unsetLoadedBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOADED_BYTES_ISSET_ID);
  }

  /** Returns true if field loaded_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadedBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOADED_BYTES_ISSET_ID);
  }

  public void setLoadedBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOADED_BYTES_ISSET_ID, value);
  }

  public int getErrorTabletInfosSize() {
    return (this.errorTabletInfos == null) ? 0 : this.errorTabletInfos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TErrorTabletInfo> getErrorTabletInfosIterator() {
    return (this.errorTabletInfos == null) ? null : this.errorTabletInfos.iterator();
  }

  public void addToErrorTabletInfos(org.apache.doris.thrift.TErrorTabletInfo elem) {
    if (this.errorTabletInfos == null) {
      this.errorTabletInfos = new java.util.ArrayList<org.apache.doris.thrift.TErrorTabletInfo>();
    }
    this.errorTabletInfos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TErrorTabletInfo> getErrorTabletInfos() {
    return this.errorTabletInfos;
  }

  public TReportExecStatusParams setErrorTabletInfos(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TErrorTabletInfo> errorTabletInfos) {
    this.errorTabletInfos = errorTabletInfos;
    return this;
  }

  public void unsetErrorTabletInfos() {
    this.errorTabletInfos = null;
  }

  /** Returns true if field errorTabletInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorTabletInfos() {
    return this.errorTabletInfos != null;
  }

  public void setErrorTabletInfosIsSet(boolean value) {
    if (!value) {
      this.errorTabletInfos = null;
    }
  }

  public int getFragmentId() {
    return this.fragment_id;
  }

  public TReportExecStatusParams setFragmentId(int fragment_id) {
    this.fragment_id = fragment_id;
    setFragmentIdIsSet(true);
    return this;
  }

  public void unsetFragmentId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FRAGMENT_ID_ISSET_ID);
  }

  /** Returns true if field fragment_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFragmentId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FRAGMENT_ID_ISSET_ID);
  }

  public void setFragmentIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FRAGMENT_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see org.apache.doris.thrift.TQueryType
   */
  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TQueryType getQueryType() {
    return this.query_type;
  }

  /**
   * 
   * @see org.apache.doris.thrift.TQueryType
   */
  public TReportExecStatusParams setQueryType(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TQueryType query_type) {
    this.query_type = query_type;
    return this;
  }

  public void unsetQueryType() {
    this.query_type = null;
  }

  /** Returns true if field query_type is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryType() {
    return this.query_type != null;
  }

  public void setQueryTypeIsSet(boolean value) {
    if (!value) {
      this.query_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TRuntimeProfileTree getLoadChannelProfile() {
    return this.loadChannelProfile;
  }

  public TReportExecStatusParams setLoadChannelProfile(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TRuntimeProfileTree loadChannelProfile) {
    this.loadChannelProfile = loadChannelProfile;
    return this;
  }

  public void unsetLoadChannelProfile() {
    this.loadChannelProfile = null;
  }

  /** Returns true if field loadChannelProfile is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadChannelProfile() {
    return this.loadChannelProfile != null;
  }

  public void setLoadChannelProfileIsSet(boolean value) {
    if (!value) {
      this.loadChannelProfile = null;
    }
  }

  public int getFinishedScanRanges() {
    return this.finished_scan_ranges;
  }

  public TReportExecStatusParams setFinishedScanRanges(int finished_scan_ranges) {
    this.finished_scan_ranges = finished_scan_ranges;
    setFinishedScanRangesIsSet(true);
    return this;
  }

  public void unsetFinishedScanRanges() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FINISHED_SCAN_RANGES_ISSET_ID);
  }

  /** Returns true if field finished_scan_ranges is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishedScanRanges() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FINISHED_SCAN_RANGES_ISSET_ID);
  }

  public void setFinishedScanRangesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FINISHED_SCAN_RANGES_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocolVersion();
      } else {
        setProtocolVersion((FrontendServiceVersion)value);
      }
      break;

    case QUERY_ID:
      if (value == null) {
        unsetQueryId();
      } else {
        setQueryId((org.apache.doris.thrift.TUniqueId)value);
      }
      break;

    case BACKEND_NUM:
      if (value == null) {
        unsetBackendNum();
      } else {
        setBackendNum((java.lang.Integer)value);
      }
      break;

    case FRAGMENT_INSTANCE_ID:
      if (value == null) {
        unsetFragmentInstanceId();
      } else {
        setFragmentInstanceId((org.apache.doris.thrift.TUniqueId)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((org.apache.doris.thrift.TStatus)value);
      }
      break;

    case DONE:
      if (value == null) {
        unsetDone();
      } else {
        setDone((java.lang.Boolean)value);
      }
      break;

    case PROFILE:
      if (value == null) {
        unsetProfile();
      } else {
        setProfile((org.apache.doris.thrift.TRuntimeProfileTree)value);
      }
      break;

    case ERROR_LOG:
      if (value == null) {
        unsetErrorLog();
      } else {
        setErrorLog((java.util.List<java.lang.String>)value);
      }
      break;

    case DELTA_URLS:
      if (value == null) {
        unsetDeltaUrls();
      } else {
        setDeltaUrls((java.util.List<java.lang.String>)value);
      }
      break;

    case LOAD_COUNTERS:
      if (value == null) {
        unsetLoadCounters();
      } else {
        setLoadCounters((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case TRACKING_URL:
      if (value == null) {
        unsetTrackingUrl();
      } else {
        setTrackingUrl((java.lang.String)value);
      }
      break;

    case EXPORT_FILES:
      if (value == null) {
        unsetExportFiles();
      } else {
        setExportFiles((java.util.List<java.lang.String>)value);
      }
      break;

    case COMMIT_INFOS:
      if (value == null) {
        unsetCommitInfos();
      } else {
        setCommitInfos((java.util.List<org.apache.doris.thrift.TTabletCommitInfo>)value);
      }
      break;

    case LOADED_ROWS:
      if (value == null) {
        unsetLoadedRows();
      } else {
        setLoadedRows((java.lang.Long)value);
      }
      break;

    case BACKEND_ID:
      if (value == null) {
        unsetBackendId();
      } else {
        setBackendId((java.lang.Long)value);
      }
      break;

    case LOADED_BYTES:
      if (value == null) {
        unsetLoadedBytes();
      } else {
        setLoadedBytes((java.lang.Long)value);
      }
      break;

    case ERROR_TABLET_INFOS:
      if (value == null) {
        unsetErrorTabletInfos();
      } else {
        setErrorTabletInfos((java.util.List<org.apache.doris.thrift.TErrorTabletInfo>)value);
      }
      break;

    case FRAGMENT_ID:
      if (value == null) {
        unsetFragmentId();
      } else {
        setFragmentId((java.lang.Integer)value);
      }
      break;

    case QUERY_TYPE:
      if (value == null) {
        unsetQueryType();
      } else {
        setQueryType((org.apache.doris.thrift.TQueryType)value);
      }
      break;

    case LOAD_CHANNEL_PROFILE:
      if (value == null) {
        unsetLoadChannelProfile();
      } else {
        setLoadChannelProfile((org.apache.doris.thrift.TRuntimeProfileTree)value);
      }
      break;

    case FINISHED_SCAN_RANGES:
      if (value == null) {
        unsetFinishedScanRanges();
      } else {
        setFinishedScanRanges((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocolVersion();

    case QUERY_ID:
      return getQueryId();

    case BACKEND_NUM:
      return getBackendNum();

    case FRAGMENT_INSTANCE_ID:
      return getFragmentInstanceId();

    case STATUS:
      return getStatus();

    case DONE:
      return isDone();

    case PROFILE:
      return getProfile();

    case ERROR_LOG:
      return getErrorLog();

    case DELTA_URLS:
      return getDeltaUrls();

    case LOAD_COUNTERS:
      return getLoadCounters();

    case TRACKING_URL:
      return getTrackingUrl();

    case EXPORT_FILES:
      return getExportFiles();

    case COMMIT_INFOS:
      return getCommitInfos();

    case LOADED_ROWS:
      return getLoadedRows();

    case BACKEND_ID:
      return getBackendId();

    case LOADED_BYTES:
      return getLoadedBytes();

    case ERROR_TABLET_INFOS:
      return getErrorTabletInfos();

    case FRAGMENT_ID:
      return getFragmentId();

    case QUERY_TYPE:
      return getQueryType();

    case LOAD_CHANNEL_PROFILE:
      return getLoadChannelProfile();

    case FINISHED_SCAN_RANGES:
      return getFinishedScanRanges();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocolVersion();
    case QUERY_ID:
      return isSetQueryId();
    case BACKEND_NUM:
      return isSetBackendNum();
    case FRAGMENT_INSTANCE_ID:
      return isSetFragmentInstanceId();
    case STATUS:
      return isSetStatus();
    case DONE:
      return isSetDone();
    case PROFILE:
      return isSetProfile();
    case ERROR_LOG:
      return isSetErrorLog();
    case DELTA_URLS:
      return isSetDeltaUrls();
    case LOAD_COUNTERS:
      return isSetLoadCounters();
    case TRACKING_URL:
      return isSetTrackingUrl();
    case EXPORT_FILES:
      return isSetExportFiles();
    case COMMIT_INFOS:
      return isSetCommitInfos();
    case LOADED_ROWS:
      return isSetLoadedRows();
    case BACKEND_ID:
      return isSetBackendId();
    case LOADED_BYTES:
      return isSetLoadedBytes();
    case ERROR_TABLET_INFOS:
      return isSetErrorTabletInfos();
    case FRAGMENT_ID:
      return isSetFragmentId();
    case QUERY_TYPE:
      return isSetQueryType();
    case LOAD_CHANNEL_PROFILE:
      return isSetLoadChannelProfile();
    case FINISHED_SCAN_RANGES:
      return isSetFinishedScanRanges();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TReportExecStatusParams)
      return this.equals((TReportExecStatusParams)that);
    return false;
  }

  public boolean equals(TReportExecStatusParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_protocol_version = true && this.isSetProtocolVersion();
    boolean that_present_protocol_version = true && that.isSetProtocolVersion();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_query_id = true && this.isSetQueryId();
    boolean that_present_query_id = true && that.isSetQueryId();
    if (this_present_query_id || that_present_query_id) {
      if (!(this_present_query_id && that_present_query_id))
        return false;
      if (!this.query_id.equals(that.query_id))
        return false;
    }

    boolean this_present_backend_num = true && this.isSetBackendNum();
    boolean that_present_backend_num = true && that.isSetBackendNum();
    if (this_present_backend_num || that_present_backend_num) {
      if (!(this_present_backend_num && that_present_backend_num))
        return false;
      if (this.backend_num != that.backend_num)
        return false;
    }

    boolean this_present_fragment_instance_id = true && this.isSetFragmentInstanceId();
    boolean that_present_fragment_instance_id = true && that.isSetFragmentInstanceId();
    if (this_present_fragment_instance_id || that_present_fragment_instance_id) {
      if (!(this_present_fragment_instance_id && that_present_fragment_instance_id))
        return false;
      if (!this.fragment_instance_id.equals(that.fragment_instance_id))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_done = true && this.isSetDone();
    boolean that_present_done = true && that.isSetDone();
    if (this_present_done || that_present_done) {
      if (!(this_present_done && that_present_done))
        return false;
      if (this.done != that.done)
        return false;
    }

    boolean this_present_profile = true && this.isSetProfile();
    boolean that_present_profile = true && that.isSetProfile();
    if (this_present_profile || that_present_profile) {
      if (!(this_present_profile && that_present_profile))
        return false;
      if (!this.profile.equals(that.profile))
        return false;
    }

    boolean this_present_error_log = true && this.isSetErrorLog();
    boolean that_present_error_log = true && that.isSetErrorLog();
    if (this_present_error_log || that_present_error_log) {
      if (!(this_present_error_log && that_present_error_log))
        return false;
      if (!this.error_log.equals(that.error_log))
        return false;
    }

    boolean this_present_delta_urls = true && this.isSetDeltaUrls();
    boolean that_present_delta_urls = true && that.isSetDeltaUrls();
    if (this_present_delta_urls || that_present_delta_urls) {
      if (!(this_present_delta_urls && that_present_delta_urls))
        return false;
      if (!this.delta_urls.equals(that.delta_urls))
        return false;
    }

    boolean this_present_load_counters = true && this.isSetLoadCounters();
    boolean that_present_load_counters = true && that.isSetLoadCounters();
    if (this_present_load_counters || that_present_load_counters) {
      if (!(this_present_load_counters && that_present_load_counters))
        return false;
      if (!this.load_counters.equals(that.load_counters))
        return false;
    }

    boolean this_present_tracking_url = true && this.isSetTrackingUrl();
    boolean that_present_tracking_url = true && that.isSetTrackingUrl();
    if (this_present_tracking_url || that_present_tracking_url) {
      if (!(this_present_tracking_url && that_present_tracking_url))
        return false;
      if (!this.tracking_url.equals(that.tracking_url))
        return false;
    }

    boolean this_present_export_files = true && this.isSetExportFiles();
    boolean that_present_export_files = true && that.isSetExportFiles();
    if (this_present_export_files || that_present_export_files) {
      if (!(this_present_export_files && that_present_export_files))
        return false;
      if (!this.export_files.equals(that.export_files))
        return false;
    }

    boolean this_present_commitInfos = true && this.isSetCommitInfos();
    boolean that_present_commitInfos = true && that.isSetCommitInfos();
    if (this_present_commitInfos || that_present_commitInfos) {
      if (!(this_present_commitInfos && that_present_commitInfos))
        return false;
      if (!this.commitInfos.equals(that.commitInfos))
        return false;
    }

    boolean this_present_loaded_rows = true && this.isSetLoadedRows();
    boolean that_present_loaded_rows = true && that.isSetLoadedRows();
    if (this_present_loaded_rows || that_present_loaded_rows) {
      if (!(this_present_loaded_rows && that_present_loaded_rows))
        return false;
      if (this.loaded_rows != that.loaded_rows)
        return false;
    }

    boolean this_present_backend_id = true && this.isSetBackendId();
    boolean that_present_backend_id = true && that.isSetBackendId();
    if (this_present_backend_id || that_present_backend_id) {
      if (!(this_present_backend_id && that_present_backend_id))
        return false;
      if (this.backend_id != that.backend_id)
        return false;
    }

    boolean this_present_loaded_bytes = true && this.isSetLoadedBytes();
    boolean that_present_loaded_bytes = true && that.isSetLoadedBytes();
    if (this_present_loaded_bytes || that_present_loaded_bytes) {
      if (!(this_present_loaded_bytes && that_present_loaded_bytes))
        return false;
      if (this.loaded_bytes != that.loaded_bytes)
        return false;
    }

    boolean this_present_errorTabletInfos = true && this.isSetErrorTabletInfos();
    boolean that_present_errorTabletInfos = true && that.isSetErrorTabletInfos();
    if (this_present_errorTabletInfos || that_present_errorTabletInfos) {
      if (!(this_present_errorTabletInfos && that_present_errorTabletInfos))
        return false;
      if (!this.errorTabletInfos.equals(that.errorTabletInfos))
        return false;
    }

    boolean this_present_fragment_id = true && this.isSetFragmentId();
    boolean that_present_fragment_id = true && that.isSetFragmentId();
    if (this_present_fragment_id || that_present_fragment_id) {
      if (!(this_present_fragment_id && that_present_fragment_id))
        return false;
      if (this.fragment_id != that.fragment_id)
        return false;
    }

    boolean this_present_query_type = true && this.isSetQueryType();
    boolean that_present_query_type = true && that.isSetQueryType();
    if (this_present_query_type || that_present_query_type) {
      if (!(this_present_query_type && that_present_query_type))
        return false;
      if (!this.query_type.equals(that.query_type))
        return false;
    }

    boolean this_present_loadChannelProfile = true && this.isSetLoadChannelProfile();
    boolean that_present_loadChannelProfile = true && that.isSetLoadChannelProfile();
    if (this_present_loadChannelProfile || that_present_loadChannelProfile) {
      if (!(this_present_loadChannelProfile && that_present_loadChannelProfile))
        return false;
      if (!this.loadChannelProfile.equals(that.loadChannelProfile))
        return false;
    }

    boolean this_present_finished_scan_ranges = true && this.isSetFinishedScanRanges();
    boolean that_present_finished_scan_ranges = true && that.isSetFinishedScanRanges();
    if (this_present_finished_scan_ranges || that_present_finished_scan_ranges) {
      if (!(this_present_finished_scan_ranges && that_present_finished_scan_ranges))
        return false;
      if (this.finished_scan_ranges != that.finished_scan_ranges)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetProtocolVersion()) ? 131071 : 524287);
    if (isSetProtocolVersion())
      hashCode = hashCode * 8191 + protocol_version.getValue();

    hashCode = hashCode * 8191 + ((isSetQueryId()) ? 131071 : 524287);
    if (isSetQueryId())
      hashCode = hashCode * 8191 + query_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetBackendNum()) ? 131071 : 524287);
    if (isSetBackendNum())
      hashCode = hashCode * 8191 + backend_num;

    hashCode = hashCode * 8191 + ((isSetFragmentInstanceId()) ? 131071 : 524287);
    if (isSetFragmentInstanceId())
      hashCode = hashCode * 8191 + fragment_instance_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetDone()) ? 131071 : 524287);
    if (isSetDone())
      hashCode = hashCode * 8191 + ((done) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
    if (isSetProfile())
      hashCode = hashCode * 8191 + profile.hashCode();

    hashCode = hashCode * 8191 + ((isSetErrorLog()) ? 131071 : 524287);
    if (isSetErrorLog())
      hashCode = hashCode * 8191 + error_log.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeltaUrls()) ? 131071 : 524287);
    if (isSetDeltaUrls())
      hashCode = hashCode * 8191 + delta_urls.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoadCounters()) ? 131071 : 524287);
    if (isSetLoadCounters())
      hashCode = hashCode * 8191 + load_counters.hashCode();

    hashCode = hashCode * 8191 + ((isSetTrackingUrl()) ? 131071 : 524287);
    if (isSetTrackingUrl())
      hashCode = hashCode * 8191 + tracking_url.hashCode();

    hashCode = hashCode * 8191 + ((isSetExportFiles()) ? 131071 : 524287);
    if (isSetExportFiles())
      hashCode = hashCode * 8191 + export_files.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommitInfos()) ? 131071 : 524287);
    if (isSetCommitInfos())
      hashCode = hashCode * 8191 + commitInfos.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoadedRows()) ? 131071 : 524287);
    if (isSetLoadedRows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(loaded_rows);

    hashCode = hashCode * 8191 + ((isSetBackendId()) ? 131071 : 524287);
    if (isSetBackendId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(backend_id);

    hashCode = hashCode * 8191 + ((isSetLoadedBytes()) ? 131071 : 524287);
    if (isSetLoadedBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(loaded_bytes);

    hashCode = hashCode * 8191 + ((isSetErrorTabletInfos()) ? 131071 : 524287);
    if (isSetErrorTabletInfos())
      hashCode = hashCode * 8191 + errorTabletInfos.hashCode();

    hashCode = hashCode * 8191 + ((isSetFragmentId()) ? 131071 : 524287);
    if (isSetFragmentId())
      hashCode = hashCode * 8191 + fragment_id;

    hashCode = hashCode * 8191 + ((isSetQueryType()) ? 131071 : 524287);
    if (isSetQueryType())
      hashCode = hashCode * 8191 + query_type.getValue();

    hashCode = hashCode * 8191 + ((isSetLoadChannelProfile()) ? 131071 : 524287);
    if (isSetLoadChannelProfile())
      hashCode = hashCode * 8191 + loadChannelProfile.hashCode();

    hashCode = hashCode * 8191 + ((isSetFinishedScanRanges()) ? 131071 : 524287);
    if (isSetFinishedScanRanges())
      hashCode = hashCode * 8191 + finished_scan_ranges;

    return hashCode;
  }

  @Override
  public int compareTo(TReportExecStatusParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetProtocolVersion(), other.isSetProtocolVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocolVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, other.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryId(), other.isSetQueryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_id, other.query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBackendNum(), other.isSetBackendNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackendNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend_num, other.backend_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFragmentInstanceId(), other.isSetFragmentInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragmentInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_instance_id, other.fragment_instance_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDone(), other.isSetDone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.done, other.done);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProfile(), other.isSetProfile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetErrorLog(), other.isSetErrorLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorLog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_log, other.error_log);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDeltaUrls(), other.isSetDeltaUrls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeltaUrls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delta_urls, other.delta_urls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoadCounters(), other.isSetLoadCounters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadCounters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_counters, other.load_counters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrackingUrl(), other.isSetTrackingUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrackingUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tracking_url, other.tracking_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExportFiles(), other.isSetExportFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExportFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.export_files, other.export_files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCommitInfos(), other.isSetCommitInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitInfos, other.commitInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoadedRows(), other.isSetLoadedRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadedRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loaded_rows, other.loaded_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBackendId(), other.isSetBackendId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackendId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend_id, other.backend_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoadedBytes(), other.isSetLoadedBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadedBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loaded_bytes, other.loaded_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetErrorTabletInfos(), other.isSetErrorTabletInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorTabletInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorTabletInfos, other.errorTabletInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFragmentId(), other.isSetFragmentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragmentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_id, other.fragment_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryType(), other.isSetQueryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_type, other.query_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoadChannelProfile(), other.isSetLoadChannelProfile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadChannelProfile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadChannelProfile, other.loadChannelProfile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFinishedScanRanges(), other.isSetFinishedScanRanges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishedScanRanges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finished_scan_ranges, other.finished_scan_ranges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TReportExecStatusParams(");
    boolean first = true;

    sb.append("protocol_version:");
    if (this.protocol_version == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol_version);
    }
    first = false;
    if (isSetQueryId()) {
      if (!first) sb.append(", ");
      sb.append("query_id:");
      if (this.query_id == null) {
        sb.append("null");
      } else {
        sb.append(this.query_id);
      }
      first = false;
    }
    if (isSetBackendNum()) {
      if (!first) sb.append(", ");
      sb.append("backend_num:");
      sb.append(this.backend_num);
      first = false;
    }
    if (isSetFragmentInstanceId()) {
      if (!first) sb.append(", ");
      sb.append("fragment_instance_id:");
      if (this.fragment_instance_id == null) {
        sb.append("null");
      } else {
        sb.append(this.fragment_instance_id);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetDone()) {
      if (!first) sb.append(", ");
      sb.append("done:");
      sb.append(this.done);
      first = false;
    }
    if (isSetProfile()) {
      if (!first) sb.append(", ");
      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
    }
    if (isSetErrorLog()) {
      if (!first) sb.append(", ");
      sb.append("error_log:");
      if (this.error_log == null) {
        sb.append("null");
      } else {
        sb.append(this.error_log);
      }
      first = false;
    }
    if (isSetDeltaUrls()) {
      if (!first) sb.append(", ");
      sb.append("delta_urls:");
      if (this.delta_urls == null) {
        sb.append("null");
      } else {
        sb.append(this.delta_urls);
      }
      first = false;
    }
    if (isSetLoadCounters()) {
      if (!first) sb.append(", ");
      sb.append("load_counters:");
      if (this.load_counters == null) {
        sb.append("null");
      } else {
        sb.append(this.load_counters);
      }
      first = false;
    }
    if (isSetTrackingUrl()) {
      if (!first) sb.append(", ");
      sb.append("tracking_url:");
      if (this.tracking_url == null) {
        sb.append("null");
      } else {
        sb.append(this.tracking_url);
      }
      first = false;
    }
    if (isSetExportFiles()) {
      if (!first) sb.append(", ");
      sb.append("export_files:");
      if (this.export_files == null) {
        sb.append("null");
      } else {
        sb.append(this.export_files);
      }
      first = false;
    }
    if (isSetCommitInfos()) {
      if (!first) sb.append(", ");
      sb.append("commitInfos:");
      if (this.commitInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.commitInfos);
      }
      first = false;
    }
    if (isSetLoadedRows()) {
      if (!first) sb.append(", ");
      sb.append("loaded_rows:");
      sb.append(this.loaded_rows);
      first = false;
    }
    if (isSetBackendId()) {
      if (!first) sb.append(", ");
      sb.append("backend_id:");
      sb.append(this.backend_id);
      first = false;
    }
    if (isSetLoadedBytes()) {
      if (!first) sb.append(", ");
      sb.append("loaded_bytes:");
      sb.append(this.loaded_bytes);
      first = false;
    }
    if (isSetErrorTabletInfos()) {
      if (!first) sb.append(", ");
      sb.append("errorTabletInfos:");
      if (this.errorTabletInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.errorTabletInfos);
      }
      first = false;
    }
    if (isSetFragmentId()) {
      if (!first) sb.append(", ");
      sb.append("fragment_id:");
      sb.append(this.fragment_id);
      first = false;
    }
    if (isSetQueryType()) {
      if (!first) sb.append(", ");
      sb.append("query_type:");
      if (this.query_type == null) {
        sb.append("null");
      } else {
        sb.append(this.query_type);
      }
      first = false;
    }
    if (isSetLoadChannelProfile()) {
      if (!first) sb.append(", ");
      sb.append("loadChannelProfile:");
      if (this.loadChannelProfile == null) {
        sb.append("null");
      } else {
        sb.append(this.loadChannelProfile);
      }
      first = false;
    }
    if (isSetFinishedScanRanges()) {
      if (!first) sb.append(", ");
      sb.append("finished_scan_ranges:");
      sb.append(this.finished_scan_ranges);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocol_version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol_version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (query_id != null) {
      query_id.validate();
    }
    if (fragment_instance_id != null) {
      fragment_instance_id.validate();
    }
    if (status != null) {
      status.validate();
    }
    if (profile != null) {
      profile.validate();
    }
    if (loadChannelProfile != null) {
      loadChannelProfile.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TReportExecStatusParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TReportExecStatusParamsStandardScheme getScheme() {
      return new TReportExecStatusParamsStandardScheme();
    }
  }

  private static class TReportExecStatusParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TReportExecStatusParams> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TReportExecStatusParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = org.apache.doris.thrift.FrontendServiceVersion.findByValue(iprot.readI32());
              struct.setProtocolVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_id = new org.apache.doris.thrift.TUniqueId();
              struct.query_id.read(iprot);
              struct.setQueryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BACKEND_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.backend_num = iprot.readI32();
              struct.setBackendNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FRAGMENT_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment_instance_id = new org.apache.doris.thrift.TUniqueId();
              struct.fragment_instance_id.read(iprot);
              struct.setFragmentInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new org.apache.doris.thrift.TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DONE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.done = iprot.readBool();
              struct.setDoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.profile = new org.apache.doris.thrift.TRuntimeProfileTree();
              struct.profile.read(iprot);
              struct.setProfileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ERROR_LOG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list148 = iprot.readListBegin();
                struct.error_log = new java.util.ArrayList<java.lang.String>(_list148.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem149;
                for (int _i150 = 0; _i150 < _list148.size; ++_i150)
                {
                  _elem149 = iprot.readString();
                  struct.error_log.add(_elem149);
                }
                iprot.readListEnd();
              }
              struct.setErrorLogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DELTA_URLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list151 = iprot.readListBegin();
                struct.delta_urls = new java.util.ArrayList<java.lang.String>(_list151.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem152;
                for (int _i153 = 0; _i153 < _list151.size; ++_i153)
                {
                  _elem152 = iprot.readString();
                  struct.delta_urls.add(_elem152);
                }
                iprot.readListEnd();
              }
              struct.setDeltaUrlsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOAD_COUNTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map154 = iprot.readMapBegin();
                struct.load_counters = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map154.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key155;
                @org.apache.thrift.annotation.Nullable java.lang.String _val156;
                for (int _i157 = 0; _i157 < _map154.size; ++_i157)
                {
                  _key155 = iprot.readString();
                  _val156 = iprot.readString();
                  struct.load_counters.put(_key155, _val156);
                }
                iprot.readMapEnd();
              }
              struct.setLoadCountersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TRACKING_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tracking_url = iprot.readString();
              struct.setTrackingUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EXPORT_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list158 = iprot.readListBegin();
                struct.export_files = new java.util.ArrayList<java.lang.String>(_list158.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem159;
                for (int _i160 = 0; _i160 < _list158.size; ++_i160)
                {
                  _elem159 = iprot.readString();
                  struct.export_files.add(_elem159);
                }
                iprot.readListEnd();
              }
              struct.setExportFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // COMMIT_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list161 = iprot.readListBegin();
                struct.commitInfos = new java.util.ArrayList<org.apache.doris.thrift.TTabletCommitInfo>(_list161.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TTabletCommitInfo _elem162;
                for (int _i163 = 0; _i163 < _list161.size; ++_i163)
                {
                  _elem162 = new org.apache.doris.thrift.TTabletCommitInfo();
                  _elem162.read(iprot);
                  struct.commitInfos.add(_elem162);
                }
                iprot.readListEnd();
              }
              struct.setCommitInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LOADED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loaded_rows = iprot.readI64();
              struct.setLoadedRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BACKEND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.backend_id = iprot.readI64();
              struct.setBackendIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LOADED_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loaded_bytes = iprot.readI64();
              struct.setLoadedBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ERROR_TABLET_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list164 = iprot.readListBegin();
                struct.errorTabletInfos = new java.util.ArrayList<org.apache.doris.thrift.TErrorTabletInfo>(_list164.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TErrorTabletInfo _elem165;
                for (int _i166 = 0; _i166 < _list164.size; ++_i166)
                {
                  _elem165 = new org.apache.doris.thrift.TErrorTabletInfo();
                  _elem165.read(iprot);
                  struct.errorTabletInfos.add(_elem165);
                }
                iprot.readListEnd();
              }
              struct.setErrorTabletInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // FRAGMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fragment_id = iprot.readI32();
              struct.setFragmentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // QUERY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.query_type = org.apache.doris.thrift.TQueryType.findByValue(iprot.readI32());
              struct.setQueryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LOAD_CHANNEL_PROFILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.loadChannelProfile = new org.apache.doris.thrift.TRuntimeProfileTree();
              struct.loadChannelProfile.read(iprot);
              struct.setLoadChannelProfileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // FINISHED_SCAN_RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.finished_scan_ranges = iprot.readI32();
              struct.setFinishedScanRangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TReportExecStatusParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocol_version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.query_id != null) {
        if (struct.isSetQueryId()) {
          oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
          struct.query_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBackendNum()) {
        oprot.writeFieldBegin(BACKEND_NUM_FIELD_DESC);
        oprot.writeI32(struct.backend_num);
        oprot.writeFieldEnd();
      }
      if (struct.fragment_instance_id != null) {
        if (struct.isSetFragmentInstanceId()) {
          oprot.writeFieldBegin(FRAGMENT_INSTANCE_ID_FIELD_DESC);
          struct.fragment_instance_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          struct.status.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDone()) {
        oprot.writeFieldBegin(DONE_FIELD_DESC);
        oprot.writeBool(struct.done);
        oprot.writeFieldEnd();
      }
      if (struct.profile != null) {
        if (struct.isSetProfile()) {
          oprot.writeFieldBegin(PROFILE_FIELD_DESC);
          struct.profile.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.error_log != null) {
        if (struct.isSetErrorLog()) {
          oprot.writeFieldBegin(ERROR_LOG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.error_log.size()));
            for (java.lang.String _iter167 : struct.error_log)
            {
              oprot.writeString(_iter167);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.delta_urls != null) {
        if (struct.isSetDeltaUrls()) {
          oprot.writeFieldBegin(DELTA_URLS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.delta_urls.size()));
            for (java.lang.String _iter168 : struct.delta_urls)
            {
              oprot.writeString(_iter168);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.load_counters != null) {
        if (struct.isSetLoadCounters()) {
          oprot.writeFieldBegin(LOAD_COUNTERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.load_counters.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter169 : struct.load_counters.entrySet())
            {
              oprot.writeString(_iter169.getKey());
              oprot.writeString(_iter169.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tracking_url != null) {
        if (struct.isSetTrackingUrl()) {
          oprot.writeFieldBegin(TRACKING_URL_FIELD_DESC);
          oprot.writeString(struct.tracking_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.export_files != null) {
        if (struct.isSetExportFiles()) {
          oprot.writeFieldBegin(EXPORT_FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.export_files.size()));
            for (java.lang.String _iter170 : struct.export_files)
            {
              oprot.writeString(_iter170);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.commitInfos != null) {
        if (struct.isSetCommitInfos()) {
          oprot.writeFieldBegin(COMMIT_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.commitInfos.size()));
            for (org.apache.doris.thrift.TTabletCommitInfo _iter171 : struct.commitInfos)
            {
              _iter171.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLoadedRows()) {
        oprot.writeFieldBegin(LOADED_ROWS_FIELD_DESC);
        oprot.writeI64(struct.loaded_rows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBackendId()) {
        oprot.writeFieldBegin(BACKEND_ID_FIELD_DESC);
        oprot.writeI64(struct.backend_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLoadedBytes()) {
        oprot.writeFieldBegin(LOADED_BYTES_FIELD_DESC);
        oprot.writeI64(struct.loaded_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.errorTabletInfos != null) {
        if (struct.isSetErrorTabletInfos()) {
          oprot.writeFieldBegin(ERROR_TABLET_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.errorTabletInfos.size()));
            for (org.apache.doris.thrift.TErrorTabletInfo _iter172 : struct.errorTabletInfos)
            {
              _iter172.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFragmentId()) {
        oprot.writeFieldBegin(FRAGMENT_ID_FIELD_DESC);
        oprot.writeI32(struct.fragment_id);
        oprot.writeFieldEnd();
      }
      if (struct.query_type != null) {
        if (struct.isSetQueryType()) {
          oprot.writeFieldBegin(QUERY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.query_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.loadChannelProfile != null) {
        if (struct.isSetLoadChannelProfile()) {
          oprot.writeFieldBegin(LOAD_CHANNEL_PROFILE_FIELD_DESC);
          struct.loadChannelProfile.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFinishedScanRanges()) {
        oprot.writeFieldBegin(FINISHED_SCAN_RANGES_FIELD_DESC);
        oprot.writeI32(struct.finished_scan_ranges);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TReportExecStatusParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TReportExecStatusParamsTupleScheme getScheme() {
      return new TReportExecStatusParamsTupleScheme();
    }
  }

  private static class TReportExecStatusParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TReportExecStatusParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TReportExecStatusParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.protocol_version.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetQueryId()) {
        optionals.set(0);
      }
      if (struct.isSetBackendNum()) {
        optionals.set(1);
      }
      if (struct.isSetFragmentInstanceId()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      if (struct.isSetDone()) {
        optionals.set(4);
      }
      if (struct.isSetProfile()) {
        optionals.set(5);
      }
      if (struct.isSetErrorLog()) {
        optionals.set(6);
      }
      if (struct.isSetDeltaUrls()) {
        optionals.set(7);
      }
      if (struct.isSetLoadCounters()) {
        optionals.set(8);
      }
      if (struct.isSetTrackingUrl()) {
        optionals.set(9);
      }
      if (struct.isSetExportFiles()) {
        optionals.set(10);
      }
      if (struct.isSetCommitInfos()) {
        optionals.set(11);
      }
      if (struct.isSetLoadedRows()) {
        optionals.set(12);
      }
      if (struct.isSetBackendId()) {
        optionals.set(13);
      }
      if (struct.isSetLoadedBytes()) {
        optionals.set(14);
      }
      if (struct.isSetErrorTabletInfos()) {
        optionals.set(15);
      }
      if (struct.isSetFragmentId()) {
        optionals.set(16);
      }
      if (struct.isSetQueryType()) {
        optionals.set(17);
      }
      if (struct.isSetLoadChannelProfile()) {
        optionals.set(18);
      }
      if (struct.isSetFinishedScanRanges()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetQueryId()) {
        struct.query_id.write(oprot);
      }
      if (struct.isSetBackendNum()) {
        oprot.writeI32(struct.backend_num);
      }
      if (struct.isSetFragmentInstanceId()) {
        struct.fragment_instance_id.write(oprot);
      }
      if (struct.isSetStatus()) {
        struct.status.write(oprot);
      }
      if (struct.isSetDone()) {
        oprot.writeBool(struct.done);
      }
      if (struct.isSetProfile()) {
        struct.profile.write(oprot);
      }
      if (struct.isSetErrorLog()) {
        {
          oprot.writeI32(struct.error_log.size());
          for (java.lang.String _iter173 : struct.error_log)
          {
            oprot.writeString(_iter173);
          }
        }
      }
      if (struct.isSetDeltaUrls()) {
        {
          oprot.writeI32(struct.delta_urls.size());
          for (java.lang.String _iter174 : struct.delta_urls)
          {
            oprot.writeString(_iter174);
          }
        }
      }
      if (struct.isSetLoadCounters()) {
        {
          oprot.writeI32(struct.load_counters.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter175 : struct.load_counters.entrySet())
          {
            oprot.writeString(_iter175.getKey());
            oprot.writeString(_iter175.getValue());
          }
        }
      }
      if (struct.isSetTrackingUrl()) {
        oprot.writeString(struct.tracking_url);
      }
      if (struct.isSetExportFiles()) {
        {
          oprot.writeI32(struct.export_files.size());
          for (java.lang.String _iter176 : struct.export_files)
          {
            oprot.writeString(_iter176);
          }
        }
      }
      if (struct.isSetCommitInfos()) {
        {
          oprot.writeI32(struct.commitInfos.size());
          for (org.apache.doris.thrift.TTabletCommitInfo _iter177 : struct.commitInfos)
          {
            _iter177.write(oprot);
          }
        }
      }
      if (struct.isSetLoadedRows()) {
        oprot.writeI64(struct.loaded_rows);
      }
      if (struct.isSetBackendId()) {
        oprot.writeI64(struct.backend_id);
      }
      if (struct.isSetLoadedBytes()) {
        oprot.writeI64(struct.loaded_bytes);
      }
      if (struct.isSetErrorTabletInfos()) {
        {
          oprot.writeI32(struct.errorTabletInfos.size());
          for (org.apache.doris.thrift.TErrorTabletInfo _iter178 : struct.errorTabletInfos)
          {
            _iter178.write(oprot);
          }
        }
      }
      if (struct.isSetFragmentId()) {
        oprot.writeI32(struct.fragment_id);
      }
      if (struct.isSetQueryType()) {
        oprot.writeI32(struct.query_type.getValue());
      }
      if (struct.isSetLoadChannelProfile()) {
        struct.loadChannelProfile.write(oprot);
      }
      if (struct.isSetFinishedScanRanges()) {
        oprot.writeI32(struct.finished_scan_ranges);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TReportExecStatusParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.protocol_version = org.apache.doris.thrift.FrontendServiceVersion.findByValue(iprot.readI32());
      struct.setProtocolVersionIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.query_id = new org.apache.doris.thrift.TUniqueId();
        struct.query_id.read(iprot);
        struct.setQueryIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.backend_num = iprot.readI32();
        struct.setBackendNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fragment_instance_id = new org.apache.doris.thrift.TUniqueId();
        struct.fragment_instance_id.read(iprot);
        struct.setFragmentInstanceIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = new org.apache.doris.thrift.TStatus();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.done = iprot.readBool();
        struct.setDoneIsSet(true);
      }
      if (incoming.get(5)) {
        struct.profile = new org.apache.doris.thrift.TRuntimeProfileTree();
        struct.profile.read(iprot);
        struct.setProfileIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list179 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.error_log = new java.util.ArrayList<java.lang.String>(_list179.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem180;
          for (int _i181 = 0; _i181 < _list179.size; ++_i181)
          {
            _elem180 = iprot.readString();
            struct.error_log.add(_elem180);
          }
        }
        struct.setErrorLogIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list182 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.delta_urls = new java.util.ArrayList<java.lang.String>(_list182.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem183;
          for (int _i184 = 0; _i184 < _list182.size; ++_i184)
          {
            _elem183 = iprot.readString();
            struct.delta_urls.add(_elem183);
          }
        }
        struct.setDeltaUrlsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map185 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.load_counters = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map185.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key186;
          @org.apache.thrift.annotation.Nullable java.lang.String _val187;
          for (int _i188 = 0; _i188 < _map185.size; ++_i188)
          {
            _key186 = iprot.readString();
            _val187 = iprot.readString();
            struct.load_counters.put(_key186, _val187);
          }
        }
        struct.setLoadCountersIsSet(true);
      }
      if (incoming.get(9)) {
        struct.tracking_url = iprot.readString();
        struct.setTrackingUrlIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list189 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.export_files = new java.util.ArrayList<java.lang.String>(_list189.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem190;
          for (int _i191 = 0; _i191 < _list189.size; ++_i191)
          {
            _elem190 = iprot.readString();
            struct.export_files.add(_elem190);
          }
        }
        struct.setExportFilesIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list192 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.commitInfos = new java.util.ArrayList<org.apache.doris.thrift.TTabletCommitInfo>(_list192.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TTabletCommitInfo _elem193;
          for (int _i194 = 0; _i194 < _list192.size; ++_i194)
          {
            _elem193 = new org.apache.doris.thrift.TTabletCommitInfo();
            _elem193.read(iprot);
            struct.commitInfos.add(_elem193);
          }
        }
        struct.setCommitInfosIsSet(true);
      }
      if (incoming.get(12)) {
        struct.loaded_rows = iprot.readI64();
        struct.setLoadedRowsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.backend_id = iprot.readI64();
        struct.setBackendIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.loaded_bytes = iprot.readI64();
        struct.setLoadedBytesIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list195 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.errorTabletInfos = new java.util.ArrayList<org.apache.doris.thrift.TErrorTabletInfo>(_list195.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TErrorTabletInfo _elem196;
          for (int _i197 = 0; _i197 < _list195.size; ++_i197)
          {
            _elem196 = new org.apache.doris.thrift.TErrorTabletInfo();
            _elem196.read(iprot);
            struct.errorTabletInfos.add(_elem196);
          }
        }
        struct.setErrorTabletInfosIsSet(true);
      }
      if (incoming.get(16)) {
        struct.fragment_id = iprot.readI32();
        struct.setFragmentIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.query_type = org.apache.doris.thrift.TQueryType.findByValue(iprot.readI32());
        struct.setQueryTypeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.loadChannelProfile = new org.apache.doris.thrift.TRuntimeProfileTree();
        struct.loadChannelProfile.read(iprot);
        struct.setLoadChannelProfileIsSet(true);
      }
      if (incoming.get(19)) {
        struct.finished_scan_ranges = iprot.readI32();
        struct.setFinishedScanRangesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

