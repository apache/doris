/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-07-11")
public class TNestedLoopJoinNode implements org.apache.thrift.TBase<TNestedLoopJoinNode, TNestedLoopJoinNode._Fields>, java.io.Serializable, Cloneable, Comparable<TNestedLoopJoinNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNestedLoopJoinNode");

  private static final org.apache.thrift.protocol.TField JOIN_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("join_op", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SRC_EXPR_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("srcExprList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField VOUTPUT_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("voutput_tuple_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField VINTERMEDIATE_TUPLE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("vintermediate_tuple_id_list", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField IS_OUTPUT_LEFT_SIDE_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("is_output_left_side_only", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField VJOIN_CONJUNCT_FIELD_DESC = new org.apache.thrift.protocol.TField("vjoin_conjunct", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField IS_MARK_FIELD_DESC = new org.apache.thrift.protocol.TField("is_mark", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField JOIN_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("join_conjuncts", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TNestedLoopJoinNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TNestedLoopJoinNodeTupleSchemeFactory();

  /**
   * 
   * @see TJoinOp
   */
  public @org.apache.thrift.annotation.Nullable TJoinOp join_op; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TExpr> srcExprList; // optional
  public int voutput_tuple_id; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> vintermediate_tuple_id_list; // optional
  public boolean is_output_left_side_only; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr vjoin_conjunct; // optional
  public boolean is_mark; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TExpr> join_conjuncts; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TJoinOp
     */
    JOIN_OP((short)1, "join_op"),
    SRC_EXPR_LIST((short)2, "srcExprList"),
    VOUTPUT_TUPLE_ID((short)3, "voutput_tuple_id"),
    VINTERMEDIATE_TUPLE_ID_LIST((short)4, "vintermediate_tuple_id_list"),
    IS_OUTPUT_LEFT_SIDE_ONLY((short)5, "is_output_left_side_only"),
    VJOIN_CONJUNCT((short)6, "vjoin_conjunct"),
    IS_MARK((short)7, "is_mark"),
    JOIN_CONJUNCTS((short)8, "join_conjuncts");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOIN_OP
          return JOIN_OP;
        case 2: // SRC_EXPR_LIST
          return SRC_EXPR_LIST;
        case 3: // VOUTPUT_TUPLE_ID
          return VOUTPUT_TUPLE_ID;
        case 4: // VINTERMEDIATE_TUPLE_ID_LIST
          return VINTERMEDIATE_TUPLE_ID_LIST;
        case 5: // IS_OUTPUT_LEFT_SIDE_ONLY
          return IS_OUTPUT_LEFT_SIDE_ONLY;
        case 6: // VJOIN_CONJUNCT
          return VJOIN_CONJUNCT;
        case 7: // IS_MARK
          return IS_MARK;
        case 8: // JOIN_CONJUNCTS
          return JOIN_CONJUNCTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VOUTPUT_TUPLE_ID_ISSET_ID = 0;
  private static final int __IS_OUTPUT_LEFT_SIDE_ONLY_ISSET_ID = 1;
  private static final int __IS_MARK_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SRC_EXPR_LIST,_Fields.VOUTPUT_TUPLE_ID,_Fields.VINTERMEDIATE_TUPLE_ID_LIST,_Fields.IS_OUTPUT_LEFT_SIDE_ONLY,_Fields.VJOIN_CONJUNCT,_Fields.IS_MARK,_Fields.JOIN_CONJUNCTS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOIN_OP, new org.apache.thrift.meta_data.FieldMetaData("join_op", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TJoinOp.class)));
    tmpMap.put(_Fields.SRC_EXPR_LIST, new org.apache.thrift.meta_data.FieldMetaData("srcExprList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TExpr.class))));
    tmpMap.put(_Fields.VOUTPUT_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("voutput_tuple_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.VINTERMEDIATE_TUPLE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("vintermediate_tuple_id_list", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TTupleId"))));
    tmpMap.put(_Fields.IS_OUTPUT_LEFT_SIDE_ONLY, new org.apache.thrift.meta_data.FieldMetaData("is_output_left_side_only", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VJOIN_CONJUNCT, new org.apache.thrift.meta_data.FieldMetaData("vjoin_conjunct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TExpr.class)));
    tmpMap.put(_Fields.IS_MARK, new org.apache.thrift.meta_data.FieldMetaData("is_mark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.JOIN_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("join_conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TExpr.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNestedLoopJoinNode.class, metaDataMap);
  }

  public TNestedLoopJoinNode() {
  }

  public TNestedLoopJoinNode(
    TJoinOp join_op)
  {
    this();
    this.join_op = join_op;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNestedLoopJoinNode(TNestedLoopJoinNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJoinOp()) {
      this.join_op = other.join_op;
    }
    if (other.isSetSrcExprList()) {
      java.util.List<org.apache.doris.thrift.TExpr> __this__srcExprList = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(other.srcExprList.size());
      for (org.apache.doris.thrift.TExpr other_element : other.srcExprList) {
        __this__srcExprList.add(new org.apache.doris.thrift.TExpr(other_element));
      }
      this.srcExprList = __this__srcExprList;
    }
    this.voutput_tuple_id = other.voutput_tuple_id;
    if (other.isSetVintermediateTupleIdList()) {
      java.util.List<java.lang.Integer> __this__vintermediate_tuple_id_list = new java.util.ArrayList<java.lang.Integer>(other.vintermediate_tuple_id_list.size());
      for (java.lang.Integer other_element : other.vintermediate_tuple_id_list) {
        __this__vintermediate_tuple_id_list.add(other_element);
      }
      this.vintermediate_tuple_id_list = __this__vintermediate_tuple_id_list;
    }
    this.is_output_left_side_only = other.is_output_left_side_only;
    if (other.isSetVjoinConjunct()) {
      this.vjoin_conjunct = new org.apache.doris.thrift.TExpr(other.vjoin_conjunct);
    }
    this.is_mark = other.is_mark;
    if (other.isSetJoinConjuncts()) {
      java.util.List<org.apache.doris.thrift.TExpr> __this__join_conjuncts = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(other.join_conjuncts.size());
      for (org.apache.doris.thrift.TExpr other_element : other.join_conjuncts) {
        __this__join_conjuncts.add(new org.apache.doris.thrift.TExpr(other_element));
      }
      this.join_conjuncts = __this__join_conjuncts;
    }
  }

  @Override
  public TNestedLoopJoinNode deepCopy() {
    return new TNestedLoopJoinNode(this);
  }

  @Override
  public void clear() {
    this.join_op = null;
    this.srcExprList = null;
    setVoutputTupleIdIsSet(false);
    this.voutput_tuple_id = 0;
    this.vintermediate_tuple_id_list = null;
    setIsOutputLeftSideOnlyIsSet(false);
    this.is_output_left_side_only = false;
    this.vjoin_conjunct = null;
    setIsMarkIsSet(false);
    this.is_mark = false;
    this.join_conjuncts = null;
  }

  /**
   * 
   * @see TJoinOp
   */
  @org.apache.thrift.annotation.Nullable
  public TJoinOp getJoinOp() {
    return this.join_op;
  }

  /**
   * 
   * @see TJoinOp
   */
  public TNestedLoopJoinNode setJoinOp(@org.apache.thrift.annotation.Nullable TJoinOp join_op) {
    this.join_op = join_op;
    return this;
  }

  public void unsetJoinOp() {
    this.join_op = null;
  }

  /** Returns true if field join_op is set (has been assigned a value) and false otherwise */
  public boolean isSetJoinOp() {
    return this.join_op != null;
  }

  public void setJoinOpIsSet(boolean value) {
    if (!value) {
      this.join_op = null;
    }
  }

  public int getSrcExprListSize() {
    return (this.srcExprList == null) ? 0 : this.srcExprList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TExpr> getSrcExprListIterator() {
    return (this.srcExprList == null) ? null : this.srcExprList.iterator();
  }

  public void addToSrcExprList(org.apache.doris.thrift.TExpr elem) {
    if (this.srcExprList == null) {
      this.srcExprList = new java.util.ArrayList<org.apache.doris.thrift.TExpr>();
    }
    this.srcExprList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TExpr> getSrcExprList() {
    return this.srcExprList;
  }

  public TNestedLoopJoinNode setSrcExprList(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TExpr> srcExprList) {
    this.srcExprList = srcExprList;
    return this;
  }

  public void unsetSrcExprList() {
    this.srcExprList = null;
  }

  /** Returns true if field srcExprList is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcExprList() {
    return this.srcExprList != null;
  }

  public void setSrcExprListIsSet(boolean value) {
    if (!value) {
      this.srcExprList = null;
    }
  }

  public int getVoutputTupleId() {
    return this.voutput_tuple_id;
  }

  public TNestedLoopJoinNode setVoutputTupleId(int voutput_tuple_id) {
    this.voutput_tuple_id = voutput_tuple_id;
    setVoutputTupleIdIsSet(true);
    return this;
  }

  public void unsetVoutputTupleId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VOUTPUT_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field voutput_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetVoutputTupleId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VOUTPUT_TUPLE_ID_ISSET_ID);
  }

  public void setVoutputTupleIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VOUTPUT_TUPLE_ID_ISSET_ID, value);
  }

  public int getVintermediateTupleIdListSize() {
    return (this.vintermediate_tuple_id_list == null) ? 0 : this.vintermediate_tuple_id_list.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getVintermediateTupleIdListIterator() {
    return (this.vintermediate_tuple_id_list == null) ? null : this.vintermediate_tuple_id_list.iterator();
  }

  public void addToVintermediateTupleIdList(int elem) {
    if (this.vintermediate_tuple_id_list == null) {
      this.vintermediate_tuple_id_list = new java.util.ArrayList<java.lang.Integer>();
    }
    this.vintermediate_tuple_id_list.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getVintermediateTupleIdList() {
    return this.vintermediate_tuple_id_list;
  }

  public TNestedLoopJoinNode setVintermediateTupleIdList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> vintermediate_tuple_id_list) {
    this.vintermediate_tuple_id_list = vintermediate_tuple_id_list;
    return this;
  }

  public void unsetVintermediateTupleIdList() {
    this.vintermediate_tuple_id_list = null;
  }

  /** Returns true if field vintermediate_tuple_id_list is set (has been assigned a value) and false otherwise */
  public boolean isSetVintermediateTupleIdList() {
    return this.vintermediate_tuple_id_list != null;
  }

  public void setVintermediateTupleIdListIsSet(boolean value) {
    if (!value) {
      this.vintermediate_tuple_id_list = null;
    }
  }

  public boolean isIsOutputLeftSideOnly() {
    return this.is_output_left_side_only;
  }

  public TNestedLoopJoinNode setIsOutputLeftSideOnly(boolean is_output_left_side_only) {
    this.is_output_left_side_only = is_output_left_side_only;
    setIsOutputLeftSideOnlyIsSet(true);
    return this;
  }

  public void unsetIsOutputLeftSideOnly() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_OUTPUT_LEFT_SIDE_ONLY_ISSET_ID);
  }

  /** Returns true if field is_output_left_side_only is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOutputLeftSideOnly() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_OUTPUT_LEFT_SIDE_ONLY_ISSET_ID);
  }

  public void setIsOutputLeftSideOnlyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_OUTPUT_LEFT_SIDE_ONLY_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TExpr getVjoinConjunct() {
    return this.vjoin_conjunct;
  }

  public TNestedLoopJoinNode setVjoinConjunct(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr vjoin_conjunct) {
    this.vjoin_conjunct = vjoin_conjunct;
    return this;
  }

  public void unsetVjoinConjunct() {
    this.vjoin_conjunct = null;
  }

  /** Returns true if field vjoin_conjunct is set (has been assigned a value) and false otherwise */
  public boolean isSetVjoinConjunct() {
    return this.vjoin_conjunct != null;
  }

  public void setVjoinConjunctIsSet(boolean value) {
    if (!value) {
      this.vjoin_conjunct = null;
    }
  }

  public boolean isIsMark() {
    return this.is_mark;
  }

  public TNestedLoopJoinNode setIsMark(boolean is_mark) {
    this.is_mark = is_mark;
    setIsMarkIsSet(true);
    return this;
  }

  public void unsetIsMark() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_MARK_ISSET_ID);
  }

  /** Returns true if field is_mark is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMark() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_MARK_ISSET_ID);
  }

  public void setIsMarkIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_MARK_ISSET_ID, value);
  }

  public int getJoinConjunctsSize() {
    return (this.join_conjuncts == null) ? 0 : this.join_conjuncts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TExpr> getJoinConjunctsIterator() {
    return (this.join_conjuncts == null) ? null : this.join_conjuncts.iterator();
  }

  public void addToJoinConjuncts(org.apache.doris.thrift.TExpr elem) {
    if (this.join_conjuncts == null) {
      this.join_conjuncts = new java.util.ArrayList<org.apache.doris.thrift.TExpr>();
    }
    this.join_conjuncts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TExpr> getJoinConjuncts() {
    return this.join_conjuncts;
  }

  public TNestedLoopJoinNode setJoinConjuncts(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TExpr> join_conjuncts) {
    this.join_conjuncts = join_conjuncts;
    return this;
  }

  public void unsetJoinConjuncts() {
    this.join_conjuncts = null;
  }

  /** Returns true if field join_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetJoinConjuncts() {
    return this.join_conjuncts != null;
  }

  public void setJoinConjunctsIsSet(boolean value) {
    if (!value) {
      this.join_conjuncts = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case JOIN_OP:
      if (value == null) {
        unsetJoinOp();
      } else {
        setJoinOp((TJoinOp)value);
      }
      break;

    case SRC_EXPR_LIST:
      if (value == null) {
        unsetSrcExprList();
      } else {
        setSrcExprList((java.util.List<org.apache.doris.thrift.TExpr>)value);
      }
      break;

    case VOUTPUT_TUPLE_ID:
      if (value == null) {
        unsetVoutputTupleId();
      } else {
        setVoutputTupleId((java.lang.Integer)value);
      }
      break;

    case VINTERMEDIATE_TUPLE_ID_LIST:
      if (value == null) {
        unsetVintermediateTupleIdList();
      } else {
        setVintermediateTupleIdList((java.util.List<java.lang.Integer>)value);
      }
      break;

    case IS_OUTPUT_LEFT_SIDE_ONLY:
      if (value == null) {
        unsetIsOutputLeftSideOnly();
      } else {
        setIsOutputLeftSideOnly((java.lang.Boolean)value);
      }
      break;

    case VJOIN_CONJUNCT:
      if (value == null) {
        unsetVjoinConjunct();
      } else {
        setVjoinConjunct((org.apache.doris.thrift.TExpr)value);
      }
      break;

    case IS_MARK:
      if (value == null) {
        unsetIsMark();
      } else {
        setIsMark((java.lang.Boolean)value);
      }
      break;

    case JOIN_CONJUNCTS:
      if (value == null) {
        unsetJoinConjuncts();
      } else {
        setJoinConjuncts((java.util.List<org.apache.doris.thrift.TExpr>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case JOIN_OP:
      return getJoinOp();

    case SRC_EXPR_LIST:
      return getSrcExprList();

    case VOUTPUT_TUPLE_ID:
      return getVoutputTupleId();

    case VINTERMEDIATE_TUPLE_ID_LIST:
      return getVintermediateTupleIdList();

    case IS_OUTPUT_LEFT_SIDE_ONLY:
      return isIsOutputLeftSideOnly();

    case VJOIN_CONJUNCT:
      return getVjoinConjunct();

    case IS_MARK:
      return isIsMark();

    case JOIN_CONJUNCTS:
      return getJoinConjuncts();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case JOIN_OP:
      return isSetJoinOp();
    case SRC_EXPR_LIST:
      return isSetSrcExprList();
    case VOUTPUT_TUPLE_ID:
      return isSetVoutputTupleId();
    case VINTERMEDIATE_TUPLE_ID_LIST:
      return isSetVintermediateTupleIdList();
    case IS_OUTPUT_LEFT_SIDE_ONLY:
      return isSetIsOutputLeftSideOnly();
    case VJOIN_CONJUNCT:
      return isSetVjoinConjunct();
    case IS_MARK:
      return isSetIsMark();
    case JOIN_CONJUNCTS:
      return isSetJoinConjuncts();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TNestedLoopJoinNode)
      return this.equals((TNestedLoopJoinNode)that);
    return false;
  }

  public boolean equals(TNestedLoopJoinNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_join_op = true && this.isSetJoinOp();
    boolean that_present_join_op = true && that.isSetJoinOp();
    if (this_present_join_op || that_present_join_op) {
      if (!(this_present_join_op && that_present_join_op))
        return false;
      if (!this.join_op.equals(that.join_op))
        return false;
    }

    boolean this_present_srcExprList = true && this.isSetSrcExprList();
    boolean that_present_srcExprList = true && that.isSetSrcExprList();
    if (this_present_srcExprList || that_present_srcExprList) {
      if (!(this_present_srcExprList && that_present_srcExprList))
        return false;
      if (!this.srcExprList.equals(that.srcExprList))
        return false;
    }

    boolean this_present_voutput_tuple_id = true && this.isSetVoutputTupleId();
    boolean that_present_voutput_tuple_id = true && that.isSetVoutputTupleId();
    if (this_present_voutput_tuple_id || that_present_voutput_tuple_id) {
      if (!(this_present_voutput_tuple_id && that_present_voutput_tuple_id))
        return false;
      if (this.voutput_tuple_id != that.voutput_tuple_id)
        return false;
    }

    boolean this_present_vintermediate_tuple_id_list = true && this.isSetVintermediateTupleIdList();
    boolean that_present_vintermediate_tuple_id_list = true && that.isSetVintermediateTupleIdList();
    if (this_present_vintermediate_tuple_id_list || that_present_vintermediate_tuple_id_list) {
      if (!(this_present_vintermediate_tuple_id_list && that_present_vintermediate_tuple_id_list))
        return false;
      if (!this.vintermediate_tuple_id_list.equals(that.vintermediate_tuple_id_list))
        return false;
    }

    boolean this_present_is_output_left_side_only = true && this.isSetIsOutputLeftSideOnly();
    boolean that_present_is_output_left_side_only = true && that.isSetIsOutputLeftSideOnly();
    if (this_present_is_output_left_side_only || that_present_is_output_left_side_only) {
      if (!(this_present_is_output_left_side_only && that_present_is_output_left_side_only))
        return false;
      if (this.is_output_left_side_only != that.is_output_left_side_only)
        return false;
    }

    boolean this_present_vjoin_conjunct = true && this.isSetVjoinConjunct();
    boolean that_present_vjoin_conjunct = true && that.isSetVjoinConjunct();
    if (this_present_vjoin_conjunct || that_present_vjoin_conjunct) {
      if (!(this_present_vjoin_conjunct && that_present_vjoin_conjunct))
        return false;
      if (!this.vjoin_conjunct.equals(that.vjoin_conjunct))
        return false;
    }

    boolean this_present_is_mark = true && this.isSetIsMark();
    boolean that_present_is_mark = true && that.isSetIsMark();
    if (this_present_is_mark || that_present_is_mark) {
      if (!(this_present_is_mark && that_present_is_mark))
        return false;
      if (this.is_mark != that.is_mark)
        return false;
    }

    boolean this_present_join_conjuncts = true && this.isSetJoinConjuncts();
    boolean that_present_join_conjuncts = true && that.isSetJoinConjuncts();
    if (this_present_join_conjuncts || that_present_join_conjuncts) {
      if (!(this_present_join_conjuncts && that_present_join_conjuncts))
        return false;
      if (!this.join_conjuncts.equals(that.join_conjuncts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetJoinOp()) ? 131071 : 524287);
    if (isSetJoinOp())
      hashCode = hashCode * 8191 + join_op.getValue();

    hashCode = hashCode * 8191 + ((isSetSrcExprList()) ? 131071 : 524287);
    if (isSetSrcExprList())
      hashCode = hashCode * 8191 + srcExprList.hashCode();

    hashCode = hashCode * 8191 + ((isSetVoutputTupleId()) ? 131071 : 524287);
    if (isSetVoutputTupleId())
      hashCode = hashCode * 8191 + voutput_tuple_id;

    hashCode = hashCode * 8191 + ((isSetVintermediateTupleIdList()) ? 131071 : 524287);
    if (isSetVintermediateTupleIdList())
      hashCode = hashCode * 8191 + vintermediate_tuple_id_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsOutputLeftSideOnly()) ? 131071 : 524287);
    if (isSetIsOutputLeftSideOnly())
      hashCode = hashCode * 8191 + ((is_output_left_side_only) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetVjoinConjunct()) ? 131071 : 524287);
    if (isSetVjoinConjunct())
      hashCode = hashCode * 8191 + vjoin_conjunct.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsMark()) ? 131071 : 524287);
    if (isSetIsMark())
      hashCode = hashCode * 8191 + ((is_mark) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetJoinConjuncts()) ? 131071 : 524287);
    if (isSetJoinConjuncts())
      hashCode = hashCode * 8191 + join_conjuncts.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TNestedLoopJoinNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetJoinOp(), other.isSetJoinOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoinOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.join_op, other.join_op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrcExprList(), other.isSetSrcExprList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcExprList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcExprList, other.srcExprList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVoutputTupleId(), other.isSetVoutputTupleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVoutputTupleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.voutput_tuple_id, other.voutput_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVintermediateTupleIdList(), other.isSetVintermediateTupleIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVintermediateTupleIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vintermediate_tuple_id_list, other.vintermediate_tuple_id_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsOutputLeftSideOnly(), other.isSetIsOutputLeftSideOnly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOutputLeftSideOnly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_output_left_side_only, other.is_output_left_side_only);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVjoinConjunct(), other.isSetVjoinConjunct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVjoinConjunct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vjoin_conjunct, other.vjoin_conjunct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsMark(), other.isSetIsMark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_mark, other.is_mark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJoinConjuncts(), other.isSetJoinConjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoinConjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.join_conjuncts, other.join_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TNestedLoopJoinNode(");
    boolean first = true;

    sb.append("join_op:");
    if (this.join_op == null) {
      sb.append("null");
    } else {
      sb.append(this.join_op);
    }
    first = false;
    if (isSetSrcExprList()) {
      if (!first) sb.append(", ");
      sb.append("srcExprList:");
      if (this.srcExprList == null) {
        sb.append("null");
      } else {
        sb.append(this.srcExprList);
      }
      first = false;
    }
    if (isSetVoutputTupleId()) {
      if (!first) sb.append(", ");
      sb.append("voutput_tuple_id:");
      sb.append(this.voutput_tuple_id);
      first = false;
    }
    if (isSetVintermediateTupleIdList()) {
      if (!first) sb.append(", ");
      sb.append("vintermediate_tuple_id_list:");
      if (this.vintermediate_tuple_id_list == null) {
        sb.append("null");
      } else {
        sb.append(this.vintermediate_tuple_id_list);
      }
      first = false;
    }
    if (isSetIsOutputLeftSideOnly()) {
      if (!first) sb.append(", ");
      sb.append("is_output_left_side_only:");
      sb.append(this.is_output_left_side_only);
      first = false;
    }
    if (isSetVjoinConjunct()) {
      if (!first) sb.append(", ");
      sb.append("vjoin_conjunct:");
      if (this.vjoin_conjunct == null) {
        sb.append("null");
      } else {
        sb.append(this.vjoin_conjunct);
      }
      first = false;
    }
    if (isSetIsMark()) {
      if (!first) sb.append(", ");
      sb.append("is_mark:");
      sb.append(this.is_mark);
      first = false;
    }
    if (isSetJoinConjuncts()) {
      if (!first) sb.append(", ");
      sb.append("join_conjuncts:");
      if (this.join_conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.join_conjuncts);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (join_op == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'join_op' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (vjoin_conjunct != null) {
      vjoin_conjunct.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNestedLoopJoinNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNestedLoopJoinNodeStandardScheme getScheme() {
      return new TNestedLoopJoinNodeStandardScheme();
    }
  }

  private static class TNestedLoopJoinNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TNestedLoopJoinNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TNestedLoopJoinNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOIN_OP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.join_op = org.apache.doris.thrift.TJoinOp.findByValue(iprot.readI32());
              struct.setJoinOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SRC_EXPR_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list538 = iprot.readListBegin();
                struct.srcExprList = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(_list538.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _elem539;
                for (int _i540 = 0; _i540 < _list538.size; ++_i540)
                {
                  _elem539 = new org.apache.doris.thrift.TExpr();
                  _elem539.read(iprot);
                  struct.srcExprList.add(_elem539);
                }
                iprot.readListEnd();
              }
              struct.setSrcExprListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VOUTPUT_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.voutput_tuple_id = iprot.readI32();
              struct.setVoutputTupleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VINTERMEDIATE_TUPLE_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list541 = iprot.readListBegin();
                struct.vintermediate_tuple_id_list = new java.util.ArrayList<java.lang.Integer>(_list541.size);
                int _elem542;
                for (int _i543 = 0; _i543 < _list541.size; ++_i543)
                {
                  _elem542 = iprot.readI32();
                  struct.vintermediate_tuple_id_list.add(_elem542);
                }
                iprot.readListEnd();
              }
              struct.setVintermediateTupleIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_OUTPUT_LEFT_SIDE_ONLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_output_left_side_only = iprot.readBool();
              struct.setIsOutputLeftSideOnlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VJOIN_CONJUNCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.vjoin_conjunct = new org.apache.doris.thrift.TExpr();
              struct.vjoin_conjunct.read(iprot);
              struct.setVjoinConjunctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_MARK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_mark = iprot.readBool();
              struct.setIsMarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // JOIN_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list544 = iprot.readListBegin();
                struct.join_conjuncts = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(_list544.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _elem545;
                for (int _i546 = 0; _i546 < _list544.size; ++_i546)
                {
                  _elem545 = new org.apache.doris.thrift.TExpr();
                  _elem545.read(iprot);
                  struct.join_conjuncts.add(_elem545);
                }
                iprot.readListEnd();
              }
              struct.setJoinConjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TNestedLoopJoinNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.join_op != null) {
        oprot.writeFieldBegin(JOIN_OP_FIELD_DESC);
        oprot.writeI32(struct.join_op.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.srcExprList != null) {
        if (struct.isSetSrcExprList()) {
          oprot.writeFieldBegin(SRC_EXPR_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.srcExprList.size()));
            for (org.apache.doris.thrift.TExpr _iter547 : struct.srcExprList)
            {
              _iter547.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVoutputTupleId()) {
        oprot.writeFieldBegin(VOUTPUT_TUPLE_ID_FIELD_DESC);
        oprot.writeI32(struct.voutput_tuple_id);
        oprot.writeFieldEnd();
      }
      if (struct.vintermediate_tuple_id_list != null) {
        if (struct.isSetVintermediateTupleIdList()) {
          oprot.writeFieldBegin(VINTERMEDIATE_TUPLE_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.vintermediate_tuple_id_list.size()));
            for (int _iter548 : struct.vintermediate_tuple_id_list)
            {
              oprot.writeI32(_iter548);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsOutputLeftSideOnly()) {
        oprot.writeFieldBegin(IS_OUTPUT_LEFT_SIDE_ONLY_FIELD_DESC);
        oprot.writeBool(struct.is_output_left_side_only);
        oprot.writeFieldEnd();
      }
      if (struct.vjoin_conjunct != null) {
        if (struct.isSetVjoinConjunct()) {
          oprot.writeFieldBegin(VJOIN_CONJUNCT_FIELD_DESC);
          struct.vjoin_conjunct.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsMark()) {
        oprot.writeFieldBegin(IS_MARK_FIELD_DESC);
        oprot.writeBool(struct.is_mark);
        oprot.writeFieldEnd();
      }
      if (struct.join_conjuncts != null) {
        if (struct.isSetJoinConjuncts()) {
          oprot.writeFieldBegin(JOIN_CONJUNCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.join_conjuncts.size()));
            for (org.apache.doris.thrift.TExpr _iter549 : struct.join_conjuncts)
            {
              _iter549.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNestedLoopJoinNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNestedLoopJoinNodeTupleScheme getScheme() {
      return new TNestedLoopJoinNodeTupleScheme();
    }
  }

  private static class TNestedLoopJoinNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TNestedLoopJoinNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNestedLoopJoinNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.join_op.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSrcExprList()) {
        optionals.set(0);
      }
      if (struct.isSetVoutputTupleId()) {
        optionals.set(1);
      }
      if (struct.isSetVintermediateTupleIdList()) {
        optionals.set(2);
      }
      if (struct.isSetIsOutputLeftSideOnly()) {
        optionals.set(3);
      }
      if (struct.isSetVjoinConjunct()) {
        optionals.set(4);
      }
      if (struct.isSetIsMark()) {
        optionals.set(5);
      }
      if (struct.isSetJoinConjuncts()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetSrcExprList()) {
        {
          oprot.writeI32(struct.srcExprList.size());
          for (org.apache.doris.thrift.TExpr _iter550 : struct.srcExprList)
          {
            _iter550.write(oprot);
          }
        }
      }
      if (struct.isSetVoutputTupleId()) {
        oprot.writeI32(struct.voutput_tuple_id);
      }
      if (struct.isSetVintermediateTupleIdList()) {
        {
          oprot.writeI32(struct.vintermediate_tuple_id_list.size());
          for (int _iter551 : struct.vintermediate_tuple_id_list)
          {
            oprot.writeI32(_iter551);
          }
        }
      }
      if (struct.isSetIsOutputLeftSideOnly()) {
        oprot.writeBool(struct.is_output_left_side_only);
      }
      if (struct.isSetVjoinConjunct()) {
        struct.vjoin_conjunct.write(oprot);
      }
      if (struct.isSetIsMark()) {
        oprot.writeBool(struct.is_mark);
      }
      if (struct.isSetJoinConjuncts()) {
        {
          oprot.writeI32(struct.join_conjuncts.size());
          for (org.apache.doris.thrift.TExpr _iter552 : struct.join_conjuncts)
          {
            _iter552.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNestedLoopJoinNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.join_op = org.apache.doris.thrift.TJoinOp.findByValue(iprot.readI32());
      struct.setJoinOpIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list553 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.srcExprList = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(_list553.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _elem554;
          for (int _i555 = 0; _i555 < _list553.size; ++_i555)
          {
            _elem554 = new org.apache.doris.thrift.TExpr();
            _elem554.read(iprot);
            struct.srcExprList.add(_elem554);
          }
        }
        struct.setSrcExprListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.voutput_tuple_id = iprot.readI32();
        struct.setVoutputTupleIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list556 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.vintermediate_tuple_id_list = new java.util.ArrayList<java.lang.Integer>(_list556.size);
          int _elem557;
          for (int _i558 = 0; _i558 < _list556.size; ++_i558)
          {
            _elem557 = iprot.readI32();
            struct.vintermediate_tuple_id_list.add(_elem557);
          }
        }
        struct.setVintermediateTupleIdListIsSet(true);
      }
      if (incoming.get(3)) {
        struct.is_output_left_side_only = iprot.readBool();
        struct.setIsOutputLeftSideOnlyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.vjoin_conjunct = new org.apache.doris.thrift.TExpr();
        struct.vjoin_conjunct.read(iprot);
        struct.setVjoinConjunctIsSet(true);
      }
      if (incoming.get(5)) {
        struct.is_mark = iprot.readBool();
        struct.setIsMarkIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list559 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.join_conjuncts = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(_list559.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _elem560;
          for (int _i561 = 0; _i561 < _list559.size; ++_i561)
          {
            _elem560 = new org.apache.doris.thrift.TExpr();
            _elem560.read(iprot);
            struct.join_conjuncts.add(_elem560);
          }
        }
        struct.setJoinConjunctsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

