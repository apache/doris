/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-06-20")
public class TStreamLoadRecordResult implements org.apache.thrift.TBase<TStreamLoadRecordResult, TStreamLoadRecordResult._Fields>, java.io.Serializable, Cloneable, Comparable<TStreamLoadRecordResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStreamLoadRecordResult");

  private static final org.apache.thrift.protocol.TField STREAM_LOAD_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("stream_load_record", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TStreamLoadRecordResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TStreamLoadRecordResultTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,TStreamLoadRecord> stream_load_record; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STREAM_LOAD_RECORD((short)1, "stream_load_record");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STREAM_LOAD_RECORD
          return STREAM_LOAD_RECORD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STREAM_LOAD_RECORD, new org.apache.thrift.meta_data.FieldMetaData("stream_load_record", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStreamLoadRecord.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStreamLoadRecordResult.class, metaDataMap);
  }

  public TStreamLoadRecordResult() {
  }

  public TStreamLoadRecordResult(
    java.util.Map<java.lang.String,TStreamLoadRecord> stream_load_record)
  {
    this();
    this.stream_load_record = stream_load_record;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStreamLoadRecordResult(TStreamLoadRecordResult other) {
    if (other.isSetStreamLoadRecord()) {
      java.util.Map<java.lang.String,TStreamLoadRecord> __this__stream_load_record = new java.util.HashMap<java.lang.String,TStreamLoadRecord>(other.stream_load_record.size());
      for (java.util.Map.Entry<java.lang.String, TStreamLoadRecord> other_element : other.stream_load_record.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        TStreamLoadRecord other_element_value = other_element.getValue();

        java.lang.String __this__stream_load_record_copy_key = other_element_key;

        TStreamLoadRecord __this__stream_load_record_copy_value = new TStreamLoadRecord(other_element_value);

        __this__stream_load_record.put(__this__stream_load_record_copy_key, __this__stream_load_record_copy_value);
      }
      this.stream_load_record = __this__stream_load_record;
    }
  }

  @Override
  public TStreamLoadRecordResult deepCopy() {
    return new TStreamLoadRecordResult(this);
  }

  @Override
  public void clear() {
    this.stream_load_record = null;
  }

  public int getStreamLoadRecordSize() {
    return (this.stream_load_record == null) ? 0 : this.stream_load_record.size();
  }

  public void putToStreamLoadRecord(java.lang.String key, TStreamLoadRecord val) {
    if (this.stream_load_record == null) {
      this.stream_load_record = new java.util.HashMap<java.lang.String,TStreamLoadRecord>();
    }
    this.stream_load_record.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,TStreamLoadRecord> getStreamLoadRecord() {
    return this.stream_load_record;
  }

  public TStreamLoadRecordResult setStreamLoadRecord(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,TStreamLoadRecord> stream_load_record) {
    this.stream_load_record = stream_load_record;
    return this;
  }

  public void unsetStreamLoadRecord() {
    this.stream_load_record = null;
  }

  /** Returns true if field stream_load_record is set (has been assigned a value) and false otherwise */
  public boolean isSetStreamLoadRecord() {
    return this.stream_load_record != null;
  }

  public void setStreamLoadRecordIsSet(boolean value) {
    if (!value) {
      this.stream_load_record = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STREAM_LOAD_RECORD:
      if (value == null) {
        unsetStreamLoadRecord();
      } else {
        setStreamLoadRecord((java.util.Map<java.lang.String,TStreamLoadRecord>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STREAM_LOAD_RECORD:
      return getStreamLoadRecord();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STREAM_LOAD_RECORD:
      return isSetStreamLoadRecord();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TStreamLoadRecordResult)
      return this.equals((TStreamLoadRecordResult)that);
    return false;
  }

  public boolean equals(TStreamLoadRecordResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_stream_load_record = true && this.isSetStreamLoadRecord();
    boolean that_present_stream_load_record = true && that.isSetStreamLoadRecord();
    if (this_present_stream_load_record || that_present_stream_load_record) {
      if (!(this_present_stream_load_record && that_present_stream_load_record))
        return false;
      if (!this.stream_load_record.equals(that.stream_load_record))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStreamLoadRecord()) ? 131071 : 524287);
    if (isSetStreamLoadRecord())
      hashCode = hashCode * 8191 + stream_load_record.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TStreamLoadRecordResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStreamLoadRecord(), other.isSetStreamLoadRecord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStreamLoadRecord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream_load_record, other.stream_load_record);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TStreamLoadRecordResult(");
    boolean first = true;

    sb.append("stream_load_record:");
    if (this.stream_load_record == null) {
      sb.append("null");
    } else {
      sb.append(this.stream_load_record);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (stream_load_record == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stream_load_record' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStreamLoadRecordResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStreamLoadRecordResultStandardScheme getScheme() {
      return new TStreamLoadRecordResultStandardScheme();
    }
  }

  private static class TStreamLoadRecordResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TStreamLoadRecordResult> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TStreamLoadRecordResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STREAM_LOAD_RECORD
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map46 = iprot.readMapBegin();
                struct.stream_load_record = new java.util.HashMap<java.lang.String,TStreamLoadRecord>(2*_map46.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key47;
                @org.apache.thrift.annotation.Nullable TStreamLoadRecord _val48;
                for (int _i49 = 0; _i49 < _map46.size; ++_i49)
                {
                  _key47 = iprot.readString();
                  _val48 = new TStreamLoadRecord();
                  _val48.read(iprot);
                  struct.stream_load_record.put(_key47, _val48);
                }
                iprot.readMapEnd();
              }
              struct.setStreamLoadRecordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TStreamLoadRecordResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stream_load_record != null) {
        oprot.writeFieldBegin(STREAM_LOAD_RECORD_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.stream_load_record.size()));
          for (java.util.Map.Entry<java.lang.String, TStreamLoadRecord> _iter50 : struct.stream_load_record.entrySet())
          {
            oprot.writeString(_iter50.getKey());
            _iter50.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStreamLoadRecordResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStreamLoadRecordResultTupleScheme getScheme() {
      return new TStreamLoadRecordResultTupleScheme();
    }
  }

  private static class TStreamLoadRecordResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TStreamLoadRecordResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStreamLoadRecordResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.stream_load_record.size());
        for (java.util.Map.Entry<java.lang.String, TStreamLoadRecord> _iter51 : struct.stream_load_record.entrySet())
        {
          oprot.writeString(_iter51.getKey());
          _iter51.getValue().write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStreamLoadRecordResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map52 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT); 
        struct.stream_load_record = new java.util.HashMap<java.lang.String,TStreamLoadRecord>(2*_map52.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _key53;
        @org.apache.thrift.annotation.Nullable TStreamLoadRecord _val54;
        for (int _i55 = 0; _i55 < _map52.size; ++_i55)
        {
          _key53 = iprot.readString();
          _val54 = new TStreamLoadRecord();
          _val54.read(iprot);
          struct.stream_load_record.put(_key53, _val54);
        }
      }
      struct.setStreamLoadRecordIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

