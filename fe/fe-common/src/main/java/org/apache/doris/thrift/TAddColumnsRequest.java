/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-07-11")
public class TAddColumnsRequest implements org.apache.thrift.TBase<TAddColumnsRequest, TAddColumnsRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TAddColumnsRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAddColumnsRequest");

  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ADD_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("addColumns", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ALLOW_TYPE_CONFLICT_FIELD_DESC = new org.apache.thrift.protocol.TField("allow_type_conflict", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAddColumnsRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAddColumnsRequestTupleSchemeFactory();

  public long table_id; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TColumnDef> addColumns; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String db_name; // optional
  public boolean allow_type_conflict; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_ID((short)1, "table_id"),
    ADD_COLUMNS((short)2, "addColumns"),
    TABLE_NAME((short)3, "table_name"),
    DB_NAME((short)4, "db_name"),
    ALLOW_TYPE_CONFLICT((short)5, "allow_type_conflict");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_ID
          return TABLE_ID;
        case 2: // ADD_COLUMNS
          return ADD_COLUMNS;
        case 3: // TABLE_NAME
          return TABLE_NAME;
        case 4: // DB_NAME
          return DB_NAME;
        case 5: // ALLOW_TYPE_CONFLICT
          return ALLOW_TYPE_CONFLICT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLE_ID_ISSET_ID = 0;
  private static final int __ALLOW_TYPE_CONFLICT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TABLE_ID,_Fields.ADD_COLUMNS,_Fields.TABLE_NAME,_Fields.DB_NAME,_Fields.ALLOW_TYPE_CONFLICT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ADD_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("addColumns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumnDef.class))));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALLOW_TYPE_CONFLICT, new org.apache.thrift.meta_data.FieldMetaData("allow_type_conflict", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAddColumnsRequest.class, metaDataMap);
  }

  public TAddColumnsRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAddColumnsRequest(TAddColumnsRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.table_id = other.table_id;
    if (other.isSetAddColumns()) {
      java.util.List<TColumnDef> __this__addColumns = new java.util.ArrayList<TColumnDef>(other.addColumns.size());
      for (TColumnDef other_element : other.addColumns) {
        __this__addColumns.add(new TColumnDef(other_element));
      }
      this.addColumns = __this__addColumns;
    }
    if (other.isSetTableName()) {
      this.table_name = other.table_name;
    }
    if (other.isSetDbName()) {
      this.db_name = other.db_name;
    }
    this.allow_type_conflict = other.allow_type_conflict;
  }

  @Override
  public TAddColumnsRequest deepCopy() {
    return new TAddColumnsRequest(this);
  }

  @Override
  public void clear() {
    setTableIdIsSet(false);
    this.table_id = 0;
    this.addColumns = null;
    this.table_name = null;
    this.db_name = null;
    setAllowTypeConflictIsSet(false);
    this.allow_type_conflict = false;
  }

  public long getTableId() {
    return this.table_id;
  }

  public TAddColumnsRequest setTableId(long table_id) {
    this.table_id = table_id;
    setTableIdIsSet(true);
    return this;
  }

  public void unsetTableId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTableId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  public void setTableIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ID_ISSET_ID, value);
  }

  public int getAddColumnsSize() {
    return (this.addColumns == null) ? 0 : this.addColumns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TColumnDef> getAddColumnsIterator() {
    return (this.addColumns == null) ? null : this.addColumns.iterator();
  }

  public void addToAddColumns(TColumnDef elem) {
    if (this.addColumns == null) {
      this.addColumns = new java.util.ArrayList<TColumnDef>();
    }
    this.addColumns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TColumnDef> getAddColumns() {
    return this.addColumns;
  }

  public TAddColumnsRequest setAddColumns(@org.apache.thrift.annotation.Nullable java.util.List<TColumnDef> addColumns) {
    this.addColumns = addColumns;
    return this;
  }

  public void unsetAddColumns() {
    this.addColumns = null;
  }

  /** Returns true if field addColumns is set (has been assigned a value) and false otherwise */
  public boolean isSetAddColumns() {
    return this.addColumns != null;
  }

  public void setAddColumnsIsSet(boolean value) {
    if (!value) {
      this.addColumns = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTableName() {
    return this.table_name;
  }

  public TAddColumnsRequest setTableName(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTableName() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.table_name != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDbName() {
    return this.db_name;
  }

  public TAddColumnsRequest setDbName(@org.apache.thrift.annotation.Nullable java.lang.String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDbName() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDbName() {
    return this.db_name != null;
  }

  public void setDbNameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  public boolean isAllowTypeConflict() {
    return this.allow_type_conflict;
  }

  public TAddColumnsRequest setAllowTypeConflict(boolean allow_type_conflict) {
    this.allow_type_conflict = allow_type_conflict;
    setAllowTypeConflictIsSet(true);
    return this;
  }

  public void unsetAllowTypeConflict() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALLOW_TYPE_CONFLICT_ISSET_ID);
  }

  /** Returns true if field allow_type_conflict is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowTypeConflict() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALLOW_TYPE_CONFLICT_ISSET_ID);
  }

  public void setAllowTypeConflictIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALLOW_TYPE_CONFLICT_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLE_ID:
      if (value == null) {
        unsetTableId();
      } else {
        setTableId((java.lang.Long)value);
      }
      break;

    case ADD_COLUMNS:
      if (value == null) {
        unsetAddColumns();
      } else {
        setAddColumns((java.util.List<TColumnDef>)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((java.lang.String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDbName();
      } else {
        setDbName((java.lang.String)value);
      }
      break;

    case ALLOW_TYPE_CONFLICT:
      if (value == null) {
        unsetAllowTypeConflict();
      } else {
        setAllowTypeConflict((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_ID:
      return getTableId();

    case ADD_COLUMNS:
      return getAddColumns();

    case TABLE_NAME:
      return getTableName();

    case DB_NAME:
      return getDbName();

    case ALLOW_TYPE_CONFLICT:
      return isAllowTypeConflict();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLE_ID:
      return isSetTableId();
    case ADD_COLUMNS:
      return isSetAddColumns();
    case TABLE_NAME:
      return isSetTableName();
    case DB_NAME:
      return isSetDbName();
    case ALLOW_TYPE_CONFLICT:
      return isSetAllowTypeConflict();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TAddColumnsRequest)
      return this.equals((TAddColumnsRequest)that);
    return false;
  }

  public boolean equals(TAddColumnsRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_table_id = true && this.isSetTableId();
    boolean that_present_table_id = true && that.isSetTableId();
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (this.table_id != that.table_id)
        return false;
    }

    boolean this_present_addColumns = true && this.isSetAddColumns();
    boolean that_present_addColumns = true && that.isSetAddColumns();
    if (this_present_addColumns || that_present_addColumns) {
      if (!(this_present_addColumns && that_present_addColumns))
        return false;
      if (!this.addColumns.equals(that.addColumns))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTableName();
    boolean that_present_table_name = true && that.isSetTableName();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_db_name = true && this.isSetDbName();
    boolean that_present_db_name = true && that.isSetDbName();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_allow_type_conflict = true && this.isSetAllowTypeConflict();
    boolean that_present_allow_type_conflict = true && that.isSetAllowTypeConflict();
    if (this_present_allow_type_conflict || that_present_allow_type_conflict) {
      if (!(this_present_allow_type_conflict && that_present_allow_type_conflict))
        return false;
      if (this.allow_type_conflict != that.allow_type_conflict)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTableId()) ? 131071 : 524287);
    if (isSetTableId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(table_id);

    hashCode = hashCode * 8191 + ((isSetAddColumns()) ? 131071 : 524287);
    if (isSetAddColumns())
      hashCode = hashCode * 8191 + addColumns.hashCode();

    hashCode = hashCode * 8191 + ((isSetTableName()) ? 131071 : 524287);
    if (isSetTableName())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDbName()) ? 131071 : 524287);
    if (isSetDbName())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetAllowTypeConflict()) ? 131071 : 524287);
    if (isSetAllowTypeConflict())
      hashCode = hashCode * 8191 + ((allow_type_conflict) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TAddColumnsRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTableId(), other.isSetTableId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAddColumns(), other.isSetAddColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addColumns, other.addColumns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTableName(), other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDbName(), other.isSetDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAllowTypeConflict(), other.isSetAllowTypeConflict());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowTypeConflict()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allow_type_conflict, other.allow_type_conflict);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TAddColumnsRequest(");
    boolean first = true;

    if (isSetTableId()) {
      sb.append("table_id:");
      sb.append(this.table_id);
      first = false;
    }
    if (isSetAddColumns()) {
      if (!first) sb.append(", ");
      sb.append("addColumns:");
      if (this.addColumns == null) {
        sb.append("null");
      } else {
        sb.append(this.addColumns);
      }
      first = false;
    }
    if (isSetTableName()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetDbName()) {
      if (!first) sb.append(", ");
      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
    }
    if (isSetAllowTypeConflict()) {
      if (!first) sb.append(", ");
      sb.append("allow_type_conflict:");
      sb.append(this.allow_type_conflict);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAddColumnsRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAddColumnsRequestStandardScheme getScheme() {
      return new TAddColumnsRequestStandardScheme();
    }
  }

  private static class TAddColumnsRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAddColumnsRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TAddColumnsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.table_id = iprot.readI64();
              struct.setTableIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ADD_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list324 = iprot.readListBegin();
                struct.addColumns = new java.util.ArrayList<TColumnDef>(_list324.size);
                @org.apache.thrift.annotation.Nullable TColumnDef _elem325;
                for (int _i326 = 0; _i326 < _list324.size; ++_i326)
                {
                  _elem325 = new TColumnDef();
                  _elem325.read(iprot);
                  struct.addColumns.add(_elem325);
                }
                iprot.readListEnd();
              }
              struct.setAddColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALLOW_TYPE_CONFLICT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allow_type_conflict = iprot.readBool();
              struct.setAllowTypeConflictIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TAddColumnsRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTableId()) {
        oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
        oprot.writeI64(struct.table_id);
        oprot.writeFieldEnd();
      }
      if (struct.addColumns != null) {
        if (struct.isSetAddColumns()) {
          oprot.writeFieldBegin(ADD_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.addColumns.size()));
            for (TColumnDef _iter327 : struct.addColumns)
            {
              _iter327.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTableName()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.db_name != null) {
        if (struct.isSetDbName()) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.db_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAllowTypeConflict()) {
        oprot.writeFieldBegin(ALLOW_TYPE_CONFLICT_FIELD_DESC);
        oprot.writeBool(struct.allow_type_conflict);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAddColumnsRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAddColumnsRequestTupleScheme getScheme() {
      return new TAddColumnsRequestTupleScheme();
    }
  }

  private static class TAddColumnsRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAddColumnsRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAddColumnsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTableId()) {
        optionals.set(0);
      }
      if (struct.isSetAddColumns()) {
        optionals.set(1);
      }
      if (struct.isSetTableName()) {
        optionals.set(2);
      }
      if (struct.isSetDbName()) {
        optionals.set(3);
      }
      if (struct.isSetAllowTypeConflict()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTableId()) {
        oprot.writeI64(struct.table_id);
      }
      if (struct.isSetAddColumns()) {
        {
          oprot.writeI32(struct.addColumns.size());
          for (TColumnDef _iter328 : struct.addColumns)
          {
            _iter328.write(oprot);
          }
        }
      }
      if (struct.isSetTableName()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetDbName()) {
        oprot.writeString(struct.db_name);
      }
      if (struct.isSetAllowTypeConflict()) {
        oprot.writeBool(struct.allow_type_conflict);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAddColumnsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.table_id = iprot.readI64();
        struct.setTableIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list329 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.addColumns = new java.util.ArrayList<TColumnDef>(_list329.size);
          @org.apache.thrift.annotation.Nullable TColumnDef _elem330;
          for (int _i331 = 0; _i331 < _list329.size; ++_i331)
          {
            _elem330 = new TColumnDef();
            _elem330.read(iprot);
            struct.addColumns.add(_elem330);
          }
        }
        struct.setAddColumnsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.table_name = iprot.readString();
        struct.setTableNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.db_name = iprot.readString();
        struct.setDbNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.allow_type_conflict = iprot.readBool();
        struct.setAllowTypeConflictIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

