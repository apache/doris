/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-06-29")
public class TExecRequest implements org.apache.thrift.TBase<TExecRequest, TExecRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TExecRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExecRequest");

  private static final org.apache.thrift.protocol.TField STMT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stmt_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SQL_STMT_FIELD_DESC = new org.apache.thrift.protocol.TField("sql_stmt", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("request_id", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField QUERY_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_options", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField QUERY_EXEC_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("query_exec_request", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField DDL_EXEC_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("ddl_exec_request", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField RESULT_SET_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("result_set_metadata", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField EXPLAIN_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("explain_result", org.apache.thrift.protocol.TType.STRUCT, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TExecRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TExecRequestTupleSchemeFactory();

  /**
   * 
   * @see org.apache.doris.thrift.TStmtType
   */
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TStmtType stmt_type; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String sql_stmt; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId request_id; // required
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TQueryOptions query_options; // required
  public @org.apache.thrift.annotation.Nullable TQueryExecRequest query_exec_request; // optional
  public @org.apache.thrift.annotation.Nullable TDdlExecRequest ddl_exec_request; // optional
  public @org.apache.thrift.annotation.Nullable TResultSetMetadata result_set_metadata; // optional
  public @org.apache.thrift.annotation.Nullable TExplainResult explain_result; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see org.apache.doris.thrift.TStmtType
     */
    STMT_TYPE((short)1, "stmt_type"),
    SQL_STMT((short)2, "sql_stmt"),
    REQUEST_ID((short)3, "request_id"),
    QUERY_OPTIONS((short)4, "query_options"),
    QUERY_EXEC_REQUEST((short)5, "query_exec_request"),
    DDL_EXEC_REQUEST((short)6, "ddl_exec_request"),
    RESULT_SET_METADATA((short)7, "result_set_metadata"),
    EXPLAIN_RESULT((short)8, "explain_result");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STMT_TYPE
          return STMT_TYPE;
        case 2: // SQL_STMT
          return SQL_STMT;
        case 3: // REQUEST_ID
          return REQUEST_ID;
        case 4: // QUERY_OPTIONS
          return QUERY_OPTIONS;
        case 5: // QUERY_EXEC_REQUEST
          return QUERY_EXEC_REQUEST;
        case 6: // DDL_EXEC_REQUEST
          return DDL_EXEC_REQUEST;
        case 7: // RESULT_SET_METADATA
          return RESULT_SET_METADATA;
        case 8: // EXPLAIN_RESULT
          return EXPLAIN_RESULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SQL_STMT,_Fields.QUERY_EXEC_REQUEST,_Fields.DDL_EXEC_REQUEST,_Fields.RESULT_SET_METADATA,_Fields.EXPLAIN_RESULT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STMT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stmt_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.doris.thrift.TStmtType.class)));
    tmpMap.put(_Fields.SQL_STMT, new org.apache.thrift.meta_data.FieldMetaData("sql_stmt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("request_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.QUERY_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("query_options", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TQueryOptions.class)));
    tmpMap.put(_Fields.QUERY_EXEC_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("query_exec_request", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryExecRequest.class)));
    tmpMap.put(_Fields.DDL_EXEC_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("ddl_exec_request", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDdlExecRequest.class)));
    tmpMap.put(_Fields.RESULT_SET_METADATA, new org.apache.thrift.meta_data.FieldMetaData("result_set_metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResultSetMetadata.class)));
    tmpMap.put(_Fields.EXPLAIN_RESULT, new org.apache.thrift.meta_data.FieldMetaData("explain_result", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExplainResult.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExecRequest.class, metaDataMap);
  }

  public TExecRequest() {
  }

  public TExecRequest(
    org.apache.doris.thrift.TStmtType stmt_type,
    org.apache.doris.thrift.TUniqueId request_id,
    org.apache.doris.thrift.TQueryOptions query_options)
  {
    this();
    this.stmt_type = stmt_type;
    this.request_id = request_id;
    this.query_options = query_options;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExecRequest(TExecRequest other) {
    if (other.isSetStmtType()) {
      this.stmt_type = other.stmt_type;
    }
    if (other.isSetSqlStmt()) {
      this.sql_stmt = other.sql_stmt;
    }
    if (other.isSetRequestId()) {
      this.request_id = new org.apache.doris.thrift.TUniqueId(other.request_id);
    }
    if (other.isSetQueryOptions()) {
      this.query_options = new org.apache.doris.thrift.TQueryOptions(other.query_options);
    }
    if (other.isSetQueryExecRequest()) {
      this.query_exec_request = new TQueryExecRequest(other.query_exec_request);
    }
    if (other.isSetDdlExecRequest()) {
      this.ddl_exec_request = new TDdlExecRequest(other.ddl_exec_request);
    }
    if (other.isSetResultSetMetadata()) {
      this.result_set_metadata = new TResultSetMetadata(other.result_set_metadata);
    }
    if (other.isSetExplainResult()) {
      this.explain_result = new TExplainResult(other.explain_result);
    }
  }

  @Override
  public TExecRequest deepCopy() {
    return new TExecRequest(this);
  }

  @Override
  public void clear() {
    this.stmt_type = null;
    this.sql_stmt = null;
    this.request_id = null;
    this.query_options = null;
    this.query_exec_request = null;
    this.ddl_exec_request = null;
    this.result_set_metadata = null;
    this.explain_result = null;
  }

  /**
   * 
   * @see org.apache.doris.thrift.TStmtType
   */
  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TStmtType getStmtType() {
    return this.stmt_type;
  }

  /**
   * 
   * @see org.apache.doris.thrift.TStmtType
   */
  public TExecRequest setStmtType(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TStmtType stmt_type) {
    this.stmt_type = stmt_type;
    return this;
  }

  public void unsetStmtType() {
    this.stmt_type = null;
  }

  /** Returns true if field stmt_type is set (has been assigned a value) and false otherwise */
  public boolean isSetStmtType() {
    return this.stmt_type != null;
  }

  public void setStmtTypeIsSet(boolean value) {
    if (!value) {
      this.stmt_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSqlStmt() {
    return this.sql_stmt;
  }

  public TExecRequest setSqlStmt(@org.apache.thrift.annotation.Nullable java.lang.String sql_stmt) {
    this.sql_stmt = sql_stmt;
    return this;
  }

  public void unsetSqlStmt() {
    this.sql_stmt = null;
  }

  /** Returns true if field sql_stmt is set (has been assigned a value) and false otherwise */
  public boolean isSetSqlStmt() {
    return this.sql_stmt != null;
  }

  public void setSqlStmtIsSet(boolean value) {
    if (!value) {
      this.sql_stmt = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TUniqueId getRequestId() {
    return this.request_id;
  }

  public TExecRequest setRequestId(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId request_id) {
    this.request_id = request_id;
    return this;
  }

  public void unsetRequestId() {
    this.request_id = null;
  }

  /** Returns true if field request_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestId() {
    return this.request_id != null;
  }

  public void setRequestIdIsSet(boolean value) {
    if (!value) {
      this.request_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TQueryOptions getQueryOptions() {
    return this.query_options;
  }

  public TExecRequest setQueryOptions(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TQueryOptions query_options) {
    this.query_options = query_options;
    return this;
  }

  public void unsetQueryOptions() {
    this.query_options = null;
  }

  /** Returns true if field query_options is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryOptions() {
    return this.query_options != null;
  }

  public void setQueryOptionsIsSet(boolean value) {
    if (!value) {
      this.query_options = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TQueryExecRequest getQueryExecRequest() {
    return this.query_exec_request;
  }

  public TExecRequest setQueryExecRequest(@org.apache.thrift.annotation.Nullable TQueryExecRequest query_exec_request) {
    this.query_exec_request = query_exec_request;
    return this;
  }

  public void unsetQueryExecRequest() {
    this.query_exec_request = null;
  }

  /** Returns true if field query_exec_request is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryExecRequest() {
    return this.query_exec_request != null;
  }

  public void setQueryExecRequestIsSet(boolean value) {
    if (!value) {
      this.query_exec_request = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDdlExecRequest getDdlExecRequest() {
    return this.ddl_exec_request;
  }

  public TExecRequest setDdlExecRequest(@org.apache.thrift.annotation.Nullable TDdlExecRequest ddl_exec_request) {
    this.ddl_exec_request = ddl_exec_request;
    return this;
  }

  public void unsetDdlExecRequest() {
    this.ddl_exec_request = null;
  }

  /** Returns true if field ddl_exec_request is set (has been assigned a value) and false otherwise */
  public boolean isSetDdlExecRequest() {
    return this.ddl_exec_request != null;
  }

  public void setDdlExecRequestIsSet(boolean value) {
    if (!value) {
      this.ddl_exec_request = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TResultSetMetadata getResultSetMetadata() {
    return this.result_set_metadata;
  }

  public TExecRequest setResultSetMetadata(@org.apache.thrift.annotation.Nullable TResultSetMetadata result_set_metadata) {
    this.result_set_metadata = result_set_metadata;
    return this;
  }

  public void unsetResultSetMetadata() {
    this.result_set_metadata = null;
  }

  /** Returns true if field result_set_metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetResultSetMetadata() {
    return this.result_set_metadata != null;
  }

  public void setResultSetMetadataIsSet(boolean value) {
    if (!value) {
      this.result_set_metadata = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TExplainResult getExplainResult() {
    return this.explain_result;
  }

  public TExecRequest setExplainResult(@org.apache.thrift.annotation.Nullable TExplainResult explain_result) {
    this.explain_result = explain_result;
    return this;
  }

  public void unsetExplainResult() {
    this.explain_result = null;
  }

  /** Returns true if field explain_result is set (has been assigned a value) and false otherwise */
  public boolean isSetExplainResult() {
    return this.explain_result != null;
  }

  public void setExplainResultIsSet(boolean value) {
    if (!value) {
      this.explain_result = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STMT_TYPE:
      if (value == null) {
        unsetStmtType();
      } else {
        setStmtType((org.apache.doris.thrift.TStmtType)value);
      }
      break;

    case SQL_STMT:
      if (value == null) {
        unsetSqlStmt();
      } else {
        setSqlStmt((java.lang.String)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestId();
      } else {
        setRequestId((org.apache.doris.thrift.TUniqueId)value);
      }
      break;

    case QUERY_OPTIONS:
      if (value == null) {
        unsetQueryOptions();
      } else {
        setQueryOptions((org.apache.doris.thrift.TQueryOptions)value);
      }
      break;

    case QUERY_EXEC_REQUEST:
      if (value == null) {
        unsetQueryExecRequest();
      } else {
        setQueryExecRequest((TQueryExecRequest)value);
      }
      break;

    case DDL_EXEC_REQUEST:
      if (value == null) {
        unsetDdlExecRequest();
      } else {
        setDdlExecRequest((TDdlExecRequest)value);
      }
      break;

    case RESULT_SET_METADATA:
      if (value == null) {
        unsetResultSetMetadata();
      } else {
        setResultSetMetadata((TResultSetMetadata)value);
      }
      break;

    case EXPLAIN_RESULT:
      if (value == null) {
        unsetExplainResult();
      } else {
        setExplainResult((TExplainResult)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STMT_TYPE:
      return getStmtType();

    case SQL_STMT:
      return getSqlStmt();

    case REQUEST_ID:
      return getRequestId();

    case QUERY_OPTIONS:
      return getQueryOptions();

    case QUERY_EXEC_REQUEST:
      return getQueryExecRequest();

    case DDL_EXEC_REQUEST:
      return getDdlExecRequest();

    case RESULT_SET_METADATA:
      return getResultSetMetadata();

    case EXPLAIN_RESULT:
      return getExplainResult();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STMT_TYPE:
      return isSetStmtType();
    case SQL_STMT:
      return isSetSqlStmt();
    case REQUEST_ID:
      return isSetRequestId();
    case QUERY_OPTIONS:
      return isSetQueryOptions();
    case QUERY_EXEC_REQUEST:
      return isSetQueryExecRequest();
    case DDL_EXEC_REQUEST:
      return isSetDdlExecRequest();
    case RESULT_SET_METADATA:
      return isSetResultSetMetadata();
    case EXPLAIN_RESULT:
      return isSetExplainResult();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TExecRequest)
      return this.equals((TExecRequest)that);
    return false;
  }

  public boolean equals(TExecRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_stmt_type = true && this.isSetStmtType();
    boolean that_present_stmt_type = true && that.isSetStmtType();
    if (this_present_stmt_type || that_present_stmt_type) {
      if (!(this_present_stmt_type && that_present_stmt_type))
        return false;
      if (!this.stmt_type.equals(that.stmt_type))
        return false;
    }

    boolean this_present_sql_stmt = true && this.isSetSqlStmt();
    boolean that_present_sql_stmt = true && that.isSetSqlStmt();
    if (this_present_sql_stmt || that_present_sql_stmt) {
      if (!(this_present_sql_stmt && that_present_sql_stmt))
        return false;
      if (!this.sql_stmt.equals(that.sql_stmt))
        return false;
    }

    boolean this_present_request_id = true && this.isSetRequestId();
    boolean that_present_request_id = true && that.isSetRequestId();
    if (this_present_request_id || that_present_request_id) {
      if (!(this_present_request_id && that_present_request_id))
        return false;
      if (!this.request_id.equals(that.request_id))
        return false;
    }

    boolean this_present_query_options = true && this.isSetQueryOptions();
    boolean that_present_query_options = true && that.isSetQueryOptions();
    if (this_present_query_options || that_present_query_options) {
      if (!(this_present_query_options && that_present_query_options))
        return false;
      if (!this.query_options.equals(that.query_options))
        return false;
    }

    boolean this_present_query_exec_request = true && this.isSetQueryExecRequest();
    boolean that_present_query_exec_request = true && that.isSetQueryExecRequest();
    if (this_present_query_exec_request || that_present_query_exec_request) {
      if (!(this_present_query_exec_request && that_present_query_exec_request))
        return false;
      if (!this.query_exec_request.equals(that.query_exec_request))
        return false;
    }

    boolean this_present_ddl_exec_request = true && this.isSetDdlExecRequest();
    boolean that_present_ddl_exec_request = true && that.isSetDdlExecRequest();
    if (this_present_ddl_exec_request || that_present_ddl_exec_request) {
      if (!(this_present_ddl_exec_request && that_present_ddl_exec_request))
        return false;
      if (!this.ddl_exec_request.equals(that.ddl_exec_request))
        return false;
    }

    boolean this_present_result_set_metadata = true && this.isSetResultSetMetadata();
    boolean that_present_result_set_metadata = true && that.isSetResultSetMetadata();
    if (this_present_result_set_metadata || that_present_result_set_metadata) {
      if (!(this_present_result_set_metadata && that_present_result_set_metadata))
        return false;
      if (!this.result_set_metadata.equals(that.result_set_metadata))
        return false;
    }

    boolean this_present_explain_result = true && this.isSetExplainResult();
    boolean that_present_explain_result = true && that.isSetExplainResult();
    if (this_present_explain_result || that_present_explain_result) {
      if (!(this_present_explain_result && that_present_explain_result))
        return false;
      if (!this.explain_result.equals(that.explain_result))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStmtType()) ? 131071 : 524287);
    if (isSetStmtType())
      hashCode = hashCode * 8191 + stmt_type.getValue();

    hashCode = hashCode * 8191 + ((isSetSqlStmt()) ? 131071 : 524287);
    if (isSetSqlStmt())
      hashCode = hashCode * 8191 + sql_stmt.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequestId()) ? 131071 : 524287);
    if (isSetRequestId())
      hashCode = hashCode * 8191 + request_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetQueryOptions()) ? 131071 : 524287);
    if (isSetQueryOptions())
      hashCode = hashCode * 8191 + query_options.hashCode();

    hashCode = hashCode * 8191 + ((isSetQueryExecRequest()) ? 131071 : 524287);
    if (isSetQueryExecRequest())
      hashCode = hashCode * 8191 + query_exec_request.hashCode();

    hashCode = hashCode * 8191 + ((isSetDdlExecRequest()) ? 131071 : 524287);
    if (isSetDdlExecRequest())
      hashCode = hashCode * 8191 + ddl_exec_request.hashCode();

    hashCode = hashCode * 8191 + ((isSetResultSetMetadata()) ? 131071 : 524287);
    if (isSetResultSetMetadata())
      hashCode = hashCode * 8191 + result_set_metadata.hashCode();

    hashCode = hashCode * 8191 + ((isSetExplainResult()) ? 131071 : 524287);
    if (isSetExplainResult())
      hashCode = hashCode * 8191 + explain_result.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TExecRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStmtType(), other.isSetStmtType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStmtType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stmt_type, other.stmt_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSqlStmt(), other.isSetSqlStmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSqlStmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql_stmt, other.sql_stmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRequestId(), other.isSetRequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_id, other.request_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryOptions(), other.isSetQueryOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_options, other.query_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryExecRequest(), other.isSetQueryExecRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryExecRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_exec_request, other.query_exec_request);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDdlExecRequest(), other.isSetDdlExecRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDdlExecRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ddl_exec_request, other.ddl_exec_request);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResultSetMetadata(), other.isSetResultSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_set_metadata, other.result_set_metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExplainResult(), other.isSetExplainResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExplainResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.explain_result, other.explain_result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TExecRequest(");
    boolean first = true;

    sb.append("stmt_type:");
    if (this.stmt_type == null) {
      sb.append("null");
    } else {
      sb.append(this.stmt_type);
    }
    first = false;
    if (isSetSqlStmt()) {
      if (!first) sb.append(", ");
      sb.append("sql_stmt:");
      if (this.sql_stmt == null) {
        sb.append("null");
      } else {
        sb.append(this.sql_stmt);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("request_id:");
    if (this.request_id == null) {
      sb.append("null");
    } else {
      sb.append(this.request_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("query_options:");
    if (this.query_options == null) {
      sb.append("null");
    } else {
      sb.append(this.query_options);
    }
    first = false;
    if (isSetQueryExecRequest()) {
      if (!first) sb.append(", ");
      sb.append("query_exec_request:");
      if (this.query_exec_request == null) {
        sb.append("null");
      } else {
        sb.append(this.query_exec_request);
      }
      first = false;
    }
    if (isSetDdlExecRequest()) {
      if (!first) sb.append(", ");
      sb.append("ddl_exec_request:");
      if (this.ddl_exec_request == null) {
        sb.append("null");
      } else {
        sb.append(this.ddl_exec_request);
      }
      first = false;
    }
    if (isSetResultSetMetadata()) {
      if (!first) sb.append(", ");
      sb.append("result_set_metadata:");
      if (this.result_set_metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.result_set_metadata);
      }
      first = false;
    }
    if (isSetExplainResult()) {
      if (!first) sb.append(", ");
      sb.append("explain_result:");
      if (this.explain_result == null) {
        sb.append("null");
      } else {
        sb.append(this.explain_result);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (stmt_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stmt_type' was not present! Struct: " + toString());
    }
    if (request_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'request_id' was not present! Struct: " + toString());
    }
    if (query_options == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'query_options' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (request_id != null) {
      request_id.validate();
    }
    if (query_options != null) {
      query_options.validate();
    }
    if (query_exec_request != null) {
      query_exec_request.validate();
    }
    if (ddl_exec_request != null) {
      ddl_exec_request.validate();
    }
    if (result_set_metadata != null) {
      result_set_metadata.validate();
    }
    if (explain_result != null) {
      explain_result.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecRequestStandardScheme getScheme() {
      return new TExecRequestStandardScheme();
    }
  }

  private static class TExecRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TExecRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STMT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stmt_type = org.apache.doris.thrift.TStmtType.findByValue(iprot.readI32());
              struct.setStmtTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SQL_STMT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql_stmt = iprot.readString();
              struct.setSqlStmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.request_id = new org.apache.doris.thrift.TUniqueId();
              struct.request_id.read(iprot);
              struct.setRequestIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUERY_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_options = new org.apache.doris.thrift.TQueryOptions();
              struct.query_options.read(iprot);
              struct.setQueryOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUERY_EXEC_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_exec_request = new TQueryExecRequest();
              struct.query_exec_request.read(iprot);
              struct.setQueryExecRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DDL_EXEC_REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ddl_exec_request = new TDdlExecRequest();
              struct.ddl_exec_request.read(iprot);
              struct.setDdlExecRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RESULT_SET_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.result_set_metadata = new TResultSetMetadata();
              struct.result_set_metadata.read(iprot);
              struct.setResultSetMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXPLAIN_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.explain_result = new TExplainResult();
              struct.explain_result.read(iprot);
              struct.setExplainResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stmt_type != null) {
        oprot.writeFieldBegin(STMT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.stmt_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.sql_stmt != null) {
        if (struct.isSetSqlStmt()) {
          oprot.writeFieldBegin(SQL_STMT_FIELD_DESC);
          oprot.writeString(struct.sql_stmt);
          oprot.writeFieldEnd();
        }
      }
      if (struct.request_id != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        struct.request_id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.query_options != null) {
        oprot.writeFieldBegin(QUERY_OPTIONS_FIELD_DESC);
        struct.query_options.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.query_exec_request != null) {
        if (struct.isSetQueryExecRequest()) {
          oprot.writeFieldBegin(QUERY_EXEC_REQUEST_FIELD_DESC);
          struct.query_exec_request.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ddl_exec_request != null) {
        if (struct.isSetDdlExecRequest()) {
          oprot.writeFieldBegin(DDL_EXEC_REQUEST_FIELD_DESC);
          struct.ddl_exec_request.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.result_set_metadata != null) {
        if (struct.isSetResultSetMetadata()) {
          oprot.writeFieldBegin(RESULT_SET_METADATA_FIELD_DESC);
          struct.result_set_metadata.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.explain_result != null) {
        if (struct.isSetExplainResult()) {
          oprot.writeFieldBegin(EXPLAIN_RESULT_FIELD_DESC);
          struct.explain_result.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExecRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecRequestTupleScheme getScheme() {
      return new TExecRequestTupleScheme();
    }
  }

  private static class TExecRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TExecRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.stmt_type.getValue());
      struct.request_id.write(oprot);
      struct.query_options.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSqlStmt()) {
        optionals.set(0);
      }
      if (struct.isSetQueryExecRequest()) {
        optionals.set(1);
      }
      if (struct.isSetDdlExecRequest()) {
        optionals.set(2);
      }
      if (struct.isSetResultSetMetadata()) {
        optionals.set(3);
      }
      if (struct.isSetExplainResult()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetSqlStmt()) {
        oprot.writeString(struct.sql_stmt);
      }
      if (struct.isSetQueryExecRequest()) {
        struct.query_exec_request.write(oprot);
      }
      if (struct.isSetDdlExecRequest()) {
        struct.ddl_exec_request.write(oprot);
      }
      if (struct.isSetResultSetMetadata()) {
        struct.result_set_metadata.write(oprot);
      }
      if (struct.isSetExplainResult()) {
        struct.explain_result.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.stmt_type = org.apache.doris.thrift.TStmtType.findByValue(iprot.readI32());
      struct.setStmtTypeIsSet(true);
      struct.request_id = new org.apache.doris.thrift.TUniqueId();
      struct.request_id.read(iprot);
      struct.setRequestIdIsSet(true);
      struct.query_options = new org.apache.doris.thrift.TQueryOptions();
      struct.query_options.read(iprot);
      struct.setQueryOptionsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.sql_stmt = iprot.readString();
        struct.setSqlStmtIsSet(true);
      }
      if (incoming.get(1)) {
        struct.query_exec_request = new TQueryExecRequest();
        struct.query_exec_request.read(iprot);
        struct.setQueryExecRequestIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ddl_exec_request = new TDdlExecRequest();
        struct.ddl_exec_request.read(iprot);
        struct.setDdlExecRequestIsSet(true);
      }
      if (incoming.get(3)) {
        struct.result_set_metadata = new TResultSetMetadata();
        struct.result_set_metadata.read(iprot);
        struct.setResultSetMetadataIsSet(true);
      }
      if (incoming.get(4)) {
        struct.explain_result = new TExplainResult();
        struct.explain_result.read(iprot);
        struct.setExplainResultIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

