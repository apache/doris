/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-05-18")
public class TRepeatNode implements org.apache.thrift.TBase<TRepeatNode, TRepeatNode._Fields>, java.io.Serializable, Cloneable, Comparable<TRepeatNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRepeatNode");

  private static final org.apache.thrift.protocol.TField OUTPUT_TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("output_tuple_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SLOT_ID_SET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("slot_id_set_list", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField REPEAT_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("repeat_id_list", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField GROUPING_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("grouping_list", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField ALL_SLOT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("all_slot_ids", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("exprs", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRepeatNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRepeatNodeTupleSchemeFactory();

  public int output_tuple_id; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.Set<java.lang.Integer>> slot_id_set_list; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> repeat_id_list; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Long>> grouping_list; // required
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> all_slot_ids; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TExpr> exprs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OUTPUT_TUPLE_ID((short)1, "output_tuple_id"),
    SLOT_ID_SET_LIST((short)2, "slot_id_set_list"),
    REPEAT_ID_LIST((short)3, "repeat_id_list"),
    GROUPING_LIST((short)4, "grouping_list"),
    ALL_SLOT_IDS((short)5, "all_slot_ids"),
    EXPRS((short)6, "exprs");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OUTPUT_TUPLE_ID
          return OUTPUT_TUPLE_ID;
        case 2: // SLOT_ID_SET_LIST
          return SLOT_ID_SET_LIST;
        case 3: // REPEAT_ID_LIST
          return REPEAT_ID_LIST;
        case 4: // GROUPING_LIST
          return GROUPING_LIST;
        case 5: // ALL_SLOT_IDS
          return ALL_SLOT_IDS;
        case 6: // EXPRS
          return EXPRS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OUTPUT_TUPLE_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OUTPUT_TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("output_tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.SLOT_ID_SET_LIST, new org.apache.thrift.meta_data.FieldMetaData("slot_id_set_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32                , "TSlotId")))));
    tmpMap.put(_Fields.REPEAT_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("repeat_id_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.GROUPING_LIST, new org.apache.thrift.meta_data.FieldMetaData("grouping_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.ALL_SLOT_IDS, new org.apache.thrift.meta_data.FieldMetaData("all_slot_ids", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"))));
    tmpMap.put(_Fields.EXPRS, new org.apache.thrift.meta_data.FieldMetaData("exprs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TExpr.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRepeatNode.class, metaDataMap);
  }

  public TRepeatNode() {
  }

  public TRepeatNode(
    int output_tuple_id,
    java.util.List<java.util.Set<java.lang.Integer>> slot_id_set_list,
    java.util.List<java.lang.Long> repeat_id_list,
    java.util.List<java.util.List<java.lang.Long>> grouping_list,
    java.util.Set<java.lang.Integer> all_slot_ids,
    java.util.List<org.apache.doris.thrift.TExpr> exprs)
  {
    this();
    this.output_tuple_id = output_tuple_id;
    setOutputTupleIdIsSet(true);
    this.slot_id_set_list = slot_id_set_list;
    this.repeat_id_list = repeat_id_list;
    this.grouping_list = grouping_list;
    this.all_slot_ids = all_slot_ids;
    this.exprs = exprs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRepeatNode(TRepeatNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.output_tuple_id = other.output_tuple_id;
    if (other.isSetSlotIdSetList()) {
      java.util.List<java.util.Set<java.lang.Integer>> __this__slot_id_set_list = new java.util.ArrayList<java.util.Set<java.lang.Integer>>(other.slot_id_set_list.size());
      for (java.util.Set<java.lang.Integer> other_element : other.slot_id_set_list) {
        java.util.Set<java.lang.Integer> __this__slot_id_set_list_copy = new java.util.HashSet<java.lang.Integer>(other_element.size());
        for (java.lang.Integer other_element_element : other_element) {
          __this__slot_id_set_list_copy.add(other_element_element);
        }
        __this__slot_id_set_list.add(__this__slot_id_set_list_copy);
      }
      this.slot_id_set_list = __this__slot_id_set_list;
    }
    if (other.isSetRepeatIdList()) {
      java.util.List<java.lang.Long> __this__repeat_id_list = new java.util.ArrayList<java.lang.Long>(other.repeat_id_list);
      this.repeat_id_list = __this__repeat_id_list;
    }
    if (other.isSetGroupingList()) {
      java.util.List<java.util.List<java.lang.Long>> __this__grouping_list = new java.util.ArrayList<java.util.List<java.lang.Long>>(other.grouping_list.size());
      for (java.util.List<java.lang.Long> other_element : other.grouping_list) {
        java.util.List<java.lang.Long> __this__grouping_list_copy = new java.util.ArrayList<java.lang.Long>(other_element);
        __this__grouping_list.add(__this__grouping_list_copy);
      }
      this.grouping_list = __this__grouping_list;
    }
    if (other.isSetAllSlotIds()) {
      java.util.Set<java.lang.Integer> __this__all_slot_ids = new java.util.HashSet<java.lang.Integer>(other.all_slot_ids.size());
      for (java.lang.Integer other_element : other.all_slot_ids) {
        __this__all_slot_ids.add(other_element);
      }
      this.all_slot_ids = __this__all_slot_ids;
    }
    if (other.isSetExprs()) {
      java.util.List<org.apache.doris.thrift.TExpr> __this__exprs = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(other.exprs.size());
      for (org.apache.doris.thrift.TExpr other_element : other.exprs) {
        __this__exprs.add(new org.apache.doris.thrift.TExpr(other_element));
      }
      this.exprs = __this__exprs;
    }
  }

  @Override
  public TRepeatNode deepCopy() {
    return new TRepeatNode(this);
  }

  @Override
  public void clear() {
    setOutputTupleIdIsSet(false);
    this.output_tuple_id = 0;
    this.slot_id_set_list = null;
    this.repeat_id_list = null;
    this.grouping_list = null;
    this.all_slot_ids = null;
    this.exprs = null;
  }

  public int getOutputTupleId() {
    return this.output_tuple_id;
  }

  public TRepeatNode setOutputTupleId(int output_tuple_id) {
    this.output_tuple_id = output_tuple_id;
    setOutputTupleIdIsSet(true);
    return this;
  }

  public void unsetOutputTupleId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field output_tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputTupleId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID);
  }

  public void setOutputTupleIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTPUT_TUPLE_ID_ISSET_ID, value);
  }

  public int getSlotIdSetListSize() {
    return (this.slot_id_set_list == null) ? 0 : this.slot_id_set_list.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.Set<java.lang.Integer>> getSlotIdSetListIterator() {
    return (this.slot_id_set_list == null) ? null : this.slot_id_set_list.iterator();
  }

  public void addToSlotIdSetList(java.util.Set<java.lang.Integer> elem) {
    if (this.slot_id_set_list == null) {
      this.slot_id_set_list = new java.util.ArrayList<java.util.Set<java.lang.Integer>>();
    }
    this.slot_id_set_list.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.Set<java.lang.Integer>> getSlotIdSetList() {
    return this.slot_id_set_list;
  }

  public TRepeatNode setSlotIdSetList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.Set<java.lang.Integer>> slot_id_set_list) {
    this.slot_id_set_list = slot_id_set_list;
    return this;
  }

  public void unsetSlotIdSetList() {
    this.slot_id_set_list = null;
  }

  /** Returns true if field slot_id_set_list is set (has been assigned a value) and false otherwise */
  public boolean isSetSlotIdSetList() {
    return this.slot_id_set_list != null;
  }

  public void setSlotIdSetListIsSet(boolean value) {
    if (!value) {
      this.slot_id_set_list = null;
    }
  }

  public int getRepeatIdListSize() {
    return (this.repeat_id_list == null) ? 0 : this.repeat_id_list.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getRepeatIdListIterator() {
    return (this.repeat_id_list == null) ? null : this.repeat_id_list.iterator();
  }

  public void addToRepeatIdList(long elem) {
    if (this.repeat_id_list == null) {
      this.repeat_id_list = new java.util.ArrayList<java.lang.Long>();
    }
    this.repeat_id_list.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getRepeatIdList() {
    return this.repeat_id_list;
  }

  public TRepeatNode setRepeatIdList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> repeat_id_list) {
    this.repeat_id_list = repeat_id_list;
    return this;
  }

  public void unsetRepeatIdList() {
    this.repeat_id_list = null;
  }

  /** Returns true if field repeat_id_list is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeatIdList() {
    return this.repeat_id_list != null;
  }

  public void setRepeatIdListIsSet(boolean value) {
    if (!value) {
      this.repeat_id_list = null;
    }
  }

  public int getGroupingListSize() {
    return (this.grouping_list == null) ? 0 : this.grouping_list.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.Long>> getGroupingListIterator() {
    return (this.grouping_list == null) ? null : this.grouping_list.iterator();
  }

  public void addToGroupingList(java.util.List<java.lang.Long> elem) {
    if (this.grouping_list == null) {
      this.grouping_list = new java.util.ArrayList<java.util.List<java.lang.Long>>();
    }
    this.grouping_list.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.Long>> getGroupingList() {
    return this.grouping_list;
  }

  public TRepeatNode setGroupingList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Long>> grouping_list) {
    this.grouping_list = grouping_list;
    return this;
  }

  public void unsetGroupingList() {
    this.grouping_list = null;
  }

  /** Returns true if field grouping_list is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupingList() {
    return this.grouping_list != null;
  }

  public void setGroupingListIsSet(boolean value) {
    if (!value) {
      this.grouping_list = null;
    }
  }

  public int getAllSlotIdsSize() {
    return (this.all_slot_ids == null) ? 0 : this.all_slot_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getAllSlotIdsIterator() {
    return (this.all_slot_ids == null) ? null : this.all_slot_ids.iterator();
  }

  public void addToAllSlotIds(int elem) {
    if (this.all_slot_ids == null) {
      this.all_slot_ids = new java.util.HashSet<java.lang.Integer>();
    }
    this.all_slot_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.Integer> getAllSlotIds() {
    return this.all_slot_ids;
  }

  public TRepeatNode setAllSlotIds(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> all_slot_ids) {
    this.all_slot_ids = all_slot_ids;
    return this;
  }

  public void unsetAllSlotIds() {
    this.all_slot_ids = null;
  }

  /** Returns true if field all_slot_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetAllSlotIds() {
    return this.all_slot_ids != null;
  }

  public void setAllSlotIdsIsSet(boolean value) {
    if (!value) {
      this.all_slot_ids = null;
    }
  }

  public int getExprsSize() {
    return (this.exprs == null) ? 0 : this.exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TExpr> getExprsIterator() {
    return (this.exprs == null) ? null : this.exprs.iterator();
  }

  public void addToExprs(org.apache.doris.thrift.TExpr elem) {
    if (this.exprs == null) {
      this.exprs = new java.util.ArrayList<org.apache.doris.thrift.TExpr>();
    }
    this.exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TExpr> getExprs() {
    return this.exprs;
  }

  public TRepeatNode setExprs(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TExpr> exprs) {
    this.exprs = exprs;
    return this;
  }

  public void unsetExprs() {
    this.exprs = null;
  }

  /** Returns true if field exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetExprs() {
    return this.exprs != null;
  }

  public void setExprsIsSet(boolean value) {
    if (!value) {
      this.exprs = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case OUTPUT_TUPLE_ID:
      if (value == null) {
        unsetOutputTupleId();
      } else {
        setOutputTupleId((java.lang.Integer)value);
      }
      break;

    case SLOT_ID_SET_LIST:
      if (value == null) {
        unsetSlotIdSetList();
      } else {
        setSlotIdSetList((java.util.List<java.util.Set<java.lang.Integer>>)value);
      }
      break;

    case REPEAT_ID_LIST:
      if (value == null) {
        unsetRepeatIdList();
      } else {
        setRepeatIdList((java.util.List<java.lang.Long>)value);
      }
      break;

    case GROUPING_LIST:
      if (value == null) {
        unsetGroupingList();
      } else {
        setGroupingList((java.util.List<java.util.List<java.lang.Long>>)value);
      }
      break;

    case ALL_SLOT_IDS:
      if (value == null) {
        unsetAllSlotIds();
      } else {
        setAllSlotIds((java.util.Set<java.lang.Integer>)value);
      }
      break;

    case EXPRS:
      if (value == null) {
        unsetExprs();
      } else {
        setExprs((java.util.List<org.apache.doris.thrift.TExpr>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OUTPUT_TUPLE_ID:
      return getOutputTupleId();

    case SLOT_ID_SET_LIST:
      return getSlotIdSetList();

    case REPEAT_ID_LIST:
      return getRepeatIdList();

    case GROUPING_LIST:
      return getGroupingList();

    case ALL_SLOT_IDS:
      return getAllSlotIds();

    case EXPRS:
      return getExprs();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OUTPUT_TUPLE_ID:
      return isSetOutputTupleId();
    case SLOT_ID_SET_LIST:
      return isSetSlotIdSetList();
    case REPEAT_ID_LIST:
      return isSetRepeatIdList();
    case GROUPING_LIST:
      return isSetGroupingList();
    case ALL_SLOT_IDS:
      return isSetAllSlotIds();
    case EXPRS:
      return isSetExprs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TRepeatNode)
      return this.equals((TRepeatNode)that);
    return false;
  }

  public boolean equals(TRepeatNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_output_tuple_id = true;
    boolean that_present_output_tuple_id = true;
    if (this_present_output_tuple_id || that_present_output_tuple_id) {
      if (!(this_present_output_tuple_id && that_present_output_tuple_id))
        return false;
      if (this.output_tuple_id != that.output_tuple_id)
        return false;
    }

    boolean this_present_slot_id_set_list = true && this.isSetSlotIdSetList();
    boolean that_present_slot_id_set_list = true && that.isSetSlotIdSetList();
    if (this_present_slot_id_set_list || that_present_slot_id_set_list) {
      if (!(this_present_slot_id_set_list && that_present_slot_id_set_list))
        return false;
      if (!this.slot_id_set_list.equals(that.slot_id_set_list))
        return false;
    }

    boolean this_present_repeat_id_list = true && this.isSetRepeatIdList();
    boolean that_present_repeat_id_list = true && that.isSetRepeatIdList();
    if (this_present_repeat_id_list || that_present_repeat_id_list) {
      if (!(this_present_repeat_id_list && that_present_repeat_id_list))
        return false;
      if (!this.repeat_id_list.equals(that.repeat_id_list))
        return false;
    }

    boolean this_present_grouping_list = true && this.isSetGroupingList();
    boolean that_present_grouping_list = true && that.isSetGroupingList();
    if (this_present_grouping_list || that_present_grouping_list) {
      if (!(this_present_grouping_list && that_present_grouping_list))
        return false;
      if (!this.grouping_list.equals(that.grouping_list))
        return false;
    }

    boolean this_present_all_slot_ids = true && this.isSetAllSlotIds();
    boolean that_present_all_slot_ids = true && that.isSetAllSlotIds();
    if (this_present_all_slot_ids || that_present_all_slot_ids) {
      if (!(this_present_all_slot_ids && that_present_all_slot_ids))
        return false;
      if (!this.all_slot_ids.equals(that.all_slot_ids))
        return false;
    }

    boolean this_present_exprs = true && this.isSetExprs();
    boolean that_present_exprs = true && that.isSetExprs();
    if (this_present_exprs || that_present_exprs) {
      if (!(this_present_exprs && that_present_exprs))
        return false;
      if (!this.exprs.equals(that.exprs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + output_tuple_id;

    hashCode = hashCode * 8191 + ((isSetSlotIdSetList()) ? 131071 : 524287);
    if (isSetSlotIdSetList())
      hashCode = hashCode * 8191 + slot_id_set_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetRepeatIdList()) ? 131071 : 524287);
    if (isSetRepeatIdList())
      hashCode = hashCode * 8191 + repeat_id_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetGroupingList()) ? 131071 : 524287);
    if (isSetGroupingList())
      hashCode = hashCode * 8191 + grouping_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetAllSlotIds()) ? 131071 : 524287);
    if (isSetAllSlotIds())
      hashCode = hashCode * 8191 + all_slot_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetExprs()) ? 131071 : 524287);
    if (isSetExprs())
      hashCode = hashCode * 8191 + exprs.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TRepeatNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetOutputTupleId(), other.isSetOutputTupleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputTupleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_tuple_id, other.output_tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSlotIdSetList(), other.isSetSlotIdSetList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlotIdSetList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slot_id_set_list, other.slot_id_set_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRepeatIdList(), other.isSetRepeatIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeatIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeat_id_list, other.repeat_id_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGroupingList(), other.isSetGroupingList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupingList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grouping_list, other.grouping_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAllSlotIds(), other.isSetAllSlotIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllSlotIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_slot_ids, other.all_slot_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExprs(), other.isSetExprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exprs, other.exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRepeatNode(");
    boolean first = true;

    sb.append("output_tuple_id:");
    sb.append(this.output_tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("slot_id_set_list:");
    if (this.slot_id_set_list == null) {
      sb.append("null");
    } else {
      sb.append(this.slot_id_set_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repeat_id_list:");
    if (this.repeat_id_list == null) {
      sb.append("null");
    } else {
      sb.append(this.repeat_id_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("grouping_list:");
    if (this.grouping_list == null) {
      sb.append("null");
    } else {
      sb.append(this.grouping_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("all_slot_ids:");
    if (this.all_slot_ids == null) {
      sb.append("null");
    } else {
      sb.append(this.all_slot_ids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exprs:");
    if (this.exprs == null) {
      sb.append("null");
    } else {
      sb.append(this.exprs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'output_tuple_id' because it's a primitive and you chose the non-beans generator.
    if (slot_id_set_list == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'slot_id_set_list' was not present! Struct: " + toString());
    }
    if (repeat_id_list == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'repeat_id_list' was not present! Struct: " + toString());
    }
    if (grouping_list == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'grouping_list' was not present! Struct: " + toString());
    }
    if (all_slot_ids == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'all_slot_ids' was not present! Struct: " + toString());
    }
    if (exprs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'exprs' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRepeatNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRepeatNodeStandardScheme getScheme() {
      return new TRepeatNodeStandardScheme();
    }
  }

  private static class TRepeatNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRepeatNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TRepeatNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OUTPUT_TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.output_tuple_id = iprot.readI32();
              struct.setOutputTupleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLOT_ID_SET_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list538 = iprot.readListBegin();
                struct.slot_id_set_list = new java.util.ArrayList<java.util.Set<java.lang.Integer>>(_list538.size);
                @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> _elem539;
                for (int _i540 = 0; _i540 < _list538.size; ++_i540)
                {
                  {
                    org.apache.thrift.protocol.TSet _set541 = iprot.readSetBegin();
                    _elem539 = new java.util.HashSet<java.lang.Integer>(2*_set541.size);
                    int _elem542;
                    for (int _i543 = 0; _i543 < _set541.size; ++_i543)
                    {
                      _elem542 = iprot.readI32();
                      _elem539.add(_elem542);
                    }
                    iprot.readSetEnd();
                  }
                  struct.slot_id_set_list.add(_elem539);
                }
                iprot.readListEnd();
              }
              struct.setSlotIdSetListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPEAT_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list544 = iprot.readListBegin();
                struct.repeat_id_list = new java.util.ArrayList<java.lang.Long>(_list544.size);
                long _elem545;
                for (int _i546 = 0; _i546 < _list544.size; ++_i546)
                {
                  _elem545 = iprot.readI64();
                  struct.repeat_id_list.add(_elem545);
                }
                iprot.readListEnd();
              }
              struct.setRepeatIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GROUPING_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list547 = iprot.readListBegin();
                struct.grouping_list = new java.util.ArrayList<java.util.List<java.lang.Long>>(_list547.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> _elem548;
                for (int _i549 = 0; _i549 < _list547.size; ++_i549)
                {
                  {
                    org.apache.thrift.protocol.TList _list550 = iprot.readListBegin();
                    _elem548 = new java.util.ArrayList<java.lang.Long>(_list550.size);
                    long _elem551;
                    for (int _i552 = 0; _i552 < _list550.size; ++_i552)
                    {
                      _elem551 = iprot.readI64();
                      _elem548.add(_elem551);
                    }
                    iprot.readListEnd();
                  }
                  struct.grouping_list.add(_elem548);
                }
                iprot.readListEnd();
              }
              struct.setGroupingListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALL_SLOT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set553 = iprot.readSetBegin();
                struct.all_slot_ids = new java.util.HashSet<java.lang.Integer>(2*_set553.size);
                int _elem554;
                for (int _i555 = 0; _i555 < _set553.size; ++_i555)
                {
                  _elem554 = iprot.readI32();
                  struct.all_slot_ids.add(_elem554);
                }
                iprot.readSetEnd();
              }
              struct.setAllSlotIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list556 = iprot.readListBegin();
                struct.exprs = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(_list556.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _elem557;
                for (int _i558 = 0; _i558 < _list556.size; ++_i558)
                {
                  _elem557 = new org.apache.doris.thrift.TExpr();
                  _elem557.read(iprot);
                  struct.exprs.add(_elem557);
                }
                iprot.readListEnd();
              }
              struct.setExprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOutputTupleId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'output_tuple_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TRepeatNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OUTPUT_TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.output_tuple_id);
      oprot.writeFieldEnd();
      if (struct.slot_id_set_list != null) {
        oprot.writeFieldBegin(SLOT_ID_SET_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.SET, struct.slot_id_set_list.size()));
          for (java.util.Set<java.lang.Integer> _iter559 : struct.slot_id_set_list)
          {
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, _iter559.size()));
              for (int _iter560 : _iter559)
              {
                oprot.writeI32(_iter560);
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.repeat_id_list != null) {
        oprot.writeFieldBegin(REPEAT_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.repeat_id_list.size()));
          for (long _iter561 : struct.repeat_id_list)
          {
            oprot.writeI64(_iter561);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.grouping_list != null) {
        oprot.writeFieldBegin(GROUPING_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.grouping_list.size()));
          for (java.util.List<java.lang.Long> _iter562 : struct.grouping_list)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, _iter562.size()));
              for (long _iter563 : _iter562)
              {
                oprot.writeI64(_iter563);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.all_slot_ids != null) {
        oprot.writeFieldBegin(ALL_SLOT_IDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.all_slot_ids.size()));
          for (int _iter564 : struct.all_slot_ids)
          {
            oprot.writeI32(_iter564);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.exprs != null) {
        oprot.writeFieldBegin(EXPRS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.exprs.size()));
          for (org.apache.doris.thrift.TExpr _iter565 : struct.exprs)
          {
            _iter565.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRepeatNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRepeatNodeTupleScheme getScheme() {
      return new TRepeatNodeTupleScheme();
    }
  }

  private static class TRepeatNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRepeatNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRepeatNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.output_tuple_id);
      {
        oprot.writeI32(struct.slot_id_set_list.size());
        for (java.util.Set<java.lang.Integer> _iter566 : struct.slot_id_set_list)
        {
          {
            oprot.writeI32(_iter566.size());
            for (int _iter567 : _iter566)
            {
              oprot.writeI32(_iter567);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.repeat_id_list.size());
        for (long _iter568 : struct.repeat_id_list)
        {
          oprot.writeI64(_iter568);
        }
      }
      {
        oprot.writeI32(struct.grouping_list.size());
        for (java.util.List<java.lang.Long> _iter569 : struct.grouping_list)
        {
          {
            oprot.writeI32(_iter569.size());
            for (long _iter570 : _iter569)
            {
              oprot.writeI64(_iter570);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.all_slot_ids.size());
        for (int _iter571 : struct.all_slot_ids)
        {
          oprot.writeI32(_iter571);
        }
      }
      {
        oprot.writeI32(struct.exprs.size());
        for (org.apache.doris.thrift.TExpr _iter572 : struct.exprs)
        {
          _iter572.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRepeatNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.output_tuple_id = iprot.readI32();
      struct.setOutputTupleIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list573 = iprot.readListBegin(org.apache.thrift.protocol.TType.SET);
        struct.slot_id_set_list = new java.util.ArrayList<java.util.Set<java.lang.Integer>>(_list573.size);
        @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> _elem574;
        for (int _i575 = 0; _i575 < _list573.size; ++_i575)
        {
          {
            org.apache.thrift.protocol.TSet _set576 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I32);
            _elem574 = new java.util.HashSet<java.lang.Integer>(2*_set576.size);
            int _elem577;
            for (int _i578 = 0; _i578 < _set576.size; ++_i578)
            {
              _elem577 = iprot.readI32();
              _elem574.add(_elem577);
            }
          }
          struct.slot_id_set_list.add(_elem574);
        }
      }
      struct.setSlotIdSetListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list579 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
        struct.repeat_id_list = new java.util.ArrayList<java.lang.Long>(_list579.size);
        long _elem580;
        for (int _i581 = 0; _i581 < _list579.size; ++_i581)
        {
          _elem580 = iprot.readI64();
          struct.repeat_id_list.add(_elem580);
        }
      }
      struct.setRepeatIdListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list582 = iprot.readListBegin(org.apache.thrift.protocol.TType.LIST);
        struct.grouping_list = new java.util.ArrayList<java.util.List<java.lang.Long>>(_list582.size);
        @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> _elem583;
        for (int _i584 = 0; _i584 < _list582.size; ++_i584)
        {
          {
            org.apache.thrift.protocol.TList _list585 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
            _elem583 = new java.util.ArrayList<java.lang.Long>(_list585.size);
            long _elem586;
            for (int _i587 = 0; _i587 < _list585.size; ++_i587)
            {
              _elem586 = iprot.readI64();
              _elem583.add(_elem586);
            }
          }
          struct.grouping_list.add(_elem583);
        }
      }
      struct.setGroupingListIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set588 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I32);
        struct.all_slot_ids = new java.util.HashSet<java.lang.Integer>(2*_set588.size);
        int _elem589;
        for (int _i590 = 0; _i590 < _set588.size; ++_i590)
        {
          _elem589 = iprot.readI32();
          struct.all_slot_ids.add(_elem589);
        }
      }
      struct.setAllSlotIdsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list591 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
        struct.exprs = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(_list591.size);
        @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _elem592;
        for (int _i593 = 0; _i593 < _list591.size; ++_i593)
        {
          _elem592 = new org.apache.doris.thrift.TExpr();
          _elem592.read(iprot);
          struct.exprs.add(_elem592);
        }
      }
      struct.setExprsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

