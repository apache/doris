/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-07-19")
public class TS3StorageParam implements org.apache.thrift.TBase<TS3StorageParam, TS3StorageParam._Fields>, java.io.Serializable, Cloneable, Comparable<TS3StorageParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TS3StorageParam");

  private static final org.apache.thrift.protocol.TField ENDPOINT_FIELD_DESC = new org.apache.thrift.protocol.TField("endpoint", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AK_FIELD_DESC = new org.apache.thrift.protocol.TField("ak", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SK_FIELD_DESC = new org.apache.thrift.protocol.TField("sk", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MAX_CONN_FIELD_DESC = new org.apache.thrift.protocol.TField("max_conn", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField REQUEST_TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("request_timeout_ms", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CONN_TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("conn_timeout_ms", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ROOT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("root_path", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BUCKET_FIELD_DESC = new org.apache.thrift.protocol.TField("bucket", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TS3StorageParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TS3StorageParamTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String endpoint; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String region; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String ak; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sk; // optional
  public int max_conn; // optional
  public int request_timeout_ms; // optional
  public int conn_timeout_ms; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String root_path; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String bucket; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ENDPOINT((short)1, "endpoint"),
    REGION((short)2, "region"),
    AK((short)3, "ak"),
    SK((short)4, "sk"),
    MAX_CONN((short)5, "max_conn"),
    REQUEST_TIMEOUT_MS((short)6, "request_timeout_ms"),
    CONN_TIMEOUT_MS((short)7, "conn_timeout_ms"),
    ROOT_PATH((short)8, "root_path"),
    BUCKET((short)9, "bucket");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENDPOINT
          return ENDPOINT;
        case 2: // REGION
          return REGION;
        case 3: // AK
          return AK;
        case 4: // SK
          return SK;
        case 5: // MAX_CONN
          return MAX_CONN;
        case 6: // REQUEST_TIMEOUT_MS
          return REQUEST_TIMEOUT_MS;
        case 7: // CONN_TIMEOUT_MS
          return CONN_TIMEOUT_MS;
        case 8: // ROOT_PATH
          return ROOT_PATH;
        case 9: // BUCKET
          return BUCKET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAX_CONN_ISSET_ID = 0;
  private static final int __REQUEST_TIMEOUT_MS_ISSET_ID = 1;
  private static final int __CONN_TIMEOUT_MS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ENDPOINT,_Fields.REGION,_Fields.AK,_Fields.SK,_Fields.MAX_CONN,_Fields.REQUEST_TIMEOUT_MS,_Fields.CONN_TIMEOUT_MS,_Fields.ROOT_PATH,_Fields.BUCKET};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENDPOINT, new org.apache.thrift.meta_data.FieldMetaData("endpoint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AK, new org.apache.thrift.meta_data.FieldMetaData("ak", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SK, new org.apache.thrift.meta_data.FieldMetaData("sk", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_CONN, new org.apache.thrift.meta_data.FieldMetaData("max_conn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("request_timeout_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONN_TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("conn_timeout_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROOT_PATH, new org.apache.thrift.meta_data.FieldMetaData("root_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUCKET, new org.apache.thrift.meta_data.FieldMetaData("bucket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TS3StorageParam.class, metaDataMap);
  }

  public TS3StorageParam() {
    this.max_conn = 50;

    this.request_timeout_ms = 3000;

    this.conn_timeout_ms = 1000;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TS3StorageParam(TS3StorageParam other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetEndpoint()) {
      this.endpoint = other.endpoint;
    }
    if (other.isSetRegion()) {
      this.region = other.region;
    }
    if (other.isSetAk()) {
      this.ak = other.ak;
    }
    if (other.isSetSk()) {
      this.sk = other.sk;
    }
    this.max_conn = other.max_conn;
    this.request_timeout_ms = other.request_timeout_ms;
    this.conn_timeout_ms = other.conn_timeout_ms;
    if (other.isSetRootPath()) {
      this.root_path = other.root_path;
    }
    if (other.isSetBucket()) {
      this.bucket = other.bucket;
    }
  }

  @Override
  public TS3StorageParam deepCopy() {
    return new TS3StorageParam(this);
  }

  @Override
  public void clear() {
    this.endpoint = null;
    this.region = null;
    this.ak = null;
    this.sk = null;
    this.max_conn = 50;

    this.request_timeout_ms = 3000;

    this.conn_timeout_ms = 1000;

    this.root_path = null;
    this.bucket = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEndpoint() {
    return this.endpoint;
  }

  public TS3StorageParam setEndpoint(@org.apache.thrift.annotation.Nullable java.lang.String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  public void unsetEndpoint() {
    this.endpoint = null;
  }

  /** Returns true if field endpoint is set (has been assigned a value) and false otherwise */
  public boolean isSetEndpoint() {
    return this.endpoint != null;
  }

  public void setEndpointIsSet(boolean value) {
    if (!value) {
      this.endpoint = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRegion() {
    return this.region;
  }

  public TS3StorageParam setRegion(@org.apache.thrift.annotation.Nullable java.lang.String region) {
    this.region = region;
    return this;
  }

  public void unsetRegion() {
    this.region = null;
  }

  /** Returns true if field region is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion() {
    return this.region != null;
  }

  public void setRegionIsSet(boolean value) {
    if (!value) {
      this.region = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAk() {
    return this.ak;
  }

  public TS3StorageParam setAk(@org.apache.thrift.annotation.Nullable java.lang.String ak) {
    this.ak = ak;
    return this;
  }

  public void unsetAk() {
    this.ak = null;
  }

  /** Returns true if field ak is set (has been assigned a value) and false otherwise */
  public boolean isSetAk() {
    return this.ak != null;
  }

  public void setAkIsSet(boolean value) {
    if (!value) {
      this.ak = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSk() {
    return this.sk;
  }

  public TS3StorageParam setSk(@org.apache.thrift.annotation.Nullable java.lang.String sk) {
    this.sk = sk;
    return this;
  }

  public void unsetSk() {
    this.sk = null;
  }

  /** Returns true if field sk is set (has been assigned a value) and false otherwise */
  public boolean isSetSk() {
    return this.sk != null;
  }

  public void setSkIsSet(boolean value) {
    if (!value) {
      this.sk = null;
    }
  }

  public int getMaxConn() {
    return this.max_conn;
  }

  public TS3StorageParam setMaxConn(int max_conn) {
    this.max_conn = max_conn;
    setMaxConnIsSet(true);
    return this;
  }

  public void unsetMaxConn() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_CONN_ISSET_ID);
  }

  /** Returns true if field max_conn is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxConn() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_CONN_ISSET_ID);
  }

  public void setMaxConnIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_CONN_ISSET_ID, value);
  }

  public int getRequestTimeoutMs() {
    return this.request_timeout_ms;
  }

  public TS3StorageParam setRequestTimeoutMs(int request_timeout_ms) {
    this.request_timeout_ms = request_timeout_ms;
    setRequestTimeoutMsIsSet(true);
    return this;
  }

  public void unsetRequestTimeoutMs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUEST_TIMEOUT_MS_ISSET_ID);
  }

  /** Returns true if field request_timeout_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestTimeoutMs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUEST_TIMEOUT_MS_ISSET_ID);
  }

  public void setRequestTimeoutMsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUEST_TIMEOUT_MS_ISSET_ID, value);
  }

  public int getConnTimeoutMs() {
    return this.conn_timeout_ms;
  }

  public TS3StorageParam setConnTimeoutMs(int conn_timeout_ms) {
    this.conn_timeout_ms = conn_timeout_ms;
    setConnTimeoutMsIsSet(true);
    return this;
  }

  public void unsetConnTimeoutMs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONN_TIMEOUT_MS_ISSET_ID);
  }

  /** Returns true if field conn_timeout_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetConnTimeoutMs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONN_TIMEOUT_MS_ISSET_ID);
  }

  public void setConnTimeoutMsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONN_TIMEOUT_MS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRootPath() {
    return this.root_path;
  }

  public TS3StorageParam setRootPath(@org.apache.thrift.annotation.Nullable java.lang.String root_path) {
    this.root_path = root_path;
    return this;
  }

  public void unsetRootPath() {
    this.root_path = null;
  }

  /** Returns true if field root_path is set (has been assigned a value) and false otherwise */
  public boolean isSetRootPath() {
    return this.root_path != null;
  }

  public void setRootPathIsSet(boolean value) {
    if (!value) {
      this.root_path = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBucket() {
    return this.bucket;
  }

  public TS3StorageParam setBucket(@org.apache.thrift.annotation.Nullable java.lang.String bucket) {
    this.bucket = bucket;
    return this;
  }

  public void unsetBucket() {
    this.bucket = null;
  }

  /** Returns true if field bucket is set (has been assigned a value) and false otherwise */
  public boolean isSetBucket() {
    return this.bucket != null;
  }

  public void setBucketIsSet(boolean value) {
    if (!value) {
      this.bucket = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ENDPOINT:
      if (value == null) {
        unsetEndpoint();
      } else {
        setEndpoint((java.lang.String)value);
      }
      break;

    case REGION:
      if (value == null) {
        unsetRegion();
      } else {
        setRegion((java.lang.String)value);
      }
      break;

    case AK:
      if (value == null) {
        unsetAk();
      } else {
        setAk((java.lang.String)value);
      }
      break;

    case SK:
      if (value == null) {
        unsetSk();
      } else {
        setSk((java.lang.String)value);
      }
      break;

    case MAX_CONN:
      if (value == null) {
        unsetMaxConn();
      } else {
        setMaxConn((java.lang.Integer)value);
      }
      break;

    case REQUEST_TIMEOUT_MS:
      if (value == null) {
        unsetRequestTimeoutMs();
      } else {
        setRequestTimeoutMs((java.lang.Integer)value);
      }
      break;

    case CONN_TIMEOUT_MS:
      if (value == null) {
        unsetConnTimeoutMs();
      } else {
        setConnTimeoutMs((java.lang.Integer)value);
      }
      break;

    case ROOT_PATH:
      if (value == null) {
        unsetRootPath();
      } else {
        setRootPath((java.lang.String)value);
      }
      break;

    case BUCKET:
      if (value == null) {
        unsetBucket();
      } else {
        setBucket((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ENDPOINT:
      return getEndpoint();

    case REGION:
      return getRegion();

    case AK:
      return getAk();

    case SK:
      return getSk();

    case MAX_CONN:
      return getMaxConn();

    case REQUEST_TIMEOUT_MS:
      return getRequestTimeoutMs();

    case CONN_TIMEOUT_MS:
      return getConnTimeoutMs();

    case ROOT_PATH:
      return getRootPath();

    case BUCKET:
      return getBucket();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ENDPOINT:
      return isSetEndpoint();
    case REGION:
      return isSetRegion();
    case AK:
      return isSetAk();
    case SK:
      return isSetSk();
    case MAX_CONN:
      return isSetMaxConn();
    case REQUEST_TIMEOUT_MS:
      return isSetRequestTimeoutMs();
    case CONN_TIMEOUT_MS:
      return isSetConnTimeoutMs();
    case ROOT_PATH:
      return isSetRootPath();
    case BUCKET:
      return isSetBucket();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TS3StorageParam)
      return this.equals((TS3StorageParam)that);
    return false;
  }

  public boolean equals(TS3StorageParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_endpoint = true && this.isSetEndpoint();
    boolean that_present_endpoint = true && that.isSetEndpoint();
    if (this_present_endpoint || that_present_endpoint) {
      if (!(this_present_endpoint && that_present_endpoint))
        return false;
      if (!this.endpoint.equals(that.endpoint))
        return false;
    }

    boolean this_present_region = true && this.isSetRegion();
    boolean that_present_region = true && that.isSetRegion();
    if (this_present_region || that_present_region) {
      if (!(this_present_region && that_present_region))
        return false;
      if (!this.region.equals(that.region))
        return false;
    }

    boolean this_present_ak = true && this.isSetAk();
    boolean that_present_ak = true && that.isSetAk();
    if (this_present_ak || that_present_ak) {
      if (!(this_present_ak && that_present_ak))
        return false;
      if (!this.ak.equals(that.ak))
        return false;
    }

    boolean this_present_sk = true && this.isSetSk();
    boolean that_present_sk = true && that.isSetSk();
    if (this_present_sk || that_present_sk) {
      if (!(this_present_sk && that_present_sk))
        return false;
      if (!this.sk.equals(that.sk))
        return false;
    }

    boolean this_present_max_conn = true && this.isSetMaxConn();
    boolean that_present_max_conn = true && that.isSetMaxConn();
    if (this_present_max_conn || that_present_max_conn) {
      if (!(this_present_max_conn && that_present_max_conn))
        return false;
      if (this.max_conn != that.max_conn)
        return false;
    }

    boolean this_present_request_timeout_ms = true && this.isSetRequestTimeoutMs();
    boolean that_present_request_timeout_ms = true && that.isSetRequestTimeoutMs();
    if (this_present_request_timeout_ms || that_present_request_timeout_ms) {
      if (!(this_present_request_timeout_ms && that_present_request_timeout_ms))
        return false;
      if (this.request_timeout_ms != that.request_timeout_ms)
        return false;
    }

    boolean this_present_conn_timeout_ms = true && this.isSetConnTimeoutMs();
    boolean that_present_conn_timeout_ms = true && that.isSetConnTimeoutMs();
    if (this_present_conn_timeout_ms || that_present_conn_timeout_ms) {
      if (!(this_present_conn_timeout_ms && that_present_conn_timeout_ms))
        return false;
      if (this.conn_timeout_ms != that.conn_timeout_ms)
        return false;
    }

    boolean this_present_root_path = true && this.isSetRootPath();
    boolean that_present_root_path = true && that.isSetRootPath();
    if (this_present_root_path || that_present_root_path) {
      if (!(this_present_root_path && that_present_root_path))
        return false;
      if (!this.root_path.equals(that.root_path))
        return false;
    }

    boolean this_present_bucket = true && this.isSetBucket();
    boolean that_present_bucket = true && that.isSetBucket();
    if (this_present_bucket || that_present_bucket) {
      if (!(this_present_bucket && that_present_bucket))
        return false;
      if (!this.bucket.equals(that.bucket))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetEndpoint()) ? 131071 : 524287);
    if (isSetEndpoint())
      hashCode = hashCode * 8191 + endpoint.hashCode();

    hashCode = hashCode * 8191 + ((isSetRegion()) ? 131071 : 524287);
    if (isSetRegion())
      hashCode = hashCode * 8191 + region.hashCode();

    hashCode = hashCode * 8191 + ((isSetAk()) ? 131071 : 524287);
    if (isSetAk())
      hashCode = hashCode * 8191 + ak.hashCode();

    hashCode = hashCode * 8191 + ((isSetSk()) ? 131071 : 524287);
    if (isSetSk())
      hashCode = hashCode * 8191 + sk.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaxConn()) ? 131071 : 524287);
    if (isSetMaxConn())
      hashCode = hashCode * 8191 + max_conn;

    hashCode = hashCode * 8191 + ((isSetRequestTimeoutMs()) ? 131071 : 524287);
    if (isSetRequestTimeoutMs())
      hashCode = hashCode * 8191 + request_timeout_ms;

    hashCode = hashCode * 8191 + ((isSetConnTimeoutMs()) ? 131071 : 524287);
    if (isSetConnTimeoutMs())
      hashCode = hashCode * 8191 + conn_timeout_ms;

    hashCode = hashCode * 8191 + ((isSetRootPath()) ? 131071 : 524287);
    if (isSetRootPath())
      hashCode = hashCode * 8191 + root_path.hashCode();

    hashCode = hashCode * 8191 + ((isSetBucket()) ? 131071 : 524287);
    if (isSetBucket())
      hashCode = hashCode * 8191 + bucket.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TS3StorageParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetEndpoint(), other.isSetEndpoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndpoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpoint, other.endpoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRegion(), other.isSetRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, other.region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAk(), other.isSetAk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ak, other.ak);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSk(), other.isSetSk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sk, other.sk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxConn(), other.isSetMaxConn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxConn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_conn, other.max_conn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRequestTimeoutMs(), other.isSetRequestTimeoutMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestTimeoutMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_timeout_ms, other.request_timeout_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConnTimeoutMs(), other.isSetConnTimeoutMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnTimeoutMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conn_timeout_ms, other.conn_timeout_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRootPath(), other.isSetRootPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRootPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.root_path, other.root_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBucket(), other.isSetBucket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucket, other.bucket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TS3StorageParam(");
    boolean first = true;

    if (isSetEndpoint()) {
      sb.append("endpoint:");
      if (this.endpoint == null) {
        sb.append("null");
      } else {
        sb.append(this.endpoint);
      }
      first = false;
    }
    if (isSetRegion()) {
      if (!first) sb.append(", ");
      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
    }
    if (isSetAk()) {
      if (!first) sb.append(", ");
      sb.append("ak:");
      if (this.ak == null) {
        sb.append("null");
      } else {
        sb.append(this.ak);
      }
      first = false;
    }
    if (isSetSk()) {
      if (!first) sb.append(", ");
      sb.append("sk:");
      if (this.sk == null) {
        sb.append("null");
      } else {
        sb.append(this.sk);
      }
      first = false;
    }
    if (isSetMaxConn()) {
      if (!first) sb.append(", ");
      sb.append("max_conn:");
      sb.append(this.max_conn);
      first = false;
    }
    if (isSetRequestTimeoutMs()) {
      if (!first) sb.append(", ");
      sb.append("request_timeout_ms:");
      sb.append(this.request_timeout_ms);
      first = false;
    }
    if (isSetConnTimeoutMs()) {
      if (!first) sb.append(", ");
      sb.append("conn_timeout_ms:");
      sb.append(this.conn_timeout_ms);
      first = false;
    }
    if (isSetRootPath()) {
      if (!first) sb.append(", ");
      sb.append("root_path:");
      if (this.root_path == null) {
        sb.append("null");
      } else {
        sb.append(this.root_path);
      }
      first = false;
    }
    if (isSetBucket()) {
      if (!first) sb.append(", ");
      sb.append("bucket:");
      if (this.bucket == null) {
        sb.append("null");
      } else {
        sb.append(this.bucket);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TS3StorageParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TS3StorageParamStandardScheme getScheme() {
      return new TS3StorageParamStandardScheme();
    }
  }

  private static class TS3StorageParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<TS3StorageParam> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TS3StorageParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENDPOINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endpoint = iprot.readString();
              struct.setEndpointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.region = iprot.readString();
              struct.setRegionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ak = iprot.readString();
              struct.setAkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sk = iprot.readString();
              struct.setSkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAX_CONN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_conn = iprot.readI32();
              struct.setMaxConnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQUEST_TIMEOUT_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.request_timeout_ms = iprot.readI32();
              struct.setRequestTimeoutMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONN_TIMEOUT_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.conn_timeout_ms = iprot.readI32();
              struct.setConnTimeoutMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ROOT_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.root_path = iprot.readString();
              struct.setRootPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BUCKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bucket = iprot.readString();
              struct.setBucketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TS3StorageParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.endpoint != null) {
        if (struct.isSetEndpoint()) {
          oprot.writeFieldBegin(ENDPOINT_FIELD_DESC);
          oprot.writeString(struct.endpoint);
          oprot.writeFieldEnd();
        }
      }
      if (struct.region != null) {
        if (struct.isSetRegion()) {
          oprot.writeFieldBegin(REGION_FIELD_DESC);
          oprot.writeString(struct.region);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ak != null) {
        if (struct.isSetAk()) {
          oprot.writeFieldBegin(AK_FIELD_DESC);
          oprot.writeString(struct.ak);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sk != null) {
        if (struct.isSetSk()) {
          oprot.writeFieldBegin(SK_FIELD_DESC);
          oprot.writeString(struct.sk);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMaxConn()) {
        oprot.writeFieldBegin(MAX_CONN_FIELD_DESC);
        oprot.writeI32(struct.max_conn);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRequestTimeoutMs()) {
        oprot.writeFieldBegin(REQUEST_TIMEOUT_MS_FIELD_DESC);
        oprot.writeI32(struct.request_timeout_ms);
        oprot.writeFieldEnd();
      }
      if (struct.isSetConnTimeoutMs()) {
        oprot.writeFieldBegin(CONN_TIMEOUT_MS_FIELD_DESC);
        oprot.writeI32(struct.conn_timeout_ms);
        oprot.writeFieldEnd();
      }
      if (struct.root_path != null) {
        if (struct.isSetRootPath()) {
          oprot.writeFieldBegin(ROOT_PATH_FIELD_DESC);
          oprot.writeString(struct.root_path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bucket != null) {
        if (struct.isSetBucket()) {
          oprot.writeFieldBegin(BUCKET_FIELD_DESC);
          oprot.writeString(struct.bucket);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TS3StorageParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TS3StorageParamTupleScheme getScheme() {
      return new TS3StorageParamTupleScheme();
    }
  }

  private static class TS3StorageParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<TS3StorageParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TS3StorageParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEndpoint()) {
        optionals.set(0);
      }
      if (struct.isSetRegion()) {
        optionals.set(1);
      }
      if (struct.isSetAk()) {
        optionals.set(2);
      }
      if (struct.isSetSk()) {
        optionals.set(3);
      }
      if (struct.isSetMaxConn()) {
        optionals.set(4);
      }
      if (struct.isSetRequestTimeoutMs()) {
        optionals.set(5);
      }
      if (struct.isSetConnTimeoutMs()) {
        optionals.set(6);
      }
      if (struct.isSetRootPath()) {
        optionals.set(7);
      }
      if (struct.isSetBucket()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetEndpoint()) {
        oprot.writeString(struct.endpoint);
      }
      if (struct.isSetRegion()) {
        oprot.writeString(struct.region);
      }
      if (struct.isSetAk()) {
        oprot.writeString(struct.ak);
      }
      if (struct.isSetSk()) {
        oprot.writeString(struct.sk);
      }
      if (struct.isSetMaxConn()) {
        oprot.writeI32(struct.max_conn);
      }
      if (struct.isSetRequestTimeoutMs()) {
        oprot.writeI32(struct.request_timeout_ms);
      }
      if (struct.isSetConnTimeoutMs()) {
        oprot.writeI32(struct.conn_timeout_ms);
      }
      if (struct.isSetRootPath()) {
        oprot.writeString(struct.root_path);
      }
      if (struct.isSetBucket()) {
        oprot.writeString(struct.bucket);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TS3StorageParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.endpoint = iprot.readString();
        struct.setEndpointIsSet(true);
      }
      if (incoming.get(1)) {
        struct.region = iprot.readString();
        struct.setRegionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ak = iprot.readString();
        struct.setAkIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sk = iprot.readString();
        struct.setSkIsSet(true);
      }
      if (incoming.get(4)) {
        struct.max_conn = iprot.readI32();
        struct.setMaxConnIsSet(true);
      }
      if (incoming.get(5)) {
        struct.request_timeout_ms = iprot.readI32();
        struct.setRequestTimeoutMsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.conn_timeout_ms = iprot.readI32();
        struct.setConnTimeoutMsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.root_path = iprot.readString();
        struct.setRootPathIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bucket = iprot.readString();
        struct.setBucketIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

