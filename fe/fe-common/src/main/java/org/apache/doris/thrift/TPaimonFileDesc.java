/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-08-29")
public class TPaimonFileDesc implements org.apache.thrift.TBase<TPaimonFileDesc, TPaimonFileDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TPaimonFileDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPaimonFileDesc");

  private static final org.apache.thrift.protocol.TField PAIMON_SPLIT_FIELD_DESC = new org.apache.thrift.protocol.TField("paimon_split", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PAIMON_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("paimon_column_names", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PAIMON_PREDICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("paimon_predicate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PAIMON_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("paimon_options", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPaimonFileDescStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPaimonFileDescTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String paimon_split; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String paimon_column_names; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String db_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String paimon_predicate; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> paimon_options; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAIMON_SPLIT((short)1, "paimon_split"),
    PAIMON_COLUMN_NAMES((short)2, "paimon_column_names"),
    DB_NAME((short)3, "db_name"),
    TABLE_NAME((short)4, "table_name"),
    PAIMON_PREDICATE((short)5, "paimon_predicate"),
    PAIMON_OPTIONS((short)6, "paimon_options");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAIMON_SPLIT
          return PAIMON_SPLIT;
        case 2: // PAIMON_COLUMN_NAMES
          return PAIMON_COLUMN_NAMES;
        case 3: // DB_NAME
          return DB_NAME;
        case 4: // TABLE_NAME
          return TABLE_NAME;
        case 5: // PAIMON_PREDICATE
          return PAIMON_PREDICATE;
        case 6: // PAIMON_OPTIONS
          return PAIMON_OPTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PAIMON_SPLIT,_Fields.PAIMON_COLUMN_NAMES,_Fields.DB_NAME,_Fields.TABLE_NAME,_Fields.PAIMON_PREDICATE,_Fields.PAIMON_OPTIONS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAIMON_SPLIT, new org.apache.thrift.meta_data.FieldMetaData("paimon_split", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAIMON_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("paimon_column_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAIMON_PREDICATE, new org.apache.thrift.meta_data.FieldMetaData("paimon_predicate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAIMON_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("paimon_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPaimonFileDesc.class, metaDataMap);
  }

  public TPaimonFileDesc() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPaimonFileDesc(TPaimonFileDesc other) {
    if (other.isSetPaimonSplit()) {
      this.paimon_split = other.paimon_split;
    }
    if (other.isSetPaimonColumnNames()) {
      this.paimon_column_names = other.paimon_column_names;
    }
    if (other.isSetDbName()) {
      this.db_name = other.db_name;
    }
    if (other.isSetTableName()) {
      this.table_name = other.table_name;
    }
    if (other.isSetPaimonPredicate()) {
      this.paimon_predicate = other.paimon_predicate;
    }
    if (other.isSetPaimonOptions()) {
      java.util.Map<java.lang.String,java.lang.String> __this__paimon_options = new java.util.HashMap<java.lang.String,java.lang.String>(other.paimon_options);
      this.paimon_options = __this__paimon_options;
    }
  }

  @Override
  public TPaimonFileDesc deepCopy() {
    return new TPaimonFileDesc(this);
  }

  @Override
  public void clear() {
    this.paimon_split = null;
    this.paimon_column_names = null;
    this.db_name = null;
    this.table_name = null;
    this.paimon_predicate = null;
    this.paimon_options = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPaimonSplit() {
    return this.paimon_split;
  }

  public TPaimonFileDesc setPaimonSplit(@org.apache.thrift.annotation.Nullable java.lang.String paimon_split) {
    this.paimon_split = paimon_split;
    return this;
  }

  public void unsetPaimonSplit() {
    this.paimon_split = null;
  }

  /** Returns true if field paimon_split is set (has been assigned a value) and false otherwise */
  public boolean isSetPaimonSplit() {
    return this.paimon_split != null;
  }

  public void setPaimonSplitIsSet(boolean value) {
    if (!value) {
      this.paimon_split = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPaimonColumnNames() {
    return this.paimon_column_names;
  }

  public TPaimonFileDesc setPaimonColumnNames(@org.apache.thrift.annotation.Nullable java.lang.String paimon_column_names) {
    this.paimon_column_names = paimon_column_names;
    return this;
  }

  public void unsetPaimonColumnNames() {
    this.paimon_column_names = null;
  }

  /** Returns true if field paimon_column_names is set (has been assigned a value) and false otherwise */
  public boolean isSetPaimonColumnNames() {
    return this.paimon_column_names != null;
  }

  public void setPaimonColumnNamesIsSet(boolean value) {
    if (!value) {
      this.paimon_column_names = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDbName() {
    return this.db_name;
  }

  public TPaimonFileDesc setDbName(@org.apache.thrift.annotation.Nullable java.lang.String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDbName() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDbName() {
    return this.db_name != null;
  }

  public void setDbNameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTableName() {
    return this.table_name;
  }

  public TPaimonFileDesc setTableName(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTableName() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.table_name != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPaimonPredicate() {
    return this.paimon_predicate;
  }

  public TPaimonFileDesc setPaimonPredicate(@org.apache.thrift.annotation.Nullable java.lang.String paimon_predicate) {
    this.paimon_predicate = paimon_predicate;
    return this;
  }

  public void unsetPaimonPredicate() {
    this.paimon_predicate = null;
  }

  /** Returns true if field paimon_predicate is set (has been assigned a value) and false otherwise */
  public boolean isSetPaimonPredicate() {
    return this.paimon_predicate != null;
  }

  public void setPaimonPredicateIsSet(boolean value) {
    if (!value) {
      this.paimon_predicate = null;
    }
  }

  public int getPaimonOptionsSize() {
    return (this.paimon_options == null) ? 0 : this.paimon_options.size();
  }

  public void putToPaimonOptions(java.lang.String key, java.lang.String val) {
    if (this.paimon_options == null) {
      this.paimon_options = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.paimon_options.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getPaimonOptions() {
    return this.paimon_options;
  }

  public TPaimonFileDesc setPaimonOptions(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> paimon_options) {
    this.paimon_options = paimon_options;
    return this;
  }

  public void unsetPaimonOptions() {
    this.paimon_options = null;
  }

  /** Returns true if field paimon_options is set (has been assigned a value) and false otherwise */
  public boolean isSetPaimonOptions() {
    return this.paimon_options != null;
  }

  public void setPaimonOptionsIsSet(boolean value) {
    if (!value) {
      this.paimon_options = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PAIMON_SPLIT:
      if (value == null) {
        unsetPaimonSplit();
      } else {
        setPaimonSplit((java.lang.String)value);
      }
      break;

    case PAIMON_COLUMN_NAMES:
      if (value == null) {
        unsetPaimonColumnNames();
      } else {
        setPaimonColumnNames((java.lang.String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDbName();
      } else {
        setDbName((java.lang.String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((java.lang.String)value);
      }
      break;

    case PAIMON_PREDICATE:
      if (value == null) {
        unsetPaimonPredicate();
      } else {
        setPaimonPredicate((java.lang.String)value);
      }
      break;

    case PAIMON_OPTIONS:
      if (value == null) {
        unsetPaimonOptions();
      } else {
        setPaimonOptions((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PAIMON_SPLIT:
      return getPaimonSplit();

    case PAIMON_COLUMN_NAMES:
      return getPaimonColumnNames();

    case DB_NAME:
      return getDbName();

    case TABLE_NAME:
      return getTableName();

    case PAIMON_PREDICATE:
      return getPaimonPredicate();

    case PAIMON_OPTIONS:
      return getPaimonOptions();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PAIMON_SPLIT:
      return isSetPaimonSplit();
    case PAIMON_COLUMN_NAMES:
      return isSetPaimonColumnNames();
    case DB_NAME:
      return isSetDbName();
    case TABLE_NAME:
      return isSetTableName();
    case PAIMON_PREDICATE:
      return isSetPaimonPredicate();
    case PAIMON_OPTIONS:
      return isSetPaimonOptions();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TPaimonFileDesc)
      return this.equals((TPaimonFileDesc)that);
    return false;
  }

  public boolean equals(TPaimonFileDesc that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_paimon_split = true && this.isSetPaimonSplit();
    boolean that_present_paimon_split = true && that.isSetPaimonSplit();
    if (this_present_paimon_split || that_present_paimon_split) {
      if (!(this_present_paimon_split && that_present_paimon_split))
        return false;
      if (!this.paimon_split.equals(that.paimon_split))
        return false;
    }

    boolean this_present_paimon_column_names = true && this.isSetPaimonColumnNames();
    boolean that_present_paimon_column_names = true && that.isSetPaimonColumnNames();
    if (this_present_paimon_column_names || that_present_paimon_column_names) {
      if (!(this_present_paimon_column_names && that_present_paimon_column_names))
        return false;
      if (!this.paimon_column_names.equals(that.paimon_column_names))
        return false;
    }

    boolean this_present_db_name = true && this.isSetDbName();
    boolean that_present_db_name = true && that.isSetDbName();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTableName();
    boolean that_present_table_name = true && that.isSetTableName();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_paimon_predicate = true && this.isSetPaimonPredicate();
    boolean that_present_paimon_predicate = true && that.isSetPaimonPredicate();
    if (this_present_paimon_predicate || that_present_paimon_predicate) {
      if (!(this_present_paimon_predicate && that_present_paimon_predicate))
        return false;
      if (!this.paimon_predicate.equals(that.paimon_predicate))
        return false;
    }

    boolean this_present_paimon_options = true && this.isSetPaimonOptions();
    boolean that_present_paimon_options = true && that.isSetPaimonOptions();
    if (this_present_paimon_options || that_present_paimon_options) {
      if (!(this_present_paimon_options && that_present_paimon_options))
        return false;
      if (!this.paimon_options.equals(that.paimon_options))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPaimonSplit()) ? 131071 : 524287);
    if (isSetPaimonSplit())
      hashCode = hashCode * 8191 + paimon_split.hashCode();

    hashCode = hashCode * 8191 + ((isSetPaimonColumnNames()) ? 131071 : 524287);
    if (isSetPaimonColumnNames())
      hashCode = hashCode * 8191 + paimon_column_names.hashCode();

    hashCode = hashCode * 8191 + ((isSetDbName()) ? 131071 : 524287);
    if (isSetDbName())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTableName()) ? 131071 : 524287);
    if (isSetTableName())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetPaimonPredicate()) ? 131071 : 524287);
    if (isSetPaimonPredicate())
      hashCode = hashCode * 8191 + paimon_predicate.hashCode();

    hashCode = hashCode * 8191 + ((isSetPaimonOptions()) ? 131071 : 524287);
    if (isSetPaimonOptions())
      hashCode = hashCode * 8191 + paimon_options.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TPaimonFileDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetPaimonSplit(), other.isSetPaimonSplit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaimonSplit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paimon_split, other.paimon_split);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPaimonColumnNames(), other.isSetPaimonColumnNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaimonColumnNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paimon_column_names, other.paimon_column_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDbName(), other.isSetDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTableName(), other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPaimonPredicate(), other.isSetPaimonPredicate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaimonPredicate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paimon_predicate, other.paimon_predicate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPaimonOptions(), other.isSetPaimonOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaimonOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paimon_options, other.paimon_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPaimonFileDesc(");
    boolean first = true;

    if (isSetPaimonSplit()) {
      sb.append("paimon_split:");
      if (this.paimon_split == null) {
        sb.append("null");
      } else {
        sb.append(this.paimon_split);
      }
      first = false;
    }
    if (isSetPaimonColumnNames()) {
      if (!first) sb.append(", ");
      sb.append("paimon_column_names:");
      if (this.paimon_column_names == null) {
        sb.append("null");
      } else {
        sb.append(this.paimon_column_names);
      }
      first = false;
    }
    if (isSetDbName()) {
      if (!first) sb.append(", ");
      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
    }
    if (isSetTableName()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetPaimonPredicate()) {
      if (!first) sb.append(", ");
      sb.append("paimon_predicate:");
      if (this.paimon_predicate == null) {
        sb.append("null");
      } else {
        sb.append(this.paimon_predicate);
      }
      first = false;
    }
    if (isSetPaimonOptions()) {
      if (!first) sb.append(", ");
      sb.append("paimon_options:");
      if (this.paimon_options == null) {
        sb.append("null");
      } else {
        sb.append(this.paimon_options);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPaimonFileDescStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPaimonFileDescStandardScheme getScheme() {
      return new TPaimonFileDescStandardScheme();
    }
  }

  private static class TPaimonFileDescStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPaimonFileDesc> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TPaimonFileDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAIMON_SPLIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paimon_split = iprot.readString();
              struct.setPaimonSplitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAIMON_COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paimon_column_names = iprot.readString();
              struct.setPaimonColumnNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAIMON_PREDICATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paimon_predicate = iprot.readString();
              struct.setPaimonPredicateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAIMON_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map118 = iprot.readMapBegin();
                struct.paimon_options = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map118.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key119;
                @org.apache.thrift.annotation.Nullable java.lang.String _val120;
                for (int _i121 = 0; _i121 < _map118.size; ++_i121)
                {
                  _key119 = iprot.readString();
                  _val120 = iprot.readString();
                  struct.paimon_options.put(_key119, _val120);
                }
                iprot.readMapEnd();
              }
              struct.setPaimonOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TPaimonFileDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.paimon_split != null) {
        if (struct.isSetPaimonSplit()) {
          oprot.writeFieldBegin(PAIMON_SPLIT_FIELD_DESC);
          oprot.writeString(struct.paimon_split);
          oprot.writeFieldEnd();
        }
      }
      if (struct.paimon_column_names != null) {
        if (struct.isSetPaimonColumnNames()) {
          oprot.writeFieldBegin(PAIMON_COLUMN_NAMES_FIELD_DESC);
          oprot.writeString(struct.paimon_column_names);
          oprot.writeFieldEnd();
        }
      }
      if (struct.db_name != null) {
        if (struct.isSetDbName()) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.db_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTableName()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.paimon_predicate != null) {
        if (struct.isSetPaimonPredicate()) {
          oprot.writeFieldBegin(PAIMON_PREDICATE_FIELD_DESC);
          oprot.writeString(struct.paimon_predicate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.paimon_options != null) {
        if (struct.isSetPaimonOptions()) {
          oprot.writeFieldBegin(PAIMON_OPTIONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.paimon_options.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter122 : struct.paimon_options.entrySet())
            {
              oprot.writeString(_iter122.getKey());
              oprot.writeString(_iter122.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPaimonFileDescTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TPaimonFileDescTupleScheme getScheme() {
      return new TPaimonFileDescTupleScheme();
    }
  }

  private static class TPaimonFileDescTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPaimonFileDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPaimonFileDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPaimonSplit()) {
        optionals.set(0);
      }
      if (struct.isSetPaimonColumnNames()) {
        optionals.set(1);
      }
      if (struct.isSetDbName()) {
        optionals.set(2);
      }
      if (struct.isSetTableName()) {
        optionals.set(3);
      }
      if (struct.isSetPaimonPredicate()) {
        optionals.set(4);
      }
      if (struct.isSetPaimonOptions()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetPaimonSplit()) {
        oprot.writeString(struct.paimon_split);
      }
      if (struct.isSetPaimonColumnNames()) {
        oprot.writeString(struct.paimon_column_names);
      }
      if (struct.isSetDbName()) {
        oprot.writeString(struct.db_name);
      }
      if (struct.isSetTableName()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetPaimonPredicate()) {
        oprot.writeString(struct.paimon_predicate);
      }
      if (struct.isSetPaimonOptions()) {
        {
          oprot.writeI32(struct.paimon_options.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter123 : struct.paimon_options.entrySet())
          {
            oprot.writeString(_iter123.getKey());
            oprot.writeString(_iter123.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPaimonFileDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.paimon_split = iprot.readString();
        struct.setPaimonSplitIsSet(true);
      }
      if (incoming.get(1)) {
        struct.paimon_column_names = iprot.readString();
        struct.setPaimonColumnNamesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.db_name = iprot.readString();
        struct.setDbNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.table_name = iprot.readString();
        struct.setTableNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.paimon_predicate = iprot.readString();
        struct.setPaimonPredicateIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map124 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.paimon_options = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map124.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key125;
          @org.apache.thrift.annotation.Nullable java.lang.String _val126;
          for (int _i127 = 0; _i127 < _map124.size; ++_i127)
          {
            _key125 = iprot.readString();
            _val126 = iprot.readString();
            struct.paimon_options.put(_key125, _val126);
          }
        }
        struct.setPaimonOptionsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

