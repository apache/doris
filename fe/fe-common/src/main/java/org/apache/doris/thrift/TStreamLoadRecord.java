/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-08-29")
public class TStreamLoadRecord implements org.apache.thrift.TBase<TStreamLoadRecord, TStreamLoadRecord._Fields>, java.io.Serializable, Cloneable, Comparable<TStreamLoadRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStreamLoadRecord");

  private static final org.apache.thrift.protocol.TField CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("passwd", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("tbl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ip", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("label", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField AUTH_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("auth_code", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField TOTAL_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("total_rows", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField LOADED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("loaded_rows", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField FILTERED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("filtered_rows", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField UNSELECTED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("unselected_rows", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField LOAD_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("load_bytes", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("start_time", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("finish_time", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TStreamLoadRecordStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TStreamLoadRecordTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String cluster; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String user; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String passwd; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String db; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String tbl; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String user_ip; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String label; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String status; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String message; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String url; // optional
  public long auth_code; // optional
  public long total_rows; // required
  public long loaded_rows; // required
  public long filtered_rows; // required
  public long unselected_rows; // required
  public long load_bytes; // required
  public long start_time; // required
  public long finish_time; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String comment; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLUSTER((short)1, "cluster"),
    USER((short)2, "user"),
    PASSWD((short)3, "passwd"),
    DB((short)4, "db"),
    TBL((short)5, "tbl"),
    USER_IP((short)6, "user_ip"),
    LABEL((short)7, "label"),
    STATUS((short)8, "status"),
    MESSAGE((short)9, "message"),
    URL((short)10, "url"),
    AUTH_CODE((short)11, "auth_code"),
    TOTAL_ROWS((short)12, "total_rows"),
    LOADED_ROWS((short)13, "loaded_rows"),
    FILTERED_ROWS((short)14, "filtered_rows"),
    UNSELECTED_ROWS((short)15, "unselected_rows"),
    LOAD_BYTES((short)16, "load_bytes"),
    START_TIME((short)17, "start_time"),
    FINISH_TIME((short)18, "finish_time"),
    COMMENT((short)19, "comment");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLUSTER
          return CLUSTER;
        case 2: // USER
          return USER;
        case 3: // PASSWD
          return PASSWD;
        case 4: // DB
          return DB;
        case 5: // TBL
          return TBL;
        case 6: // USER_IP
          return USER_IP;
        case 7: // LABEL
          return LABEL;
        case 8: // STATUS
          return STATUS;
        case 9: // MESSAGE
          return MESSAGE;
        case 10: // URL
          return URL;
        case 11: // AUTH_CODE
          return AUTH_CODE;
        case 12: // TOTAL_ROWS
          return TOTAL_ROWS;
        case 13: // LOADED_ROWS
          return LOADED_ROWS;
        case 14: // FILTERED_ROWS
          return FILTERED_ROWS;
        case 15: // UNSELECTED_ROWS
          return UNSELECTED_ROWS;
        case 16: // LOAD_BYTES
          return LOAD_BYTES;
        case 17: // START_TIME
          return START_TIME;
        case 18: // FINISH_TIME
          return FINISH_TIME;
        case 19: // COMMENT
          return COMMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AUTH_CODE_ISSET_ID = 0;
  private static final int __TOTAL_ROWS_ISSET_ID = 1;
  private static final int __LOADED_ROWS_ISSET_ID = 2;
  private static final int __FILTERED_ROWS_ISSET_ID = 3;
  private static final int __UNSELECTED_ROWS_ISSET_ID = 4;
  private static final int __LOAD_BYTES_ISSET_ID = 5;
  private static final int __START_TIME_ISSET_ID = 6;
  private static final int __FINISH_TIME_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CLUSTER,_Fields.USER_IP,_Fields.URL,_Fields.AUTH_CODE,_Fields.COMMENT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("cluster", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWD, new org.apache.thrift.meta_data.FieldMetaData("passwd", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TBL, new org.apache.thrift.meta_data.FieldMetaData("tbl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IP, new org.apache.thrift.meta_data.FieldMetaData("user_ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LABEL, new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTH_CODE, new org.apache.thrift.meta_data.FieldMetaData("auth_code", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_ROWS, new org.apache.thrift.meta_data.FieldMetaData("total_rows", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOADED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("loaded_rows", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILTERED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("filtered_rows", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UNSELECTED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("unselected_rows", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOAD_BYTES, new org.apache.thrift.meta_data.FieldMetaData("load_bytes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("start_time", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FINISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("finish_time", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStreamLoadRecord.class, metaDataMap);
  }

  public TStreamLoadRecord() {
  }

  public TStreamLoadRecord(
    java.lang.String user,
    java.lang.String passwd,
    java.lang.String db,
    java.lang.String tbl,
    java.lang.String label,
    java.lang.String status,
    java.lang.String message,
    long total_rows,
    long loaded_rows,
    long filtered_rows,
    long unselected_rows,
    long load_bytes,
    long start_time,
    long finish_time)
  {
    this();
    this.user = user;
    this.passwd = passwd;
    this.db = db;
    this.tbl = tbl;
    this.label = label;
    this.status = status;
    this.message = message;
    this.total_rows = total_rows;
    setTotalRowsIsSet(true);
    this.loaded_rows = loaded_rows;
    setLoadedRowsIsSet(true);
    this.filtered_rows = filtered_rows;
    setFilteredRowsIsSet(true);
    this.unselected_rows = unselected_rows;
    setUnselectedRowsIsSet(true);
    this.load_bytes = load_bytes;
    setLoadBytesIsSet(true);
    this.start_time = start_time;
    setStartTimeIsSet(true);
    this.finish_time = finish_time;
    setFinishTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStreamLoadRecord(TStreamLoadRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCluster()) {
      this.cluster = other.cluster;
    }
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetPasswd()) {
      this.passwd = other.passwd;
    }
    if (other.isSetDb()) {
      this.db = other.db;
    }
    if (other.isSetTbl()) {
      this.tbl = other.tbl;
    }
    if (other.isSetUserIp()) {
      this.user_ip = other.user_ip;
    }
    if (other.isSetLabel()) {
      this.label = other.label;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.auth_code = other.auth_code;
    this.total_rows = other.total_rows;
    this.loaded_rows = other.loaded_rows;
    this.filtered_rows = other.filtered_rows;
    this.unselected_rows = other.unselected_rows;
    this.load_bytes = other.load_bytes;
    this.start_time = other.start_time;
    this.finish_time = other.finish_time;
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
  }

  @Override
  public TStreamLoadRecord deepCopy() {
    return new TStreamLoadRecord(this);
  }

  @Override
  public void clear() {
    this.cluster = null;
    this.user = null;
    this.passwd = null;
    this.db = null;
    this.tbl = null;
    this.user_ip = null;
    this.label = null;
    this.status = null;
    this.message = null;
    this.url = null;
    setAuthCodeIsSet(false);
    this.auth_code = 0;
    setTotalRowsIsSet(false);
    this.total_rows = 0;
    setLoadedRowsIsSet(false);
    this.loaded_rows = 0;
    setFilteredRowsIsSet(false);
    this.filtered_rows = 0;
    setUnselectedRowsIsSet(false);
    this.unselected_rows = 0;
    setLoadBytesIsSet(false);
    this.load_bytes = 0;
    setStartTimeIsSet(false);
    this.start_time = 0;
    setFinishTimeIsSet(false);
    this.finish_time = 0;
    this.comment = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCluster() {
    return this.cluster;
  }

  public TStreamLoadRecord setCluster(@org.apache.thrift.annotation.Nullable java.lang.String cluster) {
    this.cluster = cluster;
    return this;
  }

  public void unsetCluster() {
    this.cluster = null;
  }

  /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster() {
    return this.cluster != null;
  }

  public void setClusterIsSet(boolean value) {
    if (!value) {
      this.cluster = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUser() {
    return this.user;
  }

  public TStreamLoadRecord setUser(@org.apache.thrift.annotation.Nullable java.lang.String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPasswd() {
    return this.passwd;
  }

  public TStreamLoadRecord setPasswd(@org.apache.thrift.annotation.Nullable java.lang.String passwd) {
    this.passwd = passwd;
    return this;
  }

  public void unsetPasswd() {
    this.passwd = null;
  }

  /** Returns true if field passwd is set (has been assigned a value) and false otherwise */
  public boolean isSetPasswd() {
    return this.passwd != null;
  }

  public void setPasswdIsSet(boolean value) {
    if (!value) {
      this.passwd = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb() {
    return this.db;
  }

  public TStreamLoadRecord setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
    this.db = db;
    return this;
  }

  public void unsetDb() {
    this.db = null;
  }

  /** Returns true if field db is set (has been assigned a value) and false otherwise */
  public boolean isSetDb() {
    return this.db != null;
  }

  public void setDbIsSet(boolean value) {
    if (!value) {
      this.db = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTbl() {
    return this.tbl;
  }

  public TStreamLoadRecord setTbl(@org.apache.thrift.annotation.Nullable java.lang.String tbl) {
    this.tbl = tbl;
    return this;
  }

  public void unsetTbl() {
    this.tbl = null;
  }

  /** Returns true if field tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetTbl() {
    return this.tbl != null;
  }

  public void setTblIsSet(boolean value) {
    if (!value) {
      this.tbl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUserIp() {
    return this.user_ip;
  }

  public TStreamLoadRecord setUserIp(@org.apache.thrift.annotation.Nullable java.lang.String user_ip) {
    this.user_ip = user_ip;
    return this;
  }

  public void unsetUserIp() {
    this.user_ip = null;
  }

  /** Returns true if field user_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIp() {
    return this.user_ip != null;
  }

  public void setUserIpIsSet(boolean value) {
    if (!value) {
      this.user_ip = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLabel() {
    return this.label;
  }

  public TStreamLoadRecord setLabel(@org.apache.thrift.annotation.Nullable java.lang.String label) {
    this.label = label;
    return this;
  }

  public void unsetLabel() {
    this.label = null;
  }

  /** Returns true if field label is set (has been assigned a value) and false otherwise */
  public boolean isSetLabel() {
    return this.label != null;
  }

  public void setLabelIsSet(boolean value) {
    if (!value) {
      this.label = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStatus() {
    return this.status;
  }

  public TStreamLoadRecord setStatus(@org.apache.thrift.annotation.Nullable java.lang.String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMessage() {
    return this.message;
  }

  public TStreamLoadRecord setMessage(@org.apache.thrift.annotation.Nullable java.lang.String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUrl() {
    return this.url;
  }

  public TStreamLoadRecord setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public long getAuthCode() {
    return this.auth_code;
  }

  public TStreamLoadRecord setAuthCode(long auth_code) {
    this.auth_code = auth_code;
    setAuthCodeIsSet(true);
    return this;
  }

  public void unsetAuthCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTH_CODE_ISSET_ID);
  }

  /** Returns true if field auth_code is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTH_CODE_ISSET_ID);
  }

  public void setAuthCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTH_CODE_ISSET_ID, value);
  }

  public long getTotalRows() {
    return this.total_rows;
  }

  public TStreamLoadRecord setTotalRows(long total_rows) {
    this.total_rows = total_rows;
    setTotalRowsIsSet(true);
    return this;
  }

  public void unsetTotalRows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ROWS_ISSET_ID);
  }

  /** Returns true if field total_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalRows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_ROWS_ISSET_ID);
  }

  public void setTotalRowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_ROWS_ISSET_ID, value);
  }

  public long getLoadedRows() {
    return this.loaded_rows;
  }

  public TStreamLoadRecord setLoadedRows(long loaded_rows) {
    this.loaded_rows = loaded_rows;
    setLoadedRowsIsSet(true);
    return this;
  }

  public void unsetLoadedRows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOADED_ROWS_ISSET_ID);
  }

  /** Returns true if field loaded_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadedRows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOADED_ROWS_ISSET_ID);
  }

  public void setLoadedRowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOADED_ROWS_ISSET_ID, value);
  }

  public long getFilteredRows() {
    return this.filtered_rows;
  }

  public TStreamLoadRecord setFilteredRows(long filtered_rows) {
    this.filtered_rows = filtered_rows;
    setFilteredRowsIsSet(true);
    return this;
  }

  public void unsetFilteredRows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILTERED_ROWS_ISSET_ID);
  }

  /** Returns true if field filtered_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetFilteredRows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILTERED_ROWS_ISSET_ID);
  }

  public void setFilteredRowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILTERED_ROWS_ISSET_ID, value);
  }

  public long getUnselectedRows() {
    return this.unselected_rows;
  }

  public TStreamLoadRecord setUnselectedRows(long unselected_rows) {
    this.unselected_rows = unselected_rows;
    setUnselectedRowsIsSet(true);
    return this;
  }

  public void unsetUnselectedRows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNSELECTED_ROWS_ISSET_ID);
  }

  /** Returns true if field unselected_rows is set (has been assigned a value) and false otherwise */
  public boolean isSetUnselectedRows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNSELECTED_ROWS_ISSET_ID);
  }

  public void setUnselectedRowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNSELECTED_ROWS_ISSET_ID, value);
  }

  public long getLoadBytes() {
    return this.load_bytes;
  }

  public TStreamLoadRecord setLoadBytes(long load_bytes) {
    this.load_bytes = load_bytes;
    setLoadBytesIsSet(true);
    return this;
  }

  public void unsetLoadBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOAD_BYTES_ISSET_ID);
  }

  /** Returns true if field load_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOAD_BYTES_ISSET_ID);
  }

  public void setLoadBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOAD_BYTES_ISSET_ID, value);
  }

  public long getStartTime() {
    return this.start_time;
  }

  public TStreamLoadRecord setStartTime(long start_time) {
    this.start_time = start_time;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_TIME_ISSET_ID);
  }

  /** Returns true if field start_time is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_TIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_TIME_ISSET_ID, value);
  }

  public long getFinishTime() {
    return this.finish_time;
  }

  public TStreamLoadRecord setFinishTime(long finish_time) {
    this.finish_time = finish_time;
    setFinishTimeIsSet(true);
    return this;
  }

  public void unsetFinishTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FINISH_TIME_ISSET_ID);
  }

  /** Returns true if field finish_time is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FINISH_TIME_ISSET_ID);
  }

  public void setFinishTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FINISH_TIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getComment() {
    return this.comment;
  }

  public TStreamLoadRecord setComment(@org.apache.thrift.annotation.Nullable java.lang.String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CLUSTER:
      if (value == null) {
        unsetCluster();
      } else {
        setCluster((java.lang.String)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((java.lang.String)value);
      }
      break;

    case PASSWD:
      if (value == null) {
        unsetPasswd();
      } else {
        setPasswd((java.lang.String)value);
      }
      break;

    case DB:
      if (value == null) {
        unsetDb();
      } else {
        setDb((java.lang.String)value);
      }
      break;

    case TBL:
      if (value == null) {
        unsetTbl();
      } else {
        setTbl((java.lang.String)value);
      }
      break;

    case USER_IP:
      if (value == null) {
        unsetUserIp();
      } else {
        setUserIp((java.lang.String)value);
      }
      break;

    case LABEL:
      if (value == null) {
        unsetLabel();
      } else {
        setLabel((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((java.lang.String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((java.lang.String)value);
      }
      break;

    case AUTH_CODE:
      if (value == null) {
        unsetAuthCode();
      } else {
        setAuthCode((java.lang.Long)value);
      }
      break;

    case TOTAL_ROWS:
      if (value == null) {
        unsetTotalRows();
      } else {
        setTotalRows((java.lang.Long)value);
      }
      break;

    case LOADED_ROWS:
      if (value == null) {
        unsetLoadedRows();
      } else {
        setLoadedRows((java.lang.Long)value);
      }
      break;

    case FILTERED_ROWS:
      if (value == null) {
        unsetFilteredRows();
      } else {
        setFilteredRows((java.lang.Long)value);
      }
      break;

    case UNSELECTED_ROWS:
      if (value == null) {
        unsetUnselectedRows();
      } else {
        setUnselectedRows((java.lang.Long)value);
      }
      break;

    case LOAD_BYTES:
      if (value == null) {
        unsetLoadBytes();
      } else {
        setLoadBytes((java.lang.Long)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((java.lang.Long)value);
      }
      break;

    case FINISH_TIME:
      if (value == null) {
        unsetFinishTime();
      } else {
        setFinishTime((java.lang.Long)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CLUSTER:
      return getCluster();

    case USER:
      return getUser();

    case PASSWD:
      return getPasswd();

    case DB:
      return getDb();

    case TBL:
      return getTbl();

    case USER_IP:
      return getUserIp();

    case LABEL:
      return getLabel();

    case STATUS:
      return getStatus();

    case MESSAGE:
      return getMessage();

    case URL:
      return getUrl();

    case AUTH_CODE:
      return getAuthCode();

    case TOTAL_ROWS:
      return getTotalRows();

    case LOADED_ROWS:
      return getLoadedRows();

    case FILTERED_ROWS:
      return getFilteredRows();

    case UNSELECTED_ROWS:
      return getUnselectedRows();

    case LOAD_BYTES:
      return getLoadBytes();

    case START_TIME:
      return getStartTime();

    case FINISH_TIME:
      return getFinishTime();

    case COMMENT:
      return getComment();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CLUSTER:
      return isSetCluster();
    case USER:
      return isSetUser();
    case PASSWD:
      return isSetPasswd();
    case DB:
      return isSetDb();
    case TBL:
      return isSetTbl();
    case USER_IP:
      return isSetUserIp();
    case LABEL:
      return isSetLabel();
    case STATUS:
      return isSetStatus();
    case MESSAGE:
      return isSetMessage();
    case URL:
      return isSetUrl();
    case AUTH_CODE:
      return isSetAuthCode();
    case TOTAL_ROWS:
      return isSetTotalRows();
    case LOADED_ROWS:
      return isSetLoadedRows();
    case FILTERED_ROWS:
      return isSetFilteredRows();
    case UNSELECTED_ROWS:
      return isSetUnselectedRows();
    case LOAD_BYTES:
      return isSetLoadBytes();
    case START_TIME:
      return isSetStartTime();
    case FINISH_TIME:
      return isSetFinishTime();
    case COMMENT:
      return isSetComment();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TStreamLoadRecord)
      return this.equals((TStreamLoadRecord)that);
    return false;
  }

  public boolean equals(TStreamLoadRecord that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cluster = true && this.isSetCluster();
    boolean that_present_cluster = true && that.isSetCluster();
    if (this_present_cluster || that_present_cluster) {
      if (!(this_present_cluster && that_present_cluster))
        return false;
      if (!this.cluster.equals(that.cluster))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_passwd = true && this.isSetPasswd();
    boolean that_present_passwd = true && that.isSetPasswd();
    if (this_present_passwd || that_present_passwd) {
      if (!(this_present_passwd && that_present_passwd))
        return false;
      if (!this.passwd.equals(that.passwd))
        return false;
    }

    boolean this_present_db = true && this.isSetDb();
    boolean that_present_db = true && that.isSetDb();
    if (this_present_db || that_present_db) {
      if (!(this_present_db && that_present_db))
        return false;
      if (!this.db.equals(that.db))
        return false;
    }

    boolean this_present_tbl = true && this.isSetTbl();
    boolean that_present_tbl = true && that.isSetTbl();
    if (this_present_tbl || that_present_tbl) {
      if (!(this_present_tbl && that_present_tbl))
        return false;
      if (!this.tbl.equals(that.tbl))
        return false;
    }

    boolean this_present_user_ip = true && this.isSetUserIp();
    boolean that_present_user_ip = true && that.isSetUserIp();
    if (this_present_user_ip || that_present_user_ip) {
      if (!(this_present_user_ip && that_present_user_ip))
        return false;
      if (!this.user_ip.equals(that.user_ip))
        return false;
    }

    boolean this_present_label = true && this.isSetLabel();
    boolean that_present_label = true && that.isSetLabel();
    if (this_present_label || that_present_label) {
      if (!(this_present_label && that_present_label))
        return false;
      if (!this.label.equals(that.label))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_auth_code = true && this.isSetAuthCode();
    boolean that_present_auth_code = true && that.isSetAuthCode();
    if (this_present_auth_code || that_present_auth_code) {
      if (!(this_present_auth_code && that_present_auth_code))
        return false;
      if (this.auth_code != that.auth_code)
        return false;
    }

    boolean this_present_total_rows = true;
    boolean that_present_total_rows = true;
    if (this_present_total_rows || that_present_total_rows) {
      if (!(this_present_total_rows && that_present_total_rows))
        return false;
      if (this.total_rows != that.total_rows)
        return false;
    }

    boolean this_present_loaded_rows = true;
    boolean that_present_loaded_rows = true;
    if (this_present_loaded_rows || that_present_loaded_rows) {
      if (!(this_present_loaded_rows && that_present_loaded_rows))
        return false;
      if (this.loaded_rows != that.loaded_rows)
        return false;
    }

    boolean this_present_filtered_rows = true;
    boolean that_present_filtered_rows = true;
    if (this_present_filtered_rows || that_present_filtered_rows) {
      if (!(this_present_filtered_rows && that_present_filtered_rows))
        return false;
      if (this.filtered_rows != that.filtered_rows)
        return false;
    }

    boolean this_present_unselected_rows = true;
    boolean that_present_unselected_rows = true;
    if (this_present_unselected_rows || that_present_unselected_rows) {
      if (!(this_present_unselected_rows && that_present_unselected_rows))
        return false;
      if (this.unselected_rows != that.unselected_rows)
        return false;
    }

    boolean this_present_load_bytes = true;
    boolean that_present_load_bytes = true;
    if (this_present_load_bytes || that_present_load_bytes) {
      if (!(this_present_load_bytes && that_present_load_bytes))
        return false;
      if (this.load_bytes != that.load_bytes)
        return false;
    }

    boolean this_present_start_time = true;
    boolean that_present_start_time = true;
    if (this_present_start_time || that_present_start_time) {
      if (!(this_present_start_time && that_present_start_time))
        return false;
      if (this.start_time != that.start_time)
        return false;
    }

    boolean this_present_finish_time = true;
    boolean that_present_finish_time = true;
    if (this_present_finish_time || that_present_finish_time) {
      if (!(this_present_finish_time && that_present_finish_time))
        return false;
      if (this.finish_time != that.finish_time)
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCluster()) ? 131071 : 524287);
    if (isSetCluster())
      hashCode = hashCode * 8191 + cluster.hashCode();

    hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
    if (isSetUser())
      hashCode = hashCode * 8191 + user.hashCode();

    hashCode = hashCode * 8191 + ((isSetPasswd()) ? 131071 : 524287);
    if (isSetPasswd())
      hashCode = hashCode * 8191 + passwd.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
    if (isSetDb())
      hashCode = hashCode * 8191 + db.hashCode();

    hashCode = hashCode * 8191 + ((isSetTbl()) ? 131071 : 524287);
    if (isSetTbl())
      hashCode = hashCode * 8191 + tbl.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserIp()) ? 131071 : 524287);
    if (isSetUserIp())
      hashCode = hashCode * 8191 + user_ip.hashCode();

    hashCode = hashCode * 8191 + ((isSetLabel()) ? 131071 : 524287);
    if (isSetLabel())
      hashCode = hashCode * 8191 + label.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.hashCode();

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    hashCode = hashCode * 8191 + ((isSetAuthCode()) ? 131071 : 524287);
    if (isSetAuthCode())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(auth_code);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(total_rows);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(loaded_rows);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(filtered_rows);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(unselected_rows);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(load_bytes);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(start_time);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(finish_time);

    hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
    if (isSetComment())
      hashCode = hashCode * 8191 + comment.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TStreamLoadRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCluster(), other.isSetCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster, other.cluster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUser(), other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPasswd(), other.isSetPasswd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPasswd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwd, other.passwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb(), other.isSetDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTbl(), other.isSetTbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tbl, other.tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUserIp(), other.isSetUserIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ip, other.user_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLabel(), other.isSetLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMessage(), other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAuthCode(), other.isSetAuthCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth_code, other.auth_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTotalRows(), other.isSetTotalRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_rows, other.total_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoadedRows(), other.isSetLoadedRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadedRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loaded_rows, other.loaded_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFilteredRows(), other.isSetFilteredRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilteredRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filtered_rows, other.filtered_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUnselectedRows(), other.isSetUnselectedRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnselectedRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unselected_rows, other.unselected_rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoadBytes(), other.isSetLoadBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_bytes, other.load_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStartTime(), other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_time, other.start_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFinishTime(), other.isSetFinishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish_time, other.finish_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetComment(), other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TStreamLoadRecord(");
    boolean first = true;

    if (isSetCluster()) {
      sb.append("cluster:");
      if (this.cluster == null) {
        sb.append("null");
      } else {
        sb.append(this.cluster);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passwd:");
    if (this.passwd == null) {
      sb.append("null");
    } else {
      sb.append(this.passwd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("db:");
    if (this.db == null) {
      sb.append("null");
    } else {
      sb.append(this.db);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tbl:");
    if (this.tbl == null) {
      sb.append("null");
    } else {
      sb.append(this.tbl);
    }
    first = false;
    if (isSetUserIp()) {
      if (!first) sb.append(", ");
      sb.append("user_ip:");
      if (this.user_ip == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ip);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("label:");
    if (this.label == null) {
      sb.append("null");
    } else {
      sb.append(this.label);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetAuthCode()) {
      if (!first) sb.append(", ");
      sb.append("auth_code:");
      sb.append(this.auth_code);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("total_rows:");
    sb.append(this.total_rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loaded_rows:");
    sb.append(this.loaded_rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("filtered_rows:");
    sb.append(this.filtered_rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unselected_rows:");
    sb.append(this.unselected_rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("load_bytes:");
    sb.append(this.load_bytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_time:");
    sb.append(this.start_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finish_time:");
    sb.append(this.finish_time);
    first = false;
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (user == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user' was not present! Struct: " + toString());
    }
    if (passwd == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'passwd' was not present! Struct: " + toString());
    }
    if (db == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'db' was not present! Struct: " + toString());
    }
    if (tbl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tbl' was not present! Struct: " + toString());
    }
    if (label == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'label' was not present! Struct: " + toString());
    }
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    if (message == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'message' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'total_rows' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'loaded_rows' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'filtered_rows' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'unselected_rows' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'load_bytes' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'start_time' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'finish_time' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStreamLoadRecordStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStreamLoadRecordStandardScheme getScheme() {
      return new TStreamLoadRecordStandardScheme();
    }
  }

  private static class TStreamLoadRecordStandardScheme extends org.apache.thrift.scheme.StandardScheme<TStreamLoadRecord> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TStreamLoadRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLUSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cluster = iprot.readString();
              struct.setClusterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passwd = iprot.readString();
              struct.setPasswdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db = iprot.readString();
              struct.setDbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tbl = iprot.readString();
              struct.setTblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_ip = iprot.readString();
              struct.setUserIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.label = iprot.readString();
              struct.setLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AUTH_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.auth_code = iprot.readI64();
              struct.setAuthCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TOTAL_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.total_rows = iprot.readI64();
              struct.setTotalRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LOADED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loaded_rows = iprot.readI64();
              struct.setLoadedRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FILTERED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.filtered_rows = iprot.readI64();
              struct.setFilteredRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // UNSELECTED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.unselected_rows = iprot.readI64();
              struct.setUnselectedRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LOAD_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.load_bytes = iprot.readI64();
              struct.setLoadBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.start_time = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FINISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.finish_time = iprot.readI64();
              struct.setFinishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTotalRows()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'total_rows' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLoadedRows()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'loaded_rows' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFilteredRows()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'filtered_rows' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUnselectedRows()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'unselected_rows' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLoadBytes()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'load_bytes' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStartTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'start_time' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFinishTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'finish_time' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TStreamLoadRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cluster != null) {
        if (struct.isSetCluster()) {
          oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
          oprot.writeString(struct.cluster);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(struct.user);
        oprot.writeFieldEnd();
      }
      if (struct.passwd != null) {
        oprot.writeFieldBegin(PASSWD_FIELD_DESC);
        oprot.writeString(struct.passwd);
        oprot.writeFieldEnd();
      }
      if (struct.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(struct.db);
        oprot.writeFieldEnd();
      }
      if (struct.tbl != null) {
        oprot.writeFieldBegin(TBL_FIELD_DESC);
        oprot.writeString(struct.tbl);
        oprot.writeFieldEnd();
      }
      if (struct.user_ip != null) {
        if (struct.isSetUserIp()) {
          oprot.writeFieldBegin(USER_IP_FIELD_DESC);
          oprot.writeString(struct.user_ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.label != null) {
        oprot.writeFieldBegin(LABEL_FIELD_DESC);
        oprot.writeString(struct.label);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAuthCode()) {
        oprot.writeFieldBegin(AUTH_CODE_FIELD_DESC);
        oprot.writeI64(struct.auth_code);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_ROWS_FIELD_DESC);
      oprot.writeI64(struct.total_rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOADED_ROWS_FIELD_DESC);
      oprot.writeI64(struct.loaded_rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILTERED_ROWS_FIELD_DESC);
      oprot.writeI64(struct.filtered_rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNSELECTED_ROWS_FIELD_DESC);
      oprot.writeI64(struct.unselected_rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAD_BYTES_FIELD_DESC);
      oprot.writeI64(struct.load_bytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.start_time);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINISH_TIME_FIELD_DESC);
      oprot.writeI64(struct.finish_time);
      oprot.writeFieldEnd();
      if (struct.comment != null) {
        if (struct.isSetComment()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStreamLoadRecordTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStreamLoadRecordTupleScheme getScheme() {
      return new TStreamLoadRecordTupleScheme();
    }
  }

  private static class TStreamLoadRecordTupleScheme extends org.apache.thrift.scheme.TupleScheme<TStreamLoadRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStreamLoadRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.user);
      oprot.writeString(struct.passwd);
      oprot.writeString(struct.db);
      oprot.writeString(struct.tbl);
      oprot.writeString(struct.label);
      oprot.writeString(struct.status);
      oprot.writeString(struct.message);
      oprot.writeI64(struct.total_rows);
      oprot.writeI64(struct.loaded_rows);
      oprot.writeI64(struct.filtered_rows);
      oprot.writeI64(struct.unselected_rows);
      oprot.writeI64(struct.load_bytes);
      oprot.writeI64(struct.start_time);
      oprot.writeI64(struct.finish_time);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCluster()) {
        optionals.set(0);
      }
      if (struct.isSetUserIp()) {
        optionals.set(1);
      }
      if (struct.isSetUrl()) {
        optionals.set(2);
      }
      if (struct.isSetAuthCode()) {
        optionals.set(3);
      }
      if (struct.isSetComment()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCluster()) {
        oprot.writeString(struct.cluster);
      }
      if (struct.isSetUserIp()) {
        oprot.writeString(struct.user_ip);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetAuthCode()) {
        oprot.writeI64(struct.auth_code);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStreamLoadRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.user = iprot.readString();
      struct.setUserIsSet(true);
      struct.passwd = iprot.readString();
      struct.setPasswdIsSet(true);
      struct.db = iprot.readString();
      struct.setDbIsSet(true);
      struct.tbl = iprot.readString();
      struct.setTblIsSet(true);
      struct.label = iprot.readString();
      struct.setLabelIsSet(true);
      struct.status = iprot.readString();
      struct.setStatusIsSet(true);
      struct.message = iprot.readString();
      struct.setMessageIsSet(true);
      struct.total_rows = iprot.readI64();
      struct.setTotalRowsIsSet(true);
      struct.loaded_rows = iprot.readI64();
      struct.setLoadedRowsIsSet(true);
      struct.filtered_rows = iprot.readI64();
      struct.setFilteredRowsIsSet(true);
      struct.unselected_rows = iprot.readI64();
      struct.setUnselectedRowsIsSet(true);
      struct.load_bytes = iprot.readI64();
      struct.setLoadBytesIsSet(true);
      struct.start_time = iprot.readI64();
      struct.setStartTimeIsSet(true);
      struct.finish_time = iprot.readI64();
      struct.setFinishTimeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.cluster = iprot.readString();
        struct.setClusterIsSet(true);
      }
      if (incoming.get(1)) {
        struct.user_ip = iprot.readString();
        struct.setUserIpIsSet(true);
      }
      if (incoming.get(2)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.auth_code = iprot.readI64();
        struct.setAuthCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

