/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-08-29")
public class TQueryOptions implements org.apache.thrift.TBase<TQueryOptions, TQueryOptions._Fields>, java.io.Serializable, Cloneable, Comparable<TQueryOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueryOptions");

  private static final org.apache.thrift.protocol.TField ABORT_ON_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("abort_on_error", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_ERRORS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_errors", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DISABLE_CODEGEN_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_codegen", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField BATCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("batch_size", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_nodes", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_SCAN_RANGE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("max_scan_range_length", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField NUM_SCANNER_THREADS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_scanner_threads", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MAX_IO_BUFFERS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_io_buffers", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ALLOW_UNSUPPORTED_FORMATS_FIELD_DESC = new org.apache.thrift.protocol.TField("allow_unsupported_formats", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField DEFAULT_ORDER_BY_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("default_order_by_limit", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("mem_limit", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField ABORT_ON_DEFAULT_LIMIT_EXCEEDED_FIELD_DESC = new org.apache.thrift.protocol.TField("abort_on_default_limit_exceeded", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField QUERY_TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("query_timeout", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField IS_REPORT_SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("is_report_success", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField CODEGEN_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("codegen_level", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField KUDU_LATEST_OBSERVED_TS_FIELD_DESC = new org.apache.thrift.protocol.TField("kudu_latest_observed_ts", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField QUERY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("query_type", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField MIN_RESERVATION_FIELD_DESC = new org.apache.thrift.protocol.TField("min_reservation", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField MAX_RESERVATION_FIELD_DESC = new org.apache.thrift.protocol.TField("max_reservation", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField INITIAL_RESERVATION_TOTAL_CLAIMS_FIELD_DESC = new org.apache.thrift.protocol.TField("initial_reservation_total_claims", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField BUFFER_POOL_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("buffer_pool_limit", org.apache.thrift.protocol.TType.I64, (short)22);
  private static final org.apache.thrift.protocol.TField DEFAULT_SPILLABLE_BUFFER_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("default_spillable_buffer_size", org.apache.thrift.protocol.TType.I64, (short)23);
  private static final org.apache.thrift.protocol.TField MIN_SPILLABLE_BUFFER_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("min_spillable_buffer_size", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField MAX_ROW_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("max_row_size", org.apache.thrift.protocol.TType.I64, (short)25);
  private static final org.apache.thrift.protocol.TField DISABLE_STREAM_PREAGGREGATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("disable_stream_preaggregations", org.apache.thrift.protocol.TType.BOOL, (short)26);
  private static final org.apache.thrift.protocol.TField MT_DOP_FIELD_DESC = new org.apache.thrift.protocol.TField("mt_dop", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField LOAD_MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("load_mem_limit", org.apache.thrift.protocol.TType.I64, (short)28);
  private static final org.apache.thrift.protocol.TField MAX_SCAN_KEY_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("max_scan_key_num", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField MAX_PUSHDOWN_CONDITIONS_PER_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("max_pushdown_conditions_per_column", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField ENABLE_SPILLING_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_spilling", org.apache.thrift.protocol.TType.BOOL, (short)31);
  private static final org.apache.thrift.protocol.TField ENABLE_ENABLE_EXCHANGE_NODE_PARALLEL_MERGE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_enable_exchange_node_parallel_merge", org.apache.thrift.protocol.TType.BOOL, (short)32);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_WAIT_TIME_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_wait_time_ms", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_MAX_IN_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_max_in_num", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField RESOURCE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_limit", org.apache.thrift.protocol.TType.STRUCT, (short)42);
  private static final org.apache.thrift.protocol.TField RETURN_OBJECT_DATA_AS_BINARY_FIELD_DESC = new org.apache.thrift.protocol.TField("return_object_data_as_binary", org.apache.thrift.protocol.TType.BOOL, (short)43);
  private static final org.apache.thrift.protocol.TField TRIM_TAILING_SPACES_FOR_EXTERNAL_TABLE_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("trim_tailing_spaces_for_external_table_query", org.apache.thrift.protocol.TType.BOOL, (short)44);
  private static final org.apache.thrift.protocol.TField ENABLE_FUNCTION_PUSHDOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_function_pushdown", org.apache.thrift.protocol.TType.BOOL, (short)45);
  private static final org.apache.thrift.protocol.TField FRAGMENT_TRANSMISSION_COMPRESSION_CODEC_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_transmission_compression_codec", org.apache.thrift.protocol.TType.STRING, (short)46);
  private static final org.apache.thrift.protocol.TField ENABLE_LOCAL_EXCHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_local_exchange", org.apache.thrift.protocol.TType.BOOL, (short)48);
  private static final org.apache.thrift.protocol.TField SKIP_STORAGE_ENGINE_MERGE_FIELD_DESC = new org.apache.thrift.protocol.TField("skip_storage_engine_merge", org.apache.thrift.protocol.TType.BOOL, (short)49);
  private static final org.apache.thrift.protocol.TField SKIP_DELETE_PREDICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("skip_delete_predicate", org.apache.thrift.protocol.TType.BOOL, (short)50);
  private static final org.apache.thrift.protocol.TField ENABLE_NEW_SHUFFLE_HASH_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_new_shuffle_hash_method", org.apache.thrift.protocol.TType.BOOL, (short)51);
  private static final org.apache.thrift.protocol.TField BE_EXEC_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("be_exec_version", org.apache.thrift.protocol.TType.I32, (short)52);
  private static final org.apache.thrift.protocol.TField PARTITIONED_HASH_JOIN_ROWS_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("partitioned_hash_join_rows_threshold", org.apache.thrift.protocol.TType.I32, (short)53);
  private static final org.apache.thrift.protocol.TField ENABLE_SHARE_HASH_TABLE_FOR_BROADCAST_JOIN_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_share_hash_table_for_broadcast_join", org.apache.thrift.protocol.TType.BOOL, (short)54);
  private static final org.apache.thrift.protocol.TField CHECK_OVERFLOW_FOR_DECIMAL_FIELD_DESC = new org.apache.thrift.protocol.TField("check_overflow_for_decimal", org.apache.thrift.protocol.TType.BOOL, (short)55);
  private static final org.apache.thrift.protocol.TField SKIP_DELETE_BITMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("skip_delete_bitmap", org.apache.thrift.protocol.TType.BOOL, (short)56);
  private static final org.apache.thrift.protocol.TField ENABLE_PIPELINE_ENGINE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_pipeline_engine", org.apache.thrift.protocol.TType.BOOL, (short)57);
  private static final org.apache.thrift.protocol.TField REPEAT_MAX_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("repeat_max_num", org.apache.thrift.protocol.TType.I32, (short)58);
  private static final org.apache.thrift.protocol.TField EXTERNAL_SORT_BYTES_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("external_sort_bytes_threshold", org.apache.thrift.protocol.TType.I64, (short)59);
  private static final org.apache.thrift.protocol.TField PARTITIONED_HASH_AGG_ROWS_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("partitioned_hash_agg_rows_threshold", org.apache.thrift.protocol.TType.I32, (short)60);
  private static final org.apache.thrift.protocol.TField ENABLE_FILE_CACHE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_file_cache", org.apache.thrift.protocol.TType.BOOL, (short)61);
  private static final org.apache.thrift.protocol.TField INSERT_TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("insert_timeout", org.apache.thrift.protocol.TType.I32, (short)62);
  private static final org.apache.thrift.protocol.TField EXECUTION_TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("execution_timeout", org.apache.thrift.protocol.TType.I32, (short)63);
  private static final org.apache.thrift.protocol.TField DRY_RUN_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("dry_run_query", org.apache.thrift.protocol.TType.BOOL, (short)64);
  private static final org.apache.thrift.protocol.TField ENABLE_COMMON_EXPR_PUSHDOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_common_expr_pushdown", org.apache.thrift.protocol.TType.BOOL, (short)65);
  private static final org.apache.thrift.protocol.TField PARALLEL_INSTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("parallel_instance", org.apache.thrift.protocol.TType.I32, (short)66);
  private static final org.apache.thrift.protocol.TField MYSQL_ROW_BINARY_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("mysql_row_binary_format", org.apache.thrift.protocol.TType.BOOL, (short)67);
  private static final org.apache.thrift.protocol.TField EXTERNAL_AGG_BYTES_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("external_agg_bytes_threshold", org.apache.thrift.protocol.TType.I64, (short)68);
  private static final org.apache.thrift.protocol.TField EXTERNAL_AGG_PARTITION_BITS_FIELD_DESC = new org.apache.thrift.protocol.TField("external_agg_partition_bits", org.apache.thrift.protocol.TType.I32, (short)69);
  private static final org.apache.thrift.protocol.TField FILE_CACHE_BASE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("file_cache_base_path", org.apache.thrift.protocol.TType.STRING, (short)70);
  private static final org.apache.thrift.protocol.TField ENABLE_PARQUET_LAZY_MAT_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_parquet_lazy_mat", org.apache.thrift.protocol.TType.BOOL, (short)71);
  private static final org.apache.thrift.protocol.TField ENABLE_ORC_LAZY_MAT_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_orc_lazy_mat", org.apache.thrift.protocol.TType.BOOL, (short)72);
  private static final org.apache.thrift.protocol.TField SCAN_QUEUE_MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_queue_mem_limit", org.apache.thrift.protocol.TType.I64, (short)73);
  private static final org.apache.thrift.protocol.TField ENABLE_SCAN_NODE_RUN_SERIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_scan_node_run_serial", org.apache.thrift.protocol.TType.BOOL, (short)74);
  private static final org.apache.thrift.protocol.TField ENABLE_INSERT_STRICT_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_insert_strict", org.apache.thrift.protocol.TType.BOOL, (short)75);
  private static final org.apache.thrift.protocol.TField ENABLE_INVERTED_INDEX_QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_inverted_index_query", org.apache.thrift.protocol.TType.BOOL, (short)76);
  private static final org.apache.thrift.protocol.TField TRUNCATE_CHAR_OR_VARCHAR_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("truncate_char_or_varchar_columns", org.apache.thrift.protocol.TType.BOOL, (short)77);
  private static final org.apache.thrift.protocol.TField ENABLE_HASH_JOIN_EARLY_START_PROBE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_hash_join_early_start_probe", org.apache.thrift.protocol.TType.BOOL, (short)78);
  private static final org.apache.thrift.protocol.TField ENABLE_PIPELINE_X_ENGINE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_pipeline_x_engine", org.apache.thrift.protocol.TType.BOOL, (short)79);
  private static final org.apache.thrift.protocol.TField ENABLE_MEMTABLE_ON_SINK_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_memtable_on_sink_node", org.apache.thrift.protocol.TType.BOOL, (short)80);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TQueryOptionsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TQueryOptionsTupleSchemeFactory();

  public boolean abort_on_error; // optional
  public int max_errors; // optional
  public boolean disable_codegen; // optional
  public int batch_size; // optional
  public int num_nodes; // optional
  public long max_scan_range_length; // optional
  public int num_scanner_threads; // optional
  public int max_io_buffers; // optional
  public boolean allow_unsupported_formats; // optional
  public long default_order_by_limit; // optional
  public long mem_limit; // optional
  public boolean abort_on_default_limit_exceeded; // optional
  public int query_timeout; // optional
  public boolean is_report_success; // optional
  public int codegen_level; // optional
  public long kudu_latest_observed_ts; // optional
  /**
   * 
   * @see TQueryType
   */
  public @org.apache.thrift.annotation.Nullable TQueryType query_type; // optional
  public long min_reservation; // optional
  public long max_reservation; // optional
  public long initial_reservation_total_claims; // optional
  public long buffer_pool_limit; // optional
  public long default_spillable_buffer_size; // optional
  public long min_spillable_buffer_size; // optional
  public long max_row_size; // optional
  public boolean disable_stream_preaggregations; // optional
  public int mt_dop; // optional
  public long load_mem_limit; // optional
  public int max_scan_key_num; // optional
  public int max_pushdown_conditions_per_column; // optional
  public boolean enable_spilling; // optional
  public boolean enable_enable_exchange_node_parallel_merge; // optional
  public int runtime_filter_wait_time_ms; // optional
  public int runtime_filter_max_in_num; // optional
  public @org.apache.thrift.annotation.Nullable TResourceLimit resource_limit; // optional
  public boolean return_object_data_as_binary; // optional
  public boolean trim_tailing_spaces_for_external_table_query; // optional
  public boolean enable_function_pushdown; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String fragment_transmission_compression_codec; // optional
  public boolean enable_local_exchange; // optional
  public boolean skip_storage_engine_merge; // optional
  public boolean skip_delete_predicate; // optional
  public boolean enable_new_shuffle_hash_method; // optional
  public int be_exec_version; // optional
  public int partitioned_hash_join_rows_threshold; // optional
  public boolean enable_share_hash_table_for_broadcast_join; // optional
  public boolean check_overflow_for_decimal; // optional
  public boolean skip_delete_bitmap; // optional
  public boolean enable_pipeline_engine; // optional
  public int repeat_max_num; // optional
  public long external_sort_bytes_threshold; // optional
  public int partitioned_hash_agg_rows_threshold; // optional
  public boolean enable_file_cache; // optional
  public int insert_timeout; // optional
  public int execution_timeout; // optional
  public boolean dry_run_query; // optional
  public boolean enable_common_expr_pushdown; // optional
  public int parallel_instance; // optional
  public boolean mysql_row_binary_format; // optional
  public long external_agg_bytes_threshold; // optional
  public int external_agg_partition_bits; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String file_cache_base_path; // optional
  public boolean enable_parquet_lazy_mat; // optional
  public boolean enable_orc_lazy_mat; // optional
  public long scan_queue_mem_limit; // optional
  public boolean enable_scan_node_run_serial; // optional
  public boolean enable_insert_strict; // optional
  public boolean enable_inverted_index_query; // optional
  public boolean truncate_char_or_varchar_columns; // optional
  public boolean enable_hash_join_early_start_probe; // optional
  public boolean enable_pipeline_x_engine; // optional
  public boolean enable_memtable_on_sink_node; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ABORT_ON_ERROR((short)1, "abort_on_error"),
    MAX_ERRORS((short)2, "max_errors"),
    DISABLE_CODEGEN((short)3, "disable_codegen"),
    BATCH_SIZE((short)4, "batch_size"),
    NUM_NODES((short)5, "num_nodes"),
    MAX_SCAN_RANGE_LENGTH((short)6, "max_scan_range_length"),
    NUM_SCANNER_THREADS((short)7, "num_scanner_threads"),
    MAX_IO_BUFFERS((short)8, "max_io_buffers"),
    ALLOW_UNSUPPORTED_FORMATS((short)9, "allow_unsupported_formats"),
    DEFAULT_ORDER_BY_LIMIT((short)10, "default_order_by_limit"),
    MEM_LIMIT((short)12, "mem_limit"),
    ABORT_ON_DEFAULT_LIMIT_EXCEEDED((short)13, "abort_on_default_limit_exceeded"),
    QUERY_TIMEOUT((short)14, "query_timeout"),
    IS_REPORT_SUCCESS((short)15, "is_report_success"),
    CODEGEN_LEVEL((short)16, "codegen_level"),
    KUDU_LATEST_OBSERVED_TS((short)17, "kudu_latest_observed_ts"),
    /**
     * 
     * @see TQueryType
     */
    QUERY_TYPE((short)18, "query_type"),
    MIN_RESERVATION((short)19, "min_reservation"),
    MAX_RESERVATION((short)20, "max_reservation"),
    INITIAL_RESERVATION_TOTAL_CLAIMS((short)21, "initial_reservation_total_claims"),
    BUFFER_POOL_LIMIT((short)22, "buffer_pool_limit"),
    DEFAULT_SPILLABLE_BUFFER_SIZE((short)23, "default_spillable_buffer_size"),
    MIN_SPILLABLE_BUFFER_SIZE((short)24, "min_spillable_buffer_size"),
    MAX_ROW_SIZE((short)25, "max_row_size"),
    DISABLE_STREAM_PREAGGREGATIONS((short)26, "disable_stream_preaggregations"),
    MT_DOP((short)27, "mt_dop"),
    LOAD_MEM_LIMIT((short)28, "load_mem_limit"),
    MAX_SCAN_KEY_NUM((short)29, "max_scan_key_num"),
    MAX_PUSHDOWN_CONDITIONS_PER_COLUMN((short)30, "max_pushdown_conditions_per_column"),
    ENABLE_SPILLING((short)31, "enable_spilling"),
    ENABLE_ENABLE_EXCHANGE_NODE_PARALLEL_MERGE((short)32, "enable_enable_exchange_node_parallel_merge"),
    RUNTIME_FILTER_WAIT_TIME_MS((short)33, "runtime_filter_wait_time_ms"),
    RUNTIME_FILTER_MAX_IN_NUM((short)34, "runtime_filter_max_in_num"),
    RESOURCE_LIMIT((short)42, "resource_limit"),
    RETURN_OBJECT_DATA_AS_BINARY((short)43, "return_object_data_as_binary"),
    TRIM_TAILING_SPACES_FOR_EXTERNAL_TABLE_QUERY((short)44, "trim_tailing_spaces_for_external_table_query"),
    ENABLE_FUNCTION_PUSHDOWN((short)45, "enable_function_pushdown"),
    FRAGMENT_TRANSMISSION_COMPRESSION_CODEC((short)46, "fragment_transmission_compression_codec"),
    ENABLE_LOCAL_EXCHANGE((short)48, "enable_local_exchange"),
    SKIP_STORAGE_ENGINE_MERGE((short)49, "skip_storage_engine_merge"),
    SKIP_DELETE_PREDICATE((short)50, "skip_delete_predicate"),
    ENABLE_NEW_SHUFFLE_HASH_METHOD((short)51, "enable_new_shuffle_hash_method"),
    BE_EXEC_VERSION((short)52, "be_exec_version"),
    PARTITIONED_HASH_JOIN_ROWS_THRESHOLD((short)53, "partitioned_hash_join_rows_threshold"),
    ENABLE_SHARE_HASH_TABLE_FOR_BROADCAST_JOIN((short)54, "enable_share_hash_table_for_broadcast_join"),
    CHECK_OVERFLOW_FOR_DECIMAL((short)55, "check_overflow_for_decimal"),
    SKIP_DELETE_BITMAP((short)56, "skip_delete_bitmap"),
    ENABLE_PIPELINE_ENGINE((short)57, "enable_pipeline_engine"),
    REPEAT_MAX_NUM((short)58, "repeat_max_num"),
    EXTERNAL_SORT_BYTES_THRESHOLD((short)59, "external_sort_bytes_threshold"),
    PARTITIONED_HASH_AGG_ROWS_THRESHOLD((short)60, "partitioned_hash_agg_rows_threshold"),
    ENABLE_FILE_CACHE((short)61, "enable_file_cache"),
    INSERT_TIMEOUT((short)62, "insert_timeout"),
    EXECUTION_TIMEOUT((short)63, "execution_timeout"),
    DRY_RUN_QUERY((short)64, "dry_run_query"),
    ENABLE_COMMON_EXPR_PUSHDOWN((short)65, "enable_common_expr_pushdown"),
    PARALLEL_INSTANCE((short)66, "parallel_instance"),
    MYSQL_ROW_BINARY_FORMAT((short)67, "mysql_row_binary_format"),
    EXTERNAL_AGG_BYTES_THRESHOLD((short)68, "external_agg_bytes_threshold"),
    EXTERNAL_AGG_PARTITION_BITS((short)69, "external_agg_partition_bits"),
    FILE_CACHE_BASE_PATH((short)70, "file_cache_base_path"),
    ENABLE_PARQUET_LAZY_MAT((short)71, "enable_parquet_lazy_mat"),
    ENABLE_ORC_LAZY_MAT((short)72, "enable_orc_lazy_mat"),
    SCAN_QUEUE_MEM_LIMIT((short)73, "scan_queue_mem_limit"),
    ENABLE_SCAN_NODE_RUN_SERIAL((short)74, "enable_scan_node_run_serial"),
    ENABLE_INSERT_STRICT((short)75, "enable_insert_strict"),
    ENABLE_INVERTED_INDEX_QUERY((short)76, "enable_inverted_index_query"),
    TRUNCATE_CHAR_OR_VARCHAR_COLUMNS((short)77, "truncate_char_or_varchar_columns"),
    ENABLE_HASH_JOIN_EARLY_START_PROBE((short)78, "enable_hash_join_early_start_probe"),
    ENABLE_PIPELINE_X_ENGINE((short)79, "enable_pipeline_x_engine"),
    ENABLE_MEMTABLE_ON_SINK_NODE((short)80, "enable_memtable_on_sink_node");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ABORT_ON_ERROR
          return ABORT_ON_ERROR;
        case 2: // MAX_ERRORS
          return MAX_ERRORS;
        case 3: // DISABLE_CODEGEN
          return DISABLE_CODEGEN;
        case 4: // BATCH_SIZE
          return BATCH_SIZE;
        case 5: // NUM_NODES
          return NUM_NODES;
        case 6: // MAX_SCAN_RANGE_LENGTH
          return MAX_SCAN_RANGE_LENGTH;
        case 7: // NUM_SCANNER_THREADS
          return NUM_SCANNER_THREADS;
        case 8: // MAX_IO_BUFFERS
          return MAX_IO_BUFFERS;
        case 9: // ALLOW_UNSUPPORTED_FORMATS
          return ALLOW_UNSUPPORTED_FORMATS;
        case 10: // DEFAULT_ORDER_BY_LIMIT
          return DEFAULT_ORDER_BY_LIMIT;
        case 12: // MEM_LIMIT
          return MEM_LIMIT;
        case 13: // ABORT_ON_DEFAULT_LIMIT_EXCEEDED
          return ABORT_ON_DEFAULT_LIMIT_EXCEEDED;
        case 14: // QUERY_TIMEOUT
          return QUERY_TIMEOUT;
        case 15: // IS_REPORT_SUCCESS
          return IS_REPORT_SUCCESS;
        case 16: // CODEGEN_LEVEL
          return CODEGEN_LEVEL;
        case 17: // KUDU_LATEST_OBSERVED_TS
          return KUDU_LATEST_OBSERVED_TS;
        case 18: // QUERY_TYPE
          return QUERY_TYPE;
        case 19: // MIN_RESERVATION
          return MIN_RESERVATION;
        case 20: // MAX_RESERVATION
          return MAX_RESERVATION;
        case 21: // INITIAL_RESERVATION_TOTAL_CLAIMS
          return INITIAL_RESERVATION_TOTAL_CLAIMS;
        case 22: // BUFFER_POOL_LIMIT
          return BUFFER_POOL_LIMIT;
        case 23: // DEFAULT_SPILLABLE_BUFFER_SIZE
          return DEFAULT_SPILLABLE_BUFFER_SIZE;
        case 24: // MIN_SPILLABLE_BUFFER_SIZE
          return MIN_SPILLABLE_BUFFER_SIZE;
        case 25: // MAX_ROW_SIZE
          return MAX_ROW_SIZE;
        case 26: // DISABLE_STREAM_PREAGGREGATIONS
          return DISABLE_STREAM_PREAGGREGATIONS;
        case 27: // MT_DOP
          return MT_DOP;
        case 28: // LOAD_MEM_LIMIT
          return LOAD_MEM_LIMIT;
        case 29: // MAX_SCAN_KEY_NUM
          return MAX_SCAN_KEY_NUM;
        case 30: // MAX_PUSHDOWN_CONDITIONS_PER_COLUMN
          return MAX_PUSHDOWN_CONDITIONS_PER_COLUMN;
        case 31: // ENABLE_SPILLING
          return ENABLE_SPILLING;
        case 32: // ENABLE_ENABLE_EXCHANGE_NODE_PARALLEL_MERGE
          return ENABLE_ENABLE_EXCHANGE_NODE_PARALLEL_MERGE;
        case 33: // RUNTIME_FILTER_WAIT_TIME_MS
          return RUNTIME_FILTER_WAIT_TIME_MS;
        case 34: // RUNTIME_FILTER_MAX_IN_NUM
          return RUNTIME_FILTER_MAX_IN_NUM;
        case 42: // RESOURCE_LIMIT
          return RESOURCE_LIMIT;
        case 43: // RETURN_OBJECT_DATA_AS_BINARY
          return RETURN_OBJECT_DATA_AS_BINARY;
        case 44: // TRIM_TAILING_SPACES_FOR_EXTERNAL_TABLE_QUERY
          return TRIM_TAILING_SPACES_FOR_EXTERNAL_TABLE_QUERY;
        case 45: // ENABLE_FUNCTION_PUSHDOWN
          return ENABLE_FUNCTION_PUSHDOWN;
        case 46: // FRAGMENT_TRANSMISSION_COMPRESSION_CODEC
          return FRAGMENT_TRANSMISSION_COMPRESSION_CODEC;
        case 48: // ENABLE_LOCAL_EXCHANGE
          return ENABLE_LOCAL_EXCHANGE;
        case 49: // SKIP_STORAGE_ENGINE_MERGE
          return SKIP_STORAGE_ENGINE_MERGE;
        case 50: // SKIP_DELETE_PREDICATE
          return SKIP_DELETE_PREDICATE;
        case 51: // ENABLE_NEW_SHUFFLE_HASH_METHOD
          return ENABLE_NEW_SHUFFLE_HASH_METHOD;
        case 52: // BE_EXEC_VERSION
          return BE_EXEC_VERSION;
        case 53: // PARTITIONED_HASH_JOIN_ROWS_THRESHOLD
          return PARTITIONED_HASH_JOIN_ROWS_THRESHOLD;
        case 54: // ENABLE_SHARE_HASH_TABLE_FOR_BROADCAST_JOIN
          return ENABLE_SHARE_HASH_TABLE_FOR_BROADCAST_JOIN;
        case 55: // CHECK_OVERFLOW_FOR_DECIMAL
          return CHECK_OVERFLOW_FOR_DECIMAL;
        case 56: // SKIP_DELETE_BITMAP
          return SKIP_DELETE_BITMAP;
        case 57: // ENABLE_PIPELINE_ENGINE
          return ENABLE_PIPELINE_ENGINE;
        case 58: // REPEAT_MAX_NUM
          return REPEAT_MAX_NUM;
        case 59: // EXTERNAL_SORT_BYTES_THRESHOLD
          return EXTERNAL_SORT_BYTES_THRESHOLD;
        case 60: // PARTITIONED_HASH_AGG_ROWS_THRESHOLD
          return PARTITIONED_HASH_AGG_ROWS_THRESHOLD;
        case 61: // ENABLE_FILE_CACHE
          return ENABLE_FILE_CACHE;
        case 62: // INSERT_TIMEOUT
          return INSERT_TIMEOUT;
        case 63: // EXECUTION_TIMEOUT
          return EXECUTION_TIMEOUT;
        case 64: // DRY_RUN_QUERY
          return DRY_RUN_QUERY;
        case 65: // ENABLE_COMMON_EXPR_PUSHDOWN
          return ENABLE_COMMON_EXPR_PUSHDOWN;
        case 66: // PARALLEL_INSTANCE
          return PARALLEL_INSTANCE;
        case 67: // MYSQL_ROW_BINARY_FORMAT
          return MYSQL_ROW_BINARY_FORMAT;
        case 68: // EXTERNAL_AGG_BYTES_THRESHOLD
          return EXTERNAL_AGG_BYTES_THRESHOLD;
        case 69: // EXTERNAL_AGG_PARTITION_BITS
          return EXTERNAL_AGG_PARTITION_BITS;
        case 70: // FILE_CACHE_BASE_PATH
          return FILE_CACHE_BASE_PATH;
        case 71: // ENABLE_PARQUET_LAZY_MAT
          return ENABLE_PARQUET_LAZY_MAT;
        case 72: // ENABLE_ORC_LAZY_MAT
          return ENABLE_ORC_LAZY_MAT;
        case 73: // SCAN_QUEUE_MEM_LIMIT
          return SCAN_QUEUE_MEM_LIMIT;
        case 74: // ENABLE_SCAN_NODE_RUN_SERIAL
          return ENABLE_SCAN_NODE_RUN_SERIAL;
        case 75: // ENABLE_INSERT_STRICT
          return ENABLE_INSERT_STRICT;
        case 76: // ENABLE_INVERTED_INDEX_QUERY
          return ENABLE_INVERTED_INDEX_QUERY;
        case 77: // TRUNCATE_CHAR_OR_VARCHAR_COLUMNS
          return TRUNCATE_CHAR_OR_VARCHAR_COLUMNS;
        case 78: // ENABLE_HASH_JOIN_EARLY_START_PROBE
          return ENABLE_HASH_JOIN_EARLY_START_PROBE;
        case 79: // ENABLE_PIPELINE_X_ENGINE
          return ENABLE_PIPELINE_X_ENGINE;
        case 80: // ENABLE_MEMTABLE_ON_SINK_NODE
          return ENABLE_MEMTABLE_ON_SINK_NODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ABORT_ON_ERROR_ISSET_ID = 0;
  private static final int __MAX_ERRORS_ISSET_ID = 1;
  private static final int __DISABLE_CODEGEN_ISSET_ID = 2;
  private static final int __BATCH_SIZE_ISSET_ID = 3;
  private static final int __NUM_NODES_ISSET_ID = 4;
  private static final int __MAX_SCAN_RANGE_LENGTH_ISSET_ID = 5;
  private static final int __NUM_SCANNER_THREADS_ISSET_ID = 6;
  private static final int __MAX_IO_BUFFERS_ISSET_ID = 7;
  private static final int __ALLOW_UNSUPPORTED_FORMATS_ISSET_ID = 8;
  private static final int __DEFAULT_ORDER_BY_LIMIT_ISSET_ID = 9;
  private static final int __MEM_LIMIT_ISSET_ID = 10;
  private static final int __ABORT_ON_DEFAULT_LIMIT_EXCEEDED_ISSET_ID = 11;
  private static final int __QUERY_TIMEOUT_ISSET_ID = 12;
  private static final int __IS_REPORT_SUCCESS_ISSET_ID = 13;
  private static final int __CODEGEN_LEVEL_ISSET_ID = 14;
  private static final int __KUDU_LATEST_OBSERVED_TS_ISSET_ID = 15;
  private static final int __MIN_RESERVATION_ISSET_ID = 16;
  private static final int __MAX_RESERVATION_ISSET_ID = 17;
  private static final int __INITIAL_RESERVATION_TOTAL_CLAIMS_ISSET_ID = 18;
  private static final int __BUFFER_POOL_LIMIT_ISSET_ID = 19;
  private static final int __DEFAULT_SPILLABLE_BUFFER_SIZE_ISSET_ID = 20;
  private static final int __MIN_SPILLABLE_BUFFER_SIZE_ISSET_ID = 21;
  private static final int __MAX_ROW_SIZE_ISSET_ID = 22;
  private static final int __DISABLE_STREAM_PREAGGREGATIONS_ISSET_ID = 23;
  private static final int __MT_DOP_ISSET_ID = 24;
  private static final int __LOAD_MEM_LIMIT_ISSET_ID = 25;
  private static final int __MAX_SCAN_KEY_NUM_ISSET_ID = 26;
  private static final int __MAX_PUSHDOWN_CONDITIONS_PER_COLUMN_ISSET_ID = 27;
  private static final int __ENABLE_SPILLING_ISSET_ID = 28;
  private static final int __ENABLE_ENABLE_EXCHANGE_NODE_PARALLEL_MERGE_ISSET_ID = 29;
  private static final int __RUNTIME_FILTER_WAIT_TIME_MS_ISSET_ID = 30;
  private static final int __RUNTIME_FILTER_MAX_IN_NUM_ISSET_ID = 31;
  private static final int __RETURN_OBJECT_DATA_AS_BINARY_ISSET_ID = 32;
  private static final int __TRIM_TAILING_SPACES_FOR_EXTERNAL_TABLE_QUERY_ISSET_ID = 33;
  private static final int __ENABLE_FUNCTION_PUSHDOWN_ISSET_ID = 34;
  private static final int __ENABLE_LOCAL_EXCHANGE_ISSET_ID = 35;
  private static final int __SKIP_STORAGE_ENGINE_MERGE_ISSET_ID = 36;
  private static final int __SKIP_DELETE_PREDICATE_ISSET_ID = 37;
  private static final int __ENABLE_NEW_SHUFFLE_HASH_METHOD_ISSET_ID = 38;
  private static final int __BE_EXEC_VERSION_ISSET_ID = 39;
  private static final int __PARTITIONED_HASH_JOIN_ROWS_THRESHOLD_ISSET_ID = 40;
  private static final int __ENABLE_SHARE_HASH_TABLE_FOR_BROADCAST_JOIN_ISSET_ID = 41;
  private static final int __CHECK_OVERFLOW_FOR_DECIMAL_ISSET_ID = 42;
  private static final int __SKIP_DELETE_BITMAP_ISSET_ID = 43;
  private static final int __ENABLE_PIPELINE_ENGINE_ISSET_ID = 44;
  private static final int __REPEAT_MAX_NUM_ISSET_ID = 45;
  private static final int __EXTERNAL_SORT_BYTES_THRESHOLD_ISSET_ID = 46;
  private static final int __PARTITIONED_HASH_AGG_ROWS_THRESHOLD_ISSET_ID = 47;
  private static final int __ENABLE_FILE_CACHE_ISSET_ID = 48;
  private static final int __INSERT_TIMEOUT_ISSET_ID = 49;
  private static final int __EXECUTION_TIMEOUT_ISSET_ID = 50;
  private static final int __DRY_RUN_QUERY_ISSET_ID = 51;
  private static final int __ENABLE_COMMON_EXPR_PUSHDOWN_ISSET_ID = 52;
  private static final int __PARALLEL_INSTANCE_ISSET_ID = 53;
  private static final int __MYSQL_ROW_BINARY_FORMAT_ISSET_ID = 54;
  private static final int __EXTERNAL_AGG_BYTES_THRESHOLD_ISSET_ID = 55;
  private static final int __EXTERNAL_AGG_PARTITION_BITS_ISSET_ID = 56;
  private static final int __ENABLE_PARQUET_LAZY_MAT_ISSET_ID = 57;
  private static final int __ENABLE_ORC_LAZY_MAT_ISSET_ID = 58;
  private static final int __SCAN_QUEUE_MEM_LIMIT_ISSET_ID = 59;
  private static final int __ENABLE_SCAN_NODE_RUN_SERIAL_ISSET_ID = 60;
  private static final int __ENABLE_INSERT_STRICT_ISSET_ID = 61;
  private static final int __ENABLE_INVERTED_INDEX_QUERY_ISSET_ID = 62;
  private static final int __TRUNCATE_CHAR_OR_VARCHAR_COLUMNS_ISSET_ID = 63;
  private static final int __ENABLE_HASH_JOIN_EARLY_START_PROBE_ISSET_ID = 64;
  private static final int __ENABLE_PIPELINE_X_ENGINE_ISSET_ID = 65;
  private static final int __ENABLE_MEMTABLE_ON_SINK_NODE_ISSET_ID = 66;
  private java.util.BitSet __isset_bit_vector = new java.util.BitSet(67);
  private static final _Fields optionals[] = {_Fields.ABORT_ON_ERROR,_Fields.MAX_ERRORS,_Fields.DISABLE_CODEGEN,_Fields.BATCH_SIZE,_Fields.NUM_NODES,_Fields.MAX_SCAN_RANGE_LENGTH,_Fields.NUM_SCANNER_THREADS,_Fields.MAX_IO_BUFFERS,_Fields.ALLOW_UNSUPPORTED_FORMATS,_Fields.DEFAULT_ORDER_BY_LIMIT,_Fields.MEM_LIMIT,_Fields.ABORT_ON_DEFAULT_LIMIT_EXCEEDED,_Fields.QUERY_TIMEOUT,_Fields.IS_REPORT_SUCCESS,_Fields.CODEGEN_LEVEL,_Fields.KUDU_LATEST_OBSERVED_TS,_Fields.QUERY_TYPE,_Fields.MIN_RESERVATION,_Fields.MAX_RESERVATION,_Fields.INITIAL_RESERVATION_TOTAL_CLAIMS,_Fields.BUFFER_POOL_LIMIT,_Fields.DEFAULT_SPILLABLE_BUFFER_SIZE,_Fields.MIN_SPILLABLE_BUFFER_SIZE,_Fields.MAX_ROW_SIZE,_Fields.DISABLE_STREAM_PREAGGREGATIONS,_Fields.MT_DOP,_Fields.LOAD_MEM_LIMIT,_Fields.MAX_SCAN_KEY_NUM,_Fields.MAX_PUSHDOWN_CONDITIONS_PER_COLUMN,_Fields.ENABLE_SPILLING,_Fields.ENABLE_ENABLE_EXCHANGE_NODE_PARALLEL_MERGE,_Fields.RUNTIME_FILTER_WAIT_TIME_MS,_Fields.RUNTIME_FILTER_MAX_IN_NUM,_Fields.RESOURCE_LIMIT,_Fields.RETURN_OBJECT_DATA_AS_BINARY,_Fields.TRIM_TAILING_SPACES_FOR_EXTERNAL_TABLE_QUERY,_Fields.ENABLE_FUNCTION_PUSHDOWN,_Fields.FRAGMENT_TRANSMISSION_COMPRESSION_CODEC,_Fields.ENABLE_LOCAL_EXCHANGE,_Fields.SKIP_STORAGE_ENGINE_MERGE,_Fields.SKIP_DELETE_PREDICATE,_Fields.ENABLE_NEW_SHUFFLE_HASH_METHOD,_Fields.BE_EXEC_VERSION,_Fields.PARTITIONED_HASH_JOIN_ROWS_THRESHOLD,_Fields.ENABLE_SHARE_HASH_TABLE_FOR_BROADCAST_JOIN,_Fields.CHECK_OVERFLOW_FOR_DECIMAL,_Fields.SKIP_DELETE_BITMAP,_Fields.ENABLE_PIPELINE_ENGINE,_Fields.REPEAT_MAX_NUM,_Fields.EXTERNAL_SORT_BYTES_THRESHOLD,_Fields.PARTITIONED_HASH_AGG_ROWS_THRESHOLD,_Fields.ENABLE_FILE_CACHE,_Fields.INSERT_TIMEOUT,_Fields.EXECUTION_TIMEOUT,_Fields.DRY_RUN_QUERY,_Fields.ENABLE_COMMON_EXPR_PUSHDOWN,_Fields.PARALLEL_INSTANCE,_Fields.MYSQL_ROW_BINARY_FORMAT,_Fields.EXTERNAL_AGG_BYTES_THRESHOLD,_Fields.EXTERNAL_AGG_PARTITION_BITS,_Fields.FILE_CACHE_BASE_PATH,_Fields.ENABLE_PARQUET_LAZY_MAT,_Fields.ENABLE_ORC_LAZY_MAT,_Fields.SCAN_QUEUE_MEM_LIMIT,_Fields.ENABLE_SCAN_NODE_RUN_SERIAL,_Fields.ENABLE_INSERT_STRICT,_Fields.ENABLE_INVERTED_INDEX_QUERY,_Fields.TRUNCATE_CHAR_OR_VARCHAR_COLUMNS,_Fields.ENABLE_HASH_JOIN_EARLY_START_PROBE,_Fields.ENABLE_PIPELINE_X_ENGINE,_Fields.ENABLE_MEMTABLE_ON_SINK_NODE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ABORT_ON_ERROR, new org.apache.thrift.meta_data.FieldMetaData("abort_on_error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MAX_ERRORS, new org.apache.thrift.meta_data.FieldMetaData("max_errors", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISABLE_CODEGEN, new org.apache.thrift.meta_data.FieldMetaData("disable_codegen", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BATCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("batch_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUM_NODES, new org.apache.thrift.meta_data.FieldMetaData("num_nodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_SCAN_RANGE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("max_scan_range_length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_SCANNER_THREADS, new org.apache.thrift.meta_data.FieldMetaData("num_scanner_threads", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_IO_BUFFERS, new org.apache.thrift.meta_data.FieldMetaData("max_io_buffers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALLOW_UNSUPPORTED_FORMATS, new org.apache.thrift.meta_data.FieldMetaData("allow_unsupported_formats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_ORDER_BY_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("default_order_by_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("mem_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ABORT_ON_DEFAULT_LIMIT_EXCEEDED, new org.apache.thrift.meta_data.FieldMetaData("abort_on_default_limit_exceeded", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.QUERY_TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("query_timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_REPORT_SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("is_report_success", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CODEGEN_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("codegen_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KUDU_LATEST_OBSERVED_TS, new org.apache.thrift.meta_data.FieldMetaData("kudu_latest_observed_ts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("query_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TQueryType.class)));
    tmpMap.put(_Fields.MIN_RESERVATION, new org.apache.thrift.meta_data.FieldMetaData("min_reservation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_RESERVATION, new org.apache.thrift.meta_data.FieldMetaData("max_reservation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INITIAL_RESERVATION_TOTAL_CLAIMS, new org.apache.thrift.meta_data.FieldMetaData("initial_reservation_total_claims", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BUFFER_POOL_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("buffer_pool_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEFAULT_SPILLABLE_BUFFER_SIZE, new org.apache.thrift.meta_data.FieldMetaData("default_spillable_buffer_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_SPILLABLE_BUFFER_SIZE, new org.apache.thrift.meta_data.FieldMetaData("min_spillable_buffer_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_ROW_SIZE, new org.apache.thrift.meta_data.FieldMetaData("max_row_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISABLE_STREAM_PREAGGREGATIONS, new org.apache.thrift.meta_data.FieldMetaData("disable_stream_preaggregations", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MT_DOP, new org.apache.thrift.meta_data.FieldMetaData("mt_dop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAD_MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("load_mem_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_SCAN_KEY_NUM, new org.apache.thrift.meta_data.FieldMetaData("max_scan_key_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_PUSHDOWN_CONDITIONS_PER_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("max_pushdown_conditions_per_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENABLE_SPILLING, new org.apache.thrift.meta_data.FieldMetaData("enable_spilling", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_ENABLE_EXCHANGE_NODE_PARALLEL_MERGE, new org.apache.thrift.meta_data.FieldMetaData("enable_enable_exchange_node_parallel_merge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RUNTIME_FILTER_WAIT_TIME_MS, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_wait_time_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RUNTIME_FILTER_MAX_IN_NUM, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_max_in_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESOURCE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("resource_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResourceLimit.class)));
    tmpMap.put(_Fields.RETURN_OBJECT_DATA_AS_BINARY, new org.apache.thrift.meta_data.FieldMetaData("return_object_data_as_binary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TRIM_TAILING_SPACES_FOR_EXTERNAL_TABLE_QUERY, new org.apache.thrift.meta_data.FieldMetaData("trim_tailing_spaces_for_external_table_query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_FUNCTION_PUSHDOWN, new org.apache.thrift.meta_data.FieldMetaData("enable_function_pushdown", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FRAGMENT_TRANSMISSION_COMPRESSION_CODEC, new org.apache.thrift.meta_data.FieldMetaData("fragment_transmission_compression_codec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENABLE_LOCAL_EXCHANGE, new org.apache.thrift.meta_data.FieldMetaData("enable_local_exchange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SKIP_STORAGE_ENGINE_MERGE, new org.apache.thrift.meta_data.FieldMetaData("skip_storage_engine_merge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SKIP_DELETE_PREDICATE, new org.apache.thrift.meta_data.FieldMetaData("skip_delete_predicate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_NEW_SHUFFLE_HASH_METHOD, new org.apache.thrift.meta_data.FieldMetaData("enable_new_shuffle_hash_method", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BE_EXEC_VERSION, new org.apache.thrift.meta_data.FieldMetaData("be_exec_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTITIONED_HASH_JOIN_ROWS_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("partitioned_hash_join_rows_threshold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENABLE_SHARE_HASH_TABLE_FOR_BROADCAST_JOIN, new org.apache.thrift.meta_data.FieldMetaData("enable_share_hash_table_for_broadcast_join", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHECK_OVERFLOW_FOR_DECIMAL, new org.apache.thrift.meta_data.FieldMetaData("check_overflow_for_decimal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SKIP_DELETE_BITMAP, new org.apache.thrift.meta_data.FieldMetaData("skip_delete_bitmap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_PIPELINE_ENGINE, new org.apache.thrift.meta_data.FieldMetaData("enable_pipeline_engine", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REPEAT_MAX_NUM, new org.apache.thrift.meta_data.FieldMetaData("repeat_max_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTERNAL_SORT_BYTES_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("external_sort_bytes_threshold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITIONED_HASH_AGG_ROWS_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("partitioned_hash_agg_rows_threshold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENABLE_FILE_CACHE, new org.apache.thrift.meta_data.FieldMetaData("enable_file_cache", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INSERT_TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("insert_timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXECUTION_TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("execution_timeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DRY_RUN_QUERY, new org.apache.thrift.meta_data.FieldMetaData("dry_run_query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_COMMON_EXPR_PUSHDOWN, new org.apache.thrift.meta_data.FieldMetaData("enable_common_expr_pushdown", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARALLEL_INSTANCE, new org.apache.thrift.meta_data.FieldMetaData("parallel_instance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MYSQL_ROW_BINARY_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("mysql_row_binary_format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXTERNAL_AGG_BYTES_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("external_agg_bytes_threshold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXTERNAL_AGG_PARTITION_BITS, new org.apache.thrift.meta_data.FieldMetaData("external_agg_partition_bits", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_CACHE_BASE_PATH, new org.apache.thrift.meta_data.FieldMetaData("file_cache_base_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENABLE_PARQUET_LAZY_MAT, new org.apache.thrift.meta_data.FieldMetaData("enable_parquet_lazy_mat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_ORC_LAZY_MAT, new org.apache.thrift.meta_data.FieldMetaData("enable_orc_lazy_mat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SCAN_QUEUE_MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("scan_queue_mem_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENABLE_SCAN_NODE_RUN_SERIAL, new org.apache.thrift.meta_data.FieldMetaData("enable_scan_node_run_serial", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_INSERT_STRICT, new org.apache.thrift.meta_data.FieldMetaData("enable_insert_strict", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_INVERTED_INDEX_QUERY, new org.apache.thrift.meta_data.FieldMetaData("enable_inverted_index_query", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TRUNCATE_CHAR_OR_VARCHAR_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("truncate_char_or_varchar_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_HASH_JOIN_EARLY_START_PROBE, new org.apache.thrift.meta_data.FieldMetaData("enable_hash_join_early_start_probe", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_PIPELINE_X_ENGINE, new org.apache.thrift.meta_data.FieldMetaData("enable_pipeline_x_engine", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_MEMTABLE_ON_SINK_NODE, new org.apache.thrift.meta_data.FieldMetaData("enable_memtable_on_sink_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueryOptions.class, metaDataMap);
  }

  public TQueryOptions() {
    this.abort_on_error = false;

    this.max_errors = 0;

    this.disable_codegen = true;

    this.batch_size = 0;

    this.num_nodes = 0;

    this.max_scan_range_length = 0L;

    this.num_scanner_threads = 0;

    this.max_io_buffers = 0;

    this.allow_unsupported_formats = false;

    this.default_order_by_limit = -1L;

    this.mem_limit = 2147483648L;

    this.abort_on_default_limit_exceeded = false;

    this.query_timeout = 3600;

    this.is_report_success = false;

    this.codegen_level = 0;

    this.kudu_latest_observed_ts = 9223372036854775807L;

    this.query_type = org.apache.doris.thrift.TQueryType.SELECT;

    this.min_reservation = 0L;

    this.max_reservation = 107374182400L;

    this.initial_reservation_total_claims = 2147483647L;

    this.buffer_pool_limit = 2147483648L;

    this.default_spillable_buffer_size = 2097152L;

    this.min_spillable_buffer_size = 65536L;

    this.max_row_size = 524288L;

    this.disable_stream_preaggregations = false;

    this.mt_dop = 0;

    this.load_mem_limit = 0L;

    this.enable_spilling = false;

    this.enable_enable_exchange_node_parallel_merge = false;

    this.runtime_filter_wait_time_ms = 1000;

    this.runtime_filter_max_in_num = 1024;

    this.return_object_data_as_binary = false;

    this.trim_tailing_spaces_for_external_table_query = false;

    this.skip_storage_engine_merge = false;

    this.skip_delete_predicate = false;

    this.be_exec_version = 0;

    this.partitioned_hash_join_rows_threshold = 0;

    this.check_overflow_for_decimal = false;

    this.skip_delete_bitmap = false;

    this.enable_pipeline_engine = false;

    this.repeat_max_num = 0;

    this.external_sort_bytes_threshold = 0L;

    this.partitioned_hash_agg_rows_threshold = 0;

    this.enable_file_cache = false;

    this.insert_timeout = 14400;

    this.execution_timeout = 3600;

    this.dry_run_query = false;

    this.enable_common_expr_pushdown = false;

    this.parallel_instance = 1;

    this.mysql_row_binary_format = false;

    this.external_agg_bytes_threshold = 0L;

    this.external_agg_partition_bits = 4;

    this.enable_parquet_lazy_mat = true;

    this.enable_orc_lazy_mat = true;

    this.enable_scan_node_run_serial = false;

    this.enable_insert_strict = false;

    this.enable_inverted_index_query = true;

    this.truncate_char_or_varchar_columns = false;

    this.enable_hash_join_early_start_probe = false;

    this.enable_pipeline_x_engine = false;

    this.enable_memtable_on_sink_node = false;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueryOptions(TQueryOptions other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.abort_on_error = other.abort_on_error;
    this.max_errors = other.max_errors;
    this.disable_codegen = other.disable_codegen;
    this.batch_size = other.batch_size;
    this.num_nodes = other.num_nodes;
    this.max_scan_range_length = other.max_scan_range_length;
    this.num_scanner_threads = other.num_scanner_threads;
    this.max_io_buffers = other.max_io_buffers;
    this.allow_unsupported_formats = other.allow_unsupported_formats;
    this.default_order_by_limit = other.default_order_by_limit;
    this.mem_limit = other.mem_limit;
    this.abort_on_default_limit_exceeded = other.abort_on_default_limit_exceeded;
    this.query_timeout = other.query_timeout;
    this.is_report_success = other.is_report_success;
    this.codegen_level = other.codegen_level;
    this.kudu_latest_observed_ts = other.kudu_latest_observed_ts;
    if (other.isSetQueryType()) {
      this.query_type = other.query_type;
    }
    this.min_reservation = other.min_reservation;
    this.max_reservation = other.max_reservation;
    this.initial_reservation_total_claims = other.initial_reservation_total_claims;
    this.buffer_pool_limit = other.buffer_pool_limit;
    this.default_spillable_buffer_size = other.default_spillable_buffer_size;
    this.min_spillable_buffer_size = other.min_spillable_buffer_size;
    this.max_row_size = other.max_row_size;
    this.disable_stream_preaggregations = other.disable_stream_preaggregations;
    this.mt_dop = other.mt_dop;
    this.load_mem_limit = other.load_mem_limit;
    this.max_scan_key_num = other.max_scan_key_num;
    this.max_pushdown_conditions_per_column = other.max_pushdown_conditions_per_column;
    this.enable_spilling = other.enable_spilling;
    this.enable_enable_exchange_node_parallel_merge = other.enable_enable_exchange_node_parallel_merge;
    this.runtime_filter_wait_time_ms = other.runtime_filter_wait_time_ms;
    this.runtime_filter_max_in_num = other.runtime_filter_max_in_num;
    if (other.isSetResourceLimit()) {
      this.resource_limit = new TResourceLimit(other.resource_limit);
    }
    this.return_object_data_as_binary = other.return_object_data_as_binary;
    this.trim_tailing_spaces_for_external_table_query = other.trim_tailing_spaces_for_external_table_query;
    this.enable_function_pushdown = other.enable_function_pushdown;
    if (other.isSetFragmentTransmissionCompressionCodec()) {
      this.fragment_transmission_compression_codec = other.fragment_transmission_compression_codec;
    }
    this.enable_local_exchange = other.enable_local_exchange;
    this.skip_storage_engine_merge = other.skip_storage_engine_merge;
    this.skip_delete_predicate = other.skip_delete_predicate;
    this.enable_new_shuffle_hash_method = other.enable_new_shuffle_hash_method;
    this.be_exec_version = other.be_exec_version;
    this.partitioned_hash_join_rows_threshold = other.partitioned_hash_join_rows_threshold;
    this.enable_share_hash_table_for_broadcast_join = other.enable_share_hash_table_for_broadcast_join;
    this.check_overflow_for_decimal = other.check_overflow_for_decimal;
    this.skip_delete_bitmap = other.skip_delete_bitmap;
    this.enable_pipeline_engine = other.enable_pipeline_engine;
    this.repeat_max_num = other.repeat_max_num;
    this.external_sort_bytes_threshold = other.external_sort_bytes_threshold;
    this.partitioned_hash_agg_rows_threshold = other.partitioned_hash_agg_rows_threshold;
    this.enable_file_cache = other.enable_file_cache;
    this.insert_timeout = other.insert_timeout;
    this.execution_timeout = other.execution_timeout;
    this.dry_run_query = other.dry_run_query;
    this.enable_common_expr_pushdown = other.enable_common_expr_pushdown;
    this.parallel_instance = other.parallel_instance;
    this.mysql_row_binary_format = other.mysql_row_binary_format;
    this.external_agg_bytes_threshold = other.external_agg_bytes_threshold;
    this.external_agg_partition_bits = other.external_agg_partition_bits;
    if (other.isSetFileCacheBasePath()) {
      this.file_cache_base_path = other.file_cache_base_path;
    }
    this.enable_parquet_lazy_mat = other.enable_parquet_lazy_mat;
    this.enable_orc_lazy_mat = other.enable_orc_lazy_mat;
    this.scan_queue_mem_limit = other.scan_queue_mem_limit;
    this.enable_scan_node_run_serial = other.enable_scan_node_run_serial;
    this.enable_insert_strict = other.enable_insert_strict;
    this.enable_inverted_index_query = other.enable_inverted_index_query;
    this.truncate_char_or_varchar_columns = other.truncate_char_or_varchar_columns;
    this.enable_hash_join_early_start_probe = other.enable_hash_join_early_start_probe;
    this.enable_pipeline_x_engine = other.enable_pipeline_x_engine;
    this.enable_memtable_on_sink_node = other.enable_memtable_on_sink_node;
  }

  @Override
  public TQueryOptions deepCopy() {
    return new TQueryOptions(this);
  }

  @Override
  public void clear() {
    this.abort_on_error = false;

    this.max_errors = 0;

    this.disable_codegen = true;

    this.batch_size = 0;

    this.num_nodes = 0;

    this.max_scan_range_length = 0L;

    this.num_scanner_threads = 0;

    this.max_io_buffers = 0;

    this.allow_unsupported_formats = false;

    this.default_order_by_limit = -1L;

    this.mem_limit = 2147483648L;

    this.abort_on_default_limit_exceeded = false;

    this.query_timeout = 3600;

    this.is_report_success = false;

    this.codegen_level = 0;

    this.kudu_latest_observed_ts = 9223372036854775807L;

    this.query_type = org.apache.doris.thrift.TQueryType.SELECT;

    this.min_reservation = 0L;

    this.max_reservation = 107374182400L;

    this.initial_reservation_total_claims = 2147483647L;

    this.buffer_pool_limit = 2147483648L;

    this.default_spillable_buffer_size = 2097152L;

    this.min_spillable_buffer_size = 65536L;

    this.max_row_size = 524288L;

    this.disable_stream_preaggregations = false;

    this.mt_dop = 0;

    this.load_mem_limit = 0L;

    setMaxScanKeyNumIsSet(false);
    this.max_scan_key_num = 0;
    setMaxPushdownConditionsPerColumnIsSet(false);
    this.max_pushdown_conditions_per_column = 0;
    this.enable_spilling = false;

    this.enable_enable_exchange_node_parallel_merge = false;

    this.runtime_filter_wait_time_ms = 1000;

    this.runtime_filter_max_in_num = 1024;

    this.resource_limit = null;
    this.return_object_data_as_binary = false;

    this.trim_tailing_spaces_for_external_table_query = false;

    setEnableFunctionPushdownIsSet(false);
    this.enable_function_pushdown = false;
    this.fragment_transmission_compression_codec = null;
    setEnableLocalExchangeIsSet(false);
    this.enable_local_exchange = false;
    this.skip_storage_engine_merge = false;

    this.skip_delete_predicate = false;

    setEnableNewShuffleHashMethodIsSet(false);
    this.enable_new_shuffle_hash_method = false;
    this.be_exec_version = 0;

    this.partitioned_hash_join_rows_threshold = 0;

    setEnableShareHashTableForBroadcastJoinIsSet(false);
    this.enable_share_hash_table_for_broadcast_join = false;
    this.check_overflow_for_decimal = false;

    this.skip_delete_bitmap = false;

    this.enable_pipeline_engine = false;

    this.repeat_max_num = 0;

    this.external_sort_bytes_threshold = 0L;

    this.partitioned_hash_agg_rows_threshold = 0;

    this.enable_file_cache = false;

    this.insert_timeout = 14400;

    this.execution_timeout = 3600;

    this.dry_run_query = false;

    this.enable_common_expr_pushdown = false;

    this.parallel_instance = 1;

    this.mysql_row_binary_format = false;

    this.external_agg_bytes_threshold = 0L;

    this.external_agg_partition_bits = 4;

    this.file_cache_base_path = null;
    this.enable_parquet_lazy_mat = true;

    this.enable_orc_lazy_mat = true;

    setScanQueueMemLimitIsSet(false);
    this.scan_queue_mem_limit = 0;
    this.enable_scan_node_run_serial = false;

    this.enable_insert_strict = false;

    this.enable_inverted_index_query = true;

    this.truncate_char_or_varchar_columns = false;

    this.enable_hash_join_early_start_probe = false;

    this.enable_pipeline_x_engine = false;

    this.enable_memtable_on_sink_node = false;

  }

  public boolean isAbortOnError() {
    return this.abort_on_error;
  }

  public TQueryOptions setAbortOnError(boolean abort_on_error) {
    this.abort_on_error = abort_on_error;
    setAbortOnErrorIsSet(true);
    return this;
  }

  public void unsetAbortOnError() {
    __isset_bit_vector.clear(__ABORT_ON_ERROR_ISSET_ID);
  }

  /** Returns true if field abort_on_error is set (has been assigned a value) and false otherwise */
  public boolean isSetAbortOnError() {
    return __isset_bit_vector.get(__ABORT_ON_ERROR_ISSET_ID);
  }

  public void setAbortOnErrorIsSet(boolean value) {
    __isset_bit_vector.set(__ABORT_ON_ERROR_ISSET_ID, value);
  }

  public int getMaxErrors() {
    return this.max_errors;
  }

  public TQueryOptions setMaxErrors(int max_errors) {
    this.max_errors = max_errors;
    setMaxErrorsIsSet(true);
    return this;
  }

  public void unsetMaxErrors() {
    __isset_bit_vector.clear(__MAX_ERRORS_ISSET_ID);
  }

  /** Returns true if field max_errors is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxErrors() {
    return __isset_bit_vector.get(__MAX_ERRORS_ISSET_ID);
  }

  public void setMaxErrorsIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_ERRORS_ISSET_ID, value);
  }

  public boolean isDisableCodegen() {
    return this.disable_codegen;
  }

  public TQueryOptions setDisableCodegen(boolean disable_codegen) {
    this.disable_codegen = disable_codegen;
    setDisableCodegenIsSet(true);
    return this;
  }

  public void unsetDisableCodegen() {
    __isset_bit_vector.clear(__DISABLE_CODEGEN_ISSET_ID);
  }

  /** Returns true if field disable_codegen is set (has been assigned a value) and false otherwise */
  public boolean isSetDisableCodegen() {
    return __isset_bit_vector.get(__DISABLE_CODEGEN_ISSET_ID);
  }

  public void setDisableCodegenIsSet(boolean value) {
    __isset_bit_vector.set(__DISABLE_CODEGEN_ISSET_ID, value);
  }

  public int getBatchSize() {
    return this.batch_size;
  }

  public TQueryOptions setBatchSize(int batch_size) {
    this.batch_size = batch_size;
    setBatchSizeIsSet(true);
    return this;
  }

  public void unsetBatchSize() {
    __isset_bit_vector.clear(__BATCH_SIZE_ISSET_ID);
  }

  /** Returns true if field batch_size is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchSize() {
    return __isset_bit_vector.get(__BATCH_SIZE_ISSET_ID);
  }

  public void setBatchSizeIsSet(boolean value) {
    __isset_bit_vector.set(__BATCH_SIZE_ISSET_ID, value);
  }

  public int getNumNodes() {
    return this.num_nodes;
  }

  public TQueryOptions setNumNodes(int num_nodes) {
    this.num_nodes = num_nodes;
    setNumNodesIsSet(true);
    return this;
  }

  public void unsetNumNodes() {
    __isset_bit_vector.clear(__NUM_NODES_ISSET_ID);
  }

  /** Returns true if field num_nodes is set (has been assigned a value) and false otherwise */
  public boolean isSetNumNodes() {
    return __isset_bit_vector.get(__NUM_NODES_ISSET_ID);
  }

  public void setNumNodesIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_NODES_ISSET_ID, value);
  }

  public long getMaxScanRangeLength() {
    return this.max_scan_range_length;
  }

  public TQueryOptions setMaxScanRangeLength(long max_scan_range_length) {
    this.max_scan_range_length = max_scan_range_length;
    setMaxScanRangeLengthIsSet(true);
    return this;
  }

  public void unsetMaxScanRangeLength() {
    __isset_bit_vector.clear(__MAX_SCAN_RANGE_LENGTH_ISSET_ID);
  }

  /** Returns true if field max_scan_range_length is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxScanRangeLength() {
    return __isset_bit_vector.get(__MAX_SCAN_RANGE_LENGTH_ISSET_ID);
  }

  public void setMaxScanRangeLengthIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_SCAN_RANGE_LENGTH_ISSET_ID, value);
  }

  public int getNumScannerThreads() {
    return this.num_scanner_threads;
  }

  public TQueryOptions setNumScannerThreads(int num_scanner_threads) {
    this.num_scanner_threads = num_scanner_threads;
    setNumScannerThreadsIsSet(true);
    return this;
  }

  public void unsetNumScannerThreads() {
    __isset_bit_vector.clear(__NUM_SCANNER_THREADS_ISSET_ID);
  }

  /** Returns true if field num_scanner_threads is set (has been assigned a value) and false otherwise */
  public boolean isSetNumScannerThreads() {
    return __isset_bit_vector.get(__NUM_SCANNER_THREADS_ISSET_ID);
  }

  public void setNumScannerThreadsIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_SCANNER_THREADS_ISSET_ID, value);
  }

  public int getMaxIoBuffers() {
    return this.max_io_buffers;
  }

  public TQueryOptions setMaxIoBuffers(int max_io_buffers) {
    this.max_io_buffers = max_io_buffers;
    setMaxIoBuffersIsSet(true);
    return this;
  }

  public void unsetMaxIoBuffers() {
    __isset_bit_vector.clear(__MAX_IO_BUFFERS_ISSET_ID);
  }

  /** Returns true if field max_io_buffers is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxIoBuffers() {
    return __isset_bit_vector.get(__MAX_IO_BUFFERS_ISSET_ID);
  }

  public void setMaxIoBuffersIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_IO_BUFFERS_ISSET_ID, value);
  }

  public boolean isAllowUnsupportedFormats() {
    return this.allow_unsupported_formats;
  }

  public TQueryOptions setAllowUnsupportedFormats(boolean allow_unsupported_formats) {
    this.allow_unsupported_formats = allow_unsupported_formats;
    setAllowUnsupportedFormatsIsSet(true);
    return this;
  }

  public void unsetAllowUnsupportedFormats() {
    __isset_bit_vector.clear(__ALLOW_UNSUPPORTED_FORMATS_ISSET_ID);
  }

  /** Returns true if field allow_unsupported_formats is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowUnsupportedFormats() {
    return __isset_bit_vector.get(__ALLOW_UNSUPPORTED_FORMATS_ISSET_ID);
  }

  public void setAllowUnsupportedFormatsIsSet(boolean value) {
    __isset_bit_vector.set(__ALLOW_UNSUPPORTED_FORMATS_ISSET_ID, value);
  }

  public long getDefaultOrderByLimit() {
    return this.default_order_by_limit;
  }

  public TQueryOptions setDefaultOrderByLimit(long default_order_by_limit) {
    this.default_order_by_limit = default_order_by_limit;
    setDefaultOrderByLimitIsSet(true);
    return this;
  }

  public void unsetDefaultOrderByLimit() {
    __isset_bit_vector.clear(__DEFAULT_ORDER_BY_LIMIT_ISSET_ID);
  }

  /** Returns true if field default_order_by_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultOrderByLimit() {
    return __isset_bit_vector.get(__DEFAULT_ORDER_BY_LIMIT_ISSET_ID);
  }

  public void setDefaultOrderByLimitIsSet(boolean value) {
    __isset_bit_vector.set(__DEFAULT_ORDER_BY_LIMIT_ISSET_ID, value);
  }

  public long getMemLimit() {
    return this.mem_limit;
  }

  public TQueryOptions setMemLimit(long mem_limit) {
    this.mem_limit = mem_limit;
    setMemLimitIsSet(true);
    return this;
  }

  public void unsetMemLimit() {
    __isset_bit_vector.clear(__MEM_LIMIT_ISSET_ID);
  }

  /** Returns true if field mem_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetMemLimit() {
    return __isset_bit_vector.get(__MEM_LIMIT_ISSET_ID);
  }

  public void setMemLimitIsSet(boolean value) {
    __isset_bit_vector.set(__MEM_LIMIT_ISSET_ID, value);
  }

  public boolean isAbortOnDefaultLimitExceeded() {
    return this.abort_on_default_limit_exceeded;
  }

  public TQueryOptions setAbortOnDefaultLimitExceeded(boolean abort_on_default_limit_exceeded) {
    this.abort_on_default_limit_exceeded = abort_on_default_limit_exceeded;
    setAbortOnDefaultLimitExceededIsSet(true);
    return this;
  }

  public void unsetAbortOnDefaultLimitExceeded() {
    __isset_bit_vector.clear(__ABORT_ON_DEFAULT_LIMIT_EXCEEDED_ISSET_ID);
  }

  /** Returns true if field abort_on_default_limit_exceeded is set (has been assigned a value) and false otherwise */
  public boolean isSetAbortOnDefaultLimitExceeded() {
    return __isset_bit_vector.get(__ABORT_ON_DEFAULT_LIMIT_EXCEEDED_ISSET_ID);
  }

  public void setAbortOnDefaultLimitExceededIsSet(boolean value) {
    __isset_bit_vector.set(__ABORT_ON_DEFAULT_LIMIT_EXCEEDED_ISSET_ID, value);
  }

  public int getQueryTimeout() {
    return this.query_timeout;
  }

  public TQueryOptions setQueryTimeout(int query_timeout) {
    this.query_timeout = query_timeout;
    setQueryTimeoutIsSet(true);
    return this;
  }

  public void unsetQueryTimeout() {
    __isset_bit_vector.clear(__QUERY_TIMEOUT_ISSET_ID);
  }

  /** Returns true if field query_timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryTimeout() {
    return __isset_bit_vector.get(__QUERY_TIMEOUT_ISSET_ID);
  }

  public void setQueryTimeoutIsSet(boolean value) {
    __isset_bit_vector.set(__QUERY_TIMEOUT_ISSET_ID, value);
  }

  public boolean isIsReportSuccess() {
    return this.is_report_success;
  }

  public TQueryOptions setIsReportSuccess(boolean is_report_success) {
    this.is_report_success = is_report_success;
    setIsReportSuccessIsSet(true);
    return this;
  }

  public void unsetIsReportSuccess() {
    __isset_bit_vector.clear(__IS_REPORT_SUCCESS_ISSET_ID);
  }

  /** Returns true if field is_report_success is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReportSuccess() {
    return __isset_bit_vector.get(__IS_REPORT_SUCCESS_ISSET_ID);
  }

  public void setIsReportSuccessIsSet(boolean value) {
    __isset_bit_vector.set(__IS_REPORT_SUCCESS_ISSET_ID, value);
  }

  public int getCodegenLevel() {
    return this.codegen_level;
  }

  public TQueryOptions setCodegenLevel(int codegen_level) {
    this.codegen_level = codegen_level;
    setCodegenLevelIsSet(true);
    return this;
  }

  public void unsetCodegenLevel() {
    __isset_bit_vector.clear(__CODEGEN_LEVEL_ISSET_ID);
  }

  /** Returns true if field codegen_level is set (has been assigned a value) and false otherwise */
  public boolean isSetCodegenLevel() {
    return __isset_bit_vector.get(__CODEGEN_LEVEL_ISSET_ID);
  }

  public void setCodegenLevelIsSet(boolean value) {
    __isset_bit_vector.set(__CODEGEN_LEVEL_ISSET_ID, value);
  }

  public long getKuduLatestObservedTs() {
    return this.kudu_latest_observed_ts;
  }

  public TQueryOptions setKuduLatestObservedTs(long kudu_latest_observed_ts) {
    this.kudu_latest_observed_ts = kudu_latest_observed_ts;
    setKuduLatestObservedTsIsSet(true);
    return this;
  }

  public void unsetKuduLatestObservedTs() {
    __isset_bit_vector.clear(__KUDU_LATEST_OBSERVED_TS_ISSET_ID);
  }

  /** Returns true if field kudu_latest_observed_ts is set (has been assigned a value) and false otherwise */
  public boolean isSetKuduLatestObservedTs() {
    return __isset_bit_vector.get(__KUDU_LATEST_OBSERVED_TS_ISSET_ID);
  }

  public void setKuduLatestObservedTsIsSet(boolean value) {
    __isset_bit_vector.set(__KUDU_LATEST_OBSERVED_TS_ISSET_ID, value);
  }

  /**
   * 
   * @see TQueryType
   */
  @org.apache.thrift.annotation.Nullable
  public TQueryType getQueryType() {
    return this.query_type;
  }

  /**
   * 
   * @see TQueryType
   */
  public TQueryOptions setQueryType(@org.apache.thrift.annotation.Nullable TQueryType query_type) {
    this.query_type = query_type;
    return this;
  }

  public void unsetQueryType() {
    this.query_type = null;
  }

  /** Returns true if field query_type is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryType() {
    return this.query_type != null;
  }

  public void setQueryTypeIsSet(boolean value) {
    if (!value) {
      this.query_type = null;
    }
  }

  public long getMinReservation() {
    return this.min_reservation;
  }

  public TQueryOptions setMinReservation(long min_reservation) {
    this.min_reservation = min_reservation;
    setMinReservationIsSet(true);
    return this;
  }

  public void unsetMinReservation() {
    __isset_bit_vector.clear(__MIN_RESERVATION_ISSET_ID);
  }

  /** Returns true if field min_reservation is set (has been assigned a value) and false otherwise */
  public boolean isSetMinReservation() {
    return __isset_bit_vector.get(__MIN_RESERVATION_ISSET_ID);
  }

  public void setMinReservationIsSet(boolean value) {
    __isset_bit_vector.set(__MIN_RESERVATION_ISSET_ID, value);
  }

  public long getMaxReservation() {
    return this.max_reservation;
  }

  public TQueryOptions setMaxReservation(long max_reservation) {
    this.max_reservation = max_reservation;
    setMaxReservationIsSet(true);
    return this;
  }

  public void unsetMaxReservation() {
    __isset_bit_vector.clear(__MAX_RESERVATION_ISSET_ID);
  }

  /** Returns true if field max_reservation is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxReservation() {
    return __isset_bit_vector.get(__MAX_RESERVATION_ISSET_ID);
  }

  public void setMaxReservationIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_RESERVATION_ISSET_ID, value);
  }

  public long getInitialReservationTotalClaims() {
    return this.initial_reservation_total_claims;
  }

  public TQueryOptions setInitialReservationTotalClaims(long initial_reservation_total_claims) {
    this.initial_reservation_total_claims = initial_reservation_total_claims;
    setInitialReservationTotalClaimsIsSet(true);
    return this;
  }

  public void unsetInitialReservationTotalClaims() {
    __isset_bit_vector.clear(__INITIAL_RESERVATION_TOTAL_CLAIMS_ISSET_ID);
  }

  /** Returns true if field initial_reservation_total_claims is set (has been assigned a value) and false otherwise */
  public boolean isSetInitialReservationTotalClaims() {
    return __isset_bit_vector.get(__INITIAL_RESERVATION_TOTAL_CLAIMS_ISSET_ID);
  }

  public void setInitialReservationTotalClaimsIsSet(boolean value) {
    __isset_bit_vector.set(__INITIAL_RESERVATION_TOTAL_CLAIMS_ISSET_ID, value);
  }

  public long getBufferPoolLimit() {
    return this.buffer_pool_limit;
  }

  public TQueryOptions setBufferPoolLimit(long buffer_pool_limit) {
    this.buffer_pool_limit = buffer_pool_limit;
    setBufferPoolLimitIsSet(true);
    return this;
  }

  public void unsetBufferPoolLimit() {
    __isset_bit_vector.clear(__BUFFER_POOL_LIMIT_ISSET_ID);
  }

  /** Returns true if field buffer_pool_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetBufferPoolLimit() {
    return __isset_bit_vector.get(__BUFFER_POOL_LIMIT_ISSET_ID);
  }

  public void setBufferPoolLimitIsSet(boolean value) {
    __isset_bit_vector.set(__BUFFER_POOL_LIMIT_ISSET_ID, value);
  }

  public long getDefaultSpillableBufferSize() {
    return this.default_spillable_buffer_size;
  }

  public TQueryOptions setDefaultSpillableBufferSize(long default_spillable_buffer_size) {
    this.default_spillable_buffer_size = default_spillable_buffer_size;
    setDefaultSpillableBufferSizeIsSet(true);
    return this;
  }

  public void unsetDefaultSpillableBufferSize() {
    __isset_bit_vector.clear(__DEFAULT_SPILLABLE_BUFFER_SIZE_ISSET_ID);
  }

  /** Returns true if field default_spillable_buffer_size is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultSpillableBufferSize() {
    return __isset_bit_vector.get(__DEFAULT_SPILLABLE_BUFFER_SIZE_ISSET_ID);
  }

  public void setDefaultSpillableBufferSizeIsSet(boolean value) {
    __isset_bit_vector.set(__DEFAULT_SPILLABLE_BUFFER_SIZE_ISSET_ID, value);
  }

  public long getMinSpillableBufferSize() {
    return this.min_spillable_buffer_size;
  }

  public TQueryOptions setMinSpillableBufferSize(long min_spillable_buffer_size) {
    this.min_spillable_buffer_size = min_spillable_buffer_size;
    setMinSpillableBufferSizeIsSet(true);
    return this;
  }

  public void unsetMinSpillableBufferSize() {
    __isset_bit_vector.clear(__MIN_SPILLABLE_BUFFER_SIZE_ISSET_ID);
  }

  /** Returns true if field min_spillable_buffer_size is set (has been assigned a value) and false otherwise */
  public boolean isSetMinSpillableBufferSize() {
    return __isset_bit_vector.get(__MIN_SPILLABLE_BUFFER_SIZE_ISSET_ID);
  }

  public void setMinSpillableBufferSizeIsSet(boolean value) {
    __isset_bit_vector.set(__MIN_SPILLABLE_BUFFER_SIZE_ISSET_ID, value);
  }

  public long getMaxRowSize() {
    return this.max_row_size;
  }

  public TQueryOptions setMaxRowSize(long max_row_size) {
    this.max_row_size = max_row_size;
    setMaxRowSizeIsSet(true);
    return this;
  }

  public void unsetMaxRowSize() {
    __isset_bit_vector.clear(__MAX_ROW_SIZE_ISSET_ID);
  }

  /** Returns true if field max_row_size is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxRowSize() {
    return __isset_bit_vector.get(__MAX_ROW_SIZE_ISSET_ID);
  }

  public void setMaxRowSizeIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_ROW_SIZE_ISSET_ID, value);
  }

  public boolean isDisableStreamPreaggregations() {
    return this.disable_stream_preaggregations;
  }

  public TQueryOptions setDisableStreamPreaggregations(boolean disable_stream_preaggregations) {
    this.disable_stream_preaggregations = disable_stream_preaggregations;
    setDisableStreamPreaggregationsIsSet(true);
    return this;
  }

  public void unsetDisableStreamPreaggregations() {
    __isset_bit_vector.clear(__DISABLE_STREAM_PREAGGREGATIONS_ISSET_ID);
  }

  /** Returns true if field disable_stream_preaggregations is set (has been assigned a value) and false otherwise */
  public boolean isSetDisableStreamPreaggregations() {
    return __isset_bit_vector.get(__DISABLE_STREAM_PREAGGREGATIONS_ISSET_ID);
  }

  public void setDisableStreamPreaggregationsIsSet(boolean value) {
    __isset_bit_vector.set(__DISABLE_STREAM_PREAGGREGATIONS_ISSET_ID, value);
  }

  public int getMtDop() {
    return this.mt_dop;
  }

  public TQueryOptions setMtDop(int mt_dop) {
    this.mt_dop = mt_dop;
    setMtDopIsSet(true);
    return this;
  }

  public void unsetMtDop() {
    __isset_bit_vector.clear(__MT_DOP_ISSET_ID);
  }

  /** Returns true if field mt_dop is set (has been assigned a value) and false otherwise */
  public boolean isSetMtDop() {
    return __isset_bit_vector.get(__MT_DOP_ISSET_ID);
  }

  public void setMtDopIsSet(boolean value) {
    __isset_bit_vector.set(__MT_DOP_ISSET_ID, value);
  }

  public long getLoadMemLimit() {
    return this.load_mem_limit;
  }

  public TQueryOptions setLoadMemLimit(long load_mem_limit) {
    this.load_mem_limit = load_mem_limit;
    setLoadMemLimitIsSet(true);
    return this;
  }

  public void unsetLoadMemLimit() {
    __isset_bit_vector.clear(__LOAD_MEM_LIMIT_ISSET_ID);
  }

  /** Returns true if field load_mem_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadMemLimit() {
    return __isset_bit_vector.get(__LOAD_MEM_LIMIT_ISSET_ID);
  }

  public void setLoadMemLimitIsSet(boolean value) {
    __isset_bit_vector.set(__LOAD_MEM_LIMIT_ISSET_ID, value);
  }

  public int getMaxScanKeyNum() {
    return this.max_scan_key_num;
  }

  public TQueryOptions setMaxScanKeyNum(int max_scan_key_num) {
    this.max_scan_key_num = max_scan_key_num;
    setMaxScanKeyNumIsSet(true);
    return this;
  }

  public void unsetMaxScanKeyNum() {
    __isset_bit_vector.clear(__MAX_SCAN_KEY_NUM_ISSET_ID);
  }

  /** Returns true if field max_scan_key_num is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxScanKeyNum() {
    return __isset_bit_vector.get(__MAX_SCAN_KEY_NUM_ISSET_ID);
  }

  public void setMaxScanKeyNumIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_SCAN_KEY_NUM_ISSET_ID, value);
  }

  public int getMaxPushdownConditionsPerColumn() {
    return this.max_pushdown_conditions_per_column;
  }

  public TQueryOptions setMaxPushdownConditionsPerColumn(int max_pushdown_conditions_per_column) {
    this.max_pushdown_conditions_per_column = max_pushdown_conditions_per_column;
    setMaxPushdownConditionsPerColumnIsSet(true);
    return this;
  }

  public void unsetMaxPushdownConditionsPerColumn() {
    __isset_bit_vector.clear(__MAX_PUSHDOWN_CONDITIONS_PER_COLUMN_ISSET_ID);
  }

  /** Returns true if field max_pushdown_conditions_per_column is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxPushdownConditionsPerColumn() {
    return __isset_bit_vector.get(__MAX_PUSHDOWN_CONDITIONS_PER_COLUMN_ISSET_ID);
  }

  public void setMaxPushdownConditionsPerColumnIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_PUSHDOWN_CONDITIONS_PER_COLUMN_ISSET_ID, value);
  }

  public boolean isEnableSpilling() {
    return this.enable_spilling;
  }

  public TQueryOptions setEnableSpilling(boolean enable_spilling) {
    this.enable_spilling = enable_spilling;
    setEnableSpillingIsSet(true);
    return this;
  }

  public void unsetEnableSpilling() {
    __isset_bit_vector.clear(__ENABLE_SPILLING_ISSET_ID);
  }

  /** Returns true if field enable_spilling is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableSpilling() {
    return __isset_bit_vector.get(__ENABLE_SPILLING_ISSET_ID);
  }

  public void setEnableSpillingIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_SPILLING_ISSET_ID, value);
  }

  public boolean isEnableEnableExchangeNodeParallelMerge() {
    return this.enable_enable_exchange_node_parallel_merge;
  }

  public TQueryOptions setEnableEnableExchangeNodeParallelMerge(boolean enable_enable_exchange_node_parallel_merge) {
    this.enable_enable_exchange_node_parallel_merge = enable_enable_exchange_node_parallel_merge;
    setEnableEnableExchangeNodeParallelMergeIsSet(true);
    return this;
  }

  public void unsetEnableEnableExchangeNodeParallelMerge() {
    __isset_bit_vector.clear(__ENABLE_ENABLE_EXCHANGE_NODE_PARALLEL_MERGE_ISSET_ID);
  }

  /** Returns true if field enable_enable_exchange_node_parallel_merge is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableEnableExchangeNodeParallelMerge() {
    return __isset_bit_vector.get(__ENABLE_ENABLE_EXCHANGE_NODE_PARALLEL_MERGE_ISSET_ID);
  }

  public void setEnableEnableExchangeNodeParallelMergeIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_ENABLE_EXCHANGE_NODE_PARALLEL_MERGE_ISSET_ID, value);
  }

  public int getRuntimeFilterWaitTimeMs() {
    return this.runtime_filter_wait_time_ms;
  }

  public TQueryOptions setRuntimeFilterWaitTimeMs(int runtime_filter_wait_time_ms) {
    this.runtime_filter_wait_time_ms = runtime_filter_wait_time_ms;
    setRuntimeFilterWaitTimeMsIsSet(true);
    return this;
  }

  public void unsetRuntimeFilterWaitTimeMs() {
    __isset_bit_vector.clear(__RUNTIME_FILTER_WAIT_TIME_MS_ISSET_ID);
  }

  /** Returns true if field runtime_filter_wait_time_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntimeFilterWaitTimeMs() {
    return __isset_bit_vector.get(__RUNTIME_FILTER_WAIT_TIME_MS_ISSET_ID);
  }

  public void setRuntimeFilterWaitTimeMsIsSet(boolean value) {
    __isset_bit_vector.set(__RUNTIME_FILTER_WAIT_TIME_MS_ISSET_ID, value);
  }

  public int getRuntimeFilterMaxInNum() {
    return this.runtime_filter_max_in_num;
  }

  public TQueryOptions setRuntimeFilterMaxInNum(int runtime_filter_max_in_num) {
    this.runtime_filter_max_in_num = runtime_filter_max_in_num;
    setRuntimeFilterMaxInNumIsSet(true);
    return this;
  }

  public void unsetRuntimeFilterMaxInNum() {
    __isset_bit_vector.clear(__RUNTIME_FILTER_MAX_IN_NUM_ISSET_ID);
  }

  /** Returns true if field runtime_filter_max_in_num is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntimeFilterMaxInNum() {
    return __isset_bit_vector.get(__RUNTIME_FILTER_MAX_IN_NUM_ISSET_ID);
  }

  public void setRuntimeFilterMaxInNumIsSet(boolean value) {
    __isset_bit_vector.set(__RUNTIME_FILTER_MAX_IN_NUM_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TResourceLimit getResourceLimit() {
    return this.resource_limit;
  }

  public TQueryOptions setResourceLimit(@org.apache.thrift.annotation.Nullable TResourceLimit resource_limit) {
    this.resource_limit = resource_limit;
    return this;
  }

  public void unsetResourceLimit() {
    this.resource_limit = null;
  }

  /** Returns true if field resource_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceLimit() {
    return this.resource_limit != null;
  }

  public void setResourceLimitIsSet(boolean value) {
    if (!value) {
      this.resource_limit = null;
    }
  }

  public boolean isReturnObjectDataAsBinary() {
    return this.return_object_data_as_binary;
  }

  public TQueryOptions setReturnObjectDataAsBinary(boolean return_object_data_as_binary) {
    this.return_object_data_as_binary = return_object_data_as_binary;
    setReturnObjectDataAsBinaryIsSet(true);
    return this;
  }

  public void unsetReturnObjectDataAsBinary() {
    __isset_bit_vector.clear(__RETURN_OBJECT_DATA_AS_BINARY_ISSET_ID);
  }

  /** Returns true if field return_object_data_as_binary is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnObjectDataAsBinary() {
    return __isset_bit_vector.get(__RETURN_OBJECT_DATA_AS_BINARY_ISSET_ID);
  }

  public void setReturnObjectDataAsBinaryIsSet(boolean value) {
    __isset_bit_vector.set(__RETURN_OBJECT_DATA_AS_BINARY_ISSET_ID, value);
  }

  public boolean isTrimTailingSpacesForExternalTableQuery() {
    return this.trim_tailing_spaces_for_external_table_query;
  }

  public TQueryOptions setTrimTailingSpacesForExternalTableQuery(boolean trim_tailing_spaces_for_external_table_query) {
    this.trim_tailing_spaces_for_external_table_query = trim_tailing_spaces_for_external_table_query;
    setTrimTailingSpacesForExternalTableQueryIsSet(true);
    return this;
  }

  public void unsetTrimTailingSpacesForExternalTableQuery() {
    __isset_bit_vector.clear(__TRIM_TAILING_SPACES_FOR_EXTERNAL_TABLE_QUERY_ISSET_ID);
  }

  /** Returns true if field trim_tailing_spaces_for_external_table_query is set (has been assigned a value) and false otherwise */
  public boolean isSetTrimTailingSpacesForExternalTableQuery() {
    return __isset_bit_vector.get(__TRIM_TAILING_SPACES_FOR_EXTERNAL_TABLE_QUERY_ISSET_ID);
  }

  public void setTrimTailingSpacesForExternalTableQueryIsSet(boolean value) {
    __isset_bit_vector.set(__TRIM_TAILING_SPACES_FOR_EXTERNAL_TABLE_QUERY_ISSET_ID, value);
  }

  public boolean isEnableFunctionPushdown() {
    return this.enable_function_pushdown;
  }

  public TQueryOptions setEnableFunctionPushdown(boolean enable_function_pushdown) {
    this.enable_function_pushdown = enable_function_pushdown;
    setEnableFunctionPushdownIsSet(true);
    return this;
  }

  public void unsetEnableFunctionPushdown() {
    __isset_bit_vector.clear(__ENABLE_FUNCTION_PUSHDOWN_ISSET_ID);
  }

  /** Returns true if field enable_function_pushdown is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableFunctionPushdown() {
    return __isset_bit_vector.get(__ENABLE_FUNCTION_PUSHDOWN_ISSET_ID);
  }

  public void setEnableFunctionPushdownIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_FUNCTION_PUSHDOWN_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFragmentTransmissionCompressionCodec() {
    return this.fragment_transmission_compression_codec;
  }

  public TQueryOptions setFragmentTransmissionCompressionCodec(@org.apache.thrift.annotation.Nullable java.lang.String fragment_transmission_compression_codec) {
    this.fragment_transmission_compression_codec = fragment_transmission_compression_codec;
    return this;
  }

  public void unsetFragmentTransmissionCompressionCodec() {
    this.fragment_transmission_compression_codec = null;
  }

  /** Returns true if field fragment_transmission_compression_codec is set (has been assigned a value) and false otherwise */
  public boolean isSetFragmentTransmissionCompressionCodec() {
    return this.fragment_transmission_compression_codec != null;
  }

  public void setFragmentTransmissionCompressionCodecIsSet(boolean value) {
    if (!value) {
      this.fragment_transmission_compression_codec = null;
    }
  }

  public boolean isEnableLocalExchange() {
    return this.enable_local_exchange;
  }

  public TQueryOptions setEnableLocalExchange(boolean enable_local_exchange) {
    this.enable_local_exchange = enable_local_exchange;
    setEnableLocalExchangeIsSet(true);
    return this;
  }

  public void unsetEnableLocalExchange() {
    __isset_bit_vector.clear(__ENABLE_LOCAL_EXCHANGE_ISSET_ID);
  }

  /** Returns true if field enable_local_exchange is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableLocalExchange() {
    return __isset_bit_vector.get(__ENABLE_LOCAL_EXCHANGE_ISSET_ID);
  }

  public void setEnableLocalExchangeIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_LOCAL_EXCHANGE_ISSET_ID, value);
  }

  public boolean isSkipStorageEngineMerge() {
    return this.skip_storage_engine_merge;
  }

  public TQueryOptions setSkipStorageEngineMerge(boolean skip_storage_engine_merge) {
    this.skip_storage_engine_merge = skip_storage_engine_merge;
    setSkipStorageEngineMergeIsSet(true);
    return this;
  }

  public void unsetSkipStorageEngineMerge() {
    __isset_bit_vector.clear(__SKIP_STORAGE_ENGINE_MERGE_ISSET_ID);
  }

  /** Returns true if field skip_storage_engine_merge is set (has been assigned a value) and false otherwise */
  public boolean isSetSkipStorageEngineMerge() {
    return __isset_bit_vector.get(__SKIP_STORAGE_ENGINE_MERGE_ISSET_ID);
  }

  public void setSkipStorageEngineMergeIsSet(boolean value) {
    __isset_bit_vector.set(__SKIP_STORAGE_ENGINE_MERGE_ISSET_ID, value);
  }

  public boolean isSkipDeletePredicate() {
    return this.skip_delete_predicate;
  }

  public TQueryOptions setSkipDeletePredicate(boolean skip_delete_predicate) {
    this.skip_delete_predicate = skip_delete_predicate;
    setSkipDeletePredicateIsSet(true);
    return this;
  }

  public void unsetSkipDeletePredicate() {
    __isset_bit_vector.clear(__SKIP_DELETE_PREDICATE_ISSET_ID);
  }

  /** Returns true if field skip_delete_predicate is set (has been assigned a value) and false otherwise */
  public boolean isSetSkipDeletePredicate() {
    return __isset_bit_vector.get(__SKIP_DELETE_PREDICATE_ISSET_ID);
  }

  public void setSkipDeletePredicateIsSet(boolean value) {
    __isset_bit_vector.set(__SKIP_DELETE_PREDICATE_ISSET_ID, value);
  }

  public boolean isEnableNewShuffleHashMethod() {
    return this.enable_new_shuffle_hash_method;
  }

  public TQueryOptions setEnableNewShuffleHashMethod(boolean enable_new_shuffle_hash_method) {
    this.enable_new_shuffle_hash_method = enable_new_shuffle_hash_method;
    setEnableNewShuffleHashMethodIsSet(true);
    return this;
  }

  public void unsetEnableNewShuffleHashMethod() {
    __isset_bit_vector.clear(__ENABLE_NEW_SHUFFLE_HASH_METHOD_ISSET_ID);
  }

  /** Returns true if field enable_new_shuffle_hash_method is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableNewShuffleHashMethod() {
    return __isset_bit_vector.get(__ENABLE_NEW_SHUFFLE_HASH_METHOD_ISSET_ID);
  }

  public void setEnableNewShuffleHashMethodIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_NEW_SHUFFLE_HASH_METHOD_ISSET_ID, value);
  }

  public int getBeExecVersion() {
    return this.be_exec_version;
  }

  public TQueryOptions setBeExecVersion(int be_exec_version) {
    this.be_exec_version = be_exec_version;
    setBeExecVersionIsSet(true);
    return this;
  }

  public void unsetBeExecVersion() {
    __isset_bit_vector.clear(__BE_EXEC_VERSION_ISSET_ID);
  }

  /** Returns true if field be_exec_version is set (has been assigned a value) and false otherwise */
  public boolean isSetBeExecVersion() {
    return __isset_bit_vector.get(__BE_EXEC_VERSION_ISSET_ID);
  }

  public void setBeExecVersionIsSet(boolean value) {
    __isset_bit_vector.set(__BE_EXEC_VERSION_ISSET_ID, value);
  }

  public int getPartitionedHashJoinRowsThreshold() {
    return this.partitioned_hash_join_rows_threshold;
  }

  public TQueryOptions setPartitionedHashJoinRowsThreshold(int partitioned_hash_join_rows_threshold) {
    this.partitioned_hash_join_rows_threshold = partitioned_hash_join_rows_threshold;
    setPartitionedHashJoinRowsThresholdIsSet(true);
    return this;
  }

  public void unsetPartitionedHashJoinRowsThreshold() {
    __isset_bit_vector.clear(__PARTITIONED_HASH_JOIN_ROWS_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field partitioned_hash_join_rows_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionedHashJoinRowsThreshold() {
    return __isset_bit_vector.get(__PARTITIONED_HASH_JOIN_ROWS_THRESHOLD_ISSET_ID);
  }

  public void setPartitionedHashJoinRowsThresholdIsSet(boolean value) {
    __isset_bit_vector.set(__PARTITIONED_HASH_JOIN_ROWS_THRESHOLD_ISSET_ID, value);
  }

  public boolean isEnableShareHashTableForBroadcastJoin() {
    return this.enable_share_hash_table_for_broadcast_join;
  }

  public TQueryOptions setEnableShareHashTableForBroadcastJoin(boolean enable_share_hash_table_for_broadcast_join) {
    this.enable_share_hash_table_for_broadcast_join = enable_share_hash_table_for_broadcast_join;
    setEnableShareHashTableForBroadcastJoinIsSet(true);
    return this;
  }

  public void unsetEnableShareHashTableForBroadcastJoin() {
    __isset_bit_vector.clear(__ENABLE_SHARE_HASH_TABLE_FOR_BROADCAST_JOIN_ISSET_ID);
  }

  /** Returns true if field enable_share_hash_table_for_broadcast_join is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableShareHashTableForBroadcastJoin() {
    return __isset_bit_vector.get(__ENABLE_SHARE_HASH_TABLE_FOR_BROADCAST_JOIN_ISSET_ID);
  }

  public void setEnableShareHashTableForBroadcastJoinIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_SHARE_HASH_TABLE_FOR_BROADCAST_JOIN_ISSET_ID, value);
  }

  public boolean isCheckOverflowForDecimal() {
    return this.check_overflow_for_decimal;
  }

  public TQueryOptions setCheckOverflowForDecimal(boolean check_overflow_for_decimal) {
    this.check_overflow_for_decimal = check_overflow_for_decimal;
    setCheckOverflowForDecimalIsSet(true);
    return this;
  }

  public void unsetCheckOverflowForDecimal() {
    __isset_bit_vector.clear(__CHECK_OVERFLOW_FOR_DECIMAL_ISSET_ID);
  }

  /** Returns true if field check_overflow_for_decimal is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckOverflowForDecimal() {
    return __isset_bit_vector.get(__CHECK_OVERFLOW_FOR_DECIMAL_ISSET_ID);
  }

  public void setCheckOverflowForDecimalIsSet(boolean value) {
    __isset_bit_vector.set(__CHECK_OVERFLOW_FOR_DECIMAL_ISSET_ID, value);
  }

  public boolean isSkipDeleteBitmap() {
    return this.skip_delete_bitmap;
  }

  public TQueryOptions setSkipDeleteBitmap(boolean skip_delete_bitmap) {
    this.skip_delete_bitmap = skip_delete_bitmap;
    setSkipDeleteBitmapIsSet(true);
    return this;
  }

  public void unsetSkipDeleteBitmap() {
    __isset_bit_vector.clear(__SKIP_DELETE_BITMAP_ISSET_ID);
  }

  /** Returns true if field skip_delete_bitmap is set (has been assigned a value) and false otherwise */
  public boolean isSetSkipDeleteBitmap() {
    return __isset_bit_vector.get(__SKIP_DELETE_BITMAP_ISSET_ID);
  }

  public void setSkipDeleteBitmapIsSet(boolean value) {
    __isset_bit_vector.set(__SKIP_DELETE_BITMAP_ISSET_ID, value);
  }

  public boolean isEnablePipelineEngine() {
    return this.enable_pipeline_engine;
  }

  public TQueryOptions setEnablePipelineEngine(boolean enable_pipeline_engine) {
    this.enable_pipeline_engine = enable_pipeline_engine;
    setEnablePipelineEngineIsSet(true);
    return this;
  }

  public void unsetEnablePipelineEngine() {
    __isset_bit_vector.clear(__ENABLE_PIPELINE_ENGINE_ISSET_ID);
  }

  /** Returns true if field enable_pipeline_engine is set (has been assigned a value) and false otherwise */
  public boolean isSetEnablePipelineEngine() {
    return __isset_bit_vector.get(__ENABLE_PIPELINE_ENGINE_ISSET_ID);
  }

  public void setEnablePipelineEngineIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_PIPELINE_ENGINE_ISSET_ID, value);
  }

  public int getRepeatMaxNum() {
    return this.repeat_max_num;
  }

  public TQueryOptions setRepeatMaxNum(int repeat_max_num) {
    this.repeat_max_num = repeat_max_num;
    setRepeatMaxNumIsSet(true);
    return this;
  }

  public void unsetRepeatMaxNum() {
    __isset_bit_vector.clear(__REPEAT_MAX_NUM_ISSET_ID);
  }

  /** Returns true if field repeat_max_num is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeatMaxNum() {
    return __isset_bit_vector.get(__REPEAT_MAX_NUM_ISSET_ID);
  }

  public void setRepeatMaxNumIsSet(boolean value) {
    __isset_bit_vector.set(__REPEAT_MAX_NUM_ISSET_ID, value);
  }

  public long getExternalSortBytesThreshold() {
    return this.external_sort_bytes_threshold;
  }

  public TQueryOptions setExternalSortBytesThreshold(long external_sort_bytes_threshold) {
    this.external_sort_bytes_threshold = external_sort_bytes_threshold;
    setExternalSortBytesThresholdIsSet(true);
    return this;
  }

  public void unsetExternalSortBytesThreshold() {
    __isset_bit_vector.clear(__EXTERNAL_SORT_BYTES_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field external_sort_bytes_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalSortBytesThreshold() {
    return __isset_bit_vector.get(__EXTERNAL_SORT_BYTES_THRESHOLD_ISSET_ID);
  }

  public void setExternalSortBytesThresholdIsSet(boolean value) {
    __isset_bit_vector.set(__EXTERNAL_SORT_BYTES_THRESHOLD_ISSET_ID, value);
  }

  public int getPartitionedHashAggRowsThreshold() {
    return this.partitioned_hash_agg_rows_threshold;
  }

  public TQueryOptions setPartitionedHashAggRowsThreshold(int partitioned_hash_agg_rows_threshold) {
    this.partitioned_hash_agg_rows_threshold = partitioned_hash_agg_rows_threshold;
    setPartitionedHashAggRowsThresholdIsSet(true);
    return this;
  }

  public void unsetPartitionedHashAggRowsThreshold() {
    __isset_bit_vector.clear(__PARTITIONED_HASH_AGG_ROWS_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field partitioned_hash_agg_rows_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetPartitionedHashAggRowsThreshold() {
    return __isset_bit_vector.get(__PARTITIONED_HASH_AGG_ROWS_THRESHOLD_ISSET_ID);
  }

  public void setPartitionedHashAggRowsThresholdIsSet(boolean value) {
    __isset_bit_vector.set(__PARTITIONED_HASH_AGG_ROWS_THRESHOLD_ISSET_ID, value);
  }

  public boolean isEnableFileCache() {
    return this.enable_file_cache;
  }

  public TQueryOptions setEnableFileCache(boolean enable_file_cache) {
    this.enable_file_cache = enable_file_cache;
    setEnableFileCacheIsSet(true);
    return this;
  }

  public void unsetEnableFileCache() {
    __isset_bit_vector.clear(__ENABLE_FILE_CACHE_ISSET_ID);
  }

  /** Returns true if field enable_file_cache is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableFileCache() {
    return __isset_bit_vector.get(__ENABLE_FILE_CACHE_ISSET_ID);
  }

  public void setEnableFileCacheIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_FILE_CACHE_ISSET_ID, value);
  }

  public int getInsertTimeout() {
    return this.insert_timeout;
  }

  public TQueryOptions setInsertTimeout(int insert_timeout) {
    this.insert_timeout = insert_timeout;
    setInsertTimeoutIsSet(true);
    return this;
  }

  public void unsetInsertTimeout() {
    __isset_bit_vector.clear(__INSERT_TIMEOUT_ISSET_ID);
  }

  /** Returns true if field insert_timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertTimeout() {
    return __isset_bit_vector.get(__INSERT_TIMEOUT_ISSET_ID);
  }

  public void setInsertTimeoutIsSet(boolean value) {
    __isset_bit_vector.set(__INSERT_TIMEOUT_ISSET_ID, value);
  }

  public int getExecutionTimeout() {
    return this.execution_timeout;
  }

  public TQueryOptions setExecutionTimeout(int execution_timeout) {
    this.execution_timeout = execution_timeout;
    setExecutionTimeoutIsSet(true);
    return this;
  }

  public void unsetExecutionTimeout() {
    __isset_bit_vector.clear(__EXECUTION_TIMEOUT_ISSET_ID);
  }

  /** Returns true if field execution_timeout is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutionTimeout() {
    return __isset_bit_vector.get(__EXECUTION_TIMEOUT_ISSET_ID);
  }

  public void setExecutionTimeoutIsSet(boolean value) {
    __isset_bit_vector.set(__EXECUTION_TIMEOUT_ISSET_ID, value);
  }

  public boolean isDryRunQuery() {
    return this.dry_run_query;
  }

  public TQueryOptions setDryRunQuery(boolean dry_run_query) {
    this.dry_run_query = dry_run_query;
    setDryRunQueryIsSet(true);
    return this;
  }

  public void unsetDryRunQuery() {
    __isset_bit_vector.clear(__DRY_RUN_QUERY_ISSET_ID);
  }

  /** Returns true if field dry_run_query is set (has been assigned a value) and false otherwise */
  public boolean isSetDryRunQuery() {
    return __isset_bit_vector.get(__DRY_RUN_QUERY_ISSET_ID);
  }

  public void setDryRunQueryIsSet(boolean value) {
    __isset_bit_vector.set(__DRY_RUN_QUERY_ISSET_ID, value);
  }

  public boolean isEnableCommonExprPushdown() {
    return this.enable_common_expr_pushdown;
  }

  public TQueryOptions setEnableCommonExprPushdown(boolean enable_common_expr_pushdown) {
    this.enable_common_expr_pushdown = enable_common_expr_pushdown;
    setEnableCommonExprPushdownIsSet(true);
    return this;
  }

  public void unsetEnableCommonExprPushdown() {
    __isset_bit_vector.clear(__ENABLE_COMMON_EXPR_PUSHDOWN_ISSET_ID);
  }

  /** Returns true if field enable_common_expr_pushdown is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableCommonExprPushdown() {
    return __isset_bit_vector.get(__ENABLE_COMMON_EXPR_PUSHDOWN_ISSET_ID);
  }

  public void setEnableCommonExprPushdownIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_COMMON_EXPR_PUSHDOWN_ISSET_ID, value);
  }

  public int getParallelInstance() {
    return this.parallel_instance;
  }

  public TQueryOptions setParallelInstance(int parallel_instance) {
    this.parallel_instance = parallel_instance;
    setParallelInstanceIsSet(true);
    return this;
  }

  public void unsetParallelInstance() {
    __isset_bit_vector.clear(__PARALLEL_INSTANCE_ISSET_ID);
  }

  /** Returns true if field parallel_instance is set (has been assigned a value) and false otherwise */
  public boolean isSetParallelInstance() {
    return __isset_bit_vector.get(__PARALLEL_INSTANCE_ISSET_ID);
  }

  public void setParallelInstanceIsSet(boolean value) {
    __isset_bit_vector.set(__PARALLEL_INSTANCE_ISSET_ID, value);
  }

  public boolean isMysqlRowBinaryFormat() {
    return this.mysql_row_binary_format;
  }

  public TQueryOptions setMysqlRowBinaryFormat(boolean mysql_row_binary_format) {
    this.mysql_row_binary_format = mysql_row_binary_format;
    setMysqlRowBinaryFormatIsSet(true);
    return this;
  }

  public void unsetMysqlRowBinaryFormat() {
    __isset_bit_vector.clear(__MYSQL_ROW_BINARY_FORMAT_ISSET_ID);
  }

  /** Returns true if field mysql_row_binary_format is set (has been assigned a value) and false otherwise */
  public boolean isSetMysqlRowBinaryFormat() {
    return __isset_bit_vector.get(__MYSQL_ROW_BINARY_FORMAT_ISSET_ID);
  }

  public void setMysqlRowBinaryFormatIsSet(boolean value) {
    __isset_bit_vector.set(__MYSQL_ROW_BINARY_FORMAT_ISSET_ID, value);
  }

  public long getExternalAggBytesThreshold() {
    return this.external_agg_bytes_threshold;
  }

  public TQueryOptions setExternalAggBytesThreshold(long external_agg_bytes_threshold) {
    this.external_agg_bytes_threshold = external_agg_bytes_threshold;
    setExternalAggBytesThresholdIsSet(true);
    return this;
  }

  public void unsetExternalAggBytesThreshold() {
    __isset_bit_vector.clear(__EXTERNAL_AGG_BYTES_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field external_agg_bytes_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalAggBytesThreshold() {
    return __isset_bit_vector.get(__EXTERNAL_AGG_BYTES_THRESHOLD_ISSET_ID);
  }

  public void setExternalAggBytesThresholdIsSet(boolean value) {
    __isset_bit_vector.set(__EXTERNAL_AGG_BYTES_THRESHOLD_ISSET_ID, value);
  }

  public int getExternalAggPartitionBits() {
    return this.external_agg_partition_bits;
  }

  public TQueryOptions setExternalAggPartitionBits(int external_agg_partition_bits) {
    this.external_agg_partition_bits = external_agg_partition_bits;
    setExternalAggPartitionBitsIsSet(true);
    return this;
  }

  public void unsetExternalAggPartitionBits() {
    __isset_bit_vector.clear(__EXTERNAL_AGG_PARTITION_BITS_ISSET_ID);
  }

  /** Returns true if field external_agg_partition_bits is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalAggPartitionBits() {
    return __isset_bit_vector.get(__EXTERNAL_AGG_PARTITION_BITS_ISSET_ID);
  }

  public void setExternalAggPartitionBitsIsSet(boolean value) {
    __isset_bit_vector.set(__EXTERNAL_AGG_PARTITION_BITS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFileCacheBasePath() {
    return this.file_cache_base_path;
  }

  public TQueryOptions setFileCacheBasePath(@org.apache.thrift.annotation.Nullable java.lang.String file_cache_base_path) {
    this.file_cache_base_path = file_cache_base_path;
    return this;
  }

  public void unsetFileCacheBasePath() {
    this.file_cache_base_path = null;
  }

  /** Returns true if field file_cache_base_path is set (has been assigned a value) and false otherwise */
  public boolean isSetFileCacheBasePath() {
    return this.file_cache_base_path != null;
  }

  public void setFileCacheBasePathIsSet(boolean value) {
    if (!value) {
      this.file_cache_base_path = null;
    }
  }

  public boolean isEnableParquetLazyMat() {
    return this.enable_parquet_lazy_mat;
  }

  public TQueryOptions setEnableParquetLazyMat(boolean enable_parquet_lazy_mat) {
    this.enable_parquet_lazy_mat = enable_parquet_lazy_mat;
    setEnableParquetLazyMatIsSet(true);
    return this;
  }

  public void unsetEnableParquetLazyMat() {
    __isset_bit_vector.clear(__ENABLE_PARQUET_LAZY_MAT_ISSET_ID);
  }

  /** Returns true if field enable_parquet_lazy_mat is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableParquetLazyMat() {
    return __isset_bit_vector.get(__ENABLE_PARQUET_LAZY_MAT_ISSET_ID);
  }

  public void setEnableParquetLazyMatIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_PARQUET_LAZY_MAT_ISSET_ID, value);
  }

  public boolean isEnableOrcLazyMat() {
    return this.enable_orc_lazy_mat;
  }

  public TQueryOptions setEnableOrcLazyMat(boolean enable_orc_lazy_mat) {
    this.enable_orc_lazy_mat = enable_orc_lazy_mat;
    setEnableOrcLazyMatIsSet(true);
    return this;
  }

  public void unsetEnableOrcLazyMat() {
    __isset_bit_vector.clear(__ENABLE_ORC_LAZY_MAT_ISSET_ID);
  }

  /** Returns true if field enable_orc_lazy_mat is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableOrcLazyMat() {
    return __isset_bit_vector.get(__ENABLE_ORC_LAZY_MAT_ISSET_ID);
  }

  public void setEnableOrcLazyMatIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_ORC_LAZY_MAT_ISSET_ID, value);
  }

  public long getScanQueueMemLimit() {
    return this.scan_queue_mem_limit;
  }

  public TQueryOptions setScanQueueMemLimit(long scan_queue_mem_limit) {
    this.scan_queue_mem_limit = scan_queue_mem_limit;
    setScanQueueMemLimitIsSet(true);
    return this;
  }

  public void unsetScanQueueMemLimit() {
    __isset_bit_vector.clear(__SCAN_QUEUE_MEM_LIMIT_ISSET_ID);
  }

  /** Returns true if field scan_queue_mem_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetScanQueueMemLimit() {
    return __isset_bit_vector.get(__SCAN_QUEUE_MEM_LIMIT_ISSET_ID);
  }

  public void setScanQueueMemLimitIsSet(boolean value) {
    __isset_bit_vector.set(__SCAN_QUEUE_MEM_LIMIT_ISSET_ID, value);
  }

  public boolean isEnableScanNodeRunSerial() {
    return this.enable_scan_node_run_serial;
  }

  public TQueryOptions setEnableScanNodeRunSerial(boolean enable_scan_node_run_serial) {
    this.enable_scan_node_run_serial = enable_scan_node_run_serial;
    setEnableScanNodeRunSerialIsSet(true);
    return this;
  }

  public void unsetEnableScanNodeRunSerial() {
    __isset_bit_vector.clear(__ENABLE_SCAN_NODE_RUN_SERIAL_ISSET_ID);
  }

  /** Returns true if field enable_scan_node_run_serial is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableScanNodeRunSerial() {
    return __isset_bit_vector.get(__ENABLE_SCAN_NODE_RUN_SERIAL_ISSET_ID);
  }

  public void setEnableScanNodeRunSerialIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_SCAN_NODE_RUN_SERIAL_ISSET_ID, value);
  }

  public boolean isEnableInsertStrict() {
    return this.enable_insert_strict;
  }

  public TQueryOptions setEnableInsertStrict(boolean enable_insert_strict) {
    this.enable_insert_strict = enable_insert_strict;
    setEnableInsertStrictIsSet(true);
    return this;
  }

  public void unsetEnableInsertStrict() {
    __isset_bit_vector.clear(__ENABLE_INSERT_STRICT_ISSET_ID);
  }

  /** Returns true if field enable_insert_strict is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableInsertStrict() {
    return __isset_bit_vector.get(__ENABLE_INSERT_STRICT_ISSET_ID);
  }

  public void setEnableInsertStrictIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_INSERT_STRICT_ISSET_ID, value);
  }

  public boolean isEnableInvertedIndexQuery() {
    return this.enable_inverted_index_query;
  }

  public TQueryOptions setEnableInvertedIndexQuery(boolean enable_inverted_index_query) {
    this.enable_inverted_index_query = enable_inverted_index_query;
    setEnableInvertedIndexQueryIsSet(true);
    return this;
  }

  public void unsetEnableInvertedIndexQuery() {
    __isset_bit_vector.clear(__ENABLE_INVERTED_INDEX_QUERY_ISSET_ID);
  }

  /** Returns true if field enable_inverted_index_query is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableInvertedIndexQuery() {
    return __isset_bit_vector.get(__ENABLE_INVERTED_INDEX_QUERY_ISSET_ID);
  }

  public void setEnableInvertedIndexQueryIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_INVERTED_INDEX_QUERY_ISSET_ID, value);
  }

  public boolean isTruncateCharOrVarcharColumns() {
    return this.truncate_char_or_varchar_columns;
  }

  public TQueryOptions setTruncateCharOrVarcharColumns(boolean truncate_char_or_varchar_columns) {
    this.truncate_char_or_varchar_columns = truncate_char_or_varchar_columns;
    setTruncateCharOrVarcharColumnsIsSet(true);
    return this;
  }

  public void unsetTruncateCharOrVarcharColumns() {
    __isset_bit_vector.clear(__TRUNCATE_CHAR_OR_VARCHAR_COLUMNS_ISSET_ID);
  }

  /** Returns true if field truncate_char_or_varchar_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetTruncateCharOrVarcharColumns() {
    return __isset_bit_vector.get(__TRUNCATE_CHAR_OR_VARCHAR_COLUMNS_ISSET_ID);
  }

  public void setTruncateCharOrVarcharColumnsIsSet(boolean value) {
    __isset_bit_vector.set(__TRUNCATE_CHAR_OR_VARCHAR_COLUMNS_ISSET_ID, value);
  }

  public boolean isEnableHashJoinEarlyStartProbe() {
    return this.enable_hash_join_early_start_probe;
  }

  public TQueryOptions setEnableHashJoinEarlyStartProbe(boolean enable_hash_join_early_start_probe) {
    this.enable_hash_join_early_start_probe = enable_hash_join_early_start_probe;
    setEnableHashJoinEarlyStartProbeIsSet(true);
    return this;
  }

  public void unsetEnableHashJoinEarlyStartProbe() {
    __isset_bit_vector.clear(__ENABLE_HASH_JOIN_EARLY_START_PROBE_ISSET_ID);
  }

  /** Returns true if field enable_hash_join_early_start_probe is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableHashJoinEarlyStartProbe() {
    return __isset_bit_vector.get(__ENABLE_HASH_JOIN_EARLY_START_PROBE_ISSET_ID);
  }

  public void setEnableHashJoinEarlyStartProbeIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_HASH_JOIN_EARLY_START_PROBE_ISSET_ID, value);
  }

  public boolean isEnablePipelineXEngine() {
    return this.enable_pipeline_x_engine;
  }

  public TQueryOptions setEnablePipelineXEngine(boolean enable_pipeline_x_engine) {
    this.enable_pipeline_x_engine = enable_pipeline_x_engine;
    setEnablePipelineXEngineIsSet(true);
    return this;
  }

  public void unsetEnablePipelineXEngine() {
    __isset_bit_vector.clear(__ENABLE_PIPELINE_X_ENGINE_ISSET_ID);
  }

  /** Returns true if field enable_pipeline_x_engine is set (has been assigned a value) and false otherwise */
  public boolean isSetEnablePipelineXEngine() {
    return __isset_bit_vector.get(__ENABLE_PIPELINE_X_ENGINE_ISSET_ID);
  }

  public void setEnablePipelineXEngineIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_PIPELINE_X_ENGINE_ISSET_ID, value);
  }

  public boolean isEnableMemtableOnSinkNode() {
    return this.enable_memtable_on_sink_node;
  }

  public TQueryOptions setEnableMemtableOnSinkNode(boolean enable_memtable_on_sink_node) {
    this.enable_memtable_on_sink_node = enable_memtable_on_sink_node;
    setEnableMemtableOnSinkNodeIsSet(true);
    return this;
  }

  public void unsetEnableMemtableOnSinkNode() {
    __isset_bit_vector.clear(__ENABLE_MEMTABLE_ON_SINK_NODE_ISSET_ID);
  }

  /** Returns true if field enable_memtable_on_sink_node is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableMemtableOnSinkNode() {
    return __isset_bit_vector.get(__ENABLE_MEMTABLE_ON_SINK_NODE_ISSET_ID);
  }

  public void setEnableMemtableOnSinkNodeIsSet(boolean value) {
    __isset_bit_vector.set(__ENABLE_MEMTABLE_ON_SINK_NODE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ABORT_ON_ERROR:
      if (value == null) {
        unsetAbortOnError();
      } else {
        setAbortOnError((java.lang.Boolean)value);
      }
      break;

    case MAX_ERRORS:
      if (value == null) {
        unsetMaxErrors();
      } else {
        setMaxErrors((java.lang.Integer)value);
      }
      break;

    case DISABLE_CODEGEN:
      if (value == null) {
        unsetDisableCodegen();
      } else {
        setDisableCodegen((java.lang.Boolean)value);
      }
      break;

    case BATCH_SIZE:
      if (value == null) {
        unsetBatchSize();
      } else {
        setBatchSize((java.lang.Integer)value);
      }
      break;

    case NUM_NODES:
      if (value == null) {
        unsetNumNodes();
      } else {
        setNumNodes((java.lang.Integer)value);
      }
      break;

    case MAX_SCAN_RANGE_LENGTH:
      if (value == null) {
        unsetMaxScanRangeLength();
      } else {
        setMaxScanRangeLength((java.lang.Long)value);
      }
      break;

    case NUM_SCANNER_THREADS:
      if (value == null) {
        unsetNumScannerThreads();
      } else {
        setNumScannerThreads((java.lang.Integer)value);
      }
      break;

    case MAX_IO_BUFFERS:
      if (value == null) {
        unsetMaxIoBuffers();
      } else {
        setMaxIoBuffers((java.lang.Integer)value);
      }
      break;

    case ALLOW_UNSUPPORTED_FORMATS:
      if (value == null) {
        unsetAllowUnsupportedFormats();
      } else {
        setAllowUnsupportedFormats((java.lang.Boolean)value);
      }
      break;

    case DEFAULT_ORDER_BY_LIMIT:
      if (value == null) {
        unsetDefaultOrderByLimit();
      } else {
        setDefaultOrderByLimit((java.lang.Long)value);
      }
      break;

    case MEM_LIMIT:
      if (value == null) {
        unsetMemLimit();
      } else {
        setMemLimit((java.lang.Long)value);
      }
      break;

    case ABORT_ON_DEFAULT_LIMIT_EXCEEDED:
      if (value == null) {
        unsetAbortOnDefaultLimitExceeded();
      } else {
        setAbortOnDefaultLimitExceeded((java.lang.Boolean)value);
      }
      break;

    case QUERY_TIMEOUT:
      if (value == null) {
        unsetQueryTimeout();
      } else {
        setQueryTimeout((java.lang.Integer)value);
      }
      break;

    case IS_REPORT_SUCCESS:
      if (value == null) {
        unsetIsReportSuccess();
      } else {
        setIsReportSuccess((java.lang.Boolean)value);
      }
      break;

    case CODEGEN_LEVEL:
      if (value == null) {
        unsetCodegenLevel();
      } else {
        setCodegenLevel((java.lang.Integer)value);
      }
      break;

    case KUDU_LATEST_OBSERVED_TS:
      if (value == null) {
        unsetKuduLatestObservedTs();
      } else {
        setKuduLatestObservedTs((java.lang.Long)value);
      }
      break;

    case QUERY_TYPE:
      if (value == null) {
        unsetQueryType();
      } else {
        setQueryType((TQueryType)value);
      }
      break;

    case MIN_RESERVATION:
      if (value == null) {
        unsetMinReservation();
      } else {
        setMinReservation((java.lang.Long)value);
      }
      break;

    case MAX_RESERVATION:
      if (value == null) {
        unsetMaxReservation();
      } else {
        setMaxReservation((java.lang.Long)value);
      }
      break;

    case INITIAL_RESERVATION_TOTAL_CLAIMS:
      if (value == null) {
        unsetInitialReservationTotalClaims();
      } else {
        setInitialReservationTotalClaims((java.lang.Long)value);
      }
      break;

    case BUFFER_POOL_LIMIT:
      if (value == null) {
        unsetBufferPoolLimit();
      } else {
        setBufferPoolLimit((java.lang.Long)value);
      }
      break;

    case DEFAULT_SPILLABLE_BUFFER_SIZE:
      if (value == null) {
        unsetDefaultSpillableBufferSize();
      } else {
        setDefaultSpillableBufferSize((java.lang.Long)value);
      }
      break;

    case MIN_SPILLABLE_BUFFER_SIZE:
      if (value == null) {
        unsetMinSpillableBufferSize();
      } else {
        setMinSpillableBufferSize((java.lang.Long)value);
      }
      break;

    case MAX_ROW_SIZE:
      if (value == null) {
        unsetMaxRowSize();
      } else {
        setMaxRowSize((java.lang.Long)value);
      }
      break;

    case DISABLE_STREAM_PREAGGREGATIONS:
      if (value == null) {
        unsetDisableStreamPreaggregations();
      } else {
        setDisableStreamPreaggregations((java.lang.Boolean)value);
      }
      break;

    case MT_DOP:
      if (value == null) {
        unsetMtDop();
      } else {
        setMtDop((java.lang.Integer)value);
      }
      break;

    case LOAD_MEM_LIMIT:
      if (value == null) {
        unsetLoadMemLimit();
      } else {
        setLoadMemLimit((java.lang.Long)value);
      }
      break;

    case MAX_SCAN_KEY_NUM:
      if (value == null) {
        unsetMaxScanKeyNum();
      } else {
        setMaxScanKeyNum((java.lang.Integer)value);
      }
      break;

    case MAX_PUSHDOWN_CONDITIONS_PER_COLUMN:
      if (value == null) {
        unsetMaxPushdownConditionsPerColumn();
      } else {
        setMaxPushdownConditionsPerColumn((java.lang.Integer)value);
      }
      break;

    case ENABLE_SPILLING:
      if (value == null) {
        unsetEnableSpilling();
      } else {
        setEnableSpilling((java.lang.Boolean)value);
      }
      break;

    case ENABLE_ENABLE_EXCHANGE_NODE_PARALLEL_MERGE:
      if (value == null) {
        unsetEnableEnableExchangeNodeParallelMerge();
      } else {
        setEnableEnableExchangeNodeParallelMerge((java.lang.Boolean)value);
      }
      break;

    case RUNTIME_FILTER_WAIT_TIME_MS:
      if (value == null) {
        unsetRuntimeFilterWaitTimeMs();
      } else {
        setRuntimeFilterWaitTimeMs((java.lang.Integer)value);
      }
      break;

    case RUNTIME_FILTER_MAX_IN_NUM:
      if (value == null) {
        unsetRuntimeFilterMaxInNum();
      } else {
        setRuntimeFilterMaxInNum((java.lang.Integer)value);
      }
      break;

    case RESOURCE_LIMIT:
      if (value == null) {
        unsetResourceLimit();
      } else {
        setResourceLimit((TResourceLimit)value);
      }
      break;

    case RETURN_OBJECT_DATA_AS_BINARY:
      if (value == null) {
        unsetReturnObjectDataAsBinary();
      } else {
        setReturnObjectDataAsBinary((java.lang.Boolean)value);
      }
      break;

    case TRIM_TAILING_SPACES_FOR_EXTERNAL_TABLE_QUERY:
      if (value == null) {
        unsetTrimTailingSpacesForExternalTableQuery();
      } else {
        setTrimTailingSpacesForExternalTableQuery((java.lang.Boolean)value);
      }
      break;

    case ENABLE_FUNCTION_PUSHDOWN:
      if (value == null) {
        unsetEnableFunctionPushdown();
      } else {
        setEnableFunctionPushdown((java.lang.Boolean)value);
      }
      break;

    case FRAGMENT_TRANSMISSION_COMPRESSION_CODEC:
      if (value == null) {
        unsetFragmentTransmissionCompressionCodec();
      } else {
        setFragmentTransmissionCompressionCodec((java.lang.String)value);
      }
      break;

    case ENABLE_LOCAL_EXCHANGE:
      if (value == null) {
        unsetEnableLocalExchange();
      } else {
        setEnableLocalExchange((java.lang.Boolean)value);
      }
      break;

    case SKIP_STORAGE_ENGINE_MERGE:
      if (value == null) {
        unsetSkipStorageEngineMerge();
      } else {
        setSkipStorageEngineMerge((java.lang.Boolean)value);
      }
      break;

    case SKIP_DELETE_PREDICATE:
      if (value == null) {
        unsetSkipDeletePredicate();
      } else {
        setSkipDeletePredicate((java.lang.Boolean)value);
      }
      break;

    case ENABLE_NEW_SHUFFLE_HASH_METHOD:
      if (value == null) {
        unsetEnableNewShuffleHashMethod();
      } else {
        setEnableNewShuffleHashMethod((java.lang.Boolean)value);
      }
      break;

    case BE_EXEC_VERSION:
      if (value == null) {
        unsetBeExecVersion();
      } else {
        setBeExecVersion((java.lang.Integer)value);
      }
      break;

    case PARTITIONED_HASH_JOIN_ROWS_THRESHOLD:
      if (value == null) {
        unsetPartitionedHashJoinRowsThreshold();
      } else {
        setPartitionedHashJoinRowsThreshold((java.lang.Integer)value);
      }
      break;

    case ENABLE_SHARE_HASH_TABLE_FOR_BROADCAST_JOIN:
      if (value == null) {
        unsetEnableShareHashTableForBroadcastJoin();
      } else {
        setEnableShareHashTableForBroadcastJoin((java.lang.Boolean)value);
      }
      break;

    case CHECK_OVERFLOW_FOR_DECIMAL:
      if (value == null) {
        unsetCheckOverflowForDecimal();
      } else {
        setCheckOverflowForDecimal((java.lang.Boolean)value);
      }
      break;

    case SKIP_DELETE_BITMAP:
      if (value == null) {
        unsetSkipDeleteBitmap();
      } else {
        setSkipDeleteBitmap((java.lang.Boolean)value);
      }
      break;

    case ENABLE_PIPELINE_ENGINE:
      if (value == null) {
        unsetEnablePipelineEngine();
      } else {
        setEnablePipelineEngine((java.lang.Boolean)value);
      }
      break;

    case REPEAT_MAX_NUM:
      if (value == null) {
        unsetRepeatMaxNum();
      } else {
        setRepeatMaxNum((java.lang.Integer)value);
      }
      break;

    case EXTERNAL_SORT_BYTES_THRESHOLD:
      if (value == null) {
        unsetExternalSortBytesThreshold();
      } else {
        setExternalSortBytesThreshold((java.lang.Long)value);
      }
      break;

    case PARTITIONED_HASH_AGG_ROWS_THRESHOLD:
      if (value == null) {
        unsetPartitionedHashAggRowsThreshold();
      } else {
        setPartitionedHashAggRowsThreshold((java.lang.Integer)value);
      }
      break;

    case ENABLE_FILE_CACHE:
      if (value == null) {
        unsetEnableFileCache();
      } else {
        setEnableFileCache((java.lang.Boolean)value);
      }
      break;

    case INSERT_TIMEOUT:
      if (value == null) {
        unsetInsertTimeout();
      } else {
        setInsertTimeout((java.lang.Integer)value);
      }
      break;

    case EXECUTION_TIMEOUT:
      if (value == null) {
        unsetExecutionTimeout();
      } else {
        setExecutionTimeout((java.lang.Integer)value);
      }
      break;

    case DRY_RUN_QUERY:
      if (value == null) {
        unsetDryRunQuery();
      } else {
        setDryRunQuery((java.lang.Boolean)value);
      }
      break;

    case ENABLE_COMMON_EXPR_PUSHDOWN:
      if (value == null) {
        unsetEnableCommonExprPushdown();
      } else {
        setEnableCommonExprPushdown((java.lang.Boolean)value);
      }
      break;

    case PARALLEL_INSTANCE:
      if (value == null) {
        unsetParallelInstance();
      } else {
        setParallelInstance((java.lang.Integer)value);
      }
      break;

    case MYSQL_ROW_BINARY_FORMAT:
      if (value == null) {
        unsetMysqlRowBinaryFormat();
      } else {
        setMysqlRowBinaryFormat((java.lang.Boolean)value);
      }
      break;

    case EXTERNAL_AGG_BYTES_THRESHOLD:
      if (value == null) {
        unsetExternalAggBytesThreshold();
      } else {
        setExternalAggBytesThreshold((java.lang.Long)value);
      }
      break;

    case EXTERNAL_AGG_PARTITION_BITS:
      if (value == null) {
        unsetExternalAggPartitionBits();
      } else {
        setExternalAggPartitionBits((java.lang.Integer)value);
      }
      break;

    case FILE_CACHE_BASE_PATH:
      if (value == null) {
        unsetFileCacheBasePath();
      } else {
        setFileCacheBasePath((java.lang.String)value);
      }
      break;

    case ENABLE_PARQUET_LAZY_MAT:
      if (value == null) {
        unsetEnableParquetLazyMat();
      } else {
        setEnableParquetLazyMat((java.lang.Boolean)value);
      }
      break;

    case ENABLE_ORC_LAZY_MAT:
      if (value == null) {
        unsetEnableOrcLazyMat();
      } else {
        setEnableOrcLazyMat((java.lang.Boolean)value);
      }
      break;

    case SCAN_QUEUE_MEM_LIMIT:
      if (value == null) {
        unsetScanQueueMemLimit();
      } else {
        setScanQueueMemLimit((java.lang.Long)value);
      }
      break;

    case ENABLE_SCAN_NODE_RUN_SERIAL:
      if (value == null) {
        unsetEnableScanNodeRunSerial();
      } else {
        setEnableScanNodeRunSerial((java.lang.Boolean)value);
      }
      break;

    case ENABLE_INSERT_STRICT:
      if (value == null) {
        unsetEnableInsertStrict();
      } else {
        setEnableInsertStrict((java.lang.Boolean)value);
      }
      break;

    case ENABLE_INVERTED_INDEX_QUERY:
      if (value == null) {
        unsetEnableInvertedIndexQuery();
      } else {
        setEnableInvertedIndexQuery((java.lang.Boolean)value);
      }
      break;

    case TRUNCATE_CHAR_OR_VARCHAR_COLUMNS:
      if (value == null) {
        unsetTruncateCharOrVarcharColumns();
      } else {
        setTruncateCharOrVarcharColumns((java.lang.Boolean)value);
      }
      break;

    case ENABLE_HASH_JOIN_EARLY_START_PROBE:
      if (value == null) {
        unsetEnableHashJoinEarlyStartProbe();
      } else {
        setEnableHashJoinEarlyStartProbe((java.lang.Boolean)value);
      }
      break;

    case ENABLE_PIPELINE_X_ENGINE:
      if (value == null) {
        unsetEnablePipelineXEngine();
      } else {
        setEnablePipelineXEngine((java.lang.Boolean)value);
      }
      break;

    case ENABLE_MEMTABLE_ON_SINK_NODE:
      if (value == null) {
        unsetEnableMemtableOnSinkNode();
      } else {
        setEnableMemtableOnSinkNode((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ABORT_ON_ERROR:
      return isAbortOnError();

    case MAX_ERRORS:
      return getMaxErrors();

    case DISABLE_CODEGEN:
      return isDisableCodegen();

    case BATCH_SIZE:
      return getBatchSize();

    case NUM_NODES:
      return getNumNodes();

    case MAX_SCAN_RANGE_LENGTH:
      return getMaxScanRangeLength();

    case NUM_SCANNER_THREADS:
      return getNumScannerThreads();

    case MAX_IO_BUFFERS:
      return getMaxIoBuffers();

    case ALLOW_UNSUPPORTED_FORMATS:
      return isAllowUnsupportedFormats();

    case DEFAULT_ORDER_BY_LIMIT:
      return getDefaultOrderByLimit();

    case MEM_LIMIT:
      return getMemLimit();

    case ABORT_ON_DEFAULT_LIMIT_EXCEEDED:
      return isAbortOnDefaultLimitExceeded();

    case QUERY_TIMEOUT:
      return getQueryTimeout();

    case IS_REPORT_SUCCESS:
      return isIsReportSuccess();

    case CODEGEN_LEVEL:
      return getCodegenLevel();

    case KUDU_LATEST_OBSERVED_TS:
      return getKuduLatestObservedTs();

    case QUERY_TYPE:
      return getQueryType();

    case MIN_RESERVATION:
      return getMinReservation();

    case MAX_RESERVATION:
      return getMaxReservation();

    case INITIAL_RESERVATION_TOTAL_CLAIMS:
      return getInitialReservationTotalClaims();

    case BUFFER_POOL_LIMIT:
      return getBufferPoolLimit();

    case DEFAULT_SPILLABLE_BUFFER_SIZE:
      return getDefaultSpillableBufferSize();

    case MIN_SPILLABLE_BUFFER_SIZE:
      return getMinSpillableBufferSize();

    case MAX_ROW_SIZE:
      return getMaxRowSize();

    case DISABLE_STREAM_PREAGGREGATIONS:
      return isDisableStreamPreaggregations();

    case MT_DOP:
      return getMtDop();

    case LOAD_MEM_LIMIT:
      return getLoadMemLimit();

    case MAX_SCAN_KEY_NUM:
      return getMaxScanKeyNum();

    case MAX_PUSHDOWN_CONDITIONS_PER_COLUMN:
      return getMaxPushdownConditionsPerColumn();

    case ENABLE_SPILLING:
      return isEnableSpilling();

    case ENABLE_ENABLE_EXCHANGE_NODE_PARALLEL_MERGE:
      return isEnableEnableExchangeNodeParallelMerge();

    case RUNTIME_FILTER_WAIT_TIME_MS:
      return getRuntimeFilterWaitTimeMs();

    case RUNTIME_FILTER_MAX_IN_NUM:
      return getRuntimeFilterMaxInNum();

    case RESOURCE_LIMIT:
      return getResourceLimit();

    case RETURN_OBJECT_DATA_AS_BINARY:
      return isReturnObjectDataAsBinary();

    case TRIM_TAILING_SPACES_FOR_EXTERNAL_TABLE_QUERY:
      return isTrimTailingSpacesForExternalTableQuery();

    case ENABLE_FUNCTION_PUSHDOWN:
      return isEnableFunctionPushdown();

    case FRAGMENT_TRANSMISSION_COMPRESSION_CODEC:
      return getFragmentTransmissionCompressionCodec();

    case ENABLE_LOCAL_EXCHANGE:
      return isEnableLocalExchange();

    case SKIP_STORAGE_ENGINE_MERGE:
      return isSkipStorageEngineMerge();

    case SKIP_DELETE_PREDICATE:
      return isSkipDeletePredicate();

    case ENABLE_NEW_SHUFFLE_HASH_METHOD:
      return isEnableNewShuffleHashMethod();

    case BE_EXEC_VERSION:
      return getBeExecVersion();

    case PARTITIONED_HASH_JOIN_ROWS_THRESHOLD:
      return getPartitionedHashJoinRowsThreshold();

    case ENABLE_SHARE_HASH_TABLE_FOR_BROADCAST_JOIN:
      return isEnableShareHashTableForBroadcastJoin();

    case CHECK_OVERFLOW_FOR_DECIMAL:
      return isCheckOverflowForDecimal();

    case SKIP_DELETE_BITMAP:
      return isSkipDeleteBitmap();

    case ENABLE_PIPELINE_ENGINE:
      return isEnablePipelineEngine();

    case REPEAT_MAX_NUM:
      return getRepeatMaxNum();

    case EXTERNAL_SORT_BYTES_THRESHOLD:
      return getExternalSortBytesThreshold();

    case PARTITIONED_HASH_AGG_ROWS_THRESHOLD:
      return getPartitionedHashAggRowsThreshold();

    case ENABLE_FILE_CACHE:
      return isEnableFileCache();

    case INSERT_TIMEOUT:
      return getInsertTimeout();

    case EXECUTION_TIMEOUT:
      return getExecutionTimeout();

    case DRY_RUN_QUERY:
      return isDryRunQuery();

    case ENABLE_COMMON_EXPR_PUSHDOWN:
      return isEnableCommonExprPushdown();

    case PARALLEL_INSTANCE:
      return getParallelInstance();

    case MYSQL_ROW_BINARY_FORMAT:
      return isMysqlRowBinaryFormat();

    case EXTERNAL_AGG_BYTES_THRESHOLD:
      return getExternalAggBytesThreshold();

    case EXTERNAL_AGG_PARTITION_BITS:
      return getExternalAggPartitionBits();

    case FILE_CACHE_BASE_PATH:
      return getFileCacheBasePath();

    case ENABLE_PARQUET_LAZY_MAT:
      return isEnableParquetLazyMat();

    case ENABLE_ORC_LAZY_MAT:
      return isEnableOrcLazyMat();

    case SCAN_QUEUE_MEM_LIMIT:
      return getScanQueueMemLimit();

    case ENABLE_SCAN_NODE_RUN_SERIAL:
      return isEnableScanNodeRunSerial();

    case ENABLE_INSERT_STRICT:
      return isEnableInsertStrict();

    case ENABLE_INVERTED_INDEX_QUERY:
      return isEnableInvertedIndexQuery();

    case TRUNCATE_CHAR_OR_VARCHAR_COLUMNS:
      return isTruncateCharOrVarcharColumns();

    case ENABLE_HASH_JOIN_EARLY_START_PROBE:
      return isEnableHashJoinEarlyStartProbe();

    case ENABLE_PIPELINE_X_ENGINE:
      return isEnablePipelineXEngine();

    case ENABLE_MEMTABLE_ON_SINK_NODE:
      return isEnableMemtableOnSinkNode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ABORT_ON_ERROR:
      return isSetAbortOnError();
    case MAX_ERRORS:
      return isSetMaxErrors();
    case DISABLE_CODEGEN:
      return isSetDisableCodegen();
    case BATCH_SIZE:
      return isSetBatchSize();
    case NUM_NODES:
      return isSetNumNodes();
    case MAX_SCAN_RANGE_LENGTH:
      return isSetMaxScanRangeLength();
    case NUM_SCANNER_THREADS:
      return isSetNumScannerThreads();
    case MAX_IO_BUFFERS:
      return isSetMaxIoBuffers();
    case ALLOW_UNSUPPORTED_FORMATS:
      return isSetAllowUnsupportedFormats();
    case DEFAULT_ORDER_BY_LIMIT:
      return isSetDefaultOrderByLimit();
    case MEM_LIMIT:
      return isSetMemLimit();
    case ABORT_ON_DEFAULT_LIMIT_EXCEEDED:
      return isSetAbortOnDefaultLimitExceeded();
    case QUERY_TIMEOUT:
      return isSetQueryTimeout();
    case IS_REPORT_SUCCESS:
      return isSetIsReportSuccess();
    case CODEGEN_LEVEL:
      return isSetCodegenLevel();
    case KUDU_LATEST_OBSERVED_TS:
      return isSetKuduLatestObservedTs();
    case QUERY_TYPE:
      return isSetQueryType();
    case MIN_RESERVATION:
      return isSetMinReservation();
    case MAX_RESERVATION:
      return isSetMaxReservation();
    case INITIAL_RESERVATION_TOTAL_CLAIMS:
      return isSetInitialReservationTotalClaims();
    case BUFFER_POOL_LIMIT:
      return isSetBufferPoolLimit();
    case DEFAULT_SPILLABLE_BUFFER_SIZE:
      return isSetDefaultSpillableBufferSize();
    case MIN_SPILLABLE_BUFFER_SIZE:
      return isSetMinSpillableBufferSize();
    case MAX_ROW_SIZE:
      return isSetMaxRowSize();
    case DISABLE_STREAM_PREAGGREGATIONS:
      return isSetDisableStreamPreaggregations();
    case MT_DOP:
      return isSetMtDop();
    case LOAD_MEM_LIMIT:
      return isSetLoadMemLimit();
    case MAX_SCAN_KEY_NUM:
      return isSetMaxScanKeyNum();
    case MAX_PUSHDOWN_CONDITIONS_PER_COLUMN:
      return isSetMaxPushdownConditionsPerColumn();
    case ENABLE_SPILLING:
      return isSetEnableSpilling();
    case ENABLE_ENABLE_EXCHANGE_NODE_PARALLEL_MERGE:
      return isSetEnableEnableExchangeNodeParallelMerge();
    case RUNTIME_FILTER_WAIT_TIME_MS:
      return isSetRuntimeFilterWaitTimeMs();
    case RUNTIME_FILTER_MAX_IN_NUM:
      return isSetRuntimeFilterMaxInNum();
    case RESOURCE_LIMIT:
      return isSetResourceLimit();
    case RETURN_OBJECT_DATA_AS_BINARY:
      return isSetReturnObjectDataAsBinary();
    case TRIM_TAILING_SPACES_FOR_EXTERNAL_TABLE_QUERY:
      return isSetTrimTailingSpacesForExternalTableQuery();
    case ENABLE_FUNCTION_PUSHDOWN:
      return isSetEnableFunctionPushdown();
    case FRAGMENT_TRANSMISSION_COMPRESSION_CODEC:
      return isSetFragmentTransmissionCompressionCodec();
    case ENABLE_LOCAL_EXCHANGE:
      return isSetEnableLocalExchange();
    case SKIP_STORAGE_ENGINE_MERGE:
      return isSetSkipStorageEngineMerge();
    case SKIP_DELETE_PREDICATE:
      return isSetSkipDeletePredicate();
    case ENABLE_NEW_SHUFFLE_HASH_METHOD:
      return isSetEnableNewShuffleHashMethod();
    case BE_EXEC_VERSION:
      return isSetBeExecVersion();
    case PARTITIONED_HASH_JOIN_ROWS_THRESHOLD:
      return isSetPartitionedHashJoinRowsThreshold();
    case ENABLE_SHARE_HASH_TABLE_FOR_BROADCAST_JOIN:
      return isSetEnableShareHashTableForBroadcastJoin();
    case CHECK_OVERFLOW_FOR_DECIMAL:
      return isSetCheckOverflowForDecimal();
    case SKIP_DELETE_BITMAP:
      return isSetSkipDeleteBitmap();
    case ENABLE_PIPELINE_ENGINE:
      return isSetEnablePipelineEngine();
    case REPEAT_MAX_NUM:
      return isSetRepeatMaxNum();
    case EXTERNAL_SORT_BYTES_THRESHOLD:
      return isSetExternalSortBytesThreshold();
    case PARTITIONED_HASH_AGG_ROWS_THRESHOLD:
      return isSetPartitionedHashAggRowsThreshold();
    case ENABLE_FILE_CACHE:
      return isSetEnableFileCache();
    case INSERT_TIMEOUT:
      return isSetInsertTimeout();
    case EXECUTION_TIMEOUT:
      return isSetExecutionTimeout();
    case DRY_RUN_QUERY:
      return isSetDryRunQuery();
    case ENABLE_COMMON_EXPR_PUSHDOWN:
      return isSetEnableCommonExprPushdown();
    case PARALLEL_INSTANCE:
      return isSetParallelInstance();
    case MYSQL_ROW_BINARY_FORMAT:
      return isSetMysqlRowBinaryFormat();
    case EXTERNAL_AGG_BYTES_THRESHOLD:
      return isSetExternalAggBytesThreshold();
    case EXTERNAL_AGG_PARTITION_BITS:
      return isSetExternalAggPartitionBits();
    case FILE_CACHE_BASE_PATH:
      return isSetFileCacheBasePath();
    case ENABLE_PARQUET_LAZY_MAT:
      return isSetEnableParquetLazyMat();
    case ENABLE_ORC_LAZY_MAT:
      return isSetEnableOrcLazyMat();
    case SCAN_QUEUE_MEM_LIMIT:
      return isSetScanQueueMemLimit();
    case ENABLE_SCAN_NODE_RUN_SERIAL:
      return isSetEnableScanNodeRunSerial();
    case ENABLE_INSERT_STRICT:
      return isSetEnableInsertStrict();
    case ENABLE_INVERTED_INDEX_QUERY:
      return isSetEnableInvertedIndexQuery();
    case TRUNCATE_CHAR_OR_VARCHAR_COLUMNS:
      return isSetTruncateCharOrVarcharColumns();
    case ENABLE_HASH_JOIN_EARLY_START_PROBE:
      return isSetEnableHashJoinEarlyStartProbe();
    case ENABLE_PIPELINE_X_ENGINE:
      return isSetEnablePipelineXEngine();
    case ENABLE_MEMTABLE_ON_SINK_NODE:
      return isSetEnableMemtableOnSinkNode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TQueryOptions)
      return this.equals((TQueryOptions)that);
    return false;
  }

  public boolean equals(TQueryOptions that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_abort_on_error = true && this.isSetAbortOnError();
    boolean that_present_abort_on_error = true && that.isSetAbortOnError();
    if (this_present_abort_on_error || that_present_abort_on_error) {
      if (!(this_present_abort_on_error && that_present_abort_on_error))
        return false;
      if (this.abort_on_error != that.abort_on_error)
        return false;
    }

    boolean this_present_max_errors = true && this.isSetMaxErrors();
    boolean that_present_max_errors = true && that.isSetMaxErrors();
    if (this_present_max_errors || that_present_max_errors) {
      if (!(this_present_max_errors && that_present_max_errors))
        return false;
      if (this.max_errors != that.max_errors)
        return false;
    }

    boolean this_present_disable_codegen = true && this.isSetDisableCodegen();
    boolean that_present_disable_codegen = true && that.isSetDisableCodegen();
    if (this_present_disable_codegen || that_present_disable_codegen) {
      if (!(this_present_disable_codegen && that_present_disable_codegen))
        return false;
      if (this.disable_codegen != that.disable_codegen)
        return false;
    }

    boolean this_present_batch_size = true && this.isSetBatchSize();
    boolean that_present_batch_size = true && that.isSetBatchSize();
    if (this_present_batch_size || that_present_batch_size) {
      if (!(this_present_batch_size && that_present_batch_size))
        return false;
      if (this.batch_size != that.batch_size)
        return false;
    }

    boolean this_present_num_nodes = true && this.isSetNumNodes();
    boolean that_present_num_nodes = true && that.isSetNumNodes();
    if (this_present_num_nodes || that_present_num_nodes) {
      if (!(this_present_num_nodes && that_present_num_nodes))
        return false;
      if (this.num_nodes != that.num_nodes)
        return false;
    }

    boolean this_present_max_scan_range_length = true && this.isSetMaxScanRangeLength();
    boolean that_present_max_scan_range_length = true && that.isSetMaxScanRangeLength();
    if (this_present_max_scan_range_length || that_present_max_scan_range_length) {
      if (!(this_present_max_scan_range_length && that_present_max_scan_range_length))
        return false;
      if (this.max_scan_range_length != that.max_scan_range_length)
        return false;
    }

    boolean this_present_num_scanner_threads = true && this.isSetNumScannerThreads();
    boolean that_present_num_scanner_threads = true && that.isSetNumScannerThreads();
    if (this_present_num_scanner_threads || that_present_num_scanner_threads) {
      if (!(this_present_num_scanner_threads && that_present_num_scanner_threads))
        return false;
      if (this.num_scanner_threads != that.num_scanner_threads)
        return false;
    }

    boolean this_present_max_io_buffers = true && this.isSetMaxIoBuffers();
    boolean that_present_max_io_buffers = true && that.isSetMaxIoBuffers();
    if (this_present_max_io_buffers || that_present_max_io_buffers) {
      if (!(this_present_max_io_buffers && that_present_max_io_buffers))
        return false;
      if (this.max_io_buffers != that.max_io_buffers)
        return false;
    }

    boolean this_present_allow_unsupported_formats = true && this.isSetAllowUnsupportedFormats();
    boolean that_present_allow_unsupported_formats = true && that.isSetAllowUnsupportedFormats();
    if (this_present_allow_unsupported_formats || that_present_allow_unsupported_formats) {
      if (!(this_present_allow_unsupported_formats && that_present_allow_unsupported_formats))
        return false;
      if (this.allow_unsupported_formats != that.allow_unsupported_formats)
        return false;
    }

    boolean this_present_default_order_by_limit = true && this.isSetDefaultOrderByLimit();
    boolean that_present_default_order_by_limit = true && that.isSetDefaultOrderByLimit();
    if (this_present_default_order_by_limit || that_present_default_order_by_limit) {
      if (!(this_present_default_order_by_limit && that_present_default_order_by_limit))
        return false;
      if (this.default_order_by_limit != that.default_order_by_limit)
        return false;
    }

    boolean this_present_mem_limit = true && this.isSetMemLimit();
    boolean that_present_mem_limit = true && that.isSetMemLimit();
    if (this_present_mem_limit || that_present_mem_limit) {
      if (!(this_present_mem_limit && that_present_mem_limit))
        return false;
      if (this.mem_limit != that.mem_limit)
        return false;
    }

    boolean this_present_abort_on_default_limit_exceeded = true && this.isSetAbortOnDefaultLimitExceeded();
    boolean that_present_abort_on_default_limit_exceeded = true && that.isSetAbortOnDefaultLimitExceeded();
    if (this_present_abort_on_default_limit_exceeded || that_present_abort_on_default_limit_exceeded) {
      if (!(this_present_abort_on_default_limit_exceeded && that_present_abort_on_default_limit_exceeded))
        return false;
      if (this.abort_on_default_limit_exceeded != that.abort_on_default_limit_exceeded)
        return false;
    }

    boolean this_present_query_timeout = true && this.isSetQueryTimeout();
    boolean that_present_query_timeout = true && that.isSetQueryTimeout();
    if (this_present_query_timeout || that_present_query_timeout) {
      if (!(this_present_query_timeout && that_present_query_timeout))
        return false;
      if (this.query_timeout != that.query_timeout)
        return false;
    }

    boolean this_present_is_report_success = true && this.isSetIsReportSuccess();
    boolean that_present_is_report_success = true && that.isSetIsReportSuccess();
    if (this_present_is_report_success || that_present_is_report_success) {
      if (!(this_present_is_report_success && that_present_is_report_success))
        return false;
      if (this.is_report_success != that.is_report_success)
        return false;
    }

    boolean this_present_codegen_level = true && this.isSetCodegenLevel();
    boolean that_present_codegen_level = true && that.isSetCodegenLevel();
    if (this_present_codegen_level || that_present_codegen_level) {
      if (!(this_present_codegen_level && that_present_codegen_level))
        return false;
      if (this.codegen_level != that.codegen_level)
        return false;
    }

    boolean this_present_kudu_latest_observed_ts = true && this.isSetKuduLatestObservedTs();
    boolean that_present_kudu_latest_observed_ts = true && that.isSetKuduLatestObservedTs();
    if (this_present_kudu_latest_observed_ts || that_present_kudu_latest_observed_ts) {
      if (!(this_present_kudu_latest_observed_ts && that_present_kudu_latest_observed_ts))
        return false;
      if (this.kudu_latest_observed_ts != that.kudu_latest_observed_ts)
        return false;
    }

    boolean this_present_query_type = true && this.isSetQueryType();
    boolean that_present_query_type = true && that.isSetQueryType();
    if (this_present_query_type || that_present_query_type) {
      if (!(this_present_query_type && that_present_query_type))
        return false;
      if (!this.query_type.equals(that.query_type))
        return false;
    }

    boolean this_present_min_reservation = true && this.isSetMinReservation();
    boolean that_present_min_reservation = true && that.isSetMinReservation();
    if (this_present_min_reservation || that_present_min_reservation) {
      if (!(this_present_min_reservation && that_present_min_reservation))
        return false;
      if (this.min_reservation != that.min_reservation)
        return false;
    }

    boolean this_present_max_reservation = true && this.isSetMaxReservation();
    boolean that_present_max_reservation = true && that.isSetMaxReservation();
    if (this_present_max_reservation || that_present_max_reservation) {
      if (!(this_present_max_reservation && that_present_max_reservation))
        return false;
      if (this.max_reservation != that.max_reservation)
        return false;
    }

    boolean this_present_initial_reservation_total_claims = true && this.isSetInitialReservationTotalClaims();
    boolean that_present_initial_reservation_total_claims = true && that.isSetInitialReservationTotalClaims();
    if (this_present_initial_reservation_total_claims || that_present_initial_reservation_total_claims) {
      if (!(this_present_initial_reservation_total_claims && that_present_initial_reservation_total_claims))
        return false;
      if (this.initial_reservation_total_claims != that.initial_reservation_total_claims)
        return false;
    }

    boolean this_present_buffer_pool_limit = true && this.isSetBufferPoolLimit();
    boolean that_present_buffer_pool_limit = true && that.isSetBufferPoolLimit();
    if (this_present_buffer_pool_limit || that_present_buffer_pool_limit) {
      if (!(this_present_buffer_pool_limit && that_present_buffer_pool_limit))
        return false;
      if (this.buffer_pool_limit != that.buffer_pool_limit)
        return false;
    }

    boolean this_present_default_spillable_buffer_size = true && this.isSetDefaultSpillableBufferSize();
    boolean that_present_default_spillable_buffer_size = true && that.isSetDefaultSpillableBufferSize();
    if (this_present_default_spillable_buffer_size || that_present_default_spillable_buffer_size) {
      if (!(this_present_default_spillable_buffer_size && that_present_default_spillable_buffer_size))
        return false;
      if (this.default_spillable_buffer_size != that.default_spillable_buffer_size)
        return false;
    }

    boolean this_present_min_spillable_buffer_size = true && this.isSetMinSpillableBufferSize();
    boolean that_present_min_spillable_buffer_size = true && that.isSetMinSpillableBufferSize();
    if (this_present_min_spillable_buffer_size || that_present_min_spillable_buffer_size) {
      if (!(this_present_min_spillable_buffer_size && that_present_min_spillable_buffer_size))
        return false;
      if (this.min_spillable_buffer_size != that.min_spillable_buffer_size)
        return false;
    }

    boolean this_present_max_row_size = true && this.isSetMaxRowSize();
    boolean that_present_max_row_size = true && that.isSetMaxRowSize();
    if (this_present_max_row_size || that_present_max_row_size) {
      if (!(this_present_max_row_size && that_present_max_row_size))
        return false;
      if (this.max_row_size != that.max_row_size)
        return false;
    }

    boolean this_present_disable_stream_preaggregations = true && this.isSetDisableStreamPreaggregations();
    boolean that_present_disable_stream_preaggregations = true && that.isSetDisableStreamPreaggregations();
    if (this_present_disable_stream_preaggregations || that_present_disable_stream_preaggregations) {
      if (!(this_present_disable_stream_preaggregations && that_present_disable_stream_preaggregations))
        return false;
      if (this.disable_stream_preaggregations != that.disable_stream_preaggregations)
        return false;
    }

    boolean this_present_mt_dop = true && this.isSetMtDop();
    boolean that_present_mt_dop = true && that.isSetMtDop();
    if (this_present_mt_dop || that_present_mt_dop) {
      if (!(this_present_mt_dop && that_present_mt_dop))
        return false;
      if (this.mt_dop != that.mt_dop)
        return false;
    }

    boolean this_present_load_mem_limit = true && this.isSetLoadMemLimit();
    boolean that_present_load_mem_limit = true && that.isSetLoadMemLimit();
    if (this_present_load_mem_limit || that_present_load_mem_limit) {
      if (!(this_present_load_mem_limit && that_present_load_mem_limit))
        return false;
      if (this.load_mem_limit != that.load_mem_limit)
        return false;
    }

    boolean this_present_max_scan_key_num = true && this.isSetMaxScanKeyNum();
    boolean that_present_max_scan_key_num = true && that.isSetMaxScanKeyNum();
    if (this_present_max_scan_key_num || that_present_max_scan_key_num) {
      if (!(this_present_max_scan_key_num && that_present_max_scan_key_num))
        return false;
      if (this.max_scan_key_num != that.max_scan_key_num)
        return false;
    }

    boolean this_present_max_pushdown_conditions_per_column = true && this.isSetMaxPushdownConditionsPerColumn();
    boolean that_present_max_pushdown_conditions_per_column = true && that.isSetMaxPushdownConditionsPerColumn();
    if (this_present_max_pushdown_conditions_per_column || that_present_max_pushdown_conditions_per_column) {
      if (!(this_present_max_pushdown_conditions_per_column && that_present_max_pushdown_conditions_per_column))
        return false;
      if (this.max_pushdown_conditions_per_column != that.max_pushdown_conditions_per_column)
        return false;
    }

    boolean this_present_enable_spilling = true && this.isSetEnableSpilling();
    boolean that_present_enable_spilling = true && that.isSetEnableSpilling();
    if (this_present_enable_spilling || that_present_enable_spilling) {
      if (!(this_present_enable_spilling && that_present_enable_spilling))
        return false;
      if (this.enable_spilling != that.enable_spilling)
        return false;
    }

    boolean this_present_enable_enable_exchange_node_parallel_merge = true && this.isSetEnableEnableExchangeNodeParallelMerge();
    boolean that_present_enable_enable_exchange_node_parallel_merge = true && that.isSetEnableEnableExchangeNodeParallelMerge();
    if (this_present_enable_enable_exchange_node_parallel_merge || that_present_enable_enable_exchange_node_parallel_merge) {
      if (!(this_present_enable_enable_exchange_node_parallel_merge && that_present_enable_enable_exchange_node_parallel_merge))
        return false;
      if (this.enable_enable_exchange_node_parallel_merge != that.enable_enable_exchange_node_parallel_merge)
        return false;
    }

    boolean this_present_runtime_filter_wait_time_ms = true && this.isSetRuntimeFilterWaitTimeMs();
    boolean that_present_runtime_filter_wait_time_ms = true && that.isSetRuntimeFilterWaitTimeMs();
    if (this_present_runtime_filter_wait_time_ms || that_present_runtime_filter_wait_time_ms) {
      if (!(this_present_runtime_filter_wait_time_ms && that_present_runtime_filter_wait_time_ms))
        return false;
      if (this.runtime_filter_wait_time_ms != that.runtime_filter_wait_time_ms)
        return false;
    }

    boolean this_present_runtime_filter_max_in_num = true && this.isSetRuntimeFilterMaxInNum();
    boolean that_present_runtime_filter_max_in_num = true && that.isSetRuntimeFilterMaxInNum();
    if (this_present_runtime_filter_max_in_num || that_present_runtime_filter_max_in_num) {
      if (!(this_present_runtime_filter_max_in_num && that_present_runtime_filter_max_in_num))
        return false;
      if (this.runtime_filter_max_in_num != that.runtime_filter_max_in_num)
        return false;
    }

    boolean this_present_resource_limit = true && this.isSetResourceLimit();
    boolean that_present_resource_limit = true && that.isSetResourceLimit();
    if (this_present_resource_limit || that_present_resource_limit) {
      if (!(this_present_resource_limit && that_present_resource_limit))
        return false;
      if (!this.resource_limit.equals(that.resource_limit))
        return false;
    }

    boolean this_present_return_object_data_as_binary = true && this.isSetReturnObjectDataAsBinary();
    boolean that_present_return_object_data_as_binary = true && that.isSetReturnObjectDataAsBinary();
    if (this_present_return_object_data_as_binary || that_present_return_object_data_as_binary) {
      if (!(this_present_return_object_data_as_binary && that_present_return_object_data_as_binary))
        return false;
      if (this.return_object_data_as_binary != that.return_object_data_as_binary)
        return false;
    }

    boolean this_present_trim_tailing_spaces_for_external_table_query = true && this.isSetTrimTailingSpacesForExternalTableQuery();
    boolean that_present_trim_tailing_spaces_for_external_table_query = true && that.isSetTrimTailingSpacesForExternalTableQuery();
    if (this_present_trim_tailing_spaces_for_external_table_query || that_present_trim_tailing_spaces_for_external_table_query) {
      if (!(this_present_trim_tailing_spaces_for_external_table_query && that_present_trim_tailing_spaces_for_external_table_query))
        return false;
      if (this.trim_tailing_spaces_for_external_table_query != that.trim_tailing_spaces_for_external_table_query)
        return false;
    }

    boolean this_present_enable_function_pushdown = true && this.isSetEnableFunctionPushdown();
    boolean that_present_enable_function_pushdown = true && that.isSetEnableFunctionPushdown();
    if (this_present_enable_function_pushdown || that_present_enable_function_pushdown) {
      if (!(this_present_enable_function_pushdown && that_present_enable_function_pushdown))
        return false;
      if (this.enable_function_pushdown != that.enable_function_pushdown)
        return false;
    }

    boolean this_present_fragment_transmission_compression_codec = true && this.isSetFragmentTransmissionCompressionCodec();
    boolean that_present_fragment_transmission_compression_codec = true && that.isSetFragmentTransmissionCompressionCodec();
    if (this_present_fragment_transmission_compression_codec || that_present_fragment_transmission_compression_codec) {
      if (!(this_present_fragment_transmission_compression_codec && that_present_fragment_transmission_compression_codec))
        return false;
      if (!this.fragment_transmission_compression_codec.equals(that.fragment_transmission_compression_codec))
        return false;
    }

    boolean this_present_enable_local_exchange = true && this.isSetEnableLocalExchange();
    boolean that_present_enable_local_exchange = true && that.isSetEnableLocalExchange();
    if (this_present_enable_local_exchange || that_present_enable_local_exchange) {
      if (!(this_present_enable_local_exchange && that_present_enable_local_exchange))
        return false;
      if (this.enable_local_exchange != that.enable_local_exchange)
        return false;
    }

    boolean this_present_skip_storage_engine_merge = true && this.isSetSkipStorageEngineMerge();
    boolean that_present_skip_storage_engine_merge = true && that.isSetSkipStorageEngineMerge();
    if (this_present_skip_storage_engine_merge || that_present_skip_storage_engine_merge) {
      if (!(this_present_skip_storage_engine_merge && that_present_skip_storage_engine_merge))
        return false;
      if (this.skip_storage_engine_merge != that.skip_storage_engine_merge)
        return false;
    }

    boolean this_present_skip_delete_predicate = true && this.isSetSkipDeletePredicate();
    boolean that_present_skip_delete_predicate = true && that.isSetSkipDeletePredicate();
    if (this_present_skip_delete_predicate || that_present_skip_delete_predicate) {
      if (!(this_present_skip_delete_predicate && that_present_skip_delete_predicate))
        return false;
      if (this.skip_delete_predicate != that.skip_delete_predicate)
        return false;
    }

    boolean this_present_enable_new_shuffle_hash_method = true && this.isSetEnableNewShuffleHashMethod();
    boolean that_present_enable_new_shuffle_hash_method = true && that.isSetEnableNewShuffleHashMethod();
    if (this_present_enable_new_shuffle_hash_method || that_present_enable_new_shuffle_hash_method) {
      if (!(this_present_enable_new_shuffle_hash_method && that_present_enable_new_shuffle_hash_method))
        return false;
      if (this.enable_new_shuffle_hash_method != that.enable_new_shuffle_hash_method)
        return false;
    }

    boolean this_present_be_exec_version = true && this.isSetBeExecVersion();
    boolean that_present_be_exec_version = true && that.isSetBeExecVersion();
    if (this_present_be_exec_version || that_present_be_exec_version) {
      if (!(this_present_be_exec_version && that_present_be_exec_version))
        return false;
      if (this.be_exec_version != that.be_exec_version)
        return false;
    }

    boolean this_present_partitioned_hash_join_rows_threshold = true && this.isSetPartitionedHashJoinRowsThreshold();
    boolean that_present_partitioned_hash_join_rows_threshold = true && that.isSetPartitionedHashJoinRowsThreshold();
    if (this_present_partitioned_hash_join_rows_threshold || that_present_partitioned_hash_join_rows_threshold) {
      if (!(this_present_partitioned_hash_join_rows_threshold && that_present_partitioned_hash_join_rows_threshold))
        return false;
      if (this.partitioned_hash_join_rows_threshold != that.partitioned_hash_join_rows_threshold)
        return false;
    }

    boolean this_present_enable_share_hash_table_for_broadcast_join = true && this.isSetEnableShareHashTableForBroadcastJoin();
    boolean that_present_enable_share_hash_table_for_broadcast_join = true && that.isSetEnableShareHashTableForBroadcastJoin();
    if (this_present_enable_share_hash_table_for_broadcast_join || that_present_enable_share_hash_table_for_broadcast_join) {
      if (!(this_present_enable_share_hash_table_for_broadcast_join && that_present_enable_share_hash_table_for_broadcast_join))
        return false;
      if (this.enable_share_hash_table_for_broadcast_join != that.enable_share_hash_table_for_broadcast_join)
        return false;
    }

    boolean this_present_check_overflow_for_decimal = true && this.isSetCheckOverflowForDecimal();
    boolean that_present_check_overflow_for_decimal = true && that.isSetCheckOverflowForDecimal();
    if (this_present_check_overflow_for_decimal || that_present_check_overflow_for_decimal) {
      if (!(this_present_check_overflow_for_decimal && that_present_check_overflow_for_decimal))
        return false;
      if (this.check_overflow_for_decimal != that.check_overflow_for_decimal)
        return false;
    }

    boolean this_present_skip_delete_bitmap = true && this.isSetSkipDeleteBitmap();
    boolean that_present_skip_delete_bitmap = true && that.isSetSkipDeleteBitmap();
    if (this_present_skip_delete_bitmap || that_present_skip_delete_bitmap) {
      if (!(this_present_skip_delete_bitmap && that_present_skip_delete_bitmap))
        return false;
      if (this.skip_delete_bitmap != that.skip_delete_bitmap)
        return false;
    }

    boolean this_present_enable_pipeline_engine = true && this.isSetEnablePipelineEngine();
    boolean that_present_enable_pipeline_engine = true && that.isSetEnablePipelineEngine();
    if (this_present_enable_pipeline_engine || that_present_enable_pipeline_engine) {
      if (!(this_present_enable_pipeline_engine && that_present_enable_pipeline_engine))
        return false;
      if (this.enable_pipeline_engine != that.enable_pipeline_engine)
        return false;
    }

    boolean this_present_repeat_max_num = true && this.isSetRepeatMaxNum();
    boolean that_present_repeat_max_num = true && that.isSetRepeatMaxNum();
    if (this_present_repeat_max_num || that_present_repeat_max_num) {
      if (!(this_present_repeat_max_num && that_present_repeat_max_num))
        return false;
      if (this.repeat_max_num != that.repeat_max_num)
        return false;
    }

    boolean this_present_external_sort_bytes_threshold = true && this.isSetExternalSortBytesThreshold();
    boolean that_present_external_sort_bytes_threshold = true && that.isSetExternalSortBytesThreshold();
    if (this_present_external_sort_bytes_threshold || that_present_external_sort_bytes_threshold) {
      if (!(this_present_external_sort_bytes_threshold && that_present_external_sort_bytes_threshold))
        return false;
      if (this.external_sort_bytes_threshold != that.external_sort_bytes_threshold)
        return false;
    }

    boolean this_present_partitioned_hash_agg_rows_threshold = true && this.isSetPartitionedHashAggRowsThreshold();
    boolean that_present_partitioned_hash_agg_rows_threshold = true && that.isSetPartitionedHashAggRowsThreshold();
    if (this_present_partitioned_hash_agg_rows_threshold || that_present_partitioned_hash_agg_rows_threshold) {
      if (!(this_present_partitioned_hash_agg_rows_threshold && that_present_partitioned_hash_agg_rows_threshold))
        return false;
      if (this.partitioned_hash_agg_rows_threshold != that.partitioned_hash_agg_rows_threshold)
        return false;
    }

    boolean this_present_enable_file_cache = true && this.isSetEnableFileCache();
    boolean that_present_enable_file_cache = true && that.isSetEnableFileCache();
    if (this_present_enable_file_cache || that_present_enable_file_cache) {
      if (!(this_present_enable_file_cache && that_present_enable_file_cache))
        return false;
      if (this.enable_file_cache != that.enable_file_cache)
        return false;
    }

    boolean this_present_insert_timeout = true && this.isSetInsertTimeout();
    boolean that_present_insert_timeout = true && that.isSetInsertTimeout();
    if (this_present_insert_timeout || that_present_insert_timeout) {
      if (!(this_present_insert_timeout && that_present_insert_timeout))
        return false;
      if (this.insert_timeout != that.insert_timeout)
        return false;
    }

    boolean this_present_execution_timeout = true && this.isSetExecutionTimeout();
    boolean that_present_execution_timeout = true && that.isSetExecutionTimeout();
    if (this_present_execution_timeout || that_present_execution_timeout) {
      if (!(this_present_execution_timeout && that_present_execution_timeout))
        return false;
      if (this.execution_timeout != that.execution_timeout)
        return false;
    }

    boolean this_present_dry_run_query = true && this.isSetDryRunQuery();
    boolean that_present_dry_run_query = true && that.isSetDryRunQuery();
    if (this_present_dry_run_query || that_present_dry_run_query) {
      if (!(this_present_dry_run_query && that_present_dry_run_query))
        return false;
      if (this.dry_run_query != that.dry_run_query)
        return false;
    }

    boolean this_present_enable_common_expr_pushdown = true && this.isSetEnableCommonExprPushdown();
    boolean that_present_enable_common_expr_pushdown = true && that.isSetEnableCommonExprPushdown();
    if (this_present_enable_common_expr_pushdown || that_present_enable_common_expr_pushdown) {
      if (!(this_present_enable_common_expr_pushdown && that_present_enable_common_expr_pushdown))
        return false;
      if (this.enable_common_expr_pushdown != that.enable_common_expr_pushdown)
        return false;
    }

    boolean this_present_parallel_instance = true && this.isSetParallelInstance();
    boolean that_present_parallel_instance = true && that.isSetParallelInstance();
    if (this_present_parallel_instance || that_present_parallel_instance) {
      if (!(this_present_parallel_instance && that_present_parallel_instance))
        return false;
      if (this.parallel_instance != that.parallel_instance)
        return false;
    }

    boolean this_present_mysql_row_binary_format = true && this.isSetMysqlRowBinaryFormat();
    boolean that_present_mysql_row_binary_format = true && that.isSetMysqlRowBinaryFormat();
    if (this_present_mysql_row_binary_format || that_present_mysql_row_binary_format) {
      if (!(this_present_mysql_row_binary_format && that_present_mysql_row_binary_format))
        return false;
      if (this.mysql_row_binary_format != that.mysql_row_binary_format)
        return false;
    }

    boolean this_present_external_agg_bytes_threshold = true && this.isSetExternalAggBytesThreshold();
    boolean that_present_external_agg_bytes_threshold = true && that.isSetExternalAggBytesThreshold();
    if (this_present_external_agg_bytes_threshold || that_present_external_agg_bytes_threshold) {
      if (!(this_present_external_agg_bytes_threshold && that_present_external_agg_bytes_threshold))
        return false;
      if (this.external_agg_bytes_threshold != that.external_agg_bytes_threshold)
        return false;
    }

    boolean this_present_external_agg_partition_bits = true && this.isSetExternalAggPartitionBits();
    boolean that_present_external_agg_partition_bits = true && that.isSetExternalAggPartitionBits();
    if (this_present_external_agg_partition_bits || that_present_external_agg_partition_bits) {
      if (!(this_present_external_agg_partition_bits && that_present_external_agg_partition_bits))
        return false;
      if (this.external_agg_partition_bits != that.external_agg_partition_bits)
        return false;
    }

    boolean this_present_file_cache_base_path = true && this.isSetFileCacheBasePath();
    boolean that_present_file_cache_base_path = true && that.isSetFileCacheBasePath();
    if (this_present_file_cache_base_path || that_present_file_cache_base_path) {
      if (!(this_present_file_cache_base_path && that_present_file_cache_base_path))
        return false;
      if (!this.file_cache_base_path.equals(that.file_cache_base_path))
        return false;
    }

    boolean this_present_enable_parquet_lazy_mat = true && this.isSetEnableParquetLazyMat();
    boolean that_present_enable_parquet_lazy_mat = true && that.isSetEnableParquetLazyMat();
    if (this_present_enable_parquet_lazy_mat || that_present_enable_parquet_lazy_mat) {
      if (!(this_present_enable_parquet_lazy_mat && that_present_enable_parquet_lazy_mat))
        return false;
      if (this.enable_parquet_lazy_mat != that.enable_parquet_lazy_mat)
        return false;
    }

    boolean this_present_enable_orc_lazy_mat = true && this.isSetEnableOrcLazyMat();
    boolean that_present_enable_orc_lazy_mat = true && that.isSetEnableOrcLazyMat();
    if (this_present_enable_orc_lazy_mat || that_present_enable_orc_lazy_mat) {
      if (!(this_present_enable_orc_lazy_mat && that_present_enable_orc_lazy_mat))
        return false;
      if (this.enable_orc_lazy_mat != that.enable_orc_lazy_mat)
        return false;
    }

    boolean this_present_scan_queue_mem_limit = true && this.isSetScanQueueMemLimit();
    boolean that_present_scan_queue_mem_limit = true && that.isSetScanQueueMemLimit();
    if (this_present_scan_queue_mem_limit || that_present_scan_queue_mem_limit) {
      if (!(this_present_scan_queue_mem_limit && that_present_scan_queue_mem_limit))
        return false;
      if (this.scan_queue_mem_limit != that.scan_queue_mem_limit)
        return false;
    }

    boolean this_present_enable_scan_node_run_serial = true && this.isSetEnableScanNodeRunSerial();
    boolean that_present_enable_scan_node_run_serial = true && that.isSetEnableScanNodeRunSerial();
    if (this_present_enable_scan_node_run_serial || that_present_enable_scan_node_run_serial) {
      if (!(this_present_enable_scan_node_run_serial && that_present_enable_scan_node_run_serial))
        return false;
      if (this.enable_scan_node_run_serial != that.enable_scan_node_run_serial)
        return false;
    }

    boolean this_present_enable_insert_strict = true && this.isSetEnableInsertStrict();
    boolean that_present_enable_insert_strict = true && that.isSetEnableInsertStrict();
    if (this_present_enable_insert_strict || that_present_enable_insert_strict) {
      if (!(this_present_enable_insert_strict && that_present_enable_insert_strict))
        return false;
      if (this.enable_insert_strict != that.enable_insert_strict)
        return false;
    }

    boolean this_present_enable_inverted_index_query = true && this.isSetEnableInvertedIndexQuery();
    boolean that_present_enable_inverted_index_query = true && that.isSetEnableInvertedIndexQuery();
    if (this_present_enable_inverted_index_query || that_present_enable_inverted_index_query) {
      if (!(this_present_enable_inverted_index_query && that_present_enable_inverted_index_query))
        return false;
      if (this.enable_inverted_index_query != that.enable_inverted_index_query)
        return false;
    }

    boolean this_present_truncate_char_or_varchar_columns = true && this.isSetTruncateCharOrVarcharColumns();
    boolean that_present_truncate_char_or_varchar_columns = true && that.isSetTruncateCharOrVarcharColumns();
    if (this_present_truncate_char_or_varchar_columns || that_present_truncate_char_or_varchar_columns) {
      if (!(this_present_truncate_char_or_varchar_columns && that_present_truncate_char_or_varchar_columns))
        return false;
      if (this.truncate_char_or_varchar_columns != that.truncate_char_or_varchar_columns)
        return false;
    }

    boolean this_present_enable_hash_join_early_start_probe = true && this.isSetEnableHashJoinEarlyStartProbe();
    boolean that_present_enable_hash_join_early_start_probe = true && that.isSetEnableHashJoinEarlyStartProbe();
    if (this_present_enable_hash_join_early_start_probe || that_present_enable_hash_join_early_start_probe) {
      if (!(this_present_enable_hash_join_early_start_probe && that_present_enable_hash_join_early_start_probe))
        return false;
      if (this.enable_hash_join_early_start_probe != that.enable_hash_join_early_start_probe)
        return false;
    }

    boolean this_present_enable_pipeline_x_engine = true && this.isSetEnablePipelineXEngine();
    boolean that_present_enable_pipeline_x_engine = true && that.isSetEnablePipelineXEngine();
    if (this_present_enable_pipeline_x_engine || that_present_enable_pipeline_x_engine) {
      if (!(this_present_enable_pipeline_x_engine && that_present_enable_pipeline_x_engine))
        return false;
      if (this.enable_pipeline_x_engine != that.enable_pipeline_x_engine)
        return false;
    }

    boolean this_present_enable_memtable_on_sink_node = true && this.isSetEnableMemtableOnSinkNode();
    boolean that_present_enable_memtable_on_sink_node = true && that.isSetEnableMemtableOnSinkNode();
    if (this_present_enable_memtable_on_sink_node || that_present_enable_memtable_on_sink_node) {
      if (!(this_present_enable_memtable_on_sink_node && that_present_enable_memtable_on_sink_node))
        return false;
      if (this.enable_memtable_on_sink_node != that.enable_memtable_on_sink_node)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAbortOnError()) ? 131071 : 524287);
    if (isSetAbortOnError())
      hashCode = hashCode * 8191 + ((abort_on_error) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMaxErrors()) ? 131071 : 524287);
    if (isSetMaxErrors())
      hashCode = hashCode * 8191 + max_errors;

    hashCode = hashCode * 8191 + ((isSetDisableCodegen()) ? 131071 : 524287);
    if (isSetDisableCodegen())
      hashCode = hashCode * 8191 + ((disable_codegen) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBatchSize()) ? 131071 : 524287);
    if (isSetBatchSize())
      hashCode = hashCode * 8191 + batch_size;

    hashCode = hashCode * 8191 + ((isSetNumNodes()) ? 131071 : 524287);
    if (isSetNumNodes())
      hashCode = hashCode * 8191 + num_nodes;

    hashCode = hashCode * 8191 + ((isSetMaxScanRangeLength()) ? 131071 : 524287);
    if (isSetMaxScanRangeLength())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_scan_range_length);

    hashCode = hashCode * 8191 + ((isSetNumScannerThreads()) ? 131071 : 524287);
    if (isSetNumScannerThreads())
      hashCode = hashCode * 8191 + num_scanner_threads;

    hashCode = hashCode * 8191 + ((isSetMaxIoBuffers()) ? 131071 : 524287);
    if (isSetMaxIoBuffers())
      hashCode = hashCode * 8191 + max_io_buffers;

    hashCode = hashCode * 8191 + ((isSetAllowUnsupportedFormats()) ? 131071 : 524287);
    if (isSetAllowUnsupportedFormats())
      hashCode = hashCode * 8191 + ((allow_unsupported_formats) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDefaultOrderByLimit()) ? 131071 : 524287);
    if (isSetDefaultOrderByLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(default_order_by_limit);

    hashCode = hashCode * 8191 + ((isSetMemLimit()) ? 131071 : 524287);
    if (isSetMemLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mem_limit);

    hashCode = hashCode * 8191 + ((isSetAbortOnDefaultLimitExceeded()) ? 131071 : 524287);
    if (isSetAbortOnDefaultLimitExceeded())
      hashCode = hashCode * 8191 + ((abort_on_default_limit_exceeded) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetQueryTimeout()) ? 131071 : 524287);
    if (isSetQueryTimeout())
      hashCode = hashCode * 8191 + query_timeout;

    hashCode = hashCode * 8191 + ((isSetIsReportSuccess()) ? 131071 : 524287);
    if (isSetIsReportSuccess())
      hashCode = hashCode * 8191 + ((is_report_success) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCodegenLevel()) ? 131071 : 524287);
    if (isSetCodegenLevel())
      hashCode = hashCode * 8191 + codegen_level;

    hashCode = hashCode * 8191 + ((isSetKuduLatestObservedTs()) ? 131071 : 524287);
    if (isSetKuduLatestObservedTs())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(kudu_latest_observed_ts);

    hashCode = hashCode * 8191 + ((isSetQueryType()) ? 131071 : 524287);
    if (isSetQueryType())
      hashCode = hashCode * 8191 + query_type.getValue();

    hashCode = hashCode * 8191 + ((isSetMinReservation()) ? 131071 : 524287);
    if (isSetMinReservation())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(min_reservation);

    hashCode = hashCode * 8191 + ((isSetMaxReservation()) ? 131071 : 524287);
    if (isSetMaxReservation())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_reservation);

    hashCode = hashCode * 8191 + ((isSetInitialReservationTotalClaims()) ? 131071 : 524287);
    if (isSetInitialReservationTotalClaims())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(initial_reservation_total_claims);

    hashCode = hashCode * 8191 + ((isSetBufferPoolLimit()) ? 131071 : 524287);
    if (isSetBufferPoolLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(buffer_pool_limit);

    hashCode = hashCode * 8191 + ((isSetDefaultSpillableBufferSize()) ? 131071 : 524287);
    if (isSetDefaultSpillableBufferSize())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(default_spillable_buffer_size);

    hashCode = hashCode * 8191 + ((isSetMinSpillableBufferSize()) ? 131071 : 524287);
    if (isSetMinSpillableBufferSize())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(min_spillable_buffer_size);

    hashCode = hashCode * 8191 + ((isSetMaxRowSize()) ? 131071 : 524287);
    if (isSetMaxRowSize())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_row_size);

    hashCode = hashCode * 8191 + ((isSetDisableStreamPreaggregations()) ? 131071 : 524287);
    if (isSetDisableStreamPreaggregations())
      hashCode = hashCode * 8191 + ((disable_stream_preaggregations) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMtDop()) ? 131071 : 524287);
    if (isSetMtDop())
      hashCode = hashCode * 8191 + mt_dop;

    hashCode = hashCode * 8191 + ((isSetLoadMemLimit()) ? 131071 : 524287);
    if (isSetLoadMemLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(load_mem_limit);

    hashCode = hashCode * 8191 + ((isSetMaxScanKeyNum()) ? 131071 : 524287);
    if (isSetMaxScanKeyNum())
      hashCode = hashCode * 8191 + max_scan_key_num;

    hashCode = hashCode * 8191 + ((isSetMaxPushdownConditionsPerColumn()) ? 131071 : 524287);
    if (isSetMaxPushdownConditionsPerColumn())
      hashCode = hashCode * 8191 + max_pushdown_conditions_per_column;

    hashCode = hashCode * 8191 + ((isSetEnableSpilling()) ? 131071 : 524287);
    if (isSetEnableSpilling())
      hashCode = hashCode * 8191 + ((enable_spilling) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnableEnableExchangeNodeParallelMerge()) ? 131071 : 524287);
    if (isSetEnableEnableExchangeNodeParallelMerge())
      hashCode = hashCode * 8191 + ((enable_enable_exchange_node_parallel_merge) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetRuntimeFilterWaitTimeMs()) ? 131071 : 524287);
    if (isSetRuntimeFilterWaitTimeMs())
      hashCode = hashCode * 8191 + runtime_filter_wait_time_ms;

    hashCode = hashCode * 8191 + ((isSetRuntimeFilterMaxInNum()) ? 131071 : 524287);
    if (isSetRuntimeFilterMaxInNum())
      hashCode = hashCode * 8191 + runtime_filter_max_in_num;

    hashCode = hashCode * 8191 + ((isSetResourceLimit()) ? 131071 : 524287);
    if (isSetResourceLimit())
      hashCode = hashCode * 8191 + resource_limit.hashCode();

    hashCode = hashCode * 8191 + ((isSetReturnObjectDataAsBinary()) ? 131071 : 524287);
    if (isSetReturnObjectDataAsBinary())
      hashCode = hashCode * 8191 + ((return_object_data_as_binary) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTrimTailingSpacesForExternalTableQuery()) ? 131071 : 524287);
    if (isSetTrimTailingSpacesForExternalTableQuery())
      hashCode = hashCode * 8191 + ((trim_tailing_spaces_for_external_table_query) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnableFunctionPushdown()) ? 131071 : 524287);
    if (isSetEnableFunctionPushdown())
      hashCode = hashCode * 8191 + ((enable_function_pushdown) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetFragmentTransmissionCompressionCodec()) ? 131071 : 524287);
    if (isSetFragmentTransmissionCompressionCodec())
      hashCode = hashCode * 8191 + fragment_transmission_compression_codec.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnableLocalExchange()) ? 131071 : 524287);
    if (isSetEnableLocalExchange())
      hashCode = hashCode * 8191 + ((enable_local_exchange) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSkipStorageEngineMerge()) ? 131071 : 524287);
    if (isSetSkipStorageEngineMerge())
      hashCode = hashCode * 8191 + ((skip_storage_engine_merge) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSkipDeletePredicate()) ? 131071 : 524287);
    if (isSetSkipDeletePredicate())
      hashCode = hashCode * 8191 + ((skip_delete_predicate) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnableNewShuffleHashMethod()) ? 131071 : 524287);
    if (isSetEnableNewShuffleHashMethod())
      hashCode = hashCode * 8191 + ((enable_new_shuffle_hash_method) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBeExecVersion()) ? 131071 : 524287);
    if (isSetBeExecVersion())
      hashCode = hashCode * 8191 + be_exec_version;

    hashCode = hashCode * 8191 + ((isSetPartitionedHashJoinRowsThreshold()) ? 131071 : 524287);
    if (isSetPartitionedHashJoinRowsThreshold())
      hashCode = hashCode * 8191 + partitioned_hash_join_rows_threshold;

    hashCode = hashCode * 8191 + ((isSetEnableShareHashTableForBroadcastJoin()) ? 131071 : 524287);
    if (isSetEnableShareHashTableForBroadcastJoin())
      hashCode = hashCode * 8191 + ((enable_share_hash_table_for_broadcast_join) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCheckOverflowForDecimal()) ? 131071 : 524287);
    if (isSetCheckOverflowForDecimal())
      hashCode = hashCode * 8191 + ((check_overflow_for_decimal) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSkipDeleteBitmap()) ? 131071 : 524287);
    if (isSetSkipDeleteBitmap())
      hashCode = hashCode * 8191 + ((skip_delete_bitmap) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnablePipelineEngine()) ? 131071 : 524287);
    if (isSetEnablePipelineEngine())
      hashCode = hashCode * 8191 + ((enable_pipeline_engine) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetRepeatMaxNum()) ? 131071 : 524287);
    if (isSetRepeatMaxNum())
      hashCode = hashCode * 8191 + repeat_max_num;

    hashCode = hashCode * 8191 + ((isSetExternalSortBytesThreshold()) ? 131071 : 524287);
    if (isSetExternalSortBytesThreshold())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(external_sort_bytes_threshold);

    hashCode = hashCode * 8191 + ((isSetPartitionedHashAggRowsThreshold()) ? 131071 : 524287);
    if (isSetPartitionedHashAggRowsThreshold())
      hashCode = hashCode * 8191 + partitioned_hash_agg_rows_threshold;

    hashCode = hashCode * 8191 + ((isSetEnableFileCache()) ? 131071 : 524287);
    if (isSetEnableFileCache())
      hashCode = hashCode * 8191 + ((enable_file_cache) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetInsertTimeout()) ? 131071 : 524287);
    if (isSetInsertTimeout())
      hashCode = hashCode * 8191 + insert_timeout;

    hashCode = hashCode * 8191 + ((isSetExecutionTimeout()) ? 131071 : 524287);
    if (isSetExecutionTimeout())
      hashCode = hashCode * 8191 + execution_timeout;

    hashCode = hashCode * 8191 + ((isSetDryRunQuery()) ? 131071 : 524287);
    if (isSetDryRunQuery())
      hashCode = hashCode * 8191 + ((dry_run_query) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnableCommonExprPushdown()) ? 131071 : 524287);
    if (isSetEnableCommonExprPushdown())
      hashCode = hashCode * 8191 + ((enable_common_expr_pushdown) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetParallelInstance()) ? 131071 : 524287);
    if (isSetParallelInstance())
      hashCode = hashCode * 8191 + parallel_instance;

    hashCode = hashCode * 8191 + ((isSetMysqlRowBinaryFormat()) ? 131071 : 524287);
    if (isSetMysqlRowBinaryFormat())
      hashCode = hashCode * 8191 + ((mysql_row_binary_format) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetExternalAggBytesThreshold()) ? 131071 : 524287);
    if (isSetExternalAggBytesThreshold())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(external_agg_bytes_threshold);

    hashCode = hashCode * 8191 + ((isSetExternalAggPartitionBits()) ? 131071 : 524287);
    if (isSetExternalAggPartitionBits())
      hashCode = hashCode * 8191 + external_agg_partition_bits;

    hashCode = hashCode * 8191 + ((isSetFileCacheBasePath()) ? 131071 : 524287);
    if (isSetFileCacheBasePath())
      hashCode = hashCode * 8191 + file_cache_base_path.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnableParquetLazyMat()) ? 131071 : 524287);
    if (isSetEnableParquetLazyMat())
      hashCode = hashCode * 8191 + ((enable_parquet_lazy_mat) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnableOrcLazyMat()) ? 131071 : 524287);
    if (isSetEnableOrcLazyMat())
      hashCode = hashCode * 8191 + ((enable_orc_lazy_mat) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetScanQueueMemLimit()) ? 131071 : 524287);
    if (isSetScanQueueMemLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(scan_queue_mem_limit);

    hashCode = hashCode * 8191 + ((isSetEnableScanNodeRunSerial()) ? 131071 : 524287);
    if (isSetEnableScanNodeRunSerial())
      hashCode = hashCode * 8191 + ((enable_scan_node_run_serial) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnableInsertStrict()) ? 131071 : 524287);
    if (isSetEnableInsertStrict())
      hashCode = hashCode * 8191 + ((enable_insert_strict) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnableInvertedIndexQuery()) ? 131071 : 524287);
    if (isSetEnableInvertedIndexQuery())
      hashCode = hashCode * 8191 + ((enable_inverted_index_query) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTruncateCharOrVarcharColumns()) ? 131071 : 524287);
    if (isSetTruncateCharOrVarcharColumns())
      hashCode = hashCode * 8191 + ((truncate_char_or_varchar_columns) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnableHashJoinEarlyStartProbe()) ? 131071 : 524287);
    if (isSetEnableHashJoinEarlyStartProbe())
      hashCode = hashCode * 8191 + ((enable_hash_join_early_start_probe) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnablePipelineXEngine()) ? 131071 : 524287);
    if (isSetEnablePipelineXEngine())
      hashCode = hashCode * 8191 + ((enable_pipeline_x_engine) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnableMemtableOnSinkNode()) ? 131071 : 524287);
    if (isSetEnableMemtableOnSinkNode())
      hashCode = hashCode * 8191 + ((enable_memtable_on_sink_node) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TQueryOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetAbortOnError(), other.isSetAbortOnError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbortOnError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abort_on_error, other.abort_on_error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxErrors(), other.isSetMaxErrors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxErrors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_errors, other.max_errors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDisableCodegen(), other.isSetDisableCodegen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisableCodegen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_codegen, other.disable_codegen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBatchSize(), other.isSetBatchSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batch_size, other.batch_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumNodes(), other.isSetNumNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_nodes, other.num_nodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxScanRangeLength(), other.isSetMaxScanRangeLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxScanRangeLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_scan_range_length, other.max_scan_range_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumScannerThreads(), other.isSetNumScannerThreads());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumScannerThreads()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_scanner_threads, other.num_scanner_threads);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxIoBuffers(), other.isSetMaxIoBuffers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxIoBuffers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_io_buffers, other.max_io_buffers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAllowUnsupportedFormats(), other.isSetAllowUnsupportedFormats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowUnsupportedFormats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allow_unsupported_formats, other.allow_unsupported_formats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDefaultOrderByLimit(), other.isSetDefaultOrderByLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultOrderByLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_order_by_limit, other.default_order_by_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMemLimit(), other.isSetMemLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mem_limit, other.mem_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAbortOnDefaultLimitExceeded(), other.isSetAbortOnDefaultLimitExceeded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbortOnDefaultLimitExceeded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abort_on_default_limit_exceeded, other.abort_on_default_limit_exceeded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryTimeout(), other.isSetQueryTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_timeout, other.query_timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsReportSuccess(), other.isSetIsReportSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReportSuccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_report_success, other.is_report_success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCodegenLevel(), other.isSetCodegenLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCodegenLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codegen_level, other.codegen_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKuduLatestObservedTs(), other.isSetKuduLatestObservedTs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKuduLatestObservedTs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kudu_latest_observed_ts, other.kudu_latest_observed_ts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryType(), other.isSetQueryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_type, other.query_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMinReservation(), other.isSetMinReservation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinReservation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_reservation, other.min_reservation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxReservation(), other.isSetMaxReservation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxReservation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_reservation, other.max_reservation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInitialReservationTotalClaims(), other.isSetInitialReservationTotalClaims());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitialReservationTotalClaims()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initial_reservation_total_claims, other.initial_reservation_total_claims);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBufferPoolLimit(), other.isSetBufferPoolLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBufferPoolLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buffer_pool_limit, other.buffer_pool_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDefaultSpillableBufferSize(), other.isSetDefaultSpillableBufferSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultSpillableBufferSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_spillable_buffer_size, other.default_spillable_buffer_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMinSpillableBufferSize(), other.isSetMinSpillableBufferSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinSpillableBufferSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_spillable_buffer_size, other.min_spillable_buffer_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxRowSize(), other.isSetMaxRowSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxRowSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_row_size, other.max_row_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDisableStreamPreaggregations(), other.isSetDisableStreamPreaggregations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisableStreamPreaggregations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disable_stream_preaggregations, other.disable_stream_preaggregations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMtDop(), other.isSetMtDop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMtDop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mt_dop, other.mt_dop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoadMemLimit(), other.isSetLoadMemLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadMemLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_mem_limit, other.load_mem_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxScanKeyNum(), other.isSetMaxScanKeyNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxScanKeyNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_scan_key_num, other.max_scan_key_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxPushdownConditionsPerColumn(), other.isSetMaxPushdownConditionsPerColumn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxPushdownConditionsPerColumn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_pushdown_conditions_per_column, other.max_pushdown_conditions_per_column);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableSpilling(), other.isSetEnableSpilling());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableSpilling()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_spilling, other.enable_spilling);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableEnableExchangeNodeParallelMerge(), other.isSetEnableEnableExchangeNodeParallelMerge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableEnableExchangeNodeParallelMerge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_enable_exchange_node_parallel_merge, other.enable_enable_exchange_node_parallel_merge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRuntimeFilterWaitTimeMs(), other.isSetRuntimeFilterWaitTimeMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntimeFilterWaitTimeMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_wait_time_ms, other.runtime_filter_wait_time_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRuntimeFilterMaxInNum(), other.isSetRuntimeFilterMaxInNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntimeFilterMaxInNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_max_in_num, other.runtime_filter_max_in_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResourceLimit(), other.isSetResourceLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource_limit, other.resource_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReturnObjectDataAsBinary(), other.isSetReturnObjectDataAsBinary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnObjectDataAsBinary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.return_object_data_as_binary, other.return_object_data_as_binary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrimTailingSpacesForExternalTableQuery(), other.isSetTrimTailingSpacesForExternalTableQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrimTailingSpacesForExternalTableQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trim_tailing_spaces_for_external_table_query, other.trim_tailing_spaces_for_external_table_query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableFunctionPushdown(), other.isSetEnableFunctionPushdown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableFunctionPushdown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_function_pushdown, other.enable_function_pushdown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFragmentTransmissionCompressionCodec(), other.isSetFragmentTransmissionCompressionCodec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragmentTransmissionCompressionCodec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_transmission_compression_codec, other.fragment_transmission_compression_codec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableLocalExchange(), other.isSetEnableLocalExchange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableLocalExchange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_local_exchange, other.enable_local_exchange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSkipStorageEngineMerge(), other.isSetSkipStorageEngineMerge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkipStorageEngineMerge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skip_storage_engine_merge, other.skip_storage_engine_merge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSkipDeletePredicate(), other.isSetSkipDeletePredicate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkipDeletePredicate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skip_delete_predicate, other.skip_delete_predicate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableNewShuffleHashMethod(), other.isSetEnableNewShuffleHashMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableNewShuffleHashMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_new_shuffle_hash_method, other.enable_new_shuffle_hash_method);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBeExecVersion(), other.isSetBeExecVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeExecVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.be_exec_version, other.be_exec_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartitionedHashJoinRowsThreshold(), other.isSetPartitionedHashJoinRowsThreshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionedHashJoinRowsThreshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitioned_hash_join_rows_threshold, other.partitioned_hash_join_rows_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableShareHashTableForBroadcastJoin(), other.isSetEnableShareHashTableForBroadcastJoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableShareHashTableForBroadcastJoin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_share_hash_table_for_broadcast_join, other.enable_share_hash_table_for_broadcast_join);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCheckOverflowForDecimal(), other.isSetCheckOverflowForDecimal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckOverflowForDecimal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.check_overflow_for_decimal, other.check_overflow_for_decimal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSkipDeleteBitmap(), other.isSetSkipDeleteBitmap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkipDeleteBitmap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skip_delete_bitmap, other.skip_delete_bitmap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnablePipelineEngine(), other.isSetEnablePipelineEngine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnablePipelineEngine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_pipeline_engine, other.enable_pipeline_engine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRepeatMaxNum(), other.isSetRepeatMaxNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeatMaxNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeat_max_num, other.repeat_max_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExternalSortBytesThreshold(), other.isSetExternalSortBytesThreshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalSortBytesThreshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.external_sort_bytes_threshold, other.external_sort_bytes_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartitionedHashAggRowsThreshold(), other.isSetPartitionedHashAggRowsThreshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartitionedHashAggRowsThreshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitioned_hash_agg_rows_threshold, other.partitioned_hash_agg_rows_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableFileCache(), other.isSetEnableFileCache());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableFileCache()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_file_cache, other.enable_file_cache);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInsertTimeout(), other.isSetInsertTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insert_timeout, other.insert_timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExecutionTimeout(), other.isSetExecutionTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutionTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execution_timeout, other.execution_timeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDryRunQuery(), other.isSetDryRunQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDryRunQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dry_run_query, other.dry_run_query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableCommonExprPushdown(), other.isSetEnableCommonExprPushdown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableCommonExprPushdown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_common_expr_pushdown, other.enable_common_expr_pushdown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetParallelInstance(), other.isSetParallelInstance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParallelInstance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parallel_instance, other.parallel_instance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMysqlRowBinaryFormat(), other.isSetMysqlRowBinaryFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMysqlRowBinaryFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mysql_row_binary_format, other.mysql_row_binary_format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExternalAggBytesThreshold(), other.isSetExternalAggBytesThreshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalAggBytesThreshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.external_agg_bytes_threshold, other.external_agg_bytes_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExternalAggPartitionBits(), other.isSetExternalAggPartitionBits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalAggPartitionBits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.external_agg_partition_bits, other.external_agg_partition_bits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileCacheBasePath(), other.isSetFileCacheBasePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileCacheBasePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_cache_base_path, other.file_cache_base_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableParquetLazyMat(), other.isSetEnableParquetLazyMat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableParquetLazyMat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_parquet_lazy_mat, other.enable_parquet_lazy_mat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableOrcLazyMat(), other.isSetEnableOrcLazyMat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableOrcLazyMat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_orc_lazy_mat, other.enable_orc_lazy_mat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetScanQueueMemLimit(), other.isSetScanQueueMemLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScanQueueMemLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_queue_mem_limit, other.scan_queue_mem_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableScanNodeRunSerial(), other.isSetEnableScanNodeRunSerial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableScanNodeRunSerial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_scan_node_run_serial, other.enable_scan_node_run_serial);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableInsertStrict(), other.isSetEnableInsertStrict());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableInsertStrict()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_insert_strict, other.enable_insert_strict);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableInvertedIndexQuery(), other.isSetEnableInvertedIndexQuery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableInvertedIndexQuery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_inverted_index_query, other.enable_inverted_index_query);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTruncateCharOrVarcharColumns(), other.isSetTruncateCharOrVarcharColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTruncateCharOrVarcharColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.truncate_char_or_varchar_columns, other.truncate_char_or_varchar_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableHashJoinEarlyStartProbe(), other.isSetEnableHashJoinEarlyStartProbe());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableHashJoinEarlyStartProbe()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_hash_join_early_start_probe, other.enable_hash_join_early_start_probe);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnablePipelineXEngine(), other.isSetEnablePipelineXEngine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnablePipelineXEngine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_pipeline_x_engine, other.enable_pipeline_x_engine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableMemtableOnSinkNode(), other.isSetEnableMemtableOnSinkNode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableMemtableOnSinkNode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_memtable_on_sink_node, other.enable_memtable_on_sink_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TQueryOptions(");
    boolean first = true;

    if (isSetAbortOnError()) {
      sb.append("abort_on_error:");
      sb.append(this.abort_on_error);
      first = false;
    }
    if (isSetMaxErrors()) {
      if (!first) sb.append(", ");
      sb.append("max_errors:");
      sb.append(this.max_errors);
      first = false;
    }
    if (isSetDisableCodegen()) {
      if (!first) sb.append(", ");
      sb.append("disable_codegen:");
      sb.append(this.disable_codegen);
      first = false;
    }
    if (isSetBatchSize()) {
      if (!first) sb.append(", ");
      sb.append("batch_size:");
      sb.append(this.batch_size);
      first = false;
    }
    if (isSetNumNodes()) {
      if (!first) sb.append(", ");
      sb.append("num_nodes:");
      sb.append(this.num_nodes);
      first = false;
    }
    if (isSetMaxScanRangeLength()) {
      if (!first) sb.append(", ");
      sb.append("max_scan_range_length:");
      sb.append(this.max_scan_range_length);
      first = false;
    }
    if (isSetNumScannerThreads()) {
      if (!first) sb.append(", ");
      sb.append("num_scanner_threads:");
      sb.append(this.num_scanner_threads);
      first = false;
    }
    if (isSetMaxIoBuffers()) {
      if (!first) sb.append(", ");
      sb.append("max_io_buffers:");
      sb.append(this.max_io_buffers);
      first = false;
    }
    if (isSetAllowUnsupportedFormats()) {
      if (!first) sb.append(", ");
      sb.append("allow_unsupported_formats:");
      sb.append(this.allow_unsupported_formats);
      first = false;
    }
    if (isSetDefaultOrderByLimit()) {
      if (!first) sb.append(", ");
      sb.append("default_order_by_limit:");
      sb.append(this.default_order_by_limit);
      first = false;
    }
    if (isSetMemLimit()) {
      if (!first) sb.append(", ");
      sb.append("mem_limit:");
      sb.append(this.mem_limit);
      first = false;
    }
    if (isSetAbortOnDefaultLimitExceeded()) {
      if (!first) sb.append(", ");
      sb.append("abort_on_default_limit_exceeded:");
      sb.append(this.abort_on_default_limit_exceeded);
      first = false;
    }
    if (isSetQueryTimeout()) {
      if (!first) sb.append(", ");
      sb.append("query_timeout:");
      sb.append(this.query_timeout);
      first = false;
    }
    if (isSetIsReportSuccess()) {
      if (!first) sb.append(", ");
      sb.append("is_report_success:");
      sb.append(this.is_report_success);
      first = false;
    }
    if (isSetCodegenLevel()) {
      if (!first) sb.append(", ");
      sb.append("codegen_level:");
      sb.append(this.codegen_level);
      first = false;
    }
    if (isSetKuduLatestObservedTs()) {
      if (!first) sb.append(", ");
      sb.append("kudu_latest_observed_ts:");
      sb.append(this.kudu_latest_observed_ts);
      first = false;
    }
    if (isSetQueryType()) {
      if (!first) sb.append(", ");
      sb.append("query_type:");
      if (this.query_type == null) {
        sb.append("null");
      } else {
        sb.append(this.query_type);
      }
      first = false;
    }
    if (isSetMinReservation()) {
      if (!first) sb.append(", ");
      sb.append("min_reservation:");
      sb.append(this.min_reservation);
      first = false;
    }
    if (isSetMaxReservation()) {
      if (!first) sb.append(", ");
      sb.append("max_reservation:");
      sb.append(this.max_reservation);
      first = false;
    }
    if (isSetInitialReservationTotalClaims()) {
      if (!first) sb.append(", ");
      sb.append("initial_reservation_total_claims:");
      sb.append(this.initial_reservation_total_claims);
      first = false;
    }
    if (isSetBufferPoolLimit()) {
      if (!first) sb.append(", ");
      sb.append("buffer_pool_limit:");
      sb.append(this.buffer_pool_limit);
      first = false;
    }
    if (isSetDefaultSpillableBufferSize()) {
      if (!first) sb.append(", ");
      sb.append("default_spillable_buffer_size:");
      sb.append(this.default_spillable_buffer_size);
      first = false;
    }
    if (isSetMinSpillableBufferSize()) {
      if (!first) sb.append(", ");
      sb.append("min_spillable_buffer_size:");
      sb.append(this.min_spillable_buffer_size);
      first = false;
    }
    if (isSetMaxRowSize()) {
      if (!first) sb.append(", ");
      sb.append("max_row_size:");
      sb.append(this.max_row_size);
      first = false;
    }
    if (isSetDisableStreamPreaggregations()) {
      if (!first) sb.append(", ");
      sb.append("disable_stream_preaggregations:");
      sb.append(this.disable_stream_preaggregations);
      first = false;
    }
    if (isSetMtDop()) {
      if (!first) sb.append(", ");
      sb.append("mt_dop:");
      sb.append(this.mt_dop);
      first = false;
    }
    if (isSetLoadMemLimit()) {
      if (!first) sb.append(", ");
      sb.append("load_mem_limit:");
      sb.append(this.load_mem_limit);
      first = false;
    }
    if (isSetMaxScanKeyNum()) {
      if (!first) sb.append(", ");
      sb.append("max_scan_key_num:");
      sb.append(this.max_scan_key_num);
      first = false;
    }
    if (isSetMaxPushdownConditionsPerColumn()) {
      if (!first) sb.append(", ");
      sb.append("max_pushdown_conditions_per_column:");
      sb.append(this.max_pushdown_conditions_per_column);
      first = false;
    }
    if (isSetEnableSpilling()) {
      if (!first) sb.append(", ");
      sb.append("enable_spilling:");
      sb.append(this.enable_spilling);
      first = false;
    }
    if (isSetEnableEnableExchangeNodeParallelMerge()) {
      if (!first) sb.append(", ");
      sb.append("enable_enable_exchange_node_parallel_merge:");
      sb.append(this.enable_enable_exchange_node_parallel_merge);
      first = false;
    }
    if (isSetRuntimeFilterWaitTimeMs()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filter_wait_time_ms:");
      sb.append(this.runtime_filter_wait_time_ms);
      first = false;
    }
    if (isSetRuntimeFilterMaxInNum()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filter_max_in_num:");
      sb.append(this.runtime_filter_max_in_num);
      first = false;
    }
    if (isSetResourceLimit()) {
      if (!first) sb.append(", ");
      sb.append("resource_limit:");
      if (this.resource_limit == null) {
        sb.append("null");
      } else {
        sb.append(this.resource_limit);
      }
      first = false;
    }
    if (isSetReturnObjectDataAsBinary()) {
      if (!first) sb.append(", ");
      sb.append("return_object_data_as_binary:");
      sb.append(this.return_object_data_as_binary);
      first = false;
    }
    if (isSetTrimTailingSpacesForExternalTableQuery()) {
      if (!first) sb.append(", ");
      sb.append("trim_tailing_spaces_for_external_table_query:");
      sb.append(this.trim_tailing_spaces_for_external_table_query);
      first = false;
    }
    if (isSetEnableFunctionPushdown()) {
      if (!first) sb.append(", ");
      sb.append("enable_function_pushdown:");
      sb.append(this.enable_function_pushdown);
      first = false;
    }
    if (isSetFragmentTransmissionCompressionCodec()) {
      if (!first) sb.append(", ");
      sb.append("fragment_transmission_compression_codec:");
      if (this.fragment_transmission_compression_codec == null) {
        sb.append("null");
      } else {
        sb.append(this.fragment_transmission_compression_codec);
      }
      first = false;
    }
    if (isSetEnableLocalExchange()) {
      if (!first) sb.append(", ");
      sb.append("enable_local_exchange:");
      sb.append(this.enable_local_exchange);
      first = false;
    }
    if (isSetSkipStorageEngineMerge()) {
      if (!first) sb.append(", ");
      sb.append("skip_storage_engine_merge:");
      sb.append(this.skip_storage_engine_merge);
      first = false;
    }
    if (isSetSkipDeletePredicate()) {
      if (!first) sb.append(", ");
      sb.append("skip_delete_predicate:");
      sb.append(this.skip_delete_predicate);
      first = false;
    }
    if (isSetEnableNewShuffleHashMethod()) {
      if (!first) sb.append(", ");
      sb.append("enable_new_shuffle_hash_method:");
      sb.append(this.enable_new_shuffle_hash_method);
      first = false;
    }
    if (isSetBeExecVersion()) {
      if (!first) sb.append(", ");
      sb.append("be_exec_version:");
      sb.append(this.be_exec_version);
      first = false;
    }
    if (isSetPartitionedHashJoinRowsThreshold()) {
      if (!first) sb.append(", ");
      sb.append("partitioned_hash_join_rows_threshold:");
      sb.append(this.partitioned_hash_join_rows_threshold);
      first = false;
    }
    if (isSetEnableShareHashTableForBroadcastJoin()) {
      if (!first) sb.append(", ");
      sb.append("enable_share_hash_table_for_broadcast_join:");
      sb.append(this.enable_share_hash_table_for_broadcast_join);
      first = false;
    }
    if (isSetCheckOverflowForDecimal()) {
      if (!first) sb.append(", ");
      sb.append("check_overflow_for_decimal:");
      sb.append(this.check_overflow_for_decimal);
      first = false;
    }
    if (isSetSkipDeleteBitmap()) {
      if (!first) sb.append(", ");
      sb.append("skip_delete_bitmap:");
      sb.append(this.skip_delete_bitmap);
      first = false;
    }
    if (isSetEnablePipelineEngine()) {
      if (!first) sb.append(", ");
      sb.append("enable_pipeline_engine:");
      sb.append(this.enable_pipeline_engine);
      first = false;
    }
    if (isSetRepeatMaxNum()) {
      if (!first) sb.append(", ");
      sb.append("repeat_max_num:");
      sb.append(this.repeat_max_num);
      first = false;
    }
    if (isSetExternalSortBytesThreshold()) {
      if (!first) sb.append(", ");
      sb.append("external_sort_bytes_threshold:");
      sb.append(this.external_sort_bytes_threshold);
      first = false;
    }
    if (isSetPartitionedHashAggRowsThreshold()) {
      if (!first) sb.append(", ");
      sb.append("partitioned_hash_agg_rows_threshold:");
      sb.append(this.partitioned_hash_agg_rows_threshold);
      first = false;
    }
    if (isSetEnableFileCache()) {
      if (!first) sb.append(", ");
      sb.append("enable_file_cache:");
      sb.append(this.enable_file_cache);
      first = false;
    }
    if (isSetInsertTimeout()) {
      if (!first) sb.append(", ");
      sb.append("insert_timeout:");
      sb.append(this.insert_timeout);
      first = false;
    }
    if (isSetExecutionTimeout()) {
      if (!first) sb.append(", ");
      sb.append("execution_timeout:");
      sb.append(this.execution_timeout);
      first = false;
    }
    if (isSetDryRunQuery()) {
      if (!first) sb.append(", ");
      sb.append("dry_run_query:");
      sb.append(this.dry_run_query);
      first = false;
    }
    if (isSetEnableCommonExprPushdown()) {
      if (!first) sb.append(", ");
      sb.append("enable_common_expr_pushdown:");
      sb.append(this.enable_common_expr_pushdown);
      first = false;
    }
    if (isSetParallelInstance()) {
      if (!first) sb.append(", ");
      sb.append("parallel_instance:");
      sb.append(this.parallel_instance);
      first = false;
    }
    if (isSetMysqlRowBinaryFormat()) {
      if (!first) sb.append(", ");
      sb.append("mysql_row_binary_format:");
      sb.append(this.mysql_row_binary_format);
      first = false;
    }
    if (isSetExternalAggBytesThreshold()) {
      if (!first) sb.append(", ");
      sb.append("external_agg_bytes_threshold:");
      sb.append(this.external_agg_bytes_threshold);
      first = false;
    }
    if (isSetExternalAggPartitionBits()) {
      if (!first) sb.append(", ");
      sb.append("external_agg_partition_bits:");
      sb.append(this.external_agg_partition_bits);
      first = false;
    }
    if (isSetFileCacheBasePath()) {
      if (!first) sb.append(", ");
      sb.append("file_cache_base_path:");
      if (this.file_cache_base_path == null) {
        sb.append("null");
      } else {
        sb.append(this.file_cache_base_path);
      }
      first = false;
    }
    if (isSetEnableParquetLazyMat()) {
      if (!first) sb.append(", ");
      sb.append("enable_parquet_lazy_mat:");
      sb.append(this.enable_parquet_lazy_mat);
      first = false;
    }
    if (isSetEnableOrcLazyMat()) {
      if (!first) sb.append(", ");
      sb.append("enable_orc_lazy_mat:");
      sb.append(this.enable_orc_lazy_mat);
      first = false;
    }
    if (isSetScanQueueMemLimit()) {
      if (!first) sb.append(", ");
      sb.append("scan_queue_mem_limit:");
      sb.append(this.scan_queue_mem_limit);
      first = false;
    }
    if (isSetEnableScanNodeRunSerial()) {
      if (!first) sb.append(", ");
      sb.append("enable_scan_node_run_serial:");
      sb.append(this.enable_scan_node_run_serial);
      first = false;
    }
    if (isSetEnableInsertStrict()) {
      if (!first) sb.append(", ");
      sb.append("enable_insert_strict:");
      sb.append(this.enable_insert_strict);
      first = false;
    }
    if (isSetEnableInvertedIndexQuery()) {
      if (!first) sb.append(", ");
      sb.append("enable_inverted_index_query:");
      sb.append(this.enable_inverted_index_query);
      first = false;
    }
    if (isSetTruncateCharOrVarcharColumns()) {
      if (!first) sb.append(", ");
      sb.append("truncate_char_or_varchar_columns:");
      sb.append(this.truncate_char_or_varchar_columns);
      first = false;
    }
    if (isSetEnableHashJoinEarlyStartProbe()) {
      if (!first) sb.append(", ");
      sb.append("enable_hash_join_early_start_probe:");
      sb.append(this.enable_hash_join_early_start_probe);
      first = false;
    }
    if (isSetEnablePipelineXEngine()) {
      if (!first) sb.append(", ");
      sb.append("enable_pipeline_x_engine:");
      sb.append(this.enable_pipeline_x_engine);
      first = false;
    }
    if (isSetEnableMemtableOnSinkNode()) {
      if (!first) sb.append(", ");
      sb.append("enable_memtable_on_sink_node:");
      sb.append(this.enable_memtable_on_sink_node);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (resource_limit != null) {
      resource_limit.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new java.util.BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueryOptionsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TQueryOptionsStandardScheme getScheme() {
      return new TQueryOptionsStandardScheme();
    }
  }

  private static class TQueryOptionsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TQueryOptions> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueryOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ABORT_ON_ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.abort_on_error = iprot.readBool();
              struct.setAbortOnErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_ERRORS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_errors = iprot.readI32();
              struct.setMaxErrorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISABLE_CODEGEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_codegen = iprot.readBool();
              struct.setDisableCodegenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BATCH_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.batch_size = iprot.readI32();
              struct.setBatchSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM_NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_nodes = iprot.readI32();
              struct.setNumNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_SCAN_RANGE_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_scan_range_length = iprot.readI64();
              struct.setMaxScanRangeLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NUM_SCANNER_THREADS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_scanner_threads = iprot.readI32();
              struct.setNumScannerThreadsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAX_IO_BUFFERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_io_buffers = iprot.readI32();
              struct.setMaxIoBuffersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ALLOW_UNSUPPORTED_FORMATS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.allow_unsupported_formats = iprot.readBool();
              struct.setAllowUnsupportedFormatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DEFAULT_ORDER_BY_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.default_order_by_limit = iprot.readI64();
              struct.setDefaultOrderByLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.mem_limit = iprot.readI64();
              struct.setMemLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ABORT_ON_DEFAULT_LIMIT_EXCEEDED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.abort_on_default_limit_exceeded = iprot.readBool();
              struct.setAbortOnDefaultLimitExceededIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // QUERY_TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.query_timeout = iprot.readI32();
              struct.setQueryTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IS_REPORT_SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_report_success = iprot.readBool();
              struct.setIsReportSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CODEGEN_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.codegen_level = iprot.readI32();
              struct.setCodegenLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // KUDU_LATEST_OBSERVED_TS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.kudu_latest_observed_ts = iprot.readI64();
              struct.setKuduLatestObservedTsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // QUERY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.query_type = org.apache.doris.thrift.TQueryType.findByValue(iprot.readI32());
              struct.setQueryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MIN_RESERVATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.min_reservation = iprot.readI64();
              struct.setMinReservationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MAX_RESERVATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_reservation = iprot.readI64();
              struct.setMaxReservationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // INITIAL_RESERVATION_TOTAL_CLAIMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.initial_reservation_total_claims = iprot.readI64();
              struct.setInitialReservationTotalClaimsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // BUFFER_POOL_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.buffer_pool_limit = iprot.readI64();
              struct.setBufferPoolLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // DEFAULT_SPILLABLE_BUFFER_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.default_spillable_buffer_size = iprot.readI64();
              struct.setDefaultSpillableBufferSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MIN_SPILLABLE_BUFFER_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.min_spillable_buffer_size = iprot.readI64();
              struct.setMinSpillableBufferSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // MAX_ROW_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_row_size = iprot.readI64();
              struct.setMaxRowSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // DISABLE_STREAM_PREAGGREGATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.disable_stream_preaggregations = iprot.readBool();
              struct.setDisableStreamPreaggregationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // MT_DOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mt_dop = iprot.readI32();
              struct.setMtDopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // LOAD_MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.load_mem_limit = iprot.readI64();
              struct.setLoadMemLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // MAX_SCAN_KEY_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_scan_key_num = iprot.readI32();
              struct.setMaxScanKeyNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // MAX_PUSHDOWN_CONDITIONS_PER_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_pushdown_conditions_per_column = iprot.readI32();
              struct.setMaxPushdownConditionsPerColumnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // ENABLE_SPILLING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_spilling = iprot.readBool();
              struct.setEnableSpillingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // ENABLE_ENABLE_EXCHANGE_NODE_PARALLEL_MERGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_enable_exchange_node_parallel_merge = iprot.readBool();
              struct.setEnableEnableExchangeNodeParallelMergeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // RUNTIME_FILTER_WAIT_TIME_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runtime_filter_wait_time_ms = iprot.readI32();
              struct.setRuntimeFilterWaitTimeMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // RUNTIME_FILTER_MAX_IN_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runtime_filter_max_in_num = iprot.readI32();
              struct.setRuntimeFilterMaxInNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // RESOURCE_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resource_limit = new TResourceLimit();
              struct.resource_limit.read(iprot);
              struct.setResourceLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // RETURN_OBJECT_DATA_AS_BINARY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.return_object_data_as_binary = iprot.readBool();
              struct.setReturnObjectDataAsBinaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // TRIM_TAILING_SPACES_FOR_EXTERNAL_TABLE_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.trim_tailing_spaces_for_external_table_query = iprot.readBool();
              struct.setTrimTailingSpacesForExternalTableQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // ENABLE_FUNCTION_PUSHDOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_function_pushdown = iprot.readBool();
              struct.setEnableFunctionPushdownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // FRAGMENT_TRANSMISSION_COMPRESSION_CODEC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fragment_transmission_compression_codec = iprot.readString();
              struct.setFragmentTransmissionCompressionCodecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // ENABLE_LOCAL_EXCHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_local_exchange = iprot.readBool();
              struct.setEnableLocalExchangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // SKIP_STORAGE_ENGINE_MERGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.skip_storage_engine_merge = iprot.readBool();
              struct.setSkipStorageEngineMergeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // SKIP_DELETE_PREDICATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.skip_delete_predicate = iprot.readBool();
              struct.setSkipDeletePredicateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // ENABLE_NEW_SHUFFLE_HASH_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_new_shuffle_hash_method = iprot.readBool();
              struct.setEnableNewShuffleHashMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // BE_EXEC_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.be_exec_version = iprot.readI32();
              struct.setBeExecVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // PARTITIONED_HASH_JOIN_ROWS_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partitioned_hash_join_rows_threshold = iprot.readI32();
              struct.setPartitionedHashJoinRowsThresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // ENABLE_SHARE_HASH_TABLE_FOR_BROADCAST_JOIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_share_hash_table_for_broadcast_join = iprot.readBool();
              struct.setEnableShareHashTableForBroadcastJoinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // CHECK_OVERFLOW_FOR_DECIMAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.check_overflow_for_decimal = iprot.readBool();
              struct.setCheckOverflowForDecimalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // SKIP_DELETE_BITMAP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.skip_delete_bitmap = iprot.readBool();
              struct.setSkipDeleteBitmapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // ENABLE_PIPELINE_ENGINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_pipeline_engine = iprot.readBool();
              struct.setEnablePipelineEngineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // REPEAT_MAX_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repeat_max_num = iprot.readI32();
              struct.setRepeatMaxNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // EXTERNAL_SORT_BYTES_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.external_sort_bytes_threshold = iprot.readI64();
              struct.setExternalSortBytesThresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // PARTITIONED_HASH_AGG_ROWS_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partitioned_hash_agg_rows_threshold = iprot.readI32();
              struct.setPartitionedHashAggRowsThresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // ENABLE_FILE_CACHE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_file_cache = iprot.readBool();
              struct.setEnableFileCacheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // INSERT_TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.insert_timeout = iprot.readI32();
              struct.setInsertTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // EXECUTION_TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.execution_timeout = iprot.readI32();
              struct.setExecutionTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // DRY_RUN_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.dry_run_query = iprot.readBool();
              struct.setDryRunQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 65: // ENABLE_COMMON_EXPR_PUSHDOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_common_expr_pushdown = iprot.readBool();
              struct.setEnableCommonExprPushdownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 66: // PARALLEL_INSTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parallel_instance = iprot.readI32();
              struct.setParallelInstanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 67: // MYSQL_ROW_BINARY_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.mysql_row_binary_format = iprot.readBool();
              struct.setMysqlRowBinaryFormatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 68: // EXTERNAL_AGG_BYTES_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.external_agg_bytes_threshold = iprot.readI64();
              struct.setExternalAggBytesThresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 69: // EXTERNAL_AGG_PARTITION_BITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.external_agg_partition_bits = iprot.readI32();
              struct.setExternalAggPartitionBitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // FILE_CACHE_BASE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file_cache_base_path = iprot.readString();
              struct.setFileCacheBasePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 71: // ENABLE_PARQUET_LAZY_MAT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_parquet_lazy_mat = iprot.readBool();
              struct.setEnableParquetLazyMatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 72: // ENABLE_ORC_LAZY_MAT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_orc_lazy_mat = iprot.readBool();
              struct.setEnableOrcLazyMatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 73: // SCAN_QUEUE_MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scan_queue_mem_limit = iprot.readI64();
              struct.setScanQueueMemLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 74: // ENABLE_SCAN_NODE_RUN_SERIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_scan_node_run_serial = iprot.readBool();
              struct.setEnableScanNodeRunSerialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 75: // ENABLE_INSERT_STRICT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_insert_strict = iprot.readBool();
              struct.setEnableInsertStrictIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 76: // ENABLE_INVERTED_INDEX_QUERY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_inverted_index_query = iprot.readBool();
              struct.setEnableInvertedIndexQueryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 77: // TRUNCATE_CHAR_OR_VARCHAR_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.truncate_char_or_varchar_columns = iprot.readBool();
              struct.setTruncateCharOrVarcharColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 78: // ENABLE_HASH_JOIN_EARLY_START_PROBE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_hash_join_early_start_probe = iprot.readBool();
              struct.setEnableHashJoinEarlyStartProbeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 79: // ENABLE_PIPELINE_X_ENGINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_pipeline_x_engine = iprot.readBool();
              struct.setEnablePipelineXEngineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 80: // ENABLE_MEMTABLE_ON_SINK_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_memtable_on_sink_node = iprot.readBool();
              struct.setEnableMemtableOnSinkNodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueryOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetAbortOnError()) {
        oprot.writeFieldBegin(ABORT_ON_ERROR_FIELD_DESC);
        oprot.writeBool(struct.abort_on_error);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxErrors()) {
        oprot.writeFieldBegin(MAX_ERRORS_FIELD_DESC);
        oprot.writeI32(struct.max_errors);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisableCodegen()) {
        oprot.writeFieldBegin(DISABLE_CODEGEN_FIELD_DESC);
        oprot.writeBool(struct.disable_codegen);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBatchSize()) {
        oprot.writeFieldBegin(BATCH_SIZE_FIELD_DESC);
        oprot.writeI32(struct.batch_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNumNodes()) {
        oprot.writeFieldBegin(NUM_NODES_FIELD_DESC);
        oprot.writeI32(struct.num_nodes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxScanRangeLength()) {
        oprot.writeFieldBegin(MAX_SCAN_RANGE_LENGTH_FIELD_DESC);
        oprot.writeI64(struct.max_scan_range_length);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNumScannerThreads()) {
        oprot.writeFieldBegin(NUM_SCANNER_THREADS_FIELD_DESC);
        oprot.writeI32(struct.num_scanner_threads);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxIoBuffers()) {
        oprot.writeFieldBegin(MAX_IO_BUFFERS_FIELD_DESC);
        oprot.writeI32(struct.max_io_buffers);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAllowUnsupportedFormats()) {
        oprot.writeFieldBegin(ALLOW_UNSUPPORTED_FORMATS_FIELD_DESC);
        oprot.writeBool(struct.allow_unsupported_formats);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDefaultOrderByLimit()) {
        oprot.writeFieldBegin(DEFAULT_ORDER_BY_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.default_order_by_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemLimit()) {
        oprot.writeFieldBegin(MEM_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.mem_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAbortOnDefaultLimitExceeded()) {
        oprot.writeFieldBegin(ABORT_ON_DEFAULT_LIMIT_EXCEEDED_FIELD_DESC);
        oprot.writeBool(struct.abort_on_default_limit_exceeded);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQueryTimeout()) {
        oprot.writeFieldBegin(QUERY_TIMEOUT_FIELD_DESC);
        oprot.writeI32(struct.query_timeout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsReportSuccess()) {
        oprot.writeFieldBegin(IS_REPORT_SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.is_report_success);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCodegenLevel()) {
        oprot.writeFieldBegin(CODEGEN_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.codegen_level);
        oprot.writeFieldEnd();
      }
      if (struct.isSetKuduLatestObservedTs()) {
        oprot.writeFieldBegin(KUDU_LATEST_OBSERVED_TS_FIELD_DESC);
        oprot.writeI64(struct.kudu_latest_observed_ts);
        oprot.writeFieldEnd();
      }
      if (struct.query_type != null) {
        if (struct.isSetQueryType()) {
          oprot.writeFieldBegin(QUERY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.query_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMinReservation()) {
        oprot.writeFieldBegin(MIN_RESERVATION_FIELD_DESC);
        oprot.writeI64(struct.min_reservation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxReservation()) {
        oprot.writeFieldBegin(MAX_RESERVATION_FIELD_DESC);
        oprot.writeI64(struct.max_reservation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInitialReservationTotalClaims()) {
        oprot.writeFieldBegin(INITIAL_RESERVATION_TOTAL_CLAIMS_FIELD_DESC);
        oprot.writeI64(struct.initial_reservation_total_claims);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBufferPoolLimit()) {
        oprot.writeFieldBegin(BUFFER_POOL_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.buffer_pool_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDefaultSpillableBufferSize()) {
        oprot.writeFieldBegin(DEFAULT_SPILLABLE_BUFFER_SIZE_FIELD_DESC);
        oprot.writeI64(struct.default_spillable_buffer_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinSpillableBufferSize()) {
        oprot.writeFieldBegin(MIN_SPILLABLE_BUFFER_SIZE_FIELD_DESC);
        oprot.writeI64(struct.min_spillable_buffer_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxRowSize()) {
        oprot.writeFieldBegin(MAX_ROW_SIZE_FIELD_DESC);
        oprot.writeI64(struct.max_row_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDisableStreamPreaggregations()) {
        oprot.writeFieldBegin(DISABLE_STREAM_PREAGGREGATIONS_FIELD_DESC);
        oprot.writeBool(struct.disable_stream_preaggregations);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMtDop()) {
        oprot.writeFieldBegin(MT_DOP_FIELD_DESC);
        oprot.writeI32(struct.mt_dop);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLoadMemLimit()) {
        oprot.writeFieldBegin(LOAD_MEM_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.load_mem_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxScanKeyNum()) {
        oprot.writeFieldBegin(MAX_SCAN_KEY_NUM_FIELD_DESC);
        oprot.writeI32(struct.max_scan_key_num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxPushdownConditionsPerColumn()) {
        oprot.writeFieldBegin(MAX_PUSHDOWN_CONDITIONS_PER_COLUMN_FIELD_DESC);
        oprot.writeI32(struct.max_pushdown_conditions_per_column);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableSpilling()) {
        oprot.writeFieldBegin(ENABLE_SPILLING_FIELD_DESC);
        oprot.writeBool(struct.enable_spilling);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableEnableExchangeNodeParallelMerge()) {
        oprot.writeFieldBegin(ENABLE_ENABLE_EXCHANGE_NODE_PARALLEL_MERGE_FIELD_DESC);
        oprot.writeBool(struct.enable_enable_exchange_node_parallel_merge);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRuntimeFilterWaitTimeMs()) {
        oprot.writeFieldBegin(RUNTIME_FILTER_WAIT_TIME_MS_FIELD_DESC);
        oprot.writeI32(struct.runtime_filter_wait_time_ms);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRuntimeFilterMaxInNum()) {
        oprot.writeFieldBegin(RUNTIME_FILTER_MAX_IN_NUM_FIELD_DESC);
        oprot.writeI32(struct.runtime_filter_max_in_num);
        oprot.writeFieldEnd();
      }
      if (struct.resource_limit != null) {
        if (struct.isSetResourceLimit()) {
          oprot.writeFieldBegin(RESOURCE_LIMIT_FIELD_DESC);
          struct.resource_limit.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReturnObjectDataAsBinary()) {
        oprot.writeFieldBegin(RETURN_OBJECT_DATA_AS_BINARY_FIELD_DESC);
        oprot.writeBool(struct.return_object_data_as_binary);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTrimTailingSpacesForExternalTableQuery()) {
        oprot.writeFieldBegin(TRIM_TAILING_SPACES_FOR_EXTERNAL_TABLE_QUERY_FIELD_DESC);
        oprot.writeBool(struct.trim_tailing_spaces_for_external_table_query);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableFunctionPushdown()) {
        oprot.writeFieldBegin(ENABLE_FUNCTION_PUSHDOWN_FIELD_DESC);
        oprot.writeBool(struct.enable_function_pushdown);
        oprot.writeFieldEnd();
      }
      if (struct.fragment_transmission_compression_codec != null) {
        if (struct.isSetFragmentTransmissionCompressionCodec()) {
          oprot.writeFieldBegin(FRAGMENT_TRANSMISSION_COMPRESSION_CODEC_FIELD_DESC);
          oprot.writeString(struct.fragment_transmission_compression_codec);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnableLocalExchange()) {
        oprot.writeFieldBegin(ENABLE_LOCAL_EXCHANGE_FIELD_DESC);
        oprot.writeBool(struct.enable_local_exchange);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSkipStorageEngineMerge()) {
        oprot.writeFieldBegin(SKIP_STORAGE_ENGINE_MERGE_FIELD_DESC);
        oprot.writeBool(struct.skip_storage_engine_merge);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSkipDeletePredicate()) {
        oprot.writeFieldBegin(SKIP_DELETE_PREDICATE_FIELD_DESC);
        oprot.writeBool(struct.skip_delete_predicate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableNewShuffleHashMethod()) {
        oprot.writeFieldBegin(ENABLE_NEW_SHUFFLE_HASH_METHOD_FIELD_DESC);
        oprot.writeBool(struct.enable_new_shuffle_hash_method);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBeExecVersion()) {
        oprot.writeFieldBegin(BE_EXEC_VERSION_FIELD_DESC);
        oprot.writeI32(struct.be_exec_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartitionedHashJoinRowsThreshold()) {
        oprot.writeFieldBegin(PARTITIONED_HASH_JOIN_ROWS_THRESHOLD_FIELD_DESC);
        oprot.writeI32(struct.partitioned_hash_join_rows_threshold);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableShareHashTableForBroadcastJoin()) {
        oprot.writeFieldBegin(ENABLE_SHARE_HASH_TABLE_FOR_BROADCAST_JOIN_FIELD_DESC);
        oprot.writeBool(struct.enable_share_hash_table_for_broadcast_join);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCheckOverflowForDecimal()) {
        oprot.writeFieldBegin(CHECK_OVERFLOW_FOR_DECIMAL_FIELD_DESC);
        oprot.writeBool(struct.check_overflow_for_decimal);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSkipDeleteBitmap()) {
        oprot.writeFieldBegin(SKIP_DELETE_BITMAP_FIELD_DESC);
        oprot.writeBool(struct.skip_delete_bitmap);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnablePipelineEngine()) {
        oprot.writeFieldBegin(ENABLE_PIPELINE_ENGINE_FIELD_DESC);
        oprot.writeBool(struct.enable_pipeline_engine);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRepeatMaxNum()) {
        oprot.writeFieldBegin(REPEAT_MAX_NUM_FIELD_DESC);
        oprot.writeI32(struct.repeat_max_num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExternalSortBytesThreshold()) {
        oprot.writeFieldBegin(EXTERNAL_SORT_BYTES_THRESHOLD_FIELD_DESC);
        oprot.writeI64(struct.external_sort_bytes_threshold);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartitionedHashAggRowsThreshold()) {
        oprot.writeFieldBegin(PARTITIONED_HASH_AGG_ROWS_THRESHOLD_FIELD_DESC);
        oprot.writeI32(struct.partitioned_hash_agg_rows_threshold);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableFileCache()) {
        oprot.writeFieldBegin(ENABLE_FILE_CACHE_FIELD_DESC);
        oprot.writeBool(struct.enable_file_cache);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInsertTimeout()) {
        oprot.writeFieldBegin(INSERT_TIMEOUT_FIELD_DESC);
        oprot.writeI32(struct.insert_timeout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExecutionTimeout()) {
        oprot.writeFieldBegin(EXECUTION_TIMEOUT_FIELD_DESC);
        oprot.writeI32(struct.execution_timeout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDryRunQuery()) {
        oprot.writeFieldBegin(DRY_RUN_QUERY_FIELD_DESC);
        oprot.writeBool(struct.dry_run_query);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableCommonExprPushdown()) {
        oprot.writeFieldBegin(ENABLE_COMMON_EXPR_PUSHDOWN_FIELD_DESC);
        oprot.writeBool(struct.enable_common_expr_pushdown);
        oprot.writeFieldEnd();
      }
      if (struct.isSetParallelInstance()) {
        oprot.writeFieldBegin(PARALLEL_INSTANCE_FIELD_DESC);
        oprot.writeI32(struct.parallel_instance);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMysqlRowBinaryFormat()) {
        oprot.writeFieldBegin(MYSQL_ROW_BINARY_FORMAT_FIELD_DESC);
        oprot.writeBool(struct.mysql_row_binary_format);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExternalAggBytesThreshold()) {
        oprot.writeFieldBegin(EXTERNAL_AGG_BYTES_THRESHOLD_FIELD_DESC);
        oprot.writeI64(struct.external_agg_bytes_threshold);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExternalAggPartitionBits()) {
        oprot.writeFieldBegin(EXTERNAL_AGG_PARTITION_BITS_FIELD_DESC);
        oprot.writeI32(struct.external_agg_partition_bits);
        oprot.writeFieldEnd();
      }
      if (struct.file_cache_base_path != null) {
        if (struct.isSetFileCacheBasePath()) {
          oprot.writeFieldBegin(FILE_CACHE_BASE_PATH_FIELD_DESC);
          oprot.writeString(struct.file_cache_base_path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnableParquetLazyMat()) {
        oprot.writeFieldBegin(ENABLE_PARQUET_LAZY_MAT_FIELD_DESC);
        oprot.writeBool(struct.enable_parquet_lazy_mat);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableOrcLazyMat()) {
        oprot.writeFieldBegin(ENABLE_ORC_LAZY_MAT_FIELD_DESC);
        oprot.writeBool(struct.enable_orc_lazy_mat);
        oprot.writeFieldEnd();
      }
      if (struct.isSetScanQueueMemLimit()) {
        oprot.writeFieldBegin(SCAN_QUEUE_MEM_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.scan_queue_mem_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableScanNodeRunSerial()) {
        oprot.writeFieldBegin(ENABLE_SCAN_NODE_RUN_SERIAL_FIELD_DESC);
        oprot.writeBool(struct.enable_scan_node_run_serial);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableInsertStrict()) {
        oprot.writeFieldBegin(ENABLE_INSERT_STRICT_FIELD_DESC);
        oprot.writeBool(struct.enable_insert_strict);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableInvertedIndexQuery()) {
        oprot.writeFieldBegin(ENABLE_INVERTED_INDEX_QUERY_FIELD_DESC);
        oprot.writeBool(struct.enable_inverted_index_query);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTruncateCharOrVarcharColumns()) {
        oprot.writeFieldBegin(TRUNCATE_CHAR_OR_VARCHAR_COLUMNS_FIELD_DESC);
        oprot.writeBool(struct.truncate_char_or_varchar_columns);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableHashJoinEarlyStartProbe()) {
        oprot.writeFieldBegin(ENABLE_HASH_JOIN_EARLY_START_PROBE_FIELD_DESC);
        oprot.writeBool(struct.enable_hash_join_early_start_probe);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnablePipelineXEngine()) {
        oprot.writeFieldBegin(ENABLE_PIPELINE_X_ENGINE_FIELD_DESC);
        oprot.writeBool(struct.enable_pipeline_x_engine);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableMemtableOnSinkNode()) {
        oprot.writeFieldBegin(ENABLE_MEMTABLE_ON_SINK_NODE_FIELD_DESC);
        oprot.writeBool(struct.enable_memtable_on_sink_node);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueryOptionsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TQueryOptionsTupleScheme getScheme() {
      return new TQueryOptionsTupleScheme();
    }
  }

  private static class TQueryOptionsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TQueryOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueryOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAbortOnError()) {
        optionals.set(0);
      }
      if (struct.isSetMaxErrors()) {
        optionals.set(1);
      }
      if (struct.isSetDisableCodegen()) {
        optionals.set(2);
      }
      if (struct.isSetBatchSize()) {
        optionals.set(3);
      }
      if (struct.isSetNumNodes()) {
        optionals.set(4);
      }
      if (struct.isSetMaxScanRangeLength()) {
        optionals.set(5);
      }
      if (struct.isSetNumScannerThreads()) {
        optionals.set(6);
      }
      if (struct.isSetMaxIoBuffers()) {
        optionals.set(7);
      }
      if (struct.isSetAllowUnsupportedFormats()) {
        optionals.set(8);
      }
      if (struct.isSetDefaultOrderByLimit()) {
        optionals.set(9);
      }
      if (struct.isSetMemLimit()) {
        optionals.set(10);
      }
      if (struct.isSetAbortOnDefaultLimitExceeded()) {
        optionals.set(11);
      }
      if (struct.isSetQueryTimeout()) {
        optionals.set(12);
      }
      if (struct.isSetIsReportSuccess()) {
        optionals.set(13);
      }
      if (struct.isSetCodegenLevel()) {
        optionals.set(14);
      }
      if (struct.isSetKuduLatestObservedTs()) {
        optionals.set(15);
      }
      if (struct.isSetQueryType()) {
        optionals.set(16);
      }
      if (struct.isSetMinReservation()) {
        optionals.set(17);
      }
      if (struct.isSetMaxReservation()) {
        optionals.set(18);
      }
      if (struct.isSetInitialReservationTotalClaims()) {
        optionals.set(19);
      }
      if (struct.isSetBufferPoolLimit()) {
        optionals.set(20);
      }
      if (struct.isSetDefaultSpillableBufferSize()) {
        optionals.set(21);
      }
      if (struct.isSetMinSpillableBufferSize()) {
        optionals.set(22);
      }
      if (struct.isSetMaxRowSize()) {
        optionals.set(23);
      }
      if (struct.isSetDisableStreamPreaggregations()) {
        optionals.set(24);
      }
      if (struct.isSetMtDop()) {
        optionals.set(25);
      }
      if (struct.isSetLoadMemLimit()) {
        optionals.set(26);
      }
      if (struct.isSetMaxScanKeyNum()) {
        optionals.set(27);
      }
      if (struct.isSetMaxPushdownConditionsPerColumn()) {
        optionals.set(28);
      }
      if (struct.isSetEnableSpilling()) {
        optionals.set(29);
      }
      if (struct.isSetEnableEnableExchangeNodeParallelMerge()) {
        optionals.set(30);
      }
      if (struct.isSetRuntimeFilterWaitTimeMs()) {
        optionals.set(31);
      }
      if (struct.isSetRuntimeFilterMaxInNum()) {
        optionals.set(32);
      }
      if (struct.isSetResourceLimit()) {
        optionals.set(33);
      }
      if (struct.isSetReturnObjectDataAsBinary()) {
        optionals.set(34);
      }
      if (struct.isSetTrimTailingSpacesForExternalTableQuery()) {
        optionals.set(35);
      }
      if (struct.isSetEnableFunctionPushdown()) {
        optionals.set(36);
      }
      if (struct.isSetFragmentTransmissionCompressionCodec()) {
        optionals.set(37);
      }
      if (struct.isSetEnableLocalExchange()) {
        optionals.set(38);
      }
      if (struct.isSetSkipStorageEngineMerge()) {
        optionals.set(39);
      }
      if (struct.isSetSkipDeletePredicate()) {
        optionals.set(40);
      }
      if (struct.isSetEnableNewShuffleHashMethod()) {
        optionals.set(41);
      }
      if (struct.isSetBeExecVersion()) {
        optionals.set(42);
      }
      if (struct.isSetPartitionedHashJoinRowsThreshold()) {
        optionals.set(43);
      }
      if (struct.isSetEnableShareHashTableForBroadcastJoin()) {
        optionals.set(44);
      }
      if (struct.isSetCheckOverflowForDecimal()) {
        optionals.set(45);
      }
      if (struct.isSetSkipDeleteBitmap()) {
        optionals.set(46);
      }
      if (struct.isSetEnablePipelineEngine()) {
        optionals.set(47);
      }
      if (struct.isSetRepeatMaxNum()) {
        optionals.set(48);
      }
      if (struct.isSetExternalSortBytesThreshold()) {
        optionals.set(49);
      }
      if (struct.isSetPartitionedHashAggRowsThreshold()) {
        optionals.set(50);
      }
      if (struct.isSetEnableFileCache()) {
        optionals.set(51);
      }
      if (struct.isSetInsertTimeout()) {
        optionals.set(52);
      }
      if (struct.isSetExecutionTimeout()) {
        optionals.set(53);
      }
      if (struct.isSetDryRunQuery()) {
        optionals.set(54);
      }
      if (struct.isSetEnableCommonExprPushdown()) {
        optionals.set(55);
      }
      if (struct.isSetParallelInstance()) {
        optionals.set(56);
      }
      if (struct.isSetMysqlRowBinaryFormat()) {
        optionals.set(57);
      }
      if (struct.isSetExternalAggBytesThreshold()) {
        optionals.set(58);
      }
      if (struct.isSetExternalAggPartitionBits()) {
        optionals.set(59);
      }
      if (struct.isSetFileCacheBasePath()) {
        optionals.set(60);
      }
      if (struct.isSetEnableParquetLazyMat()) {
        optionals.set(61);
      }
      if (struct.isSetEnableOrcLazyMat()) {
        optionals.set(62);
      }
      if (struct.isSetScanQueueMemLimit()) {
        optionals.set(63);
      }
      if (struct.isSetEnableScanNodeRunSerial()) {
        optionals.set(64);
      }
      if (struct.isSetEnableInsertStrict()) {
        optionals.set(65);
      }
      if (struct.isSetEnableInvertedIndexQuery()) {
        optionals.set(66);
      }
      if (struct.isSetTruncateCharOrVarcharColumns()) {
        optionals.set(67);
      }
      if (struct.isSetEnableHashJoinEarlyStartProbe()) {
        optionals.set(68);
      }
      if (struct.isSetEnablePipelineXEngine()) {
        optionals.set(69);
      }
      if (struct.isSetEnableMemtableOnSinkNode()) {
        optionals.set(70);
      }
      oprot.writeBitSet(optionals, 71);
      if (struct.isSetAbortOnError()) {
        oprot.writeBool(struct.abort_on_error);
      }
      if (struct.isSetMaxErrors()) {
        oprot.writeI32(struct.max_errors);
      }
      if (struct.isSetDisableCodegen()) {
        oprot.writeBool(struct.disable_codegen);
      }
      if (struct.isSetBatchSize()) {
        oprot.writeI32(struct.batch_size);
      }
      if (struct.isSetNumNodes()) {
        oprot.writeI32(struct.num_nodes);
      }
      if (struct.isSetMaxScanRangeLength()) {
        oprot.writeI64(struct.max_scan_range_length);
      }
      if (struct.isSetNumScannerThreads()) {
        oprot.writeI32(struct.num_scanner_threads);
      }
      if (struct.isSetMaxIoBuffers()) {
        oprot.writeI32(struct.max_io_buffers);
      }
      if (struct.isSetAllowUnsupportedFormats()) {
        oprot.writeBool(struct.allow_unsupported_formats);
      }
      if (struct.isSetDefaultOrderByLimit()) {
        oprot.writeI64(struct.default_order_by_limit);
      }
      if (struct.isSetMemLimit()) {
        oprot.writeI64(struct.mem_limit);
      }
      if (struct.isSetAbortOnDefaultLimitExceeded()) {
        oprot.writeBool(struct.abort_on_default_limit_exceeded);
      }
      if (struct.isSetQueryTimeout()) {
        oprot.writeI32(struct.query_timeout);
      }
      if (struct.isSetIsReportSuccess()) {
        oprot.writeBool(struct.is_report_success);
      }
      if (struct.isSetCodegenLevel()) {
        oprot.writeI32(struct.codegen_level);
      }
      if (struct.isSetKuduLatestObservedTs()) {
        oprot.writeI64(struct.kudu_latest_observed_ts);
      }
      if (struct.isSetQueryType()) {
        oprot.writeI32(struct.query_type.getValue());
      }
      if (struct.isSetMinReservation()) {
        oprot.writeI64(struct.min_reservation);
      }
      if (struct.isSetMaxReservation()) {
        oprot.writeI64(struct.max_reservation);
      }
      if (struct.isSetInitialReservationTotalClaims()) {
        oprot.writeI64(struct.initial_reservation_total_claims);
      }
      if (struct.isSetBufferPoolLimit()) {
        oprot.writeI64(struct.buffer_pool_limit);
      }
      if (struct.isSetDefaultSpillableBufferSize()) {
        oprot.writeI64(struct.default_spillable_buffer_size);
      }
      if (struct.isSetMinSpillableBufferSize()) {
        oprot.writeI64(struct.min_spillable_buffer_size);
      }
      if (struct.isSetMaxRowSize()) {
        oprot.writeI64(struct.max_row_size);
      }
      if (struct.isSetDisableStreamPreaggregations()) {
        oprot.writeBool(struct.disable_stream_preaggregations);
      }
      if (struct.isSetMtDop()) {
        oprot.writeI32(struct.mt_dop);
      }
      if (struct.isSetLoadMemLimit()) {
        oprot.writeI64(struct.load_mem_limit);
      }
      if (struct.isSetMaxScanKeyNum()) {
        oprot.writeI32(struct.max_scan_key_num);
      }
      if (struct.isSetMaxPushdownConditionsPerColumn()) {
        oprot.writeI32(struct.max_pushdown_conditions_per_column);
      }
      if (struct.isSetEnableSpilling()) {
        oprot.writeBool(struct.enable_spilling);
      }
      if (struct.isSetEnableEnableExchangeNodeParallelMerge()) {
        oprot.writeBool(struct.enable_enable_exchange_node_parallel_merge);
      }
      if (struct.isSetRuntimeFilterWaitTimeMs()) {
        oprot.writeI32(struct.runtime_filter_wait_time_ms);
      }
      if (struct.isSetRuntimeFilterMaxInNum()) {
        oprot.writeI32(struct.runtime_filter_max_in_num);
      }
      if (struct.isSetResourceLimit()) {
        struct.resource_limit.write(oprot);
      }
      if (struct.isSetReturnObjectDataAsBinary()) {
        oprot.writeBool(struct.return_object_data_as_binary);
      }
      if (struct.isSetTrimTailingSpacesForExternalTableQuery()) {
        oprot.writeBool(struct.trim_tailing_spaces_for_external_table_query);
      }
      if (struct.isSetEnableFunctionPushdown()) {
        oprot.writeBool(struct.enable_function_pushdown);
      }
      if (struct.isSetFragmentTransmissionCompressionCodec()) {
        oprot.writeString(struct.fragment_transmission_compression_codec);
      }
      if (struct.isSetEnableLocalExchange()) {
        oprot.writeBool(struct.enable_local_exchange);
      }
      if (struct.isSetSkipStorageEngineMerge()) {
        oprot.writeBool(struct.skip_storage_engine_merge);
      }
      if (struct.isSetSkipDeletePredicate()) {
        oprot.writeBool(struct.skip_delete_predicate);
      }
      if (struct.isSetEnableNewShuffleHashMethod()) {
        oprot.writeBool(struct.enable_new_shuffle_hash_method);
      }
      if (struct.isSetBeExecVersion()) {
        oprot.writeI32(struct.be_exec_version);
      }
      if (struct.isSetPartitionedHashJoinRowsThreshold()) {
        oprot.writeI32(struct.partitioned_hash_join_rows_threshold);
      }
      if (struct.isSetEnableShareHashTableForBroadcastJoin()) {
        oprot.writeBool(struct.enable_share_hash_table_for_broadcast_join);
      }
      if (struct.isSetCheckOverflowForDecimal()) {
        oprot.writeBool(struct.check_overflow_for_decimal);
      }
      if (struct.isSetSkipDeleteBitmap()) {
        oprot.writeBool(struct.skip_delete_bitmap);
      }
      if (struct.isSetEnablePipelineEngine()) {
        oprot.writeBool(struct.enable_pipeline_engine);
      }
      if (struct.isSetRepeatMaxNum()) {
        oprot.writeI32(struct.repeat_max_num);
      }
      if (struct.isSetExternalSortBytesThreshold()) {
        oprot.writeI64(struct.external_sort_bytes_threshold);
      }
      if (struct.isSetPartitionedHashAggRowsThreshold()) {
        oprot.writeI32(struct.partitioned_hash_agg_rows_threshold);
      }
      if (struct.isSetEnableFileCache()) {
        oprot.writeBool(struct.enable_file_cache);
      }
      if (struct.isSetInsertTimeout()) {
        oprot.writeI32(struct.insert_timeout);
      }
      if (struct.isSetExecutionTimeout()) {
        oprot.writeI32(struct.execution_timeout);
      }
      if (struct.isSetDryRunQuery()) {
        oprot.writeBool(struct.dry_run_query);
      }
      if (struct.isSetEnableCommonExprPushdown()) {
        oprot.writeBool(struct.enable_common_expr_pushdown);
      }
      if (struct.isSetParallelInstance()) {
        oprot.writeI32(struct.parallel_instance);
      }
      if (struct.isSetMysqlRowBinaryFormat()) {
        oprot.writeBool(struct.mysql_row_binary_format);
      }
      if (struct.isSetExternalAggBytesThreshold()) {
        oprot.writeI64(struct.external_agg_bytes_threshold);
      }
      if (struct.isSetExternalAggPartitionBits()) {
        oprot.writeI32(struct.external_agg_partition_bits);
      }
      if (struct.isSetFileCacheBasePath()) {
        oprot.writeString(struct.file_cache_base_path);
      }
      if (struct.isSetEnableParquetLazyMat()) {
        oprot.writeBool(struct.enable_parquet_lazy_mat);
      }
      if (struct.isSetEnableOrcLazyMat()) {
        oprot.writeBool(struct.enable_orc_lazy_mat);
      }
      if (struct.isSetScanQueueMemLimit()) {
        oprot.writeI64(struct.scan_queue_mem_limit);
      }
      if (struct.isSetEnableScanNodeRunSerial()) {
        oprot.writeBool(struct.enable_scan_node_run_serial);
      }
      if (struct.isSetEnableInsertStrict()) {
        oprot.writeBool(struct.enable_insert_strict);
      }
      if (struct.isSetEnableInvertedIndexQuery()) {
        oprot.writeBool(struct.enable_inverted_index_query);
      }
      if (struct.isSetTruncateCharOrVarcharColumns()) {
        oprot.writeBool(struct.truncate_char_or_varchar_columns);
      }
      if (struct.isSetEnableHashJoinEarlyStartProbe()) {
        oprot.writeBool(struct.enable_hash_join_early_start_probe);
      }
      if (struct.isSetEnablePipelineXEngine()) {
        oprot.writeBool(struct.enable_pipeline_x_engine);
      }
      if (struct.isSetEnableMemtableOnSinkNode()) {
        oprot.writeBool(struct.enable_memtable_on_sink_node);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueryOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(71);
      if (incoming.get(0)) {
        struct.abort_on_error = iprot.readBool();
        struct.setAbortOnErrorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.max_errors = iprot.readI32();
        struct.setMaxErrorsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.disable_codegen = iprot.readBool();
        struct.setDisableCodegenIsSet(true);
      }
      if (incoming.get(3)) {
        struct.batch_size = iprot.readI32();
        struct.setBatchSizeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.num_nodes = iprot.readI32();
        struct.setNumNodesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.max_scan_range_length = iprot.readI64();
        struct.setMaxScanRangeLengthIsSet(true);
      }
      if (incoming.get(6)) {
        struct.num_scanner_threads = iprot.readI32();
        struct.setNumScannerThreadsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.max_io_buffers = iprot.readI32();
        struct.setMaxIoBuffersIsSet(true);
      }
      if (incoming.get(8)) {
        struct.allow_unsupported_formats = iprot.readBool();
        struct.setAllowUnsupportedFormatsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.default_order_by_limit = iprot.readI64();
        struct.setDefaultOrderByLimitIsSet(true);
      }
      if (incoming.get(10)) {
        struct.mem_limit = iprot.readI64();
        struct.setMemLimitIsSet(true);
      }
      if (incoming.get(11)) {
        struct.abort_on_default_limit_exceeded = iprot.readBool();
        struct.setAbortOnDefaultLimitExceededIsSet(true);
      }
      if (incoming.get(12)) {
        struct.query_timeout = iprot.readI32();
        struct.setQueryTimeoutIsSet(true);
      }
      if (incoming.get(13)) {
        struct.is_report_success = iprot.readBool();
        struct.setIsReportSuccessIsSet(true);
      }
      if (incoming.get(14)) {
        struct.codegen_level = iprot.readI32();
        struct.setCodegenLevelIsSet(true);
      }
      if (incoming.get(15)) {
        struct.kudu_latest_observed_ts = iprot.readI64();
        struct.setKuduLatestObservedTsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.query_type = org.apache.doris.thrift.TQueryType.findByValue(iprot.readI32());
        struct.setQueryTypeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.min_reservation = iprot.readI64();
        struct.setMinReservationIsSet(true);
      }
      if (incoming.get(18)) {
        struct.max_reservation = iprot.readI64();
        struct.setMaxReservationIsSet(true);
      }
      if (incoming.get(19)) {
        struct.initial_reservation_total_claims = iprot.readI64();
        struct.setInitialReservationTotalClaimsIsSet(true);
      }
      if (incoming.get(20)) {
        struct.buffer_pool_limit = iprot.readI64();
        struct.setBufferPoolLimitIsSet(true);
      }
      if (incoming.get(21)) {
        struct.default_spillable_buffer_size = iprot.readI64();
        struct.setDefaultSpillableBufferSizeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.min_spillable_buffer_size = iprot.readI64();
        struct.setMinSpillableBufferSizeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.max_row_size = iprot.readI64();
        struct.setMaxRowSizeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.disable_stream_preaggregations = iprot.readBool();
        struct.setDisableStreamPreaggregationsIsSet(true);
      }
      if (incoming.get(25)) {
        struct.mt_dop = iprot.readI32();
        struct.setMtDopIsSet(true);
      }
      if (incoming.get(26)) {
        struct.load_mem_limit = iprot.readI64();
        struct.setLoadMemLimitIsSet(true);
      }
      if (incoming.get(27)) {
        struct.max_scan_key_num = iprot.readI32();
        struct.setMaxScanKeyNumIsSet(true);
      }
      if (incoming.get(28)) {
        struct.max_pushdown_conditions_per_column = iprot.readI32();
        struct.setMaxPushdownConditionsPerColumnIsSet(true);
      }
      if (incoming.get(29)) {
        struct.enable_spilling = iprot.readBool();
        struct.setEnableSpillingIsSet(true);
      }
      if (incoming.get(30)) {
        struct.enable_enable_exchange_node_parallel_merge = iprot.readBool();
        struct.setEnableEnableExchangeNodeParallelMergeIsSet(true);
      }
      if (incoming.get(31)) {
        struct.runtime_filter_wait_time_ms = iprot.readI32();
        struct.setRuntimeFilterWaitTimeMsIsSet(true);
      }
      if (incoming.get(32)) {
        struct.runtime_filter_max_in_num = iprot.readI32();
        struct.setRuntimeFilterMaxInNumIsSet(true);
      }
      if (incoming.get(33)) {
        struct.resource_limit = new TResourceLimit();
        struct.resource_limit.read(iprot);
        struct.setResourceLimitIsSet(true);
      }
      if (incoming.get(34)) {
        struct.return_object_data_as_binary = iprot.readBool();
        struct.setReturnObjectDataAsBinaryIsSet(true);
      }
      if (incoming.get(35)) {
        struct.trim_tailing_spaces_for_external_table_query = iprot.readBool();
        struct.setTrimTailingSpacesForExternalTableQueryIsSet(true);
      }
      if (incoming.get(36)) {
        struct.enable_function_pushdown = iprot.readBool();
        struct.setEnableFunctionPushdownIsSet(true);
      }
      if (incoming.get(37)) {
        struct.fragment_transmission_compression_codec = iprot.readString();
        struct.setFragmentTransmissionCompressionCodecIsSet(true);
      }
      if (incoming.get(38)) {
        struct.enable_local_exchange = iprot.readBool();
        struct.setEnableLocalExchangeIsSet(true);
      }
      if (incoming.get(39)) {
        struct.skip_storage_engine_merge = iprot.readBool();
        struct.setSkipStorageEngineMergeIsSet(true);
      }
      if (incoming.get(40)) {
        struct.skip_delete_predicate = iprot.readBool();
        struct.setSkipDeletePredicateIsSet(true);
      }
      if (incoming.get(41)) {
        struct.enable_new_shuffle_hash_method = iprot.readBool();
        struct.setEnableNewShuffleHashMethodIsSet(true);
      }
      if (incoming.get(42)) {
        struct.be_exec_version = iprot.readI32();
        struct.setBeExecVersionIsSet(true);
      }
      if (incoming.get(43)) {
        struct.partitioned_hash_join_rows_threshold = iprot.readI32();
        struct.setPartitionedHashJoinRowsThresholdIsSet(true);
      }
      if (incoming.get(44)) {
        struct.enable_share_hash_table_for_broadcast_join = iprot.readBool();
        struct.setEnableShareHashTableForBroadcastJoinIsSet(true);
      }
      if (incoming.get(45)) {
        struct.check_overflow_for_decimal = iprot.readBool();
        struct.setCheckOverflowForDecimalIsSet(true);
      }
      if (incoming.get(46)) {
        struct.skip_delete_bitmap = iprot.readBool();
        struct.setSkipDeleteBitmapIsSet(true);
      }
      if (incoming.get(47)) {
        struct.enable_pipeline_engine = iprot.readBool();
        struct.setEnablePipelineEngineIsSet(true);
      }
      if (incoming.get(48)) {
        struct.repeat_max_num = iprot.readI32();
        struct.setRepeatMaxNumIsSet(true);
      }
      if (incoming.get(49)) {
        struct.external_sort_bytes_threshold = iprot.readI64();
        struct.setExternalSortBytesThresholdIsSet(true);
      }
      if (incoming.get(50)) {
        struct.partitioned_hash_agg_rows_threshold = iprot.readI32();
        struct.setPartitionedHashAggRowsThresholdIsSet(true);
      }
      if (incoming.get(51)) {
        struct.enable_file_cache = iprot.readBool();
        struct.setEnableFileCacheIsSet(true);
      }
      if (incoming.get(52)) {
        struct.insert_timeout = iprot.readI32();
        struct.setInsertTimeoutIsSet(true);
      }
      if (incoming.get(53)) {
        struct.execution_timeout = iprot.readI32();
        struct.setExecutionTimeoutIsSet(true);
      }
      if (incoming.get(54)) {
        struct.dry_run_query = iprot.readBool();
        struct.setDryRunQueryIsSet(true);
      }
      if (incoming.get(55)) {
        struct.enable_common_expr_pushdown = iprot.readBool();
        struct.setEnableCommonExprPushdownIsSet(true);
      }
      if (incoming.get(56)) {
        struct.parallel_instance = iprot.readI32();
        struct.setParallelInstanceIsSet(true);
      }
      if (incoming.get(57)) {
        struct.mysql_row_binary_format = iprot.readBool();
        struct.setMysqlRowBinaryFormatIsSet(true);
      }
      if (incoming.get(58)) {
        struct.external_agg_bytes_threshold = iprot.readI64();
        struct.setExternalAggBytesThresholdIsSet(true);
      }
      if (incoming.get(59)) {
        struct.external_agg_partition_bits = iprot.readI32();
        struct.setExternalAggPartitionBitsIsSet(true);
      }
      if (incoming.get(60)) {
        struct.file_cache_base_path = iprot.readString();
        struct.setFileCacheBasePathIsSet(true);
      }
      if (incoming.get(61)) {
        struct.enable_parquet_lazy_mat = iprot.readBool();
        struct.setEnableParquetLazyMatIsSet(true);
      }
      if (incoming.get(62)) {
        struct.enable_orc_lazy_mat = iprot.readBool();
        struct.setEnableOrcLazyMatIsSet(true);
      }
      if (incoming.get(63)) {
        struct.scan_queue_mem_limit = iprot.readI64();
        struct.setScanQueueMemLimitIsSet(true);
      }
      if (incoming.get(64)) {
        struct.enable_scan_node_run_serial = iprot.readBool();
        struct.setEnableScanNodeRunSerialIsSet(true);
      }
      if (incoming.get(65)) {
        struct.enable_insert_strict = iprot.readBool();
        struct.setEnableInsertStrictIsSet(true);
      }
      if (incoming.get(66)) {
        struct.enable_inverted_index_query = iprot.readBool();
        struct.setEnableInvertedIndexQueryIsSet(true);
      }
      if (incoming.get(67)) {
        struct.truncate_char_or_varchar_columns = iprot.readBool();
        struct.setTruncateCharOrVarcharColumnsIsSet(true);
      }
      if (incoming.get(68)) {
        struct.enable_hash_join_early_start_probe = iprot.readBool();
        struct.setEnableHashJoinEarlyStartProbeIsSet(true);
      }
      if (incoming.get(69)) {
        struct.enable_pipeline_x_engine = iprot.readBool();
        struct.setEnablePipelineXEngineIsSet(true);
      }
      if (incoming.get(70)) {
        struct.enable_memtable_on_sink_node = iprot.readBool();
        struct.setEnableMemtableOnSinkNodeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

