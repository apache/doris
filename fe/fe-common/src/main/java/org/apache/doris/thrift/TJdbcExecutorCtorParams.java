/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-06-20")
public class TJdbcExecutorCtorParams implements org.apache.thrift.TBase<TJdbcExecutorCtorParams, TJdbcExecutorCtorParams._Fields>, java.io.Serializable, Cloneable, Comparable<TJdbcExecutorCtorParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TJdbcExecutorCtorParams");

  private static final org.apache.thrift.protocol.TField STATEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("statement", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField JDBC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("jdbc_url", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField JDBC_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("jdbc_user", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField JDBC_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("jdbc_password", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField JDBC_DRIVER_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("jdbc_driver_class", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BATCH_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("batch_size", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField OP_FIELD_DESC = new org.apache.thrift.protocol.TField("op", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField DRIVER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("driver_path", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TABLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("table_type", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TJdbcExecutorCtorParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TJdbcExecutorCtorParamsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String statement; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String jdbc_url; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String jdbc_user; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String jdbc_password; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String jdbc_driver_class; // optional
  public int batch_size; // optional
  /**
   * 
   * @see TJdbcOperation
   */
  public @org.apache.thrift.annotation.Nullable TJdbcOperation op; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String driver_path; // optional
  /**
   * 
   * @see TOdbcTableType
   */
  public @org.apache.thrift.annotation.Nullable TOdbcTableType table_type; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATEMENT((short)1, "statement"),
    JDBC_URL((short)2, "jdbc_url"),
    JDBC_USER((short)3, "jdbc_user"),
    JDBC_PASSWORD((short)4, "jdbc_password"),
    JDBC_DRIVER_CLASS((short)5, "jdbc_driver_class"),
    BATCH_SIZE((short)6, "batch_size"),
    /**
     * 
     * @see TJdbcOperation
     */
    OP((short)7, "op"),
    DRIVER_PATH((short)8, "driver_path"),
    /**
     * 
     * @see TOdbcTableType
     */
    TABLE_TYPE((short)9, "table_type");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATEMENT
          return STATEMENT;
        case 2: // JDBC_URL
          return JDBC_URL;
        case 3: // JDBC_USER
          return JDBC_USER;
        case 4: // JDBC_PASSWORD
          return JDBC_PASSWORD;
        case 5: // JDBC_DRIVER_CLASS
          return JDBC_DRIVER_CLASS;
        case 6: // BATCH_SIZE
          return BATCH_SIZE;
        case 7: // OP
          return OP;
        case 8: // DRIVER_PATH
          return DRIVER_PATH;
        case 9: // TABLE_TYPE
          return TABLE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BATCH_SIZE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STATEMENT,_Fields.JDBC_URL,_Fields.JDBC_USER,_Fields.JDBC_PASSWORD,_Fields.JDBC_DRIVER_CLASS,_Fields.BATCH_SIZE,_Fields.OP,_Fields.DRIVER_PATH,_Fields.TABLE_TYPE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATEMENT, new org.apache.thrift.meta_data.FieldMetaData("statement", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JDBC_URL, new org.apache.thrift.meta_data.FieldMetaData("jdbc_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JDBC_USER, new org.apache.thrift.meta_data.FieldMetaData("jdbc_user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JDBC_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("jdbc_password", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JDBC_DRIVER_CLASS, new org.apache.thrift.meta_data.FieldMetaData("jdbc_driver_class", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BATCH_SIZE, new org.apache.thrift.meta_data.FieldMetaData("batch_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OP, new org.apache.thrift.meta_data.FieldMetaData("op", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TJdbcOperation.class)));
    tmpMap.put(_Fields.DRIVER_PATH, new org.apache.thrift.meta_data.FieldMetaData("driver_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("table_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TOdbcTableType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TJdbcExecutorCtorParams.class, metaDataMap);
  }

  public TJdbcExecutorCtorParams() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TJdbcExecutorCtorParams(TJdbcExecutorCtorParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatement()) {
      this.statement = other.statement;
    }
    if (other.isSetJdbcUrl()) {
      this.jdbc_url = other.jdbc_url;
    }
    if (other.isSetJdbcUser()) {
      this.jdbc_user = other.jdbc_user;
    }
    if (other.isSetJdbcPassword()) {
      this.jdbc_password = other.jdbc_password;
    }
    if (other.isSetJdbcDriverClass()) {
      this.jdbc_driver_class = other.jdbc_driver_class;
    }
    this.batch_size = other.batch_size;
    if (other.isSetOp()) {
      this.op = other.op;
    }
    if (other.isSetDriverPath()) {
      this.driver_path = other.driver_path;
    }
    if (other.isSetTableType()) {
      this.table_type = other.table_type;
    }
  }

  @Override
  public TJdbcExecutorCtorParams deepCopy() {
    return new TJdbcExecutorCtorParams(this);
  }

  @Override
  public void clear() {
    this.statement = null;
    this.jdbc_url = null;
    this.jdbc_user = null;
    this.jdbc_password = null;
    this.jdbc_driver_class = null;
    setBatchSizeIsSet(false);
    this.batch_size = 0;
    this.op = null;
    this.driver_path = null;
    this.table_type = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStatement() {
    return this.statement;
  }

  public TJdbcExecutorCtorParams setStatement(@org.apache.thrift.annotation.Nullable java.lang.String statement) {
    this.statement = statement;
    return this;
  }

  public void unsetStatement() {
    this.statement = null;
  }

  /** Returns true if field statement is set (has been assigned a value) and false otherwise */
  public boolean isSetStatement() {
    return this.statement != null;
  }

  public void setStatementIsSet(boolean value) {
    if (!value) {
      this.statement = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJdbcUrl() {
    return this.jdbc_url;
  }

  public TJdbcExecutorCtorParams setJdbcUrl(@org.apache.thrift.annotation.Nullable java.lang.String jdbc_url) {
    this.jdbc_url = jdbc_url;
    return this;
  }

  public void unsetJdbcUrl() {
    this.jdbc_url = null;
  }

  /** Returns true if field jdbc_url is set (has been assigned a value) and false otherwise */
  public boolean isSetJdbcUrl() {
    return this.jdbc_url != null;
  }

  public void setJdbcUrlIsSet(boolean value) {
    if (!value) {
      this.jdbc_url = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJdbcUser() {
    return this.jdbc_user;
  }

  public TJdbcExecutorCtorParams setJdbcUser(@org.apache.thrift.annotation.Nullable java.lang.String jdbc_user) {
    this.jdbc_user = jdbc_user;
    return this;
  }

  public void unsetJdbcUser() {
    this.jdbc_user = null;
  }

  /** Returns true if field jdbc_user is set (has been assigned a value) and false otherwise */
  public boolean isSetJdbcUser() {
    return this.jdbc_user != null;
  }

  public void setJdbcUserIsSet(boolean value) {
    if (!value) {
      this.jdbc_user = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJdbcPassword() {
    return this.jdbc_password;
  }

  public TJdbcExecutorCtorParams setJdbcPassword(@org.apache.thrift.annotation.Nullable java.lang.String jdbc_password) {
    this.jdbc_password = jdbc_password;
    return this;
  }

  public void unsetJdbcPassword() {
    this.jdbc_password = null;
  }

  /** Returns true if field jdbc_password is set (has been assigned a value) and false otherwise */
  public boolean isSetJdbcPassword() {
    return this.jdbc_password != null;
  }

  public void setJdbcPasswordIsSet(boolean value) {
    if (!value) {
      this.jdbc_password = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getJdbcDriverClass() {
    return this.jdbc_driver_class;
  }

  public TJdbcExecutorCtorParams setJdbcDriverClass(@org.apache.thrift.annotation.Nullable java.lang.String jdbc_driver_class) {
    this.jdbc_driver_class = jdbc_driver_class;
    return this;
  }

  public void unsetJdbcDriverClass() {
    this.jdbc_driver_class = null;
  }

  /** Returns true if field jdbc_driver_class is set (has been assigned a value) and false otherwise */
  public boolean isSetJdbcDriverClass() {
    return this.jdbc_driver_class != null;
  }

  public void setJdbcDriverClassIsSet(boolean value) {
    if (!value) {
      this.jdbc_driver_class = null;
    }
  }

  public int getBatchSize() {
    return this.batch_size;
  }

  public TJdbcExecutorCtorParams setBatchSize(int batch_size) {
    this.batch_size = batch_size;
    setBatchSizeIsSet(true);
    return this;
  }

  public void unsetBatchSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BATCH_SIZE_ISSET_ID);
  }

  /** Returns true if field batch_size is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BATCH_SIZE_ISSET_ID);
  }

  public void setBatchSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BATCH_SIZE_ISSET_ID, value);
  }

  /**
   * 
   * @see TJdbcOperation
   */
  @org.apache.thrift.annotation.Nullable
  public TJdbcOperation getOp() {
    return this.op;
  }

  /**
   * 
   * @see TJdbcOperation
   */
  public TJdbcExecutorCtorParams setOp(@org.apache.thrift.annotation.Nullable TJdbcOperation op) {
    this.op = op;
    return this;
  }

  public void unsetOp() {
    this.op = null;
  }

  /** Returns true if field op is set (has been assigned a value) and false otherwise */
  public boolean isSetOp() {
    return this.op != null;
  }

  public void setOpIsSet(boolean value) {
    if (!value) {
      this.op = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDriverPath() {
    return this.driver_path;
  }

  public TJdbcExecutorCtorParams setDriverPath(@org.apache.thrift.annotation.Nullable java.lang.String driver_path) {
    this.driver_path = driver_path;
    return this;
  }

  public void unsetDriverPath() {
    this.driver_path = null;
  }

  /** Returns true if field driver_path is set (has been assigned a value) and false otherwise */
  public boolean isSetDriverPath() {
    return this.driver_path != null;
  }

  public void setDriverPathIsSet(boolean value) {
    if (!value) {
      this.driver_path = null;
    }
  }

  /**
   * 
   * @see TOdbcTableType
   */
  @org.apache.thrift.annotation.Nullable
  public TOdbcTableType getTableType() {
    return this.table_type;
  }

  /**
   * 
   * @see TOdbcTableType
   */
  public TJdbcExecutorCtorParams setTableType(@org.apache.thrift.annotation.Nullable TOdbcTableType table_type) {
    this.table_type = table_type;
    return this;
  }

  public void unsetTableType() {
    this.table_type = null;
  }

  /** Returns true if field table_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTableType() {
    return this.table_type != null;
  }

  public void setTableTypeIsSet(boolean value) {
    if (!value) {
      this.table_type = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATEMENT:
      if (value == null) {
        unsetStatement();
      } else {
        setStatement((java.lang.String)value);
      }
      break;

    case JDBC_URL:
      if (value == null) {
        unsetJdbcUrl();
      } else {
        setJdbcUrl((java.lang.String)value);
      }
      break;

    case JDBC_USER:
      if (value == null) {
        unsetJdbcUser();
      } else {
        setJdbcUser((java.lang.String)value);
      }
      break;

    case JDBC_PASSWORD:
      if (value == null) {
        unsetJdbcPassword();
      } else {
        setJdbcPassword((java.lang.String)value);
      }
      break;

    case JDBC_DRIVER_CLASS:
      if (value == null) {
        unsetJdbcDriverClass();
      } else {
        setJdbcDriverClass((java.lang.String)value);
      }
      break;

    case BATCH_SIZE:
      if (value == null) {
        unsetBatchSize();
      } else {
        setBatchSize((java.lang.Integer)value);
      }
      break;

    case OP:
      if (value == null) {
        unsetOp();
      } else {
        setOp((TJdbcOperation)value);
      }
      break;

    case DRIVER_PATH:
      if (value == null) {
        unsetDriverPath();
      } else {
        setDriverPath((java.lang.String)value);
      }
      break;

    case TABLE_TYPE:
      if (value == null) {
        unsetTableType();
      } else {
        setTableType((TOdbcTableType)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATEMENT:
      return getStatement();

    case JDBC_URL:
      return getJdbcUrl();

    case JDBC_USER:
      return getJdbcUser();

    case JDBC_PASSWORD:
      return getJdbcPassword();

    case JDBC_DRIVER_CLASS:
      return getJdbcDriverClass();

    case BATCH_SIZE:
      return getBatchSize();

    case OP:
      return getOp();

    case DRIVER_PATH:
      return getDriverPath();

    case TABLE_TYPE:
      return getTableType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATEMENT:
      return isSetStatement();
    case JDBC_URL:
      return isSetJdbcUrl();
    case JDBC_USER:
      return isSetJdbcUser();
    case JDBC_PASSWORD:
      return isSetJdbcPassword();
    case JDBC_DRIVER_CLASS:
      return isSetJdbcDriverClass();
    case BATCH_SIZE:
      return isSetBatchSize();
    case OP:
      return isSetOp();
    case DRIVER_PATH:
      return isSetDriverPath();
    case TABLE_TYPE:
      return isSetTableType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TJdbcExecutorCtorParams)
      return this.equals((TJdbcExecutorCtorParams)that);
    return false;
  }

  public boolean equals(TJdbcExecutorCtorParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_statement = true && this.isSetStatement();
    boolean that_present_statement = true && that.isSetStatement();
    if (this_present_statement || that_present_statement) {
      if (!(this_present_statement && that_present_statement))
        return false;
      if (!this.statement.equals(that.statement))
        return false;
    }

    boolean this_present_jdbc_url = true && this.isSetJdbcUrl();
    boolean that_present_jdbc_url = true && that.isSetJdbcUrl();
    if (this_present_jdbc_url || that_present_jdbc_url) {
      if (!(this_present_jdbc_url && that_present_jdbc_url))
        return false;
      if (!this.jdbc_url.equals(that.jdbc_url))
        return false;
    }

    boolean this_present_jdbc_user = true && this.isSetJdbcUser();
    boolean that_present_jdbc_user = true && that.isSetJdbcUser();
    if (this_present_jdbc_user || that_present_jdbc_user) {
      if (!(this_present_jdbc_user && that_present_jdbc_user))
        return false;
      if (!this.jdbc_user.equals(that.jdbc_user))
        return false;
    }

    boolean this_present_jdbc_password = true && this.isSetJdbcPassword();
    boolean that_present_jdbc_password = true && that.isSetJdbcPassword();
    if (this_present_jdbc_password || that_present_jdbc_password) {
      if (!(this_present_jdbc_password && that_present_jdbc_password))
        return false;
      if (!this.jdbc_password.equals(that.jdbc_password))
        return false;
    }

    boolean this_present_jdbc_driver_class = true && this.isSetJdbcDriverClass();
    boolean that_present_jdbc_driver_class = true && that.isSetJdbcDriverClass();
    if (this_present_jdbc_driver_class || that_present_jdbc_driver_class) {
      if (!(this_present_jdbc_driver_class && that_present_jdbc_driver_class))
        return false;
      if (!this.jdbc_driver_class.equals(that.jdbc_driver_class))
        return false;
    }

    boolean this_present_batch_size = true && this.isSetBatchSize();
    boolean that_present_batch_size = true && that.isSetBatchSize();
    if (this_present_batch_size || that_present_batch_size) {
      if (!(this_present_batch_size && that_present_batch_size))
        return false;
      if (this.batch_size != that.batch_size)
        return false;
    }

    boolean this_present_op = true && this.isSetOp();
    boolean that_present_op = true && that.isSetOp();
    if (this_present_op || that_present_op) {
      if (!(this_present_op && that_present_op))
        return false;
      if (!this.op.equals(that.op))
        return false;
    }

    boolean this_present_driver_path = true && this.isSetDriverPath();
    boolean that_present_driver_path = true && that.isSetDriverPath();
    if (this_present_driver_path || that_present_driver_path) {
      if (!(this_present_driver_path && that_present_driver_path))
        return false;
      if (!this.driver_path.equals(that.driver_path))
        return false;
    }

    boolean this_present_table_type = true && this.isSetTableType();
    boolean that_present_table_type = true && that.isSetTableType();
    if (this_present_table_type || that_present_table_type) {
      if (!(this_present_table_type && that_present_table_type))
        return false;
      if (!this.table_type.equals(that.table_type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatement()) ? 131071 : 524287);
    if (isSetStatement())
      hashCode = hashCode * 8191 + statement.hashCode();

    hashCode = hashCode * 8191 + ((isSetJdbcUrl()) ? 131071 : 524287);
    if (isSetJdbcUrl())
      hashCode = hashCode * 8191 + jdbc_url.hashCode();

    hashCode = hashCode * 8191 + ((isSetJdbcUser()) ? 131071 : 524287);
    if (isSetJdbcUser())
      hashCode = hashCode * 8191 + jdbc_user.hashCode();

    hashCode = hashCode * 8191 + ((isSetJdbcPassword()) ? 131071 : 524287);
    if (isSetJdbcPassword())
      hashCode = hashCode * 8191 + jdbc_password.hashCode();

    hashCode = hashCode * 8191 + ((isSetJdbcDriverClass()) ? 131071 : 524287);
    if (isSetJdbcDriverClass())
      hashCode = hashCode * 8191 + jdbc_driver_class.hashCode();

    hashCode = hashCode * 8191 + ((isSetBatchSize()) ? 131071 : 524287);
    if (isSetBatchSize())
      hashCode = hashCode * 8191 + batch_size;

    hashCode = hashCode * 8191 + ((isSetOp()) ? 131071 : 524287);
    if (isSetOp())
      hashCode = hashCode * 8191 + op.getValue();

    hashCode = hashCode * 8191 + ((isSetDriverPath()) ? 131071 : 524287);
    if (isSetDriverPath())
      hashCode = hashCode * 8191 + driver_path.hashCode();

    hashCode = hashCode * 8191 + ((isSetTableType()) ? 131071 : 524287);
    if (isSetTableType())
      hashCode = hashCode * 8191 + table_type.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TJdbcExecutorCtorParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStatement(), other.isSetStatement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statement, other.statement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJdbcUrl(), other.isSetJdbcUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJdbcUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jdbc_url, other.jdbc_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJdbcUser(), other.isSetJdbcUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJdbcUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jdbc_user, other.jdbc_user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJdbcPassword(), other.isSetJdbcPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJdbcPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jdbc_password, other.jdbc_password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJdbcDriverClass(), other.isSetJdbcDriverClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJdbcDriverClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jdbc_driver_class, other.jdbc_driver_class);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBatchSize(), other.isSetBatchSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batch_size, other.batch_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOp(), other.isSetOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, other.op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDriverPath(), other.isSetDriverPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDriverPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driver_path, other.driver_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTableType(), other.isSetTableType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_type, other.table_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TJdbcExecutorCtorParams(");
    boolean first = true;

    if (isSetStatement()) {
      sb.append("statement:");
      if (this.statement == null) {
        sb.append("null");
      } else {
        sb.append(this.statement);
      }
      first = false;
    }
    if (isSetJdbcUrl()) {
      if (!first) sb.append(", ");
      sb.append("jdbc_url:");
      if (this.jdbc_url == null) {
        sb.append("null");
      } else {
        sb.append(this.jdbc_url);
      }
      first = false;
    }
    if (isSetJdbcUser()) {
      if (!first) sb.append(", ");
      sb.append("jdbc_user:");
      if (this.jdbc_user == null) {
        sb.append("null");
      } else {
        sb.append(this.jdbc_user);
      }
      first = false;
    }
    if (isSetJdbcPassword()) {
      if (!first) sb.append(", ");
      sb.append("jdbc_password:");
      if (this.jdbc_password == null) {
        sb.append("null");
      } else {
        sb.append(this.jdbc_password);
      }
      first = false;
    }
    if (isSetJdbcDriverClass()) {
      if (!first) sb.append(", ");
      sb.append("jdbc_driver_class:");
      if (this.jdbc_driver_class == null) {
        sb.append("null");
      } else {
        sb.append(this.jdbc_driver_class);
      }
      first = false;
    }
    if (isSetBatchSize()) {
      if (!first) sb.append(", ");
      sb.append("batch_size:");
      sb.append(this.batch_size);
      first = false;
    }
    if (isSetOp()) {
      if (!first) sb.append(", ");
      sb.append("op:");
      if (this.op == null) {
        sb.append("null");
      } else {
        sb.append(this.op);
      }
      first = false;
    }
    if (isSetDriverPath()) {
      if (!first) sb.append(", ");
      sb.append("driver_path:");
      if (this.driver_path == null) {
        sb.append("null");
      } else {
        sb.append(this.driver_path);
      }
      first = false;
    }
    if (isSetTableType()) {
      if (!first) sb.append(", ");
      sb.append("table_type:");
      if (this.table_type == null) {
        sb.append("null");
      } else {
        sb.append(this.table_type);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TJdbcExecutorCtorParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TJdbcExecutorCtorParamsStandardScheme getScheme() {
      return new TJdbcExecutorCtorParamsStandardScheme();
    }
  }

  private static class TJdbcExecutorCtorParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TJdbcExecutorCtorParams> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TJdbcExecutorCtorParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statement = iprot.readString();
              struct.setStatementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JDBC_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jdbc_url = iprot.readString();
              struct.setJdbcUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JDBC_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jdbc_user = iprot.readString();
              struct.setJdbcUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // JDBC_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jdbc_password = iprot.readString();
              struct.setJdbcPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // JDBC_DRIVER_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jdbc_driver_class = iprot.readString();
              struct.setJdbcDriverClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BATCH_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.batch_size = iprot.readI32();
              struct.setBatchSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.op = org.apache.doris.thrift.TJdbcOperation.findByValue(iprot.readI32());
              struct.setOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DRIVER_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.driver_path = iprot.readString();
              struct.setDriverPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TABLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.table_type = org.apache.doris.thrift.TOdbcTableType.findByValue(iprot.readI32());
              struct.setTableTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TJdbcExecutorCtorParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.statement != null) {
        if (struct.isSetStatement()) {
          oprot.writeFieldBegin(STATEMENT_FIELD_DESC);
          oprot.writeString(struct.statement);
          oprot.writeFieldEnd();
        }
      }
      if (struct.jdbc_url != null) {
        if (struct.isSetJdbcUrl()) {
          oprot.writeFieldBegin(JDBC_URL_FIELD_DESC);
          oprot.writeString(struct.jdbc_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.jdbc_user != null) {
        if (struct.isSetJdbcUser()) {
          oprot.writeFieldBegin(JDBC_USER_FIELD_DESC);
          oprot.writeString(struct.jdbc_user);
          oprot.writeFieldEnd();
        }
      }
      if (struct.jdbc_password != null) {
        if (struct.isSetJdbcPassword()) {
          oprot.writeFieldBegin(JDBC_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.jdbc_password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.jdbc_driver_class != null) {
        if (struct.isSetJdbcDriverClass()) {
          oprot.writeFieldBegin(JDBC_DRIVER_CLASS_FIELD_DESC);
          oprot.writeString(struct.jdbc_driver_class);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBatchSize()) {
        oprot.writeFieldBegin(BATCH_SIZE_FIELD_DESC);
        oprot.writeI32(struct.batch_size);
        oprot.writeFieldEnd();
      }
      if (struct.op != null) {
        if (struct.isSetOp()) {
          oprot.writeFieldBegin(OP_FIELD_DESC);
          oprot.writeI32(struct.op.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.driver_path != null) {
        if (struct.isSetDriverPath()) {
          oprot.writeFieldBegin(DRIVER_PATH_FIELD_DESC);
          oprot.writeString(struct.driver_path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_type != null) {
        if (struct.isSetTableType()) {
          oprot.writeFieldBegin(TABLE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.table_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TJdbcExecutorCtorParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TJdbcExecutorCtorParamsTupleScheme getScheme() {
      return new TJdbcExecutorCtorParamsTupleScheme();
    }
  }

  private static class TJdbcExecutorCtorParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TJdbcExecutorCtorParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TJdbcExecutorCtorParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStatement()) {
        optionals.set(0);
      }
      if (struct.isSetJdbcUrl()) {
        optionals.set(1);
      }
      if (struct.isSetJdbcUser()) {
        optionals.set(2);
      }
      if (struct.isSetJdbcPassword()) {
        optionals.set(3);
      }
      if (struct.isSetJdbcDriverClass()) {
        optionals.set(4);
      }
      if (struct.isSetBatchSize()) {
        optionals.set(5);
      }
      if (struct.isSetOp()) {
        optionals.set(6);
      }
      if (struct.isSetDriverPath()) {
        optionals.set(7);
      }
      if (struct.isSetTableType()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetStatement()) {
        oprot.writeString(struct.statement);
      }
      if (struct.isSetJdbcUrl()) {
        oprot.writeString(struct.jdbc_url);
      }
      if (struct.isSetJdbcUser()) {
        oprot.writeString(struct.jdbc_user);
      }
      if (struct.isSetJdbcPassword()) {
        oprot.writeString(struct.jdbc_password);
      }
      if (struct.isSetJdbcDriverClass()) {
        oprot.writeString(struct.jdbc_driver_class);
      }
      if (struct.isSetBatchSize()) {
        oprot.writeI32(struct.batch_size);
      }
      if (struct.isSetOp()) {
        oprot.writeI32(struct.op.getValue());
      }
      if (struct.isSetDriverPath()) {
        oprot.writeString(struct.driver_path);
      }
      if (struct.isSetTableType()) {
        oprot.writeI32(struct.table_type.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TJdbcExecutorCtorParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.statement = iprot.readString();
        struct.setStatementIsSet(true);
      }
      if (incoming.get(1)) {
        struct.jdbc_url = iprot.readString();
        struct.setJdbcUrlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.jdbc_user = iprot.readString();
        struct.setJdbcUserIsSet(true);
      }
      if (incoming.get(3)) {
        struct.jdbc_password = iprot.readString();
        struct.setJdbcPasswordIsSet(true);
      }
      if (incoming.get(4)) {
        struct.jdbc_driver_class = iprot.readString();
        struct.setJdbcDriverClassIsSet(true);
      }
      if (incoming.get(5)) {
        struct.batch_size = iprot.readI32();
        struct.setBatchSizeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.op = org.apache.doris.thrift.TJdbcOperation.findByValue(iprot.readI32());
        struct.setOpIsSet(true);
      }
      if (incoming.get(7)) {
        struct.driver_path = iprot.readString();
        struct.setDriverPathIsSet(true);
      }
      if (incoming.get(8)) {
        struct.table_type = org.apache.doris.thrift.TOdbcTableType.findByValue(iprot.readI32());
        struct.setTableTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

