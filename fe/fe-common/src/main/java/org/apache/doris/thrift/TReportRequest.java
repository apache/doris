/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-08-29")
public class TReportRequest implements org.apache.thrift.TBase<TReportRequest, TReportRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TReportRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TReportRequest");

  private static final org.apache.thrift.protocol.TField BACKEND_FIELD_DESC = new org.apache.thrift.protocol.TField("backend", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField REPORT_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("report_version", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("tasks", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField TABLETS_FIELD_DESC = new org.apache.thrift.protocol.TField("tablets", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField DISKS_FIELD_DESC = new org.apache.thrift.protocol.TField("disks", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField FORCE_RECOVERY_FIELD_DESC = new org.apache.thrift.protocol.TField("force_recovery", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField TABLET_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_list", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField TABLET_MAX_COMPACTION_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_max_compaction_score", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField STORAGE_POLICY_FIELD_DESC = new org.apache.thrift.protocol.TField("storage_policy", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("resource", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField NUM_CORES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_cores", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField PIPELINE_EXECUTOR_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pipeline_executor_size", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TReportRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TReportRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TBackend backend; // required
  public long report_version; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<org.apache.doris.thrift.TTaskType,java.util.Set<java.lang.Long>> tasks; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,TTablet> tablets; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,TDisk> disks; // optional
  public boolean force_recovery; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TTablet> tablet_list; // optional
  public long tablet_max_compaction_score; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TStoragePolicy> storage_policy; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TStorageResource> resource; // optional
  public int num_cores; // required
  public int pipeline_executor_size; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BACKEND((short)1, "backend"),
    REPORT_VERSION((short)2, "report_version"),
    TASKS((short)3, "tasks"),
    TABLETS((short)4, "tablets"),
    DISKS((short)5, "disks"),
    FORCE_RECOVERY((short)6, "force_recovery"),
    TABLET_LIST((short)7, "tablet_list"),
    TABLET_MAX_COMPACTION_SCORE((short)8, "tablet_max_compaction_score"),
    STORAGE_POLICY((short)9, "storage_policy"),
    RESOURCE((short)10, "resource"),
    NUM_CORES((short)11, "num_cores"),
    PIPELINE_EXECUTOR_SIZE((short)12, "pipeline_executor_size");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BACKEND
          return BACKEND;
        case 2: // REPORT_VERSION
          return REPORT_VERSION;
        case 3: // TASKS
          return TASKS;
        case 4: // TABLETS
          return TABLETS;
        case 5: // DISKS
          return DISKS;
        case 6: // FORCE_RECOVERY
          return FORCE_RECOVERY;
        case 7: // TABLET_LIST
          return TABLET_LIST;
        case 8: // TABLET_MAX_COMPACTION_SCORE
          return TABLET_MAX_COMPACTION_SCORE;
        case 9: // STORAGE_POLICY
          return STORAGE_POLICY;
        case 10: // RESOURCE
          return RESOURCE;
        case 11: // NUM_CORES
          return NUM_CORES;
        case 12: // PIPELINE_EXECUTOR_SIZE
          return PIPELINE_EXECUTOR_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REPORT_VERSION_ISSET_ID = 0;
  private static final int __FORCE_RECOVERY_ISSET_ID = 1;
  private static final int __TABLET_MAX_COMPACTION_SCORE_ISSET_ID = 2;
  private static final int __NUM_CORES_ISSET_ID = 3;
  private static final int __PIPELINE_EXECUTOR_SIZE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REPORT_VERSION,_Fields.TASKS,_Fields.TABLETS,_Fields.DISKS,_Fields.FORCE_RECOVERY,_Fields.TABLET_LIST,_Fields.TABLET_MAX_COMPACTION_SCORE,_Fields.STORAGE_POLICY,_Fields.RESOURCE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BACKEND, new org.apache.thrift.meta_data.FieldMetaData("backend", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TBackend.class)));
    tmpMap.put(_Fields.REPORT_VERSION, new org.apache.thrift.meta_data.FieldMetaData("report_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TASKS, new org.apache.thrift.meta_data.FieldMetaData("tasks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.doris.thrift.TTaskType.class), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.TABLETS, new org.apache.thrift.meta_data.FieldMetaData("tablets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "TTabletId"), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTablet.class))));
    tmpMap.put(_Fields.DISKS, new org.apache.thrift.meta_data.FieldMetaData("disks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDisk.class))));
    tmpMap.put(_Fields.FORCE_RECOVERY, new org.apache.thrift.meta_data.FieldMetaData("force_recovery", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TABLET_LIST, new org.apache.thrift.meta_data.FieldMetaData("tablet_list", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTablet.class))));
    tmpMap.put(_Fields.TABLET_MAX_COMPACTION_SCORE, new org.apache.thrift.meta_data.FieldMetaData("tablet_max_compaction_score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STORAGE_POLICY, new org.apache.thrift.meta_data.FieldMetaData("storage_policy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TStoragePolicy.class))));
    tmpMap.put(_Fields.RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("resource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TStorageResource.class))));
    tmpMap.put(_Fields.NUM_CORES, new org.apache.thrift.meta_data.FieldMetaData("num_cores", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PIPELINE_EXECUTOR_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pipeline_executor_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TReportRequest.class, metaDataMap);
  }

  public TReportRequest() {
  }

  public TReportRequest(
    org.apache.doris.thrift.TBackend backend,
    int num_cores,
    int pipeline_executor_size)
  {
    this();
    this.backend = backend;
    this.num_cores = num_cores;
    setNumCoresIsSet(true);
    this.pipeline_executor_size = pipeline_executor_size;
    setPipelineExecutorSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TReportRequest(TReportRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBackend()) {
      this.backend = new org.apache.doris.thrift.TBackend(other.backend);
    }
    this.report_version = other.report_version;
    if (other.isSetTasks()) {
      java.util.Map<org.apache.doris.thrift.TTaskType,java.util.Set<java.lang.Long>> __this__tasks = new java.util.EnumMap<org.apache.doris.thrift.TTaskType,java.util.Set<java.lang.Long>>(org.apache.doris.thrift.TTaskType.class);
      for (java.util.Map.Entry<org.apache.doris.thrift.TTaskType, java.util.Set<java.lang.Long>> other_element : other.tasks.entrySet()) {

        org.apache.doris.thrift.TTaskType other_element_key = other_element.getKey();
        java.util.Set<java.lang.Long> other_element_value = other_element.getValue();

        org.apache.doris.thrift.TTaskType __this__tasks_copy_key = other_element_key;

        java.util.Set<java.lang.Long> __this__tasks_copy_value = new java.util.HashSet<java.lang.Long>(other_element_value);

        __this__tasks.put(__this__tasks_copy_key, __this__tasks_copy_value);
      }
      this.tasks = __this__tasks;
    }
    if (other.isSetTablets()) {
      java.util.Map<java.lang.Long,TTablet> __this__tablets = new java.util.HashMap<java.lang.Long,TTablet>(other.tablets.size());
      for (java.util.Map.Entry<java.lang.Long, TTablet> other_element : other.tablets.entrySet()) {

        java.lang.Long other_element_key = other_element.getKey();
        TTablet other_element_value = other_element.getValue();

        java.lang.Long __this__tablets_copy_key = other_element_key;

        TTablet __this__tablets_copy_value = new TTablet(other_element_value);

        __this__tablets.put(__this__tablets_copy_key, __this__tablets_copy_value);
      }
      this.tablets = __this__tablets;
    }
    if (other.isSetDisks()) {
      java.util.Map<java.lang.String,TDisk> __this__disks = new java.util.HashMap<java.lang.String,TDisk>(other.disks.size());
      for (java.util.Map.Entry<java.lang.String, TDisk> other_element : other.disks.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        TDisk other_element_value = other_element.getValue();

        java.lang.String __this__disks_copy_key = other_element_key;

        TDisk __this__disks_copy_value = new TDisk(other_element_value);

        __this__disks.put(__this__disks_copy_key, __this__disks_copy_value);
      }
      this.disks = __this__disks;
    }
    this.force_recovery = other.force_recovery;
    if (other.isSetTabletList()) {
      java.util.List<TTablet> __this__tablet_list = new java.util.ArrayList<TTablet>(other.tablet_list.size());
      for (TTablet other_element : other.tablet_list) {
        __this__tablet_list.add(new TTablet(other_element));
      }
      this.tablet_list = __this__tablet_list;
    }
    this.tablet_max_compaction_score = other.tablet_max_compaction_score;
    if (other.isSetStoragePolicy()) {
      java.util.List<org.apache.doris.thrift.TStoragePolicy> __this__storage_policy = new java.util.ArrayList<org.apache.doris.thrift.TStoragePolicy>(other.storage_policy.size());
      for (org.apache.doris.thrift.TStoragePolicy other_element : other.storage_policy) {
        __this__storage_policy.add(new org.apache.doris.thrift.TStoragePolicy(other_element));
      }
      this.storage_policy = __this__storage_policy;
    }
    if (other.isSetResource()) {
      java.util.List<org.apache.doris.thrift.TStorageResource> __this__resource = new java.util.ArrayList<org.apache.doris.thrift.TStorageResource>(other.resource.size());
      for (org.apache.doris.thrift.TStorageResource other_element : other.resource) {
        __this__resource.add(new org.apache.doris.thrift.TStorageResource(other_element));
      }
      this.resource = __this__resource;
    }
    this.num_cores = other.num_cores;
    this.pipeline_executor_size = other.pipeline_executor_size;
  }

  @Override
  public TReportRequest deepCopy() {
    return new TReportRequest(this);
  }

  @Override
  public void clear() {
    this.backend = null;
    setReportVersionIsSet(false);
    this.report_version = 0;
    this.tasks = null;
    this.tablets = null;
    this.disks = null;
    setForceRecoveryIsSet(false);
    this.force_recovery = false;
    this.tablet_list = null;
    setTabletMaxCompactionScoreIsSet(false);
    this.tablet_max_compaction_score = 0;
    this.storage_policy = null;
    this.resource = null;
    setNumCoresIsSet(false);
    this.num_cores = 0;
    setPipelineExecutorSizeIsSet(false);
    this.pipeline_executor_size = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TBackend getBackend() {
    return this.backend;
  }

  public TReportRequest setBackend(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TBackend backend) {
    this.backend = backend;
    return this;
  }

  public void unsetBackend() {
    this.backend = null;
  }

  /** Returns true if field backend is set (has been assigned a value) and false otherwise */
  public boolean isSetBackend() {
    return this.backend != null;
  }

  public void setBackendIsSet(boolean value) {
    if (!value) {
      this.backend = null;
    }
  }

  public long getReportVersion() {
    return this.report_version;
  }

  public TReportRequest setReportVersion(long report_version) {
    this.report_version = report_version;
    setReportVersionIsSet(true);
    return this;
  }

  public void unsetReportVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPORT_VERSION_ISSET_ID);
  }

  /** Returns true if field report_version is set (has been assigned a value) and false otherwise */
  public boolean isSetReportVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPORT_VERSION_ISSET_ID);
  }

  public void setReportVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPORT_VERSION_ISSET_ID, value);
  }

  public int getTasksSize() {
    return (this.tasks == null) ? 0 : this.tasks.size();
  }

  public void putToTasks(org.apache.doris.thrift.TTaskType key, java.util.Set<java.lang.Long> val) {
    if (this.tasks == null) {
      this.tasks = new java.util.EnumMap<org.apache.doris.thrift.TTaskType,java.util.Set<java.lang.Long>>(org.apache.doris.thrift.TTaskType.class);
    }
    this.tasks.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<org.apache.doris.thrift.TTaskType,java.util.Set<java.lang.Long>> getTasks() {
    return this.tasks;
  }

  public TReportRequest setTasks(@org.apache.thrift.annotation.Nullable java.util.Map<org.apache.doris.thrift.TTaskType,java.util.Set<java.lang.Long>> tasks) {
    this.tasks = tasks;
    return this;
  }

  public void unsetTasks() {
    this.tasks = null;
  }

  /** Returns true if field tasks is set (has been assigned a value) and false otherwise */
  public boolean isSetTasks() {
    return this.tasks != null;
  }

  public void setTasksIsSet(boolean value) {
    if (!value) {
      this.tasks = null;
    }
  }

  public int getTabletsSize() {
    return (this.tablets == null) ? 0 : this.tablets.size();
  }

  public void putToTablets(long key, TTablet val) {
    if (this.tablets == null) {
      this.tablets = new java.util.HashMap<java.lang.Long,TTablet>();
    }
    this.tablets.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Long,TTablet> getTablets() {
    return this.tablets;
  }

  public TReportRequest setTablets(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Long,TTablet> tablets) {
    this.tablets = tablets;
    return this;
  }

  public void unsetTablets() {
    this.tablets = null;
  }

  /** Returns true if field tablets is set (has been assigned a value) and false otherwise */
  public boolean isSetTablets() {
    return this.tablets != null;
  }

  public void setTabletsIsSet(boolean value) {
    if (!value) {
      this.tablets = null;
    }
  }

  public int getDisksSize() {
    return (this.disks == null) ? 0 : this.disks.size();
  }

  public void putToDisks(java.lang.String key, TDisk val) {
    if (this.disks == null) {
      this.disks = new java.util.HashMap<java.lang.String,TDisk>();
    }
    this.disks.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,TDisk> getDisks() {
    return this.disks;
  }

  public TReportRequest setDisks(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,TDisk> disks) {
    this.disks = disks;
    return this;
  }

  public void unsetDisks() {
    this.disks = null;
  }

  /** Returns true if field disks is set (has been assigned a value) and false otherwise */
  public boolean isSetDisks() {
    return this.disks != null;
  }

  public void setDisksIsSet(boolean value) {
    if (!value) {
      this.disks = null;
    }
  }

  public boolean isForceRecovery() {
    return this.force_recovery;
  }

  public TReportRequest setForceRecovery(boolean force_recovery) {
    this.force_recovery = force_recovery;
    setForceRecoveryIsSet(true);
    return this;
  }

  public void unsetForceRecovery() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FORCE_RECOVERY_ISSET_ID);
  }

  /** Returns true if field force_recovery is set (has been assigned a value) and false otherwise */
  public boolean isSetForceRecovery() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FORCE_RECOVERY_ISSET_ID);
  }

  public void setForceRecoveryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FORCE_RECOVERY_ISSET_ID, value);
  }

  public int getTabletListSize() {
    return (this.tablet_list == null) ? 0 : this.tablet_list.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TTablet> getTabletListIterator() {
    return (this.tablet_list == null) ? null : this.tablet_list.iterator();
  }

  public void addToTabletList(TTablet elem) {
    if (this.tablet_list == null) {
      this.tablet_list = new java.util.ArrayList<TTablet>();
    }
    this.tablet_list.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TTablet> getTabletList() {
    return this.tablet_list;
  }

  public TReportRequest setTabletList(@org.apache.thrift.annotation.Nullable java.util.List<TTablet> tablet_list) {
    this.tablet_list = tablet_list;
    return this;
  }

  public void unsetTabletList() {
    this.tablet_list = null;
  }

  /** Returns true if field tablet_list is set (has been assigned a value) and false otherwise */
  public boolean isSetTabletList() {
    return this.tablet_list != null;
  }

  public void setTabletListIsSet(boolean value) {
    if (!value) {
      this.tablet_list = null;
    }
  }

  public long getTabletMaxCompactionScore() {
    return this.tablet_max_compaction_score;
  }

  public TReportRequest setTabletMaxCompactionScore(long tablet_max_compaction_score) {
    this.tablet_max_compaction_score = tablet_max_compaction_score;
    setTabletMaxCompactionScoreIsSet(true);
    return this;
  }

  public void unsetTabletMaxCompactionScore() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLET_MAX_COMPACTION_SCORE_ISSET_ID);
  }

  /** Returns true if field tablet_max_compaction_score is set (has been assigned a value) and false otherwise */
  public boolean isSetTabletMaxCompactionScore() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLET_MAX_COMPACTION_SCORE_ISSET_ID);
  }

  public void setTabletMaxCompactionScoreIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLET_MAX_COMPACTION_SCORE_ISSET_ID, value);
  }

  public int getStoragePolicySize() {
    return (this.storage_policy == null) ? 0 : this.storage_policy.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TStoragePolicy> getStoragePolicyIterator() {
    return (this.storage_policy == null) ? null : this.storage_policy.iterator();
  }

  public void addToStoragePolicy(org.apache.doris.thrift.TStoragePolicy elem) {
    if (this.storage_policy == null) {
      this.storage_policy = new java.util.ArrayList<org.apache.doris.thrift.TStoragePolicy>();
    }
    this.storage_policy.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TStoragePolicy> getStoragePolicy() {
    return this.storage_policy;
  }

  public TReportRequest setStoragePolicy(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TStoragePolicy> storage_policy) {
    this.storage_policy = storage_policy;
    return this;
  }

  public void unsetStoragePolicy() {
    this.storage_policy = null;
  }

  /** Returns true if field storage_policy is set (has been assigned a value) and false otherwise */
  public boolean isSetStoragePolicy() {
    return this.storage_policy != null;
  }

  public void setStoragePolicyIsSet(boolean value) {
    if (!value) {
      this.storage_policy = null;
    }
  }

  public int getResourceSize() {
    return (this.resource == null) ? 0 : this.resource.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TStorageResource> getResourceIterator() {
    return (this.resource == null) ? null : this.resource.iterator();
  }

  public void addToResource(org.apache.doris.thrift.TStorageResource elem) {
    if (this.resource == null) {
      this.resource = new java.util.ArrayList<org.apache.doris.thrift.TStorageResource>();
    }
    this.resource.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TStorageResource> getResource() {
    return this.resource;
  }

  public TReportRequest setResource(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TStorageResource> resource) {
    this.resource = resource;
    return this;
  }

  public void unsetResource() {
    this.resource = null;
  }

  /** Returns true if field resource is set (has been assigned a value) and false otherwise */
  public boolean isSetResource() {
    return this.resource != null;
  }

  public void setResourceIsSet(boolean value) {
    if (!value) {
      this.resource = null;
    }
  }

  public int getNumCores() {
    return this.num_cores;
  }

  public TReportRequest setNumCores(int num_cores) {
    this.num_cores = num_cores;
    setNumCoresIsSet(true);
    return this;
  }

  public void unsetNumCores() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_CORES_ISSET_ID);
  }

  /** Returns true if field num_cores is set (has been assigned a value) and false otherwise */
  public boolean isSetNumCores() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_CORES_ISSET_ID);
  }

  public void setNumCoresIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_CORES_ISSET_ID, value);
  }

  public int getPipelineExecutorSize() {
    return this.pipeline_executor_size;
  }

  public TReportRequest setPipelineExecutorSize(int pipeline_executor_size) {
    this.pipeline_executor_size = pipeline_executor_size;
    setPipelineExecutorSizeIsSet(true);
    return this;
  }

  public void unsetPipelineExecutorSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PIPELINE_EXECUTOR_SIZE_ISSET_ID);
  }

  /** Returns true if field pipeline_executor_size is set (has been assigned a value) and false otherwise */
  public boolean isSetPipelineExecutorSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PIPELINE_EXECUTOR_SIZE_ISSET_ID);
  }

  public void setPipelineExecutorSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PIPELINE_EXECUTOR_SIZE_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case BACKEND:
      if (value == null) {
        unsetBackend();
      } else {
        setBackend((org.apache.doris.thrift.TBackend)value);
      }
      break;

    case REPORT_VERSION:
      if (value == null) {
        unsetReportVersion();
      } else {
        setReportVersion((java.lang.Long)value);
      }
      break;

    case TASKS:
      if (value == null) {
        unsetTasks();
      } else {
        setTasks((java.util.Map<org.apache.doris.thrift.TTaskType,java.util.Set<java.lang.Long>>)value);
      }
      break;

    case TABLETS:
      if (value == null) {
        unsetTablets();
      } else {
        setTablets((java.util.Map<java.lang.Long,TTablet>)value);
      }
      break;

    case DISKS:
      if (value == null) {
        unsetDisks();
      } else {
        setDisks((java.util.Map<java.lang.String,TDisk>)value);
      }
      break;

    case FORCE_RECOVERY:
      if (value == null) {
        unsetForceRecovery();
      } else {
        setForceRecovery((java.lang.Boolean)value);
      }
      break;

    case TABLET_LIST:
      if (value == null) {
        unsetTabletList();
      } else {
        setTabletList((java.util.List<TTablet>)value);
      }
      break;

    case TABLET_MAX_COMPACTION_SCORE:
      if (value == null) {
        unsetTabletMaxCompactionScore();
      } else {
        setTabletMaxCompactionScore((java.lang.Long)value);
      }
      break;

    case STORAGE_POLICY:
      if (value == null) {
        unsetStoragePolicy();
      } else {
        setStoragePolicy((java.util.List<org.apache.doris.thrift.TStoragePolicy>)value);
      }
      break;

    case RESOURCE:
      if (value == null) {
        unsetResource();
      } else {
        setResource((java.util.List<org.apache.doris.thrift.TStorageResource>)value);
      }
      break;

    case NUM_CORES:
      if (value == null) {
        unsetNumCores();
      } else {
        setNumCores((java.lang.Integer)value);
      }
      break;

    case PIPELINE_EXECUTOR_SIZE:
      if (value == null) {
        unsetPipelineExecutorSize();
      } else {
        setPipelineExecutorSize((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BACKEND:
      return getBackend();

    case REPORT_VERSION:
      return getReportVersion();

    case TASKS:
      return getTasks();

    case TABLETS:
      return getTablets();

    case DISKS:
      return getDisks();

    case FORCE_RECOVERY:
      return isForceRecovery();

    case TABLET_LIST:
      return getTabletList();

    case TABLET_MAX_COMPACTION_SCORE:
      return getTabletMaxCompactionScore();

    case STORAGE_POLICY:
      return getStoragePolicy();

    case RESOURCE:
      return getResource();

    case NUM_CORES:
      return getNumCores();

    case PIPELINE_EXECUTOR_SIZE:
      return getPipelineExecutorSize();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BACKEND:
      return isSetBackend();
    case REPORT_VERSION:
      return isSetReportVersion();
    case TASKS:
      return isSetTasks();
    case TABLETS:
      return isSetTablets();
    case DISKS:
      return isSetDisks();
    case FORCE_RECOVERY:
      return isSetForceRecovery();
    case TABLET_LIST:
      return isSetTabletList();
    case TABLET_MAX_COMPACTION_SCORE:
      return isSetTabletMaxCompactionScore();
    case STORAGE_POLICY:
      return isSetStoragePolicy();
    case RESOURCE:
      return isSetResource();
    case NUM_CORES:
      return isSetNumCores();
    case PIPELINE_EXECUTOR_SIZE:
      return isSetPipelineExecutorSize();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TReportRequest)
      return this.equals((TReportRequest)that);
    return false;
  }

  public boolean equals(TReportRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_backend = true && this.isSetBackend();
    boolean that_present_backend = true && that.isSetBackend();
    if (this_present_backend || that_present_backend) {
      if (!(this_present_backend && that_present_backend))
        return false;
      if (!this.backend.equals(that.backend))
        return false;
    }

    boolean this_present_report_version = true && this.isSetReportVersion();
    boolean that_present_report_version = true && that.isSetReportVersion();
    if (this_present_report_version || that_present_report_version) {
      if (!(this_present_report_version && that_present_report_version))
        return false;
      if (this.report_version != that.report_version)
        return false;
    }

    boolean this_present_tasks = true && this.isSetTasks();
    boolean that_present_tasks = true && that.isSetTasks();
    if (this_present_tasks || that_present_tasks) {
      if (!(this_present_tasks && that_present_tasks))
        return false;
      if (!this.tasks.equals(that.tasks))
        return false;
    }

    boolean this_present_tablets = true && this.isSetTablets();
    boolean that_present_tablets = true && that.isSetTablets();
    if (this_present_tablets || that_present_tablets) {
      if (!(this_present_tablets && that_present_tablets))
        return false;
      if (!this.tablets.equals(that.tablets))
        return false;
    }

    boolean this_present_disks = true && this.isSetDisks();
    boolean that_present_disks = true && that.isSetDisks();
    if (this_present_disks || that_present_disks) {
      if (!(this_present_disks && that_present_disks))
        return false;
      if (!this.disks.equals(that.disks))
        return false;
    }

    boolean this_present_force_recovery = true && this.isSetForceRecovery();
    boolean that_present_force_recovery = true && that.isSetForceRecovery();
    if (this_present_force_recovery || that_present_force_recovery) {
      if (!(this_present_force_recovery && that_present_force_recovery))
        return false;
      if (this.force_recovery != that.force_recovery)
        return false;
    }

    boolean this_present_tablet_list = true && this.isSetTabletList();
    boolean that_present_tablet_list = true && that.isSetTabletList();
    if (this_present_tablet_list || that_present_tablet_list) {
      if (!(this_present_tablet_list && that_present_tablet_list))
        return false;
      if (!this.tablet_list.equals(that.tablet_list))
        return false;
    }

    boolean this_present_tablet_max_compaction_score = true && this.isSetTabletMaxCompactionScore();
    boolean that_present_tablet_max_compaction_score = true && that.isSetTabletMaxCompactionScore();
    if (this_present_tablet_max_compaction_score || that_present_tablet_max_compaction_score) {
      if (!(this_present_tablet_max_compaction_score && that_present_tablet_max_compaction_score))
        return false;
      if (this.tablet_max_compaction_score != that.tablet_max_compaction_score)
        return false;
    }

    boolean this_present_storage_policy = true && this.isSetStoragePolicy();
    boolean that_present_storage_policy = true && that.isSetStoragePolicy();
    if (this_present_storage_policy || that_present_storage_policy) {
      if (!(this_present_storage_policy && that_present_storage_policy))
        return false;
      if (!this.storage_policy.equals(that.storage_policy))
        return false;
    }

    boolean this_present_resource = true && this.isSetResource();
    boolean that_present_resource = true && that.isSetResource();
    if (this_present_resource || that_present_resource) {
      if (!(this_present_resource && that_present_resource))
        return false;
      if (!this.resource.equals(that.resource))
        return false;
    }

    boolean this_present_num_cores = true;
    boolean that_present_num_cores = true;
    if (this_present_num_cores || that_present_num_cores) {
      if (!(this_present_num_cores && that_present_num_cores))
        return false;
      if (this.num_cores != that.num_cores)
        return false;
    }

    boolean this_present_pipeline_executor_size = true;
    boolean that_present_pipeline_executor_size = true;
    if (this_present_pipeline_executor_size || that_present_pipeline_executor_size) {
      if (!(this_present_pipeline_executor_size && that_present_pipeline_executor_size))
        return false;
      if (this.pipeline_executor_size != that.pipeline_executor_size)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBackend()) ? 131071 : 524287);
    if (isSetBackend())
      hashCode = hashCode * 8191 + backend.hashCode();

    hashCode = hashCode * 8191 + ((isSetReportVersion()) ? 131071 : 524287);
    if (isSetReportVersion())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(report_version);

    hashCode = hashCode * 8191 + ((isSetTasks()) ? 131071 : 524287);
    if (isSetTasks())
      hashCode = hashCode * 8191 + tasks.hashCode();

    hashCode = hashCode * 8191 + ((isSetTablets()) ? 131071 : 524287);
    if (isSetTablets())
      hashCode = hashCode * 8191 + tablets.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisks()) ? 131071 : 524287);
    if (isSetDisks())
      hashCode = hashCode * 8191 + disks.hashCode();

    hashCode = hashCode * 8191 + ((isSetForceRecovery()) ? 131071 : 524287);
    if (isSetForceRecovery())
      hashCode = hashCode * 8191 + ((force_recovery) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTabletList()) ? 131071 : 524287);
    if (isSetTabletList())
      hashCode = hashCode * 8191 + tablet_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetTabletMaxCompactionScore()) ? 131071 : 524287);
    if (isSetTabletMaxCompactionScore())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tablet_max_compaction_score);

    hashCode = hashCode * 8191 + ((isSetStoragePolicy()) ? 131071 : 524287);
    if (isSetStoragePolicy())
      hashCode = hashCode * 8191 + storage_policy.hashCode();

    hashCode = hashCode * 8191 + ((isSetResource()) ? 131071 : 524287);
    if (isSetResource())
      hashCode = hashCode * 8191 + resource.hashCode();

    hashCode = hashCode * 8191 + num_cores;

    hashCode = hashCode * 8191 + pipeline_executor_size;

    return hashCode;
  }

  @Override
  public int compareTo(TReportRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetBackend(), other.isSetBackend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend, other.backend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReportVersion(), other.isSetReportVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.report_version, other.report_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTasks(), other.isSetTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tasks, other.tasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablets(), other.isSetTablets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablets, other.tablets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDisks(), other.isSetDisks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disks, other.disks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetForceRecovery(), other.isSetForceRecovery());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForceRecovery()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.force_recovery, other.force_recovery);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTabletList(), other.isSetTabletList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTabletList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_list, other.tablet_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTabletMaxCompactionScore(), other.isSetTabletMaxCompactionScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTabletMaxCompactionScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_max_compaction_score, other.tablet_max_compaction_score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStoragePolicy(), other.isSetStoragePolicy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoragePolicy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage_policy, other.storage_policy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResource(), other.isSetResource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource, other.resource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumCores(), other.isSetNumCores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumCores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_cores, other.num_cores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPipelineExecutorSize(), other.isSetPipelineExecutorSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPipelineExecutorSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pipeline_executor_size, other.pipeline_executor_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TReportRequest(");
    boolean first = true;

    sb.append("backend:");
    if (this.backend == null) {
      sb.append("null");
    } else {
      sb.append(this.backend);
    }
    first = false;
    if (isSetReportVersion()) {
      if (!first) sb.append(", ");
      sb.append("report_version:");
      sb.append(this.report_version);
      first = false;
    }
    if (isSetTasks()) {
      if (!first) sb.append(", ");
      sb.append("tasks:");
      if (this.tasks == null) {
        sb.append("null");
      } else {
        sb.append(this.tasks);
      }
      first = false;
    }
    if (isSetTablets()) {
      if (!first) sb.append(", ");
      sb.append("tablets:");
      if (this.tablets == null) {
        sb.append("null");
      } else {
        sb.append(this.tablets);
      }
      first = false;
    }
    if (isSetDisks()) {
      if (!first) sb.append(", ");
      sb.append("disks:");
      if (this.disks == null) {
        sb.append("null");
      } else {
        sb.append(this.disks);
      }
      first = false;
    }
    if (isSetForceRecovery()) {
      if (!first) sb.append(", ");
      sb.append("force_recovery:");
      sb.append(this.force_recovery);
      first = false;
    }
    if (isSetTabletList()) {
      if (!first) sb.append(", ");
      sb.append("tablet_list:");
      if (this.tablet_list == null) {
        sb.append("null");
      } else {
        sb.append(this.tablet_list);
      }
      first = false;
    }
    if (isSetTabletMaxCompactionScore()) {
      if (!first) sb.append(", ");
      sb.append("tablet_max_compaction_score:");
      sb.append(this.tablet_max_compaction_score);
      first = false;
    }
    if (isSetStoragePolicy()) {
      if (!first) sb.append(", ");
      sb.append("storage_policy:");
      if (this.storage_policy == null) {
        sb.append("null");
      } else {
        sb.append(this.storage_policy);
      }
      first = false;
    }
    if (isSetResource()) {
      if (!first) sb.append(", ");
      sb.append("resource:");
      if (this.resource == null) {
        sb.append("null");
      } else {
        sb.append(this.resource);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("num_cores:");
    sb.append(this.num_cores);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pipeline_executor_size:");
    sb.append(this.pipeline_executor_size);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (backend == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'backend' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (backend != null) {
      backend.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TReportRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TReportRequestStandardScheme getScheme() {
      return new TReportRequestStandardScheme();
    }
  }

  private static class TReportRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TReportRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TReportRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BACKEND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.backend = new org.apache.doris.thrift.TBackend();
              struct.backend.read(iprot);
              struct.setBackendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPORT_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.report_version = iprot.readI64();
              struct.setReportVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map66 = iprot.readMapBegin();
                struct.tasks = new java.util.EnumMap<org.apache.doris.thrift.TTaskType,java.util.Set<java.lang.Long>>(org.apache.doris.thrift.TTaskType.class);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TTaskType _key67;
                @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Long> _val68;
                for (int _i69 = 0; _i69 < _map66.size; ++_i69)
                {
                  _key67 = org.apache.doris.thrift.TTaskType.findByValue(iprot.readI32());
                  {
                    org.apache.thrift.protocol.TSet _set70 = iprot.readSetBegin();
                    _val68 = new java.util.HashSet<java.lang.Long>(2*_set70.size);
                    long _elem71;
                    for (int _i72 = 0; _i72 < _set70.size; ++_i72)
                    {
                      _elem71 = iprot.readI64();
                      _val68.add(_elem71);
                    }
                    iprot.readSetEnd();
                  }
                  if (_key67 != null)
                  {
                    struct.tasks.put(_key67, _val68);
                  }
                }
                iprot.readMapEnd();
              }
              struct.setTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLETS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map73 = iprot.readMapBegin();
                struct.tablets = new java.util.HashMap<java.lang.Long,TTablet>(2*_map73.size);
                long _key74;
                @org.apache.thrift.annotation.Nullable TTablet _val75;
                for (int _i76 = 0; _i76 < _map73.size; ++_i76)
                {
                  _key74 = iprot.readI64();
                  _val75 = new TTablet();
                  _val75.read(iprot);
                  struct.tablets.put(_key74, _val75);
                }
                iprot.readMapEnd();
              }
              struct.setTabletsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISKS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map77 = iprot.readMapBegin();
                struct.disks = new java.util.HashMap<java.lang.String,TDisk>(2*_map77.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key78;
                @org.apache.thrift.annotation.Nullable TDisk _val79;
                for (int _i80 = 0; _i80 < _map77.size; ++_i80)
                {
                  _key78 = iprot.readString();
                  _val79 = new TDisk();
                  _val79.read(iprot);
                  struct.disks.put(_key78, _val79);
                }
                iprot.readMapEnd();
              }
              struct.setDisksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FORCE_RECOVERY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.force_recovery = iprot.readBool();
              struct.setForceRecoveryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TABLET_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list81 = iprot.readListBegin();
                struct.tablet_list = new java.util.ArrayList<TTablet>(_list81.size);
                @org.apache.thrift.annotation.Nullable TTablet _elem82;
                for (int _i83 = 0; _i83 < _list81.size; ++_i83)
                {
                  _elem82 = new TTablet();
                  _elem82.read(iprot);
                  struct.tablet_list.add(_elem82);
                }
                iprot.readListEnd();
              }
              struct.setTabletListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TABLET_MAX_COMPACTION_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_max_compaction_score = iprot.readI64();
              struct.setTabletMaxCompactionScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STORAGE_POLICY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list84 = iprot.readListBegin();
                struct.storage_policy = new java.util.ArrayList<org.apache.doris.thrift.TStoragePolicy>(_list84.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TStoragePolicy _elem85;
                for (int _i86 = 0; _i86 < _list84.size; ++_i86)
                {
                  _elem85 = new org.apache.doris.thrift.TStoragePolicy();
                  _elem85.read(iprot);
                  struct.storage_policy.add(_elem85);
                }
                iprot.readListEnd();
              }
              struct.setStoragePolicyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RESOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list87 = iprot.readListBegin();
                struct.resource = new java.util.ArrayList<org.apache.doris.thrift.TStorageResource>(_list87.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TStorageResource _elem88;
                for (int _i89 = 0; _i89 < _list87.size; ++_i89)
                {
                  _elem88 = new org.apache.doris.thrift.TStorageResource();
                  _elem88.read(iprot);
                  struct.resource.add(_elem88);
                }
                iprot.readListEnd();
              }
              struct.setResourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NUM_CORES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_cores = iprot.readI32();
              struct.setNumCoresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PIPELINE_EXECUTOR_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pipeline_executor_size = iprot.readI32();
              struct.setPipelineExecutorSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TReportRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.backend != null) {
        oprot.writeFieldBegin(BACKEND_FIELD_DESC);
        struct.backend.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReportVersion()) {
        oprot.writeFieldBegin(REPORT_VERSION_FIELD_DESC);
        oprot.writeI64(struct.report_version);
        oprot.writeFieldEnd();
      }
      if (struct.tasks != null) {
        if (struct.isSetTasks()) {
          oprot.writeFieldBegin(TASKS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, struct.tasks.size()));
            for (java.util.Map.Entry<org.apache.doris.thrift.TTaskType, java.util.Set<java.lang.Long>> _iter90 : struct.tasks.entrySet())
            {
              oprot.writeI32(_iter90.getKey().getValue());
              {
                oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, _iter90.getValue().size()));
                for (long _iter91 : _iter90.getValue())
                {
                  oprot.writeI64(_iter91);
                }
                oprot.writeSetEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tablets != null) {
        if (struct.isSetTablets()) {
          oprot.writeFieldBegin(TABLETS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.tablets.size()));
            for (java.util.Map.Entry<java.lang.Long, TTablet> _iter92 : struct.tablets.entrySet())
            {
              oprot.writeI64(_iter92.getKey());
              _iter92.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.disks != null) {
        if (struct.isSetDisks()) {
          oprot.writeFieldBegin(DISKS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.disks.size()));
            for (java.util.Map.Entry<java.lang.String, TDisk> _iter93 : struct.disks.entrySet())
            {
              oprot.writeString(_iter93.getKey());
              _iter93.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetForceRecovery()) {
        oprot.writeFieldBegin(FORCE_RECOVERY_FIELD_DESC);
        oprot.writeBool(struct.force_recovery);
        oprot.writeFieldEnd();
      }
      if (struct.tablet_list != null) {
        if (struct.isSetTabletList()) {
          oprot.writeFieldBegin(TABLET_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tablet_list.size()));
            for (TTablet _iter94 : struct.tablet_list)
            {
              _iter94.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTabletMaxCompactionScore()) {
        oprot.writeFieldBegin(TABLET_MAX_COMPACTION_SCORE_FIELD_DESC);
        oprot.writeI64(struct.tablet_max_compaction_score);
        oprot.writeFieldEnd();
      }
      if (struct.storage_policy != null) {
        if (struct.isSetStoragePolicy()) {
          oprot.writeFieldBegin(STORAGE_POLICY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.storage_policy.size()));
            for (org.apache.doris.thrift.TStoragePolicy _iter95 : struct.storage_policy)
            {
              _iter95.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.resource != null) {
        if (struct.isSetResource()) {
          oprot.writeFieldBegin(RESOURCE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.resource.size()));
            for (org.apache.doris.thrift.TStorageResource _iter96 : struct.resource)
            {
              _iter96.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(NUM_CORES_FIELD_DESC);
      oprot.writeI32(struct.num_cores);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PIPELINE_EXECUTOR_SIZE_FIELD_DESC);
      oprot.writeI32(struct.pipeline_executor_size);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TReportRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TReportRequestTupleScheme getScheme() {
      return new TReportRequestTupleScheme();
    }
  }

  private static class TReportRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TReportRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TReportRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.backend.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetReportVersion()) {
        optionals.set(0);
      }
      if (struct.isSetTasks()) {
        optionals.set(1);
      }
      if (struct.isSetTablets()) {
        optionals.set(2);
      }
      if (struct.isSetDisks()) {
        optionals.set(3);
      }
      if (struct.isSetForceRecovery()) {
        optionals.set(4);
      }
      if (struct.isSetTabletList()) {
        optionals.set(5);
      }
      if (struct.isSetTabletMaxCompactionScore()) {
        optionals.set(6);
      }
      if (struct.isSetStoragePolicy()) {
        optionals.set(7);
      }
      if (struct.isSetResource()) {
        optionals.set(8);
      }
      if (struct.isSetNumCores()) {
        optionals.set(9);
      }
      if (struct.isSetPipelineExecutorSize()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetReportVersion()) {
        oprot.writeI64(struct.report_version);
      }
      if (struct.isSetTasks()) {
        {
          oprot.writeI32(struct.tasks.size());
          for (java.util.Map.Entry<org.apache.doris.thrift.TTaskType, java.util.Set<java.lang.Long>> _iter97 : struct.tasks.entrySet())
          {
            oprot.writeI32(_iter97.getKey().getValue());
            {
              oprot.writeI32(_iter97.getValue().size());
              for (long _iter98 : _iter97.getValue())
              {
                oprot.writeI64(_iter98);
              }
            }
          }
        }
      }
      if (struct.isSetTablets()) {
        {
          oprot.writeI32(struct.tablets.size());
          for (java.util.Map.Entry<java.lang.Long, TTablet> _iter99 : struct.tablets.entrySet())
          {
            oprot.writeI64(_iter99.getKey());
            _iter99.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetDisks()) {
        {
          oprot.writeI32(struct.disks.size());
          for (java.util.Map.Entry<java.lang.String, TDisk> _iter100 : struct.disks.entrySet())
          {
            oprot.writeString(_iter100.getKey());
            _iter100.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetForceRecovery()) {
        oprot.writeBool(struct.force_recovery);
      }
      if (struct.isSetTabletList()) {
        {
          oprot.writeI32(struct.tablet_list.size());
          for (TTablet _iter101 : struct.tablet_list)
          {
            _iter101.write(oprot);
          }
        }
      }
      if (struct.isSetTabletMaxCompactionScore()) {
        oprot.writeI64(struct.tablet_max_compaction_score);
      }
      if (struct.isSetStoragePolicy()) {
        {
          oprot.writeI32(struct.storage_policy.size());
          for (org.apache.doris.thrift.TStoragePolicy _iter102 : struct.storage_policy)
          {
            _iter102.write(oprot);
          }
        }
      }
      if (struct.isSetResource()) {
        {
          oprot.writeI32(struct.resource.size());
          for (org.apache.doris.thrift.TStorageResource _iter103 : struct.resource)
          {
            _iter103.write(oprot);
          }
        }
      }
      if (struct.isSetNumCores()) {
        oprot.writeI32(struct.num_cores);
      }
      if (struct.isSetPipelineExecutorSize()) {
        oprot.writeI32(struct.pipeline_executor_size);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TReportRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.backend = new org.apache.doris.thrift.TBackend();
      struct.backend.read(iprot);
      struct.setBackendIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.report_version = iprot.readI64();
        struct.setReportVersionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map104 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET); 
          struct.tasks = new java.util.EnumMap<org.apache.doris.thrift.TTaskType,java.util.Set<java.lang.Long>>(org.apache.doris.thrift.TTaskType.class);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TTaskType _key105;
          @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Long> _val106;
          for (int _i107 = 0; _i107 < _map104.size; ++_i107)
          {
            _key105 = org.apache.doris.thrift.TTaskType.findByValue(iprot.readI32());
            {
              org.apache.thrift.protocol.TSet _set108 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I64);
              _val106 = new java.util.HashSet<java.lang.Long>(2*_set108.size);
              long _elem109;
              for (int _i110 = 0; _i110 < _set108.size; ++_i110)
              {
                _elem109 = iprot.readI64();
                _val106.add(_elem109);
              }
            }
            if (_key105 != null)
            {
              struct.tasks.put(_key105, _val106);
            }
          }
        }
        struct.setTasksIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map111 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT); 
          struct.tablets = new java.util.HashMap<java.lang.Long,TTablet>(2*_map111.size);
          long _key112;
          @org.apache.thrift.annotation.Nullable TTablet _val113;
          for (int _i114 = 0; _i114 < _map111.size; ++_i114)
          {
            _key112 = iprot.readI64();
            _val113 = new TTablet();
            _val113.read(iprot);
            struct.tablets.put(_key112, _val113);
          }
        }
        struct.setTabletsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map115 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT); 
          struct.disks = new java.util.HashMap<java.lang.String,TDisk>(2*_map115.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key116;
          @org.apache.thrift.annotation.Nullable TDisk _val117;
          for (int _i118 = 0; _i118 < _map115.size; ++_i118)
          {
            _key116 = iprot.readString();
            _val117 = new TDisk();
            _val117.read(iprot);
            struct.disks.put(_key116, _val117);
          }
        }
        struct.setDisksIsSet(true);
      }
      if (incoming.get(4)) {
        struct.force_recovery = iprot.readBool();
        struct.setForceRecoveryIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list119 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.tablet_list = new java.util.ArrayList<TTablet>(_list119.size);
          @org.apache.thrift.annotation.Nullable TTablet _elem120;
          for (int _i121 = 0; _i121 < _list119.size; ++_i121)
          {
            _elem120 = new TTablet();
            _elem120.read(iprot);
            struct.tablet_list.add(_elem120);
          }
        }
        struct.setTabletListIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tablet_max_compaction_score = iprot.readI64();
        struct.setTabletMaxCompactionScoreIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list122 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.storage_policy = new java.util.ArrayList<org.apache.doris.thrift.TStoragePolicy>(_list122.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TStoragePolicy _elem123;
          for (int _i124 = 0; _i124 < _list122.size; ++_i124)
          {
            _elem123 = new org.apache.doris.thrift.TStoragePolicy();
            _elem123.read(iprot);
            struct.storage_policy.add(_elem123);
          }
        }
        struct.setStoragePolicyIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list125 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.resource = new java.util.ArrayList<org.apache.doris.thrift.TStorageResource>(_list125.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TStorageResource _elem126;
          for (int _i127 = 0; _i127 < _list125.size; ++_i127)
          {
            _elem126 = new org.apache.doris.thrift.TStorageResource();
            _elem126.read(iprot);
            struct.resource.add(_elem126);
          }
        }
        struct.setResourceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.num_cores = iprot.readI32();
        struct.setNumCoresIsSet(true);
      }
      if (incoming.get(10)) {
        struct.pipeline_executor_size = iprot.readI32();
        struct.setPipelineExecutorSizeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

