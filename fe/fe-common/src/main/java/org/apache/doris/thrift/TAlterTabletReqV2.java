/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-07-19")
public class TAlterTabletReqV2 implements org.apache.thrift.TBase<TAlterTabletReqV2, TAlterTabletReqV2._Fields>, java.io.Serializable, Cloneable, Comparable<TAlterTabletReqV2> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAlterTabletReqV2");

  private static final org.apache.thrift.protocol.TField BASE_TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("base_tablet_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField NEW_TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("new_tablet_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField BASE_SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("base_schema_hash", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NEW_SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("new_schema_hash", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ALTER_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("alter_version", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField ALTER_VERSION_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("alter_version_hash", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField MATERIALIZED_VIEW_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("materialized_view_params", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField ALTER_TABLET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("alter_tablet_type", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField DESC_TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("desc_tbl", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField BE_EXEC_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("be_exec_version", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAlterTabletReqV2StandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAlterTabletReqV2TupleSchemeFactory();

  public long base_tablet_id; // required
  public long new_tablet_id; // required
  public int base_schema_hash; // required
  public int new_schema_hash; // required
  public long alter_version; // optional
  public long alter_version_hash; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TAlterMaterializedViewParam> materialized_view_params; // optional
  /**
   * 
   * @see TAlterTabletType
   */
  public @org.apache.thrift.annotation.Nullable TAlterTabletType alter_tablet_type; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TDescriptorTable desc_tbl; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TColumn> columns; // optional
  public int be_exec_version; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BASE_TABLET_ID((short)1, "base_tablet_id"),
    NEW_TABLET_ID((short)2, "new_tablet_id"),
    BASE_SCHEMA_HASH((short)3, "base_schema_hash"),
    NEW_SCHEMA_HASH((short)4, "new_schema_hash"),
    ALTER_VERSION((short)5, "alter_version"),
    ALTER_VERSION_HASH((short)6, "alter_version_hash"),
    MATERIALIZED_VIEW_PARAMS((short)7, "materialized_view_params"),
    /**
     * 
     * @see TAlterTabletType
     */
    ALTER_TABLET_TYPE((short)8, "alter_tablet_type"),
    DESC_TBL((short)9, "desc_tbl"),
    COLUMNS((short)10, "columns"),
    BE_EXEC_VERSION((short)11, "be_exec_version");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BASE_TABLET_ID
          return BASE_TABLET_ID;
        case 2: // NEW_TABLET_ID
          return NEW_TABLET_ID;
        case 3: // BASE_SCHEMA_HASH
          return BASE_SCHEMA_HASH;
        case 4: // NEW_SCHEMA_HASH
          return NEW_SCHEMA_HASH;
        case 5: // ALTER_VERSION
          return ALTER_VERSION;
        case 6: // ALTER_VERSION_HASH
          return ALTER_VERSION_HASH;
        case 7: // MATERIALIZED_VIEW_PARAMS
          return MATERIALIZED_VIEW_PARAMS;
        case 8: // ALTER_TABLET_TYPE
          return ALTER_TABLET_TYPE;
        case 9: // DESC_TBL
          return DESC_TBL;
        case 10: // COLUMNS
          return COLUMNS;
        case 11: // BE_EXEC_VERSION
          return BE_EXEC_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BASE_TABLET_ID_ISSET_ID = 0;
  private static final int __NEW_TABLET_ID_ISSET_ID = 1;
  private static final int __BASE_SCHEMA_HASH_ISSET_ID = 2;
  private static final int __NEW_SCHEMA_HASH_ISSET_ID = 3;
  private static final int __ALTER_VERSION_ISSET_ID = 4;
  private static final int __ALTER_VERSION_HASH_ISSET_ID = 5;
  private static final int __BE_EXEC_VERSION_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ALTER_VERSION,_Fields.ALTER_VERSION_HASH,_Fields.MATERIALIZED_VIEW_PARAMS,_Fields.ALTER_TABLET_TYPE,_Fields.DESC_TBL,_Fields.COLUMNS,_Fields.BE_EXEC_VERSION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BASE_TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("base_tablet_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTabletId")));
    tmpMap.put(_Fields.NEW_TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("new_tablet_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTabletId")));
    tmpMap.put(_Fields.BASE_SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("base_schema_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TSchemaHash")));
    tmpMap.put(_Fields.NEW_SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("new_schema_hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TSchemaHash")));
    tmpMap.put(_Fields.ALTER_VERSION, new org.apache.thrift.meta_data.FieldMetaData("alter_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersion")));
    tmpMap.put(_Fields.ALTER_VERSION_HASH, new org.apache.thrift.meta_data.FieldMetaData("alter_version_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TVersionHash")));
    tmpMap.put(_Fields.MATERIALIZED_VIEW_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("materialized_view_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterMaterializedViewParam.class))));
    tmpMap.put(_Fields.ALTER_TABLET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("alter_tablet_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TAlterTabletType.class)));
    tmpMap.put(_Fields.DESC_TBL, new org.apache.thrift.meta_data.FieldMetaData("desc_tbl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TDescriptorTable.class)));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TColumn.class))));
    tmpMap.put(_Fields.BE_EXEC_VERSION, new org.apache.thrift.meta_data.FieldMetaData("be_exec_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAlterTabletReqV2.class, metaDataMap);
  }

  public TAlterTabletReqV2() {
    this.alter_tablet_type = org.apache.doris.thrift.TAlterTabletType.SCHEMA_CHANGE;

    this.be_exec_version = 0;

  }

  public TAlterTabletReqV2(
    long base_tablet_id,
    long new_tablet_id,
    int base_schema_hash,
    int new_schema_hash)
  {
    this();
    this.base_tablet_id = base_tablet_id;
    setBaseTabletIdIsSet(true);
    this.new_tablet_id = new_tablet_id;
    setNewTabletIdIsSet(true);
    this.base_schema_hash = base_schema_hash;
    setBaseSchemaHashIsSet(true);
    this.new_schema_hash = new_schema_hash;
    setNewSchemaHashIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAlterTabletReqV2(TAlterTabletReqV2 other) {
    __isset_bitfield = other.__isset_bitfield;
    this.base_tablet_id = other.base_tablet_id;
    this.new_tablet_id = other.new_tablet_id;
    this.base_schema_hash = other.base_schema_hash;
    this.new_schema_hash = other.new_schema_hash;
    this.alter_version = other.alter_version;
    this.alter_version_hash = other.alter_version_hash;
    if (other.isSetMaterializedViewParams()) {
      java.util.List<TAlterMaterializedViewParam> __this__materialized_view_params = new java.util.ArrayList<TAlterMaterializedViewParam>(other.materialized_view_params.size());
      for (TAlterMaterializedViewParam other_element : other.materialized_view_params) {
        __this__materialized_view_params.add(new TAlterMaterializedViewParam(other_element));
      }
      this.materialized_view_params = __this__materialized_view_params;
    }
    if (other.isSetAlterTabletType()) {
      this.alter_tablet_type = other.alter_tablet_type;
    }
    if (other.isSetDescTbl()) {
      this.desc_tbl = new org.apache.doris.thrift.TDescriptorTable(other.desc_tbl);
    }
    if (other.isSetColumns()) {
      java.util.List<org.apache.doris.thrift.TColumn> __this__columns = new java.util.ArrayList<org.apache.doris.thrift.TColumn>(other.columns.size());
      for (org.apache.doris.thrift.TColumn other_element : other.columns) {
        __this__columns.add(new org.apache.doris.thrift.TColumn(other_element));
      }
      this.columns = __this__columns;
    }
    this.be_exec_version = other.be_exec_version;
  }

  @Override
  public TAlterTabletReqV2 deepCopy() {
    return new TAlterTabletReqV2(this);
  }

  @Override
  public void clear() {
    setBaseTabletIdIsSet(false);
    this.base_tablet_id = 0;
    setNewTabletIdIsSet(false);
    this.new_tablet_id = 0;
    setBaseSchemaHashIsSet(false);
    this.base_schema_hash = 0;
    setNewSchemaHashIsSet(false);
    this.new_schema_hash = 0;
    setAlterVersionIsSet(false);
    this.alter_version = 0;
    setAlterVersionHashIsSet(false);
    this.alter_version_hash = 0;
    this.materialized_view_params = null;
    this.alter_tablet_type = org.apache.doris.thrift.TAlterTabletType.SCHEMA_CHANGE;

    this.desc_tbl = null;
    this.columns = null;
    this.be_exec_version = 0;

  }

  public long getBaseTabletId() {
    return this.base_tablet_id;
  }

  public TAlterTabletReqV2 setBaseTabletId(long base_tablet_id) {
    this.base_tablet_id = base_tablet_id;
    setBaseTabletIdIsSet(true);
    return this;
  }

  public void unsetBaseTabletId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BASE_TABLET_ID_ISSET_ID);
  }

  /** Returns true if field base_tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseTabletId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BASE_TABLET_ID_ISSET_ID);
  }

  public void setBaseTabletIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BASE_TABLET_ID_ISSET_ID, value);
  }

  public long getNewTabletId() {
    return this.new_tablet_id;
  }

  public TAlterTabletReqV2 setNewTabletId(long new_tablet_id) {
    this.new_tablet_id = new_tablet_id;
    setNewTabletIdIsSet(true);
    return this;
  }

  public void unsetNewTabletId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEW_TABLET_ID_ISSET_ID);
  }

  /** Returns true if field new_tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetNewTabletId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEW_TABLET_ID_ISSET_ID);
  }

  public void setNewTabletIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEW_TABLET_ID_ISSET_ID, value);
  }

  public int getBaseSchemaHash() {
    return this.base_schema_hash;
  }

  public TAlterTabletReqV2 setBaseSchemaHash(int base_schema_hash) {
    this.base_schema_hash = base_schema_hash;
    setBaseSchemaHashIsSet(true);
    return this;
  }

  public void unsetBaseSchemaHash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BASE_SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field base_schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseSchemaHash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BASE_SCHEMA_HASH_ISSET_ID);
  }

  public void setBaseSchemaHashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BASE_SCHEMA_HASH_ISSET_ID, value);
  }

  public int getNewSchemaHash() {
    return this.new_schema_hash;
  }

  public TAlterTabletReqV2 setNewSchemaHash(int new_schema_hash) {
    this.new_schema_hash = new_schema_hash;
    setNewSchemaHashIsSet(true);
    return this;
  }

  public void unsetNewSchemaHash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEW_SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field new_schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetNewSchemaHash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEW_SCHEMA_HASH_ISSET_ID);
  }

  public void setNewSchemaHashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEW_SCHEMA_HASH_ISSET_ID, value);
  }

  public long getAlterVersion() {
    return this.alter_version;
  }

  public TAlterTabletReqV2 setAlterVersion(long alter_version) {
    this.alter_version = alter_version;
    setAlterVersionIsSet(true);
    return this;
  }

  public void unsetAlterVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALTER_VERSION_ISSET_ID);
  }

  /** Returns true if field alter_version is set (has been assigned a value) and false otherwise */
  public boolean isSetAlterVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALTER_VERSION_ISSET_ID);
  }

  public void setAlterVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALTER_VERSION_ISSET_ID, value);
  }

  public long getAlterVersionHash() {
    return this.alter_version_hash;
  }

  public TAlterTabletReqV2 setAlterVersionHash(long alter_version_hash) {
    this.alter_version_hash = alter_version_hash;
    setAlterVersionHashIsSet(true);
    return this;
  }

  public void unsetAlterVersionHash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALTER_VERSION_HASH_ISSET_ID);
  }

  /** Returns true if field alter_version_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetAlterVersionHash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALTER_VERSION_HASH_ISSET_ID);
  }

  public void setAlterVersionHashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALTER_VERSION_HASH_ISSET_ID, value);
  }

  public int getMaterializedViewParamsSize() {
    return (this.materialized_view_params == null) ? 0 : this.materialized_view_params.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TAlterMaterializedViewParam> getMaterializedViewParamsIterator() {
    return (this.materialized_view_params == null) ? null : this.materialized_view_params.iterator();
  }

  public void addToMaterializedViewParams(TAlterMaterializedViewParam elem) {
    if (this.materialized_view_params == null) {
      this.materialized_view_params = new java.util.ArrayList<TAlterMaterializedViewParam>();
    }
    this.materialized_view_params.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TAlterMaterializedViewParam> getMaterializedViewParams() {
    return this.materialized_view_params;
  }

  public TAlterTabletReqV2 setMaterializedViewParams(@org.apache.thrift.annotation.Nullable java.util.List<TAlterMaterializedViewParam> materialized_view_params) {
    this.materialized_view_params = materialized_view_params;
    return this;
  }

  public void unsetMaterializedViewParams() {
    this.materialized_view_params = null;
  }

  /** Returns true if field materialized_view_params is set (has been assigned a value) and false otherwise */
  public boolean isSetMaterializedViewParams() {
    return this.materialized_view_params != null;
  }

  public void setMaterializedViewParamsIsSet(boolean value) {
    if (!value) {
      this.materialized_view_params = null;
    }
  }

  /**
   * 
   * @see TAlterTabletType
   */
  @org.apache.thrift.annotation.Nullable
  public TAlterTabletType getAlterTabletType() {
    return this.alter_tablet_type;
  }

  /**
   * 
   * @see TAlterTabletType
   */
  public TAlterTabletReqV2 setAlterTabletType(@org.apache.thrift.annotation.Nullable TAlterTabletType alter_tablet_type) {
    this.alter_tablet_type = alter_tablet_type;
    return this;
  }

  public void unsetAlterTabletType() {
    this.alter_tablet_type = null;
  }

  /** Returns true if field alter_tablet_type is set (has been assigned a value) and false otherwise */
  public boolean isSetAlterTabletType() {
    return this.alter_tablet_type != null;
  }

  public void setAlterTabletTypeIsSet(boolean value) {
    if (!value) {
      this.alter_tablet_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TDescriptorTable getDescTbl() {
    return this.desc_tbl;
  }

  public TAlterTabletReqV2 setDescTbl(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TDescriptorTable desc_tbl) {
    this.desc_tbl = desc_tbl;
    return this;
  }

  public void unsetDescTbl() {
    this.desc_tbl = null;
  }

  /** Returns true if field desc_tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetDescTbl() {
    return this.desc_tbl != null;
  }

  public void setDescTblIsSet(boolean value) {
    if (!value) {
      this.desc_tbl = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TColumn> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(org.apache.doris.thrift.TColumn elem) {
    if (this.columns == null) {
      this.columns = new java.util.ArrayList<org.apache.doris.thrift.TColumn>();
    }
    this.columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TColumn> getColumns() {
    return this.columns;
  }

  public TAlterTabletReqV2 setColumns(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TColumn> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public int getBeExecVersion() {
    return this.be_exec_version;
  }

  public TAlterTabletReqV2 setBeExecVersion(int be_exec_version) {
    this.be_exec_version = be_exec_version;
    setBeExecVersionIsSet(true);
    return this;
  }

  public void unsetBeExecVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BE_EXEC_VERSION_ISSET_ID);
  }

  /** Returns true if field be_exec_version is set (has been assigned a value) and false otherwise */
  public boolean isSetBeExecVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BE_EXEC_VERSION_ISSET_ID);
  }

  public void setBeExecVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BE_EXEC_VERSION_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case BASE_TABLET_ID:
      if (value == null) {
        unsetBaseTabletId();
      } else {
        setBaseTabletId((java.lang.Long)value);
      }
      break;

    case NEW_TABLET_ID:
      if (value == null) {
        unsetNewTabletId();
      } else {
        setNewTabletId((java.lang.Long)value);
      }
      break;

    case BASE_SCHEMA_HASH:
      if (value == null) {
        unsetBaseSchemaHash();
      } else {
        setBaseSchemaHash((java.lang.Integer)value);
      }
      break;

    case NEW_SCHEMA_HASH:
      if (value == null) {
        unsetNewSchemaHash();
      } else {
        setNewSchemaHash((java.lang.Integer)value);
      }
      break;

    case ALTER_VERSION:
      if (value == null) {
        unsetAlterVersion();
      } else {
        setAlterVersion((java.lang.Long)value);
      }
      break;

    case ALTER_VERSION_HASH:
      if (value == null) {
        unsetAlterVersionHash();
      } else {
        setAlterVersionHash((java.lang.Long)value);
      }
      break;

    case MATERIALIZED_VIEW_PARAMS:
      if (value == null) {
        unsetMaterializedViewParams();
      } else {
        setMaterializedViewParams((java.util.List<TAlterMaterializedViewParam>)value);
      }
      break;

    case ALTER_TABLET_TYPE:
      if (value == null) {
        unsetAlterTabletType();
      } else {
        setAlterTabletType((TAlterTabletType)value);
      }
      break;

    case DESC_TBL:
      if (value == null) {
        unsetDescTbl();
      } else {
        setDescTbl((org.apache.doris.thrift.TDescriptorTable)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((java.util.List<org.apache.doris.thrift.TColumn>)value);
      }
      break;

    case BE_EXEC_VERSION:
      if (value == null) {
        unsetBeExecVersion();
      } else {
        setBeExecVersion((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BASE_TABLET_ID:
      return getBaseTabletId();

    case NEW_TABLET_ID:
      return getNewTabletId();

    case BASE_SCHEMA_HASH:
      return getBaseSchemaHash();

    case NEW_SCHEMA_HASH:
      return getNewSchemaHash();

    case ALTER_VERSION:
      return getAlterVersion();

    case ALTER_VERSION_HASH:
      return getAlterVersionHash();

    case MATERIALIZED_VIEW_PARAMS:
      return getMaterializedViewParams();

    case ALTER_TABLET_TYPE:
      return getAlterTabletType();

    case DESC_TBL:
      return getDescTbl();

    case COLUMNS:
      return getColumns();

    case BE_EXEC_VERSION:
      return getBeExecVersion();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BASE_TABLET_ID:
      return isSetBaseTabletId();
    case NEW_TABLET_ID:
      return isSetNewTabletId();
    case BASE_SCHEMA_HASH:
      return isSetBaseSchemaHash();
    case NEW_SCHEMA_HASH:
      return isSetNewSchemaHash();
    case ALTER_VERSION:
      return isSetAlterVersion();
    case ALTER_VERSION_HASH:
      return isSetAlterVersionHash();
    case MATERIALIZED_VIEW_PARAMS:
      return isSetMaterializedViewParams();
    case ALTER_TABLET_TYPE:
      return isSetAlterTabletType();
    case DESC_TBL:
      return isSetDescTbl();
    case COLUMNS:
      return isSetColumns();
    case BE_EXEC_VERSION:
      return isSetBeExecVersion();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TAlterTabletReqV2)
      return this.equals((TAlterTabletReqV2)that);
    return false;
  }

  public boolean equals(TAlterTabletReqV2 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_base_tablet_id = true;
    boolean that_present_base_tablet_id = true;
    if (this_present_base_tablet_id || that_present_base_tablet_id) {
      if (!(this_present_base_tablet_id && that_present_base_tablet_id))
        return false;
      if (this.base_tablet_id != that.base_tablet_id)
        return false;
    }

    boolean this_present_new_tablet_id = true;
    boolean that_present_new_tablet_id = true;
    if (this_present_new_tablet_id || that_present_new_tablet_id) {
      if (!(this_present_new_tablet_id && that_present_new_tablet_id))
        return false;
      if (this.new_tablet_id != that.new_tablet_id)
        return false;
    }

    boolean this_present_base_schema_hash = true;
    boolean that_present_base_schema_hash = true;
    if (this_present_base_schema_hash || that_present_base_schema_hash) {
      if (!(this_present_base_schema_hash && that_present_base_schema_hash))
        return false;
      if (this.base_schema_hash != that.base_schema_hash)
        return false;
    }

    boolean this_present_new_schema_hash = true;
    boolean that_present_new_schema_hash = true;
    if (this_present_new_schema_hash || that_present_new_schema_hash) {
      if (!(this_present_new_schema_hash && that_present_new_schema_hash))
        return false;
      if (this.new_schema_hash != that.new_schema_hash)
        return false;
    }

    boolean this_present_alter_version = true && this.isSetAlterVersion();
    boolean that_present_alter_version = true && that.isSetAlterVersion();
    if (this_present_alter_version || that_present_alter_version) {
      if (!(this_present_alter_version && that_present_alter_version))
        return false;
      if (this.alter_version != that.alter_version)
        return false;
    }

    boolean this_present_alter_version_hash = true && this.isSetAlterVersionHash();
    boolean that_present_alter_version_hash = true && that.isSetAlterVersionHash();
    if (this_present_alter_version_hash || that_present_alter_version_hash) {
      if (!(this_present_alter_version_hash && that_present_alter_version_hash))
        return false;
      if (this.alter_version_hash != that.alter_version_hash)
        return false;
    }

    boolean this_present_materialized_view_params = true && this.isSetMaterializedViewParams();
    boolean that_present_materialized_view_params = true && that.isSetMaterializedViewParams();
    if (this_present_materialized_view_params || that_present_materialized_view_params) {
      if (!(this_present_materialized_view_params && that_present_materialized_view_params))
        return false;
      if (!this.materialized_view_params.equals(that.materialized_view_params))
        return false;
    }

    boolean this_present_alter_tablet_type = true && this.isSetAlterTabletType();
    boolean that_present_alter_tablet_type = true && that.isSetAlterTabletType();
    if (this_present_alter_tablet_type || that_present_alter_tablet_type) {
      if (!(this_present_alter_tablet_type && that_present_alter_tablet_type))
        return false;
      if (!this.alter_tablet_type.equals(that.alter_tablet_type))
        return false;
    }

    boolean this_present_desc_tbl = true && this.isSetDescTbl();
    boolean that_present_desc_tbl = true && that.isSetDescTbl();
    if (this_present_desc_tbl || that_present_desc_tbl) {
      if (!(this_present_desc_tbl && that_present_desc_tbl))
        return false;
      if (!this.desc_tbl.equals(that.desc_tbl))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_be_exec_version = true && this.isSetBeExecVersion();
    boolean that_present_be_exec_version = true && that.isSetBeExecVersion();
    if (this_present_be_exec_version || that_present_be_exec_version) {
      if (!(this_present_be_exec_version && that_present_be_exec_version))
        return false;
      if (this.be_exec_version != that.be_exec_version)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(base_tablet_id);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(new_tablet_id);

    hashCode = hashCode * 8191 + base_schema_hash;

    hashCode = hashCode * 8191 + new_schema_hash;

    hashCode = hashCode * 8191 + ((isSetAlterVersion()) ? 131071 : 524287);
    if (isSetAlterVersion())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(alter_version);

    hashCode = hashCode * 8191 + ((isSetAlterVersionHash()) ? 131071 : 524287);
    if (isSetAlterVersionHash())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(alter_version_hash);

    hashCode = hashCode * 8191 + ((isSetMaterializedViewParams()) ? 131071 : 524287);
    if (isSetMaterializedViewParams())
      hashCode = hashCode * 8191 + materialized_view_params.hashCode();

    hashCode = hashCode * 8191 + ((isSetAlterTabletType()) ? 131071 : 524287);
    if (isSetAlterTabletType())
      hashCode = hashCode * 8191 + alter_tablet_type.getValue();

    hashCode = hashCode * 8191 + ((isSetDescTbl()) ? 131071 : 524287);
    if (isSetDescTbl())
      hashCode = hashCode * 8191 + desc_tbl.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumns()) ? 131071 : 524287);
    if (isSetColumns())
      hashCode = hashCode * 8191 + columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetBeExecVersion()) ? 131071 : 524287);
    if (isSetBeExecVersion())
      hashCode = hashCode * 8191 + be_exec_version;

    return hashCode;
  }

  @Override
  public int compareTo(TAlterTabletReqV2 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetBaseTabletId(), other.isSetBaseTabletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseTabletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base_tablet_id, other.base_tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNewTabletId(), other.isSetNewTabletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewTabletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.new_tablet_id, other.new_tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBaseSchemaHash(), other.isSetBaseSchemaHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseSchemaHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base_schema_hash, other.base_schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNewSchemaHash(), other.isSetNewSchemaHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewSchemaHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.new_schema_hash, other.new_schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAlterVersion(), other.isSetAlterVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlterVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alter_version, other.alter_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAlterVersionHash(), other.isSetAlterVersionHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlterVersionHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alter_version_hash, other.alter_version_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaterializedViewParams(), other.isSetMaterializedViewParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaterializedViewParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.materialized_view_params, other.materialized_view_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAlterTabletType(), other.isSetAlterTabletType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlterTabletType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alter_tablet_type, other.alter_tablet_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDescTbl(), other.isSetDescTbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescTbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc_tbl, other.desc_tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumns(), other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBeExecVersion(), other.isSetBeExecVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeExecVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.be_exec_version, other.be_exec_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TAlterTabletReqV2(");
    boolean first = true;

    sb.append("base_tablet_id:");
    sb.append(this.base_tablet_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("new_tablet_id:");
    sb.append(this.new_tablet_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("base_schema_hash:");
    sb.append(this.base_schema_hash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("new_schema_hash:");
    sb.append(this.new_schema_hash);
    first = false;
    if (isSetAlterVersion()) {
      if (!first) sb.append(", ");
      sb.append("alter_version:");
      sb.append(this.alter_version);
      first = false;
    }
    if (isSetAlterVersionHash()) {
      if (!first) sb.append(", ");
      sb.append("alter_version_hash:");
      sb.append(this.alter_version_hash);
      first = false;
    }
    if (isSetMaterializedViewParams()) {
      if (!first) sb.append(", ");
      sb.append("materialized_view_params:");
      if (this.materialized_view_params == null) {
        sb.append("null");
      } else {
        sb.append(this.materialized_view_params);
      }
      first = false;
    }
    if (isSetAlterTabletType()) {
      if (!first) sb.append(", ");
      sb.append("alter_tablet_type:");
      if (this.alter_tablet_type == null) {
        sb.append("null");
      } else {
        sb.append(this.alter_tablet_type);
      }
      first = false;
    }
    if (isSetDescTbl()) {
      if (!first) sb.append(", ");
      sb.append("desc_tbl:");
      if (this.desc_tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.desc_tbl);
      }
      first = false;
    }
    if (isSetColumns()) {
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
    }
    if (isSetBeExecVersion()) {
      if (!first) sb.append(", ");
      sb.append("be_exec_version:");
      sb.append(this.be_exec_version);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'base_tablet_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'new_tablet_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'base_schema_hash' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'new_schema_hash' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (desc_tbl != null) {
      desc_tbl.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAlterTabletReqV2StandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAlterTabletReqV2StandardScheme getScheme() {
      return new TAlterTabletReqV2StandardScheme();
    }
  }

  private static class TAlterTabletReqV2StandardScheme extends org.apache.thrift.scheme.StandardScheme<TAlterTabletReqV2> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TAlterTabletReqV2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BASE_TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.base_tablet_id = iprot.readI64();
              struct.setBaseTabletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEW_TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.new_tablet_id = iprot.readI64();
              struct.setNewTabletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BASE_SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.base_schema_hash = iprot.readI32();
              struct.setBaseSchemaHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NEW_SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.new_schema_hash = iprot.readI32();
              struct.setNewSchemaHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALTER_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.alter_version = iprot.readI64();
              struct.setAlterVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ALTER_VERSION_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.alter_version_hash = iprot.readI64();
              struct.setAlterVersionHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MATERIALIZED_VIEW_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.materialized_view_params = new java.util.ArrayList<TAlterMaterializedViewParam>(_list40.size);
                @org.apache.thrift.annotation.Nullable TAlterMaterializedViewParam _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new TAlterMaterializedViewParam();
                  _elem41.read(iprot);
                  struct.materialized_view_params.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setMaterializedViewParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ALTER_TABLET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.alter_tablet_type = org.apache.doris.thrift.TAlterTabletType.findByValue(iprot.readI32());
              struct.setAlterTabletTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DESC_TBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.desc_tbl = new org.apache.doris.thrift.TDescriptorTable();
              struct.desc_tbl.read(iprot);
              struct.setDescTblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.columns = new java.util.ArrayList<org.apache.doris.thrift.TColumn>(_list43.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TColumn _elem44;
                for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                {
                  _elem44 = new org.apache.doris.thrift.TColumn();
                  _elem44.read(iprot);
                  struct.columns.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BE_EXEC_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.be_exec_version = iprot.readI32();
              struct.setBeExecVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBaseTabletId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'base_tablet_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNewTabletId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'new_tablet_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBaseSchemaHash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'base_schema_hash' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNewSchemaHash()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'new_schema_hash' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TAlterTabletReqV2 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BASE_TABLET_ID_FIELD_DESC);
      oprot.writeI64(struct.base_tablet_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEW_TABLET_ID_FIELD_DESC);
      oprot.writeI64(struct.new_tablet_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BASE_SCHEMA_HASH_FIELD_DESC);
      oprot.writeI32(struct.base_schema_hash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEW_SCHEMA_HASH_FIELD_DESC);
      oprot.writeI32(struct.new_schema_hash);
      oprot.writeFieldEnd();
      if (struct.isSetAlterVersion()) {
        oprot.writeFieldBegin(ALTER_VERSION_FIELD_DESC);
        oprot.writeI64(struct.alter_version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAlterVersionHash()) {
        oprot.writeFieldBegin(ALTER_VERSION_HASH_FIELD_DESC);
        oprot.writeI64(struct.alter_version_hash);
        oprot.writeFieldEnd();
      }
      if (struct.materialized_view_params != null) {
        if (struct.isSetMaterializedViewParams()) {
          oprot.writeFieldBegin(MATERIALIZED_VIEW_PARAMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.materialized_view_params.size()));
            for (TAlterMaterializedViewParam _iter46 : struct.materialized_view_params)
            {
              _iter46.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.alter_tablet_type != null) {
        if (struct.isSetAlterTabletType()) {
          oprot.writeFieldBegin(ALTER_TABLET_TYPE_FIELD_DESC);
          oprot.writeI32(struct.alter_tablet_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc_tbl != null) {
        if (struct.isSetDescTbl()) {
          oprot.writeFieldBegin(DESC_TBL_FIELD_DESC);
          struct.desc_tbl.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.columns != null) {
        if (struct.isSetColumns()) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
            for (org.apache.doris.thrift.TColumn _iter47 : struct.columns)
            {
              _iter47.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBeExecVersion()) {
        oprot.writeFieldBegin(BE_EXEC_VERSION_FIELD_DESC);
        oprot.writeI32(struct.be_exec_version);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAlterTabletReqV2TupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAlterTabletReqV2TupleScheme getScheme() {
      return new TAlterTabletReqV2TupleScheme();
    }
  }

  private static class TAlterTabletReqV2TupleScheme extends org.apache.thrift.scheme.TupleScheme<TAlterTabletReqV2> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAlterTabletReqV2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.base_tablet_id);
      oprot.writeI64(struct.new_tablet_id);
      oprot.writeI32(struct.base_schema_hash);
      oprot.writeI32(struct.new_schema_hash);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAlterVersion()) {
        optionals.set(0);
      }
      if (struct.isSetAlterVersionHash()) {
        optionals.set(1);
      }
      if (struct.isSetMaterializedViewParams()) {
        optionals.set(2);
      }
      if (struct.isSetAlterTabletType()) {
        optionals.set(3);
      }
      if (struct.isSetDescTbl()) {
        optionals.set(4);
      }
      if (struct.isSetColumns()) {
        optionals.set(5);
      }
      if (struct.isSetBeExecVersion()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetAlterVersion()) {
        oprot.writeI64(struct.alter_version);
      }
      if (struct.isSetAlterVersionHash()) {
        oprot.writeI64(struct.alter_version_hash);
      }
      if (struct.isSetMaterializedViewParams()) {
        {
          oprot.writeI32(struct.materialized_view_params.size());
          for (TAlterMaterializedViewParam _iter48 : struct.materialized_view_params)
          {
            _iter48.write(oprot);
          }
        }
      }
      if (struct.isSetAlterTabletType()) {
        oprot.writeI32(struct.alter_tablet_type.getValue());
      }
      if (struct.isSetDescTbl()) {
        struct.desc_tbl.write(oprot);
      }
      if (struct.isSetColumns()) {
        {
          oprot.writeI32(struct.columns.size());
          for (org.apache.doris.thrift.TColumn _iter49 : struct.columns)
          {
            _iter49.write(oprot);
          }
        }
      }
      if (struct.isSetBeExecVersion()) {
        oprot.writeI32(struct.be_exec_version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAlterTabletReqV2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.base_tablet_id = iprot.readI64();
      struct.setBaseTabletIdIsSet(true);
      struct.new_tablet_id = iprot.readI64();
      struct.setNewTabletIdIsSet(true);
      struct.base_schema_hash = iprot.readI32();
      struct.setBaseSchemaHashIsSet(true);
      struct.new_schema_hash = iprot.readI32();
      struct.setNewSchemaHashIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.alter_version = iprot.readI64();
        struct.setAlterVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.alter_version_hash = iprot.readI64();
        struct.setAlterVersionHashIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list50 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.materialized_view_params = new java.util.ArrayList<TAlterMaterializedViewParam>(_list50.size);
          @org.apache.thrift.annotation.Nullable TAlterMaterializedViewParam _elem51;
          for (int _i52 = 0; _i52 < _list50.size; ++_i52)
          {
            _elem51 = new TAlterMaterializedViewParam();
            _elem51.read(iprot);
            struct.materialized_view_params.add(_elem51);
          }
        }
        struct.setMaterializedViewParamsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.alter_tablet_type = org.apache.doris.thrift.TAlterTabletType.findByValue(iprot.readI32());
        struct.setAlterTabletTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.desc_tbl = new org.apache.doris.thrift.TDescriptorTable();
        struct.desc_tbl.read(iprot);
        struct.setDescTblIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list53 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.columns = new java.util.ArrayList<org.apache.doris.thrift.TColumn>(_list53.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TColumn _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new org.apache.doris.thrift.TColumn();
            _elem54.read(iprot);
            struct.columns.add(_elem54);
          }
        }
        struct.setColumnsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.be_exec_version = iprot.readI32();
        struct.setBeExecVersionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

