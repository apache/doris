/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-06-20")
public class TOlapScanNode implements org.apache.thrift.TBase<TOlapScanNode, TOlapScanNode._Fields>, java.io.Serializable, Cloneable, Comparable<TOlapScanNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TOlapScanNode");

  private static final org.apache.thrift.protocol.TField TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("key_column_name", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField KEY_COLUMN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("key_column_type", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField IS_PREAGGREGATION_FIELD_DESC = new org.apache.thrift.protocol.TField("is_preaggregation", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField SORT_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_column", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField KEY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("keyType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField COLUMNS_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("columns_desc", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField SORT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_info", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField SORT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_limit", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField ENABLE_UNIQUE_KEY_MERGE_ON_WRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_unique_key_merge_on_write", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField PUSH_DOWN_AGG_TYPE_OPT_FIELD_DESC = new org.apache.thrift.protocol.TField("push_down_agg_type_opt", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField USE_TOPN_OPT_FIELD_DESC = new org.apache.thrift.protocol.TField("use_topn_opt", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField INDEXES_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("indexes_desc", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField OUTPUT_COLUMN_UNIQUE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("output_column_unique_ids", org.apache.thrift.protocol.TType.SET, (short)15);
  private static final org.apache.thrift.protocol.TField DISTRIBUTE_COLUMN_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("distribute_column_ids", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField SCHEMA_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_version", org.apache.thrift.protocol.TType.I32, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TOlapScanNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TOlapScanNodeTupleSchemeFactory();

  public int tuple_id; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> key_column_name; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TPrimitiveType> key_column_type; // required
  public boolean is_preaggregation; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String sort_column; // optional
  /**
   * 
   * @see org.apache.doris.thrift.TKeysType
   */
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TKeysType keyType; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TColumn> columns_desc; // optional
  public @org.apache.thrift.annotation.Nullable TSortInfo sort_info; // optional
  public long sort_limit; // optional
  public boolean enable_unique_key_merge_on_write; // optional
  /**
   * 
   * @see TPushAggOp
   */
  public @org.apache.thrift.annotation.Nullable TPushAggOp push_down_agg_type_opt; // optional
  public boolean use_topn_opt; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TOlapTableIndex> indexes_desc; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> output_column_unique_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> distribute_column_ids; // optional
  public int schema_version; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TUPLE_ID((short)1, "tuple_id"),
    KEY_COLUMN_NAME((short)2, "key_column_name"),
    KEY_COLUMN_TYPE((short)3, "key_column_type"),
    IS_PREAGGREGATION((short)4, "is_preaggregation"),
    SORT_COLUMN((short)5, "sort_column"),
    /**
     * 
     * @see org.apache.doris.thrift.TKeysType
     */
    KEY_TYPE((short)6, "keyType"),
    TABLE_NAME((short)7, "table_name"),
    COLUMNS_DESC((short)8, "columns_desc"),
    SORT_INFO((short)9, "sort_info"),
    SORT_LIMIT((short)10, "sort_limit"),
    ENABLE_UNIQUE_KEY_MERGE_ON_WRITE((short)11, "enable_unique_key_merge_on_write"),
    /**
     * 
     * @see TPushAggOp
     */
    PUSH_DOWN_AGG_TYPE_OPT((short)12, "push_down_agg_type_opt"),
    USE_TOPN_OPT((short)13, "use_topn_opt"),
    INDEXES_DESC((short)14, "indexes_desc"),
    OUTPUT_COLUMN_UNIQUE_IDS((short)15, "output_column_unique_ids"),
    DISTRIBUTE_COLUMN_IDS((short)16, "distribute_column_ids"),
    SCHEMA_VERSION((short)17, "schema_version");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TUPLE_ID
          return TUPLE_ID;
        case 2: // KEY_COLUMN_NAME
          return KEY_COLUMN_NAME;
        case 3: // KEY_COLUMN_TYPE
          return KEY_COLUMN_TYPE;
        case 4: // IS_PREAGGREGATION
          return IS_PREAGGREGATION;
        case 5: // SORT_COLUMN
          return SORT_COLUMN;
        case 6: // KEY_TYPE
          return KEY_TYPE;
        case 7: // TABLE_NAME
          return TABLE_NAME;
        case 8: // COLUMNS_DESC
          return COLUMNS_DESC;
        case 9: // SORT_INFO
          return SORT_INFO;
        case 10: // SORT_LIMIT
          return SORT_LIMIT;
        case 11: // ENABLE_UNIQUE_KEY_MERGE_ON_WRITE
          return ENABLE_UNIQUE_KEY_MERGE_ON_WRITE;
        case 12: // PUSH_DOWN_AGG_TYPE_OPT
          return PUSH_DOWN_AGG_TYPE_OPT;
        case 13: // USE_TOPN_OPT
          return USE_TOPN_OPT;
        case 14: // INDEXES_DESC
          return INDEXES_DESC;
        case 15: // OUTPUT_COLUMN_UNIQUE_IDS
          return OUTPUT_COLUMN_UNIQUE_IDS;
        case 16: // DISTRIBUTE_COLUMN_IDS
          return DISTRIBUTE_COLUMN_IDS;
        case 17: // SCHEMA_VERSION
          return SCHEMA_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TUPLE_ID_ISSET_ID = 0;
  private static final int __IS_PREAGGREGATION_ISSET_ID = 1;
  private static final int __SORT_LIMIT_ISSET_ID = 2;
  private static final int __ENABLE_UNIQUE_KEY_MERGE_ON_WRITE_ISSET_ID = 3;
  private static final int __USE_TOPN_OPT_ISSET_ID = 4;
  private static final int __SCHEMA_VERSION_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SORT_COLUMN,_Fields.KEY_TYPE,_Fields.TABLE_NAME,_Fields.COLUMNS_DESC,_Fields.SORT_INFO,_Fields.SORT_LIMIT,_Fields.ENABLE_UNIQUE_KEY_MERGE_ON_WRITE,_Fields.PUSH_DOWN_AGG_TYPE_OPT,_Fields.USE_TOPN_OPT,_Fields.INDEXES_DESC,_Fields.OUTPUT_COLUMN_UNIQUE_IDS,_Fields.DISTRIBUTE_COLUMN_IDS,_Fields.SCHEMA_VERSION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.KEY_COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("key_column_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.KEY_COLUMN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("key_column_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.doris.thrift.TPrimitiveType.class))));
    tmpMap.put(_Fields.IS_PREAGGREGATION, new org.apache.thrift.meta_data.FieldMetaData("is_preaggregation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SORT_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("sort_column", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("keyType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.doris.thrift.TKeysType.class)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMNS_DESC, new org.apache.thrift.meta_data.FieldMetaData("columns_desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TColumn.class))));
    tmpMap.put(_Fields.SORT_INFO, new org.apache.thrift.meta_data.FieldMetaData("sort_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSortInfo.class)));
    tmpMap.put(_Fields.SORT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("sort_limit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENABLE_UNIQUE_KEY_MERGE_ON_WRITE, new org.apache.thrift.meta_data.FieldMetaData("enable_unique_key_merge_on_write", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PUSH_DOWN_AGG_TYPE_OPT, new org.apache.thrift.meta_data.FieldMetaData("push_down_agg_type_opt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPushAggOp.class)));
    tmpMap.put(_Fields.USE_TOPN_OPT, new org.apache.thrift.meta_data.FieldMetaData("use_topn_opt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INDEXES_DESC, new org.apache.thrift.meta_data.FieldMetaData("indexes_desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TOlapTableIndex.class))));
    tmpMap.put(_Fields.OUTPUT_COLUMN_UNIQUE_IDS, new org.apache.thrift.meta_data.FieldMetaData("output_column_unique_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DISTRIBUTE_COLUMN_IDS, new org.apache.thrift.meta_data.FieldMetaData("distribute_column_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SCHEMA_VERSION, new org.apache.thrift.meta_data.FieldMetaData("schema_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TOlapScanNode.class, metaDataMap);
  }

  public TOlapScanNode() {
  }

  public TOlapScanNode(
    int tuple_id,
    java.util.List<java.lang.String> key_column_name,
    java.util.List<org.apache.doris.thrift.TPrimitiveType> key_column_type,
    boolean is_preaggregation)
  {
    this();
    this.tuple_id = tuple_id;
    setTupleIdIsSet(true);
    this.key_column_name = key_column_name;
    this.key_column_type = key_column_type;
    this.is_preaggregation = is_preaggregation;
    setIsPreaggregationIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TOlapScanNode(TOlapScanNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tuple_id = other.tuple_id;
    if (other.isSetKeyColumnName()) {
      java.util.List<java.lang.String> __this__key_column_name = new java.util.ArrayList<java.lang.String>(other.key_column_name);
      this.key_column_name = __this__key_column_name;
    }
    if (other.isSetKeyColumnType()) {
      java.util.List<org.apache.doris.thrift.TPrimitiveType> __this__key_column_type = new java.util.ArrayList<org.apache.doris.thrift.TPrimitiveType>(other.key_column_type.size());
      for (org.apache.doris.thrift.TPrimitiveType other_element : other.key_column_type) {
        __this__key_column_type.add(other_element);
      }
      this.key_column_type = __this__key_column_type;
    }
    this.is_preaggregation = other.is_preaggregation;
    if (other.isSetSortColumn()) {
      this.sort_column = other.sort_column;
    }
    if (other.isSetKeyType()) {
      this.keyType = other.keyType;
    }
    if (other.isSetTableName()) {
      this.table_name = other.table_name;
    }
    if (other.isSetColumnsDesc()) {
      java.util.List<org.apache.doris.thrift.TColumn> __this__columns_desc = new java.util.ArrayList<org.apache.doris.thrift.TColumn>(other.columns_desc.size());
      for (org.apache.doris.thrift.TColumn other_element : other.columns_desc) {
        __this__columns_desc.add(new org.apache.doris.thrift.TColumn(other_element));
      }
      this.columns_desc = __this__columns_desc;
    }
    if (other.isSetSortInfo()) {
      this.sort_info = new TSortInfo(other.sort_info);
    }
    this.sort_limit = other.sort_limit;
    this.enable_unique_key_merge_on_write = other.enable_unique_key_merge_on_write;
    if (other.isSetPushDownAggTypeOpt()) {
      this.push_down_agg_type_opt = other.push_down_agg_type_opt;
    }
    this.use_topn_opt = other.use_topn_opt;
    if (other.isSetIndexesDesc()) {
      java.util.List<org.apache.doris.thrift.TOlapTableIndex> __this__indexes_desc = new java.util.ArrayList<org.apache.doris.thrift.TOlapTableIndex>(other.indexes_desc.size());
      for (org.apache.doris.thrift.TOlapTableIndex other_element : other.indexes_desc) {
        __this__indexes_desc.add(new org.apache.doris.thrift.TOlapTableIndex(other_element));
      }
      this.indexes_desc = __this__indexes_desc;
    }
    if (other.isSetOutputColumnUniqueIds()) {
      java.util.Set<java.lang.Integer> __this__output_column_unique_ids = new java.util.HashSet<java.lang.Integer>(other.output_column_unique_ids);
      this.output_column_unique_ids = __this__output_column_unique_ids;
    }
    if (other.isSetDistributeColumnIds()) {
      java.util.List<java.lang.Integer> __this__distribute_column_ids = new java.util.ArrayList<java.lang.Integer>(other.distribute_column_ids);
      this.distribute_column_ids = __this__distribute_column_ids;
    }
    this.schema_version = other.schema_version;
  }

  @Override
  public TOlapScanNode deepCopy() {
    return new TOlapScanNode(this);
  }

  @Override
  public void clear() {
    setTupleIdIsSet(false);
    this.tuple_id = 0;
    this.key_column_name = null;
    this.key_column_type = null;
    setIsPreaggregationIsSet(false);
    this.is_preaggregation = false;
    this.sort_column = null;
    this.keyType = null;
    this.table_name = null;
    this.columns_desc = null;
    this.sort_info = null;
    setSortLimitIsSet(false);
    this.sort_limit = 0;
    setEnableUniqueKeyMergeOnWriteIsSet(false);
    this.enable_unique_key_merge_on_write = false;
    this.push_down_agg_type_opt = null;
    setUseTopnOptIsSet(false);
    this.use_topn_opt = false;
    this.indexes_desc = null;
    this.output_column_unique_ids = null;
    this.distribute_column_ids = null;
    setSchemaVersionIsSet(false);
    this.schema_version = 0;
  }

  public int getTupleId() {
    return this.tuple_id;
  }

  public TOlapScanNode setTupleId(int tuple_id) {
    this.tuple_id = tuple_id;
    setTupleIdIsSet(true);
    return this;
  }

  public void unsetTupleId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTupleId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  public void setTupleIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TUPLE_ID_ISSET_ID, value);
  }

  public int getKeyColumnNameSize() {
    return (this.key_column_name == null) ? 0 : this.key_column_name.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getKeyColumnNameIterator() {
    return (this.key_column_name == null) ? null : this.key_column_name.iterator();
  }

  public void addToKeyColumnName(java.lang.String elem) {
    if (this.key_column_name == null) {
      this.key_column_name = new java.util.ArrayList<java.lang.String>();
    }
    this.key_column_name.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getKeyColumnName() {
    return this.key_column_name;
  }

  public TOlapScanNode setKeyColumnName(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> key_column_name) {
    this.key_column_name = key_column_name;
    return this;
  }

  public void unsetKeyColumnName() {
    this.key_column_name = null;
  }

  /** Returns true if field key_column_name is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyColumnName() {
    return this.key_column_name != null;
  }

  public void setKeyColumnNameIsSet(boolean value) {
    if (!value) {
      this.key_column_name = null;
    }
  }

  public int getKeyColumnTypeSize() {
    return (this.key_column_type == null) ? 0 : this.key_column_type.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TPrimitiveType> getKeyColumnTypeIterator() {
    return (this.key_column_type == null) ? null : this.key_column_type.iterator();
  }

  public void addToKeyColumnType(org.apache.doris.thrift.TPrimitiveType elem) {
    if (this.key_column_type == null) {
      this.key_column_type = new java.util.ArrayList<org.apache.doris.thrift.TPrimitiveType>();
    }
    this.key_column_type.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TPrimitiveType> getKeyColumnType() {
    return this.key_column_type;
  }

  public TOlapScanNode setKeyColumnType(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TPrimitiveType> key_column_type) {
    this.key_column_type = key_column_type;
    return this;
  }

  public void unsetKeyColumnType() {
    this.key_column_type = null;
  }

  /** Returns true if field key_column_type is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyColumnType() {
    return this.key_column_type != null;
  }

  public void setKeyColumnTypeIsSet(boolean value) {
    if (!value) {
      this.key_column_type = null;
    }
  }

  public boolean isIsPreaggregation() {
    return this.is_preaggregation;
  }

  public TOlapScanNode setIsPreaggregation(boolean is_preaggregation) {
    this.is_preaggregation = is_preaggregation;
    setIsPreaggregationIsSet(true);
    return this;
  }

  public void unsetIsPreaggregation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_PREAGGREGATION_ISSET_ID);
  }

  /** Returns true if field is_preaggregation is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPreaggregation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_PREAGGREGATION_ISSET_ID);
  }

  public void setIsPreaggregationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_PREAGGREGATION_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSortColumn() {
    return this.sort_column;
  }

  public TOlapScanNode setSortColumn(@org.apache.thrift.annotation.Nullable java.lang.String sort_column) {
    this.sort_column = sort_column;
    return this;
  }

  public void unsetSortColumn() {
    this.sort_column = null;
  }

  /** Returns true if field sort_column is set (has been assigned a value) and false otherwise */
  public boolean isSetSortColumn() {
    return this.sort_column != null;
  }

  public void setSortColumnIsSet(boolean value) {
    if (!value) {
      this.sort_column = null;
    }
  }

  /**
   * 
   * @see org.apache.doris.thrift.TKeysType
   */
  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TKeysType getKeyType() {
    return this.keyType;
  }

  /**
   * 
   * @see org.apache.doris.thrift.TKeysType
   */
  public TOlapScanNode setKeyType(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TKeysType keyType) {
    this.keyType = keyType;
    return this;
  }

  public void unsetKeyType() {
    this.keyType = null;
  }

  /** Returns true if field keyType is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyType() {
    return this.keyType != null;
  }

  public void setKeyTypeIsSet(boolean value) {
    if (!value) {
      this.keyType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTableName() {
    return this.table_name;
  }

  public TOlapScanNode setTableName(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTableName() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.table_name != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public int getColumnsDescSize() {
    return (this.columns_desc == null) ? 0 : this.columns_desc.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TColumn> getColumnsDescIterator() {
    return (this.columns_desc == null) ? null : this.columns_desc.iterator();
  }

  public void addToColumnsDesc(org.apache.doris.thrift.TColumn elem) {
    if (this.columns_desc == null) {
      this.columns_desc = new java.util.ArrayList<org.apache.doris.thrift.TColumn>();
    }
    this.columns_desc.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TColumn> getColumnsDesc() {
    return this.columns_desc;
  }

  public TOlapScanNode setColumnsDesc(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TColumn> columns_desc) {
    this.columns_desc = columns_desc;
    return this;
  }

  public void unsetColumnsDesc() {
    this.columns_desc = null;
  }

  /** Returns true if field columns_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnsDesc() {
    return this.columns_desc != null;
  }

  public void setColumnsDescIsSet(boolean value) {
    if (!value) {
      this.columns_desc = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TSortInfo getSortInfo() {
    return this.sort_info;
  }

  public TOlapScanNode setSortInfo(@org.apache.thrift.annotation.Nullable TSortInfo sort_info) {
    this.sort_info = sort_info;
    return this;
  }

  public void unsetSortInfo() {
    this.sort_info = null;
  }

  /** Returns true if field sort_info is set (has been assigned a value) and false otherwise */
  public boolean isSetSortInfo() {
    return this.sort_info != null;
  }

  public void setSortInfoIsSet(boolean value) {
    if (!value) {
      this.sort_info = null;
    }
  }

  public long getSortLimit() {
    return this.sort_limit;
  }

  public TOlapScanNode setSortLimit(long sort_limit) {
    this.sort_limit = sort_limit;
    setSortLimitIsSet(true);
    return this;
  }

  public void unsetSortLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SORT_LIMIT_ISSET_ID);
  }

  /** Returns true if field sort_limit is set (has been assigned a value) and false otherwise */
  public boolean isSetSortLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SORT_LIMIT_ISSET_ID);
  }

  public void setSortLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SORT_LIMIT_ISSET_ID, value);
  }

  public boolean isEnableUniqueKeyMergeOnWrite() {
    return this.enable_unique_key_merge_on_write;
  }

  public TOlapScanNode setEnableUniqueKeyMergeOnWrite(boolean enable_unique_key_merge_on_write) {
    this.enable_unique_key_merge_on_write = enable_unique_key_merge_on_write;
    setEnableUniqueKeyMergeOnWriteIsSet(true);
    return this;
  }

  public void unsetEnableUniqueKeyMergeOnWrite() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_UNIQUE_KEY_MERGE_ON_WRITE_ISSET_ID);
  }

  /** Returns true if field enable_unique_key_merge_on_write is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableUniqueKeyMergeOnWrite() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_UNIQUE_KEY_MERGE_ON_WRITE_ISSET_ID);
  }

  public void setEnableUniqueKeyMergeOnWriteIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_UNIQUE_KEY_MERGE_ON_WRITE_ISSET_ID, value);
  }

  /**
   * 
   * @see TPushAggOp
   */
  @org.apache.thrift.annotation.Nullable
  public TPushAggOp getPushDownAggTypeOpt() {
    return this.push_down_agg_type_opt;
  }

  /**
   * 
   * @see TPushAggOp
   */
  public TOlapScanNode setPushDownAggTypeOpt(@org.apache.thrift.annotation.Nullable TPushAggOp push_down_agg_type_opt) {
    this.push_down_agg_type_opt = push_down_agg_type_opt;
    return this;
  }

  public void unsetPushDownAggTypeOpt() {
    this.push_down_agg_type_opt = null;
  }

  /** Returns true if field push_down_agg_type_opt is set (has been assigned a value) and false otherwise */
  public boolean isSetPushDownAggTypeOpt() {
    return this.push_down_agg_type_opt != null;
  }

  public void setPushDownAggTypeOptIsSet(boolean value) {
    if (!value) {
      this.push_down_agg_type_opt = null;
    }
  }

  public boolean isUseTopnOpt() {
    return this.use_topn_opt;
  }

  public TOlapScanNode setUseTopnOpt(boolean use_topn_opt) {
    this.use_topn_opt = use_topn_opt;
    setUseTopnOptIsSet(true);
    return this;
  }

  public void unsetUseTopnOpt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_TOPN_OPT_ISSET_ID);
  }

  /** Returns true if field use_topn_opt is set (has been assigned a value) and false otherwise */
  public boolean isSetUseTopnOpt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_TOPN_OPT_ISSET_ID);
  }

  public void setUseTopnOptIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_TOPN_OPT_ISSET_ID, value);
  }

  public int getIndexesDescSize() {
    return (this.indexes_desc == null) ? 0 : this.indexes_desc.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TOlapTableIndex> getIndexesDescIterator() {
    return (this.indexes_desc == null) ? null : this.indexes_desc.iterator();
  }

  public void addToIndexesDesc(org.apache.doris.thrift.TOlapTableIndex elem) {
    if (this.indexes_desc == null) {
      this.indexes_desc = new java.util.ArrayList<org.apache.doris.thrift.TOlapTableIndex>();
    }
    this.indexes_desc.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TOlapTableIndex> getIndexesDesc() {
    return this.indexes_desc;
  }

  public TOlapScanNode setIndexesDesc(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TOlapTableIndex> indexes_desc) {
    this.indexes_desc = indexes_desc;
    return this;
  }

  public void unsetIndexesDesc() {
    this.indexes_desc = null;
  }

  /** Returns true if field indexes_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexesDesc() {
    return this.indexes_desc != null;
  }

  public void setIndexesDescIsSet(boolean value) {
    if (!value) {
      this.indexes_desc = null;
    }
  }

  public int getOutputColumnUniqueIdsSize() {
    return (this.output_column_unique_ids == null) ? 0 : this.output_column_unique_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getOutputColumnUniqueIdsIterator() {
    return (this.output_column_unique_ids == null) ? null : this.output_column_unique_ids.iterator();
  }

  public void addToOutputColumnUniqueIds(int elem) {
    if (this.output_column_unique_ids == null) {
      this.output_column_unique_ids = new java.util.HashSet<java.lang.Integer>();
    }
    this.output_column_unique_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.Integer> getOutputColumnUniqueIds() {
    return this.output_column_unique_ids;
  }

  public TOlapScanNode setOutputColumnUniqueIds(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> output_column_unique_ids) {
    this.output_column_unique_ids = output_column_unique_ids;
    return this;
  }

  public void unsetOutputColumnUniqueIds() {
    this.output_column_unique_ids = null;
  }

  /** Returns true if field output_column_unique_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputColumnUniqueIds() {
    return this.output_column_unique_ids != null;
  }

  public void setOutputColumnUniqueIdsIsSet(boolean value) {
    if (!value) {
      this.output_column_unique_ids = null;
    }
  }

  public int getDistributeColumnIdsSize() {
    return (this.distribute_column_ids == null) ? 0 : this.distribute_column_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getDistributeColumnIdsIterator() {
    return (this.distribute_column_ids == null) ? null : this.distribute_column_ids.iterator();
  }

  public void addToDistributeColumnIds(int elem) {
    if (this.distribute_column_ids == null) {
      this.distribute_column_ids = new java.util.ArrayList<java.lang.Integer>();
    }
    this.distribute_column_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getDistributeColumnIds() {
    return this.distribute_column_ids;
  }

  public TOlapScanNode setDistributeColumnIds(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> distribute_column_ids) {
    this.distribute_column_ids = distribute_column_ids;
    return this;
  }

  public void unsetDistributeColumnIds() {
    this.distribute_column_ids = null;
  }

  /** Returns true if field distribute_column_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetDistributeColumnIds() {
    return this.distribute_column_ids != null;
  }

  public void setDistributeColumnIdsIsSet(boolean value) {
    if (!value) {
      this.distribute_column_ids = null;
    }
  }

  public int getSchemaVersion() {
    return this.schema_version;
  }

  public TOlapScanNode setSchemaVersion(int schema_version) {
    this.schema_version = schema_version;
    setSchemaVersionIsSet(true);
    return this;
  }

  public void unsetSchemaVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_VERSION_ISSET_ID);
  }

  /** Returns true if field schema_version is set (has been assigned a value) and false otherwise */
  public boolean isSetSchemaVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCHEMA_VERSION_ISSET_ID);
  }

  public void setSchemaVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCHEMA_VERSION_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TUPLE_ID:
      if (value == null) {
        unsetTupleId();
      } else {
        setTupleId((java.lang.Integer)value);
      }
      break;

    case KEY_COLUMN_NAME:
      if (value == null) {
        unsetKeyColumnName();
      } else {
        setKeyColumnName((java.util.List<java.lang.String>)value);
      }
      break;

    case KEY_COLUMN_TYPE:
      if (value == null) {
        unsetKeyColumnType();
      } else {
        setKeyColumnType((java.util.List<org.apache.doris.thrift.TPrimitiveType>)value);
      }
      break;

    case IS_PREAGGREGATION:
      if (value == null) {
        unsetIsPreaggregation();
      } else {
        setIsPreaggregation((java.lang.Boolean)value);
      }
      break;

    case SORT_COLUMN:
      if (value == null) {
        unsetSortColumn();
      } else {
        setSortColumn((java.lang.String)value);
      }
      break;

    case KEY_TYPE:
      if (value == null) {
        unsetKeyType();
      } else {
        setKeyType((org.apache.doris.thrift.TKeysType)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((java.lang.String)value);
      }
      break;

    case COLUMNS_DESC:
      if (value == null) {
        unsetColumnsDesc();
      } else {
        setColumnsDesc((java.util.List<org.apache.doris.thrift.TColumn>)value);
      }
      break;

    case SORT_INFO:
      if (value == null) {
        unsetSortInfo();
      } else {
        setSortInfo((TSortInfo)value);
      }
      break;

    case SORT_LIMIT:
      if (value == null) {
        unsetSortLimit();
      } else {
        setSortLimit((java.lang.Long)value);
      }
      break;

    case ENABLE_UNIQUE_KEY_MERGE_ON_WRITE:
      if (value == null) {
        unsetEnableUniqueKeyMergeOnWrite();
      } else {
        setEnableUniqueKeyMergeOnWrite((java.lang.Boolean)value);
      }
      break;

    case PUSH_DOWN_AGG_TYPE_OPT:
      if (value == null) {
        unsetPushDownAggTypeOpt();
      } else {
        setPushDownAggTypeOpt((TPushAggOp)value);
      }
      break;

    case USE_TOPN_OPT:
      if (value == null) {
        unsetUseTopnOpt();
      } else {
        setUseTopnOpt((java.lang.Boolean)value);
      }
      break;

    case INDEXES_DESC:
      if (value == null) {
        unsetIndexesDesc();
      } else {
        setIndexesDesc((java.util.List<org.apache.doris.thrift.TOlapTableIndex>)value);
      }
      break;

    case OUTPUT_COLUMN_UNIQUE_IDS:
      if (value == null) {
        unsetOutputColumnUniqueIds();
      } else {
        setOutputColumnUniqueIds((java.util.Set<java.lang.Integer>)value);
      }
      break;

    case DISTRIBUTE_COLUMN_IDS:
      if (value == null) {
        unsetDistributeColumnIds();
      } else {
        setDistributeColumnIds((java.util.List<java.lang.Integer>)value);
      }
      break;

    case SCHEMA_VERSION:
      if (value == null) {
        unsetSchemaVersion();
      } else {
        setSchemaVersion((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TUPLE_ID:
      return getTupleId();

    case KEY_COLUMN_NAME:
      return getKeyColumnName();

    case KEY_COLUMN_TYPE:
      return getKeyColumnType();

    case IS_PREAGGREGATION:
      return isIsPreaggregation();

    case SORT_COLUMN:
      return getSortColumn();

    case KEY_TYPE:
      return getKeyType();

    case TABLE_NAME:
      return getTableName();

    case COLUMNS_DESC:
      return getColumnsDesc();

    case SORT_INFO:
      return getSortInfo();

    case SORT_LIMIT:
      return getSortLimit();

    case ENABLE_UNIQUE_KEY_MERGE_ON_WRITE:
      return isEnableUniqueKeyMergeOnWrite();

    case PUSH_DOWN_AGG_TYPE_OPT:
      return getPushDownAggTypeOpt();

    case USE_TOPN_OPT:
      return isUseTopnOpt();

    case INDEXES_DESC:
      return getIndexesDesc();

    case OUTPUT_COLUMN_UNIQUE_IDS:
      return getOutputColumnUniqueIds();

    case DISTRIBUTE_COLUMN_IDS:
      return getDistributeColumnIds();

    case SCHEMA_VERSION:
      return getSchemaVersion();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TUPLE_ID:
      return isSetTupleId();
    case KEY_COLUMN_NAME:
      return isSetKeyColumnName();
    case KEY_COLUMN_TYPE:
      return isSetKeyColumnType();
    case IS_PREAGGREGATION:
      return isSetIsPreaggregation();
    case SORT_COLUMN:
      return isSetSortColumn();
    case KEY_TYPE:
      return isSetKeyType();
    case TABLE_NAME:
      return isSetTableName();
    case COLUMNS_DESC:
      return isSetColumnsDesc();
    case SORT_INFO:
      return isSetSortInfo();
    case SORT_LIMIT:
      return isSetSortLimit();
    case ENABLE_UNIQUE_KEY_MERGE_ON_WRITE:
      return isSetEnableUniqueKeyMergeOnWrite();
    case PUSH_DOWN_AGG_TYPE_OPT:
      return isSetPushDownAggTypeOpt();
    case USE_TOPN_OPT:
      return isSetUseTopnOpt();
    case INDEXES_DESC:
      return isSetIndexesDesc();
    case OUTPUT_COLUMN_UNIQUE_IDS:
      return isSetOutputColumnUniqueIds();
    case DISTRIBUTE_COLUMN_IDS:
      return isSetDistributeColumnIds();
    case SCHEMA_VERSION:
      return isSetSchemaVersion();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TOlapScanNode)
      return this.equals((TOlapScanNode)that);
    return false;
  }

  public boolean equals(TOlapScanNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tuple_id = true;
    boolean that_present_tuple_id = true;
    if (this_present_tuple_id || that_present_tuple_id) {
      if (!(this_present_tuple_id && that_present_tuple_id))
        return false;
      if (this.tuple_id != that.tuple_id)
        return false;
    }

    boolean this_present_key_column_name = true && this.isSetKeyColumnName();
    boolean that_present_key_column_name = true && that.isSetKeyColumnName();
    if (this_present_key_column_name || that_present_key_column_name) {
      if (!(this_present_key_column_name && that_present_key_column_name))
        return false;
      if (!this.key_column_name.equals(that.key_column_name))
        return false;
    }

    boolean this_present_key_column_type = true && this.isSetKeyColumnType();
    boolean that_present_key_column_type = true && that.isSetKeyColumnType();
    if (this_present_key_column_type || that_present_key_column_type) {
      if (!(this_present_key_column_type && that_present_key_column_type))
        return false;
      if (!this.key_column_type.equals(that.key_column_type))
        return false;
    }

    boolean this_present_is_preaggregation = true;
    boolean that_present_is_preaggregation = true;
    if (this_present_is_preaggregation || that_present_is_preaggregation) {
      if (!(this_present_is_preaggregation && that_present_is_preaggregation))
        return false;
      if (this.is_preaggregation != that.is_preaggregation)
        return false;
    }

    boolean this_present_sort_column = true && this.isSetSortColumn();
    boolean that_present_sort_column = true && that.isSetSortColumn();
    if (this_present_sort_column || that_present_sort_column) {
      if (!(this_present_sort_column && that_present_sort_column))
        return false;
      if (!this.sort_column.equals(that.sort_column))
        return false;
    }

    boolean this_present_keyType = true && this.isSetKeyType();
    boolean that_present_keyType = true && that.isSetKeyType();
    if (this_present_keyType || that_present_keyType) {
      if (!(this_present_keyType && that_present_keyType))
        return false;
      if (!this.keyType.equals(that.keyType))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTableName();
    boolean that_present_table_name = true && that.isSetTableName();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_columns_desc = true && this.isSetColumnsDesc();
    boolean that_present_columns_desc = true && that.isSetColumnsDesc();
    if (this_present_columns_desc || that_present_columns_desc) {
      if (!(this_present_columns_desc && that_present_columns_desc))
        return false;
      if (!this.columns_desc.equals(that.columns_desc))
        return false;
    }

    boolean this_present_sort_info = true && this.isSetSortInfo();
    boolean that_present_sort_info = true && that.isSetSortInfo();
    if (this_present_sort_info || that_present_sort_info) {
      if (!(this_present_sort_info && that_present_sort_info))
        return false;
      if (!this.sort_info.equals(that.sort_info))
        return false;
    }

    boolean this_present_sort_limit = true && this.isSetSortLimit();
    boolean that_present_sort_limit = true && that.isSetSortLimit();
    if (this_present_sort_limit || that_present_sort_limit) {
      if (!(this_present_sort_limit && that_present_sort_limit))
        return false;
      if (this.sort_limit != that.sort_limit)
        return false;
    }

    boolean this_present_enable_unique_key_merge_on_write = true && this.isSetEnableUniqueKeyMergeOnWrite();
    boolean that_present_enable_unique_key_merge_on_write = true && that.isSetEnableUniqueKeyMergeOnWrite();
    if (this_present_enable_unique_key_merge_on_write || that_present_enable_unique_key_merge_on_write) {
      if (!(this_present_enable_unique_key_merge_on_write && that_present_enable_unique_key_merge_on_write))
        return false;
      if (this.enable_unique_key_merge_on_write != that.enable_unique_key_merge_on_write)
        return false;
    }

    boolean this_present_push_down_agg_type_opt = true && this.isSetPushDownAggTypeOpt();
    boolean that_present_push_down_agg_type_opt = true && that.isSetPushDownAggTypeOpt();
    if (this_present_push_down_agg_type_opt || that_present_push_down_agg_type_opt) {
      if (!(this_present_push_down_agg_type_opt && that_present_push_down_agg_type_opt))
        return false;
      if (!this.push_down_agg_type_opt.equals(that.push_down_agg_type_opt))
        return false;
    }

    boolean this_present_use_topn_opt = true && this.isSetUseTopnOpt();
    boolean that_present_use_topn_opt = true && that.isSetUseTopnOpt();
    if (this_present_use_topn_opt || that_present_use_topn_opt) {
      if (!(this_present_use_topn_opt && that_present_use_topn_opt))
        return false;
      if (this.use_topn_opt != that.use_topn_opt)
        return false;
    }

    boolean this_present_indexes_desc = true && this.isSetIndexesDesc();
    boolean that_present_indexes_desc = true && that.isSetIndexesDesc();
    if (this_present_indexes_desc || that_present_indexes_desc) {
      if (!(this_present_indexes_desc && that_present_indexes_desc))
        return false;
      if (!this.indexes_desc.equals(that.indexes_desc))
        return false;
    }

    boolean this_present_output_column_unique_ids = true && this.isSetOutputColumnUniqueIds();
    boolean that_present_output_column_unique_ids = true && that.isSetOutputColumnUniqueIds();
    if (this_present_output_column_unique_ids || that_present_output_column_unique_ids) {
      if (!(this_present_output_column_unique_ids && that_present_output_column_unique_ids))
        return false;
      if (!this.output_column_unique_ids.equals(that.output_column_unique_ids))
        return false;
    }

    boolean this_present_distribute_column_ids = true && this.isSetDistributeColumnIds();
    boolean that_present_distribute_column_ids = true && that.isSetDistributeColumnIds();
    if (this_present_distribute_column_ids || that_present_distribute_column_ids) {
      if (!(this_present_distribute_column_ids && that_present_distribute_column_ids))
        return false;
      if (!this.distribute_column_ids.equals(that.distribute_column_ids))
        return false;
    }

    boolean this_present_schema_version = true && this.isSetSchemaVersion();
    boolean that_present_schema_version = true && that.isSetSchemaVersion();
    if (this_present_schema_version || that_present_schema_version) {
      if (!(this_present_schema_version && that_present_schema_version))
        return false;
      if (this.schema_version != that.schema_version)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + tuple_id;

    hashCode = hashCode * 8191 + ((isSetKeyColumnName()) ? 131071 : 524287);
    if (isSetKeyColumnName())
      hashCode = hashCode * 8191 + key_column_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyColumnType()) ? 131071 : 524287);
    if (isSetKeyColumnType())
      hashCode = hashCode * 8191 + key_column_type.hashCode();

    hashCode = hashCode * 8191 + ((is_preaggregation) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSortColumn()) ? 131071 : 524287);
    if (isSetSortColumn())
      hashCode = hashCode * 8191 + sort_column.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyType()) ? 131071 : 524287);
    if (isSetKeyType())
      hashCode = hashCode * 8191 + keyType.getValue();

    hashCode = hashCode * 8191 + ((isSetTableName()) ? 131071 : 524287);
    if (isSetTableName())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnsDesc()) ? 131071 : 524287);
    if (isSetColumnsDesc())
      hashCode = hashCode * 8191 + columns_desc.hashCode();

    hashCode = hashCode * 8191 + ((isSetSortInfo()) ? 131071 : 524287);
    if (isSetSortInfo())
      hashCode = hashCode * 8191 + sort_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetSortLimit()) ? 131071 : 524287);
    if (isSetSortLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sort_limit);

    hashCode = hashCode * 8191 + ((isSetEnableUniqueKeyMergeOnWrite()) ? 131071 : 524287);
    if (isSetEnableUniqueKeyMergeOnWrite())
      hashCode = hashCode * 8191 + ((enable_unique_key_merge_on_write) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPushDownAggTypeOpt()) ? 131071 : 524287);
    if (isSetPushDownAggTypeOpt())
      hashCode = hashCode * 8191 + push_down_agg_type_opt.getValue();

    hashCode = hashCode * 8191 + ((isSetUseTopnOpt()) ? 131071 : 524287);
    if (isSetUseTopnOpt())
      hashCode = hashCode * 8191 + ((use_topn_opt) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetIndexesDesc()) ? 131071 : 524287);
    if (isSetIndexesDesc())
      hashCode = hashCode * 8191 + indexes_desc.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutputColumnUniqueIds()) ? 131071 : 524287);
    if (isSetOutputColumnUniqueIds())
      hashCode = hashCode * 8191 + output_column_unique_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetDistributeColumnIds()) ? 131071 : 524287);
    if (isSetDistributeColumnIds())
      hashCode = hashCode * 8191 + distribute_column_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetSchemaVersion()) ? 131071 : 524287);
    if (isSetSchemaVersion())
      hashCode = hashCode * 8191 + schema_version;

    return hashCode;
  }

  @Override
  public int compareTo(TOlapScanNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTupleId(), other.isSetTupleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTupleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple_id, other.tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKeyColumnName(), other.isSetKeyColumnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyColumnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_column_name, other.key_column_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKeyColumnType(), other.isSetKeyColumnType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyColumnType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_column_type, other.key_column_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsPreaggregation(), other.isSetIsPreaggregation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPreaggregation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_preaggregation, other.is_preaggregation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSortColumn(), other.isSetSortColumn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortColumn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_column, other.sort_column);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKeyType(), other.isSetKeyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyType, other.keyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTableName(), other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnsDesc(), other.isSetColumnsDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnsDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns_desc, other.columns_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSortInfo(), other.isSetSortInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_info, other.sort_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSortLimit(), other.isSetSortLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_limit, other.sort_limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableUniqueKeyMergeOnWrite(), other.isSetEnableUniqueKeyMergeOnWrite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableUniqueKeyMergeOnWrite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_unique_key_merge_on_write, other.enable_unique_key_merge_on_write);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPushDownAggTypeOpt(), other.isSetPushDownAggTypeOpt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushDownAggTypeOpt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.push_down_agg_type_opt, other.push_down_agg_type_opt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUseTopnOpt(), other.isSetUseTopnOpt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseTopnOpt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_topn_opt, other.use_topn_opt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIndexesDesc(), other.isSetIndexesDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexesDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexes_desc, other.indexes_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutputColumnUniqueIds(), other.isSetOutputColumnUniqueIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputColumnUniqueIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_column_unique_ids, other.output_column_unique_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDistributeColumnIds(), other.isSetDistributeColumnIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistributeColumnIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distribute_column_ids, other.distribute_column_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchemaVersion(), other.isSetSchemaVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchemaVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_version, other.schema_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TOlapScanNode(");
    boolean first = true;

    sb.append("tuple_id:");
    sb.append(this.tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("key_column_name:");
    if (this.key_column_name == null) {
      sb.append("null");
    } else {
      sb.append(this.key_column_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("key_column_type:");
    if (this.key_column_type == null) {
      sb.append("null");
    } else {
      sb.append(this.key_column_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_preaggregation:");
    sb.append(this.is_preaggregation);
    first = false;
    if (isSetSortColumn()) {
      if (!first) sb.append(", ");
      sb.append("sort_column:");
      if (this.sort_column == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_column);
      }
      first = false;
    }
    if (isSetKeyType()) {
      if (!first) sb.append(", ");
      sb.append("keyType:");
      if (this.keyType == null) {
        sb.append("null");
      } else {
        sb.append(this.keyType);
      }
      first = false;
    }
    if (isSetTableName()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetColumnsDesc()) {
      if (!first) sb.append(", ");
      sb.append("columns_desc:");
      if (this.columns_desc == null) {
        sb.append("null");
      } else {
        sb.append(this.columns_desc);
      }
      first = false;
    }
    if (isSetSortInfo()) {
      if (!first) sb.append(", ");
      sb.append("sort_info:");
      if (this.sort_info == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_info);
      }
      first = false;
    }
    if (isSetSortLimit()) {
      if (!first) sb.append(", ");
      sb.append("sort_limit:");
      sb.append(this.sort_limit);
      first = false;
    }
    if (isSetEnableUniqueKeyMergeOnWrite()) {
      if (!first) sb.append(", ");
      sb.append("enable_unique_key_merge_on_write:");
      sb.append(this.enable_unique_key_merge_on_write);
      first = false;
    }
    if (isSetPushDownAggTypeOpt()) {
      if (!first) sb.append(", ");
      sb.append("push_down_agg_type_opt:");
      if (this.push_down_agg_type_opt == null) {
        sb.append("null");
      } else {
        sb.append(this.push_down_agg_type_opt);
      }
      first = false;
    }
    if (isSetUseTopnOpt()) {
      if (!first) sb.append(", ");
      sb.append("use_topn_opt:");
      sb.append(this.use_topn_opt);
      first = false;
    }
    if (isSetIndexesDesc()) {
      if (!first) sb.append(", ");
      sb.append("indexes_desc:");
      if (this.indexes_desc == null) {
        sb.append("null");
      } else {
        sb.append(this.indexes_desc);
      }
      first = false;
    }
    if (isSetOutputColumnUniqueIds()) {
      if (!first) sb.append(", ");
      sb.append("output_column_unique_ids:");
      if (this.output_column_unique_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.output_column_unique_ids);
      }
      first = false;
    }
    if (isSetDistributeColumnIds()) {
      if (!first) sb.append(", ");
      sb.append("distribute_column_ids:");
      if (this.distribute_column_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.distribute_column_ids);
      }
      first = false;
    }
    if (isSetSchemaVersion()) {
      if (!first) sb.append(", ");
      sb.append("schema_version:");
      sb.append(this.schema_version);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'tuple_id' because it's a primitive and you chose the non-beans generator.
    if (key_column_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'key_column_name' was not present! Struct: " + toString());
    }
    if (key_column_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'key_column_type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'is_preaggregation' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (sort_info != null) {
      sort_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TOlapScanNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOlapScanNodeStandardScheme getScheme() {
      return new TOlapScanNodeStandardScheme();
    }
  }

  private static class TOlapScanNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TOlapScanNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TOlapScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tuple_id = iprot.readI32();
              struct.setTupleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY_COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list450 = iprot.readListBegin();
                struct.key_column_name = new java.util.ArrayList<java.lang.String>(_list450.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem451;
                for (int _i452 = 0; _i452 < _list450.size; ++_i452)
                {
                  _elem451 = iprot.readString();
                  struct.key_column_name.add(_elem451);
                }
                iprot.readListEnd();
              }
              struct.setKeyColumnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEY_COLUMN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list453 = iprot.readListBegin();
                struct.key_column_type = new java.util.ArrayList<org.apache.doris.thrift.TPrimitiveType>(_list453.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TPrimitiveType _elem454;
                for (int _i455 = 0; _i455 < _list453.size; ++_i455)
                {
                  _elem454 = org.apache.doris.thrift.TPrimitiveType.findByValue(iprot.readI32());
                  if (_elem454 != null)
                  {
                    struct.key_column_type.add(_elem454);
                  }
                }
                iprot.readListEnd();
              }
              struct.setKeyColumnTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_PREAGGREGATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_preaggregation = iprot.readBool();
              struct.setIsPreaggregationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SORT_COLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sort_column = iprot.readString();
              struct.setSortColumnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // KEY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.keyType = org.apache.doris.thrift.TKeysType.findByValue(iprot.readI32());
              struct.setKeyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COLUMNS_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list456 = iprot.readListBegin();
                struct.columns_desc = new java.util.ArrayList<org.apache.doris.thrift.TColumn>(_list456.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TColumn _elem457;
                for (int _i458 = 0; _i458 < _list456.size; ++_i458)
                {
                  _elem457 = new org.apache.doris.thrift.TColumn();
                  _elem457.read(iprot);
                  struct.columns_desc.add(_elem457);
                }
                iprot.readListEnd();
              }
              struct.setColumnsDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SORT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sort_info = new TSortInfo();
              struct.sort_info.read(iprot);
              struct.setSortInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SORT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sort_limit = iprot.readI64();
              struct.setSortLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ENABLE_UNIQUE_KEY_MERGE_ON_WRITE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_unique_key_merge_on_write = iprot.readBool();
              struct.setEnableUniqueKeyMergeOnWriteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PUSH_DOWN_AGG_TYPE_OPT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.push_down_agg_type_opt = org.apache.doris.thrift.TPushAggOp.findByValue(iprot.readI32());
              struct.setPushDownAggTypeOptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USE_TOPN_OPT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_topn_opt = iprot.readBool();
              struct.setUseTopnOptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // INDEXES_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list459 = iprot.readListBegin();
                struct.indexes_desc = new java.util.ArrayList<org.apache.doris.thrift.TOlapTableIndex>(_list459.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TOlapTableIndex _elem460;
                for (int _i461 = 0; _i461 < _list459.size; ++_i461)
                {
                  _elem460 = new org.apache.doris.thrift.TOlapTableIndex();
                  _elem460.read(iprot);
                  struct.indexes_desc.add(_elem460);
                }
                iprot.readListEnd();
              }
              struct.setIndexesDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OUTPUT_COLUMN_UNIQUE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set462 = iprot.readSetBegin();
                struct.output_column_unique_ids = new java.util.HashSet<java.lang.Integer>(2*_set462.size);
                int _elem463;
                for (int _i464 = 0; _i464 < _set462.size; ++_i464)
                {
                  _elem463 = iprot.readI32();
                  struct.output_column_unique_ids.add(_elem463);
                }
                iprot.readSetEnd();
              }
              struct.setOutputColumnUniqueIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DISTRIBUTE_COLUMN_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list465 = iprot.readListBegin();
                struct.distribute_column_ids = new java.util.ArrayList<java.lang.Integer>(_list465.size);
                int _elem466;
                for (int _i467 = 0; _i467 < _list465.size; ++_i467)
                {
                  _elem466 = iprot.readI32();
                  struct.distribute_column_ids.add(_elem466);
                }
                iprot.readListEnd();
              }
              struct.setDistributeColumnIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SCHEMA_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schema_version = iprot.readI32();
              struct.setSchemaVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTupleId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tuple_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsPreaggregation()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_preaggregation' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TOlapScanNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.tuple_id);
      oprot.writeFieldEnd();
      if (struct.key_column_name != null) {
        oprot.writeFieldBegin(KEY_COLUMN_NAME_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.key_column_name.size()));
          for (java.lang.String _iter468 : struct.key_column_name)
          {
            oprot.writeString(_iter468);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.key_column_type != null) {
        oprot.writeFieldBegin(KEY_COLUMN_TYPE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.key_column_type.size()));
          for (org.apache.doris.thrift.TPrimitiveType _iter469 : struct.key_column_type)
          {
            oprot.writeI32(_iter469.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_PREAGGREGATION_FIELD_DESC);
      oprot.writeBool(struct.is_preaggregation);
      oprot.writeFieldEnd();
      if (struct.sort_column != null) {
        if (struct.isSetSortColumn()) {
          oprot.writeFieldBegin(SORT_COLUMN_FIELD_DESC);
          oprot.writeString(struct.sort_column);
          oprot.writeFieldEnd();
        }
      }
      if (struct.keyType != null) {
        if (struct.isSetKeyType()) {
          oprot.writeFieldBegin(KEY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.keyType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTableName()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.columns_desc != null) {
        if (struct.isSetColumnsDesc()) {
          oprot.writeFieldBegin(COLUMNS_DESC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns_desc.size()));
            for (org.apache.doris.thrift.TColumn _iter470 : struct.columns_desc)
            {
              _iter470.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sort_info != null) {
        if (struct.isSetSortInfo()) {
          oprot.writeFieldBegin(SORT_INFO_FIELD_DESC);
          struct.sort_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSortLimit()) {
        oprot.writeFieldBegin(SORT_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.sort_limit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableUniqueKeyMergeOnWrite()) {
        oprot.writeFieldBegin(ENABLE_UNIQUE_KEY_MERGE_ON_WRITE_FIELD_DESC);
        oprot.writeBool(struct.enable_unique_key_merge_on_write);
        oprot.writeFieldEnd();
      }
      if (struct.push_down_agg_type_opt != null) {
        if (struct.isSetPushDownAggTypeOpt()) {
          oprot.writeFieldBegin(PUSH_DOWN_AGG_TYPE_OPT_FIELD_DESC);
          oprot.writeI32(struct.push_down_agg_type_opt.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUseTopnOpt()) {
        oprot.writeFieldBegin(USE_TOPN_OPT_FIELD_DESC);
        oprot.writeBool(struct.use_topn_opt);
        oprot.writeFieldEnd();
      }
      if (struct.indexes_desc != null) {
        if (struct.isSetIndexesDesc()) {
          oprot.writeFieldBegin(INDEXES_DESC_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.indexes_desc.size()));
            for (org.apache.doris.thrift.TOlapTableIndex _iter471 : struct.indexes_desc)
            {
              _iter471.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.output_column_unique_ids != null) {
        if (struct.isSetOutputColumnUniqueIds()) {
          oprot.writeFieldBegin(OUTPUT_COLUMN_UNIQUE_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.output_column_unique_ids.size()));
            for (int _iter472 : struct.output_column_unique_ids)
            {
              oprot.writeI32(_iter472);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.distribute_column_ids != null) {
        if (struct.isSetDistributeColumnIds()) {
          oprot.writeFieldBegin(DISTRIBUTE_COLUMN_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.distribute_column_ids.size()));
            for (int _iter473 : struct.distribute_column_ids)
            {
              oprot.writeI32(_iter473);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSchemaVersion()) {
        oprot.writeFieldBegin(SCHEMA_VERSION_FIELD_DESC);
        oprot.writeI32(struct.schema_version);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TOlapScanNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TOlapScanNodeTupleScheme getScheme() {
      return new TOlapScanNodeTupleScheme();
    }
  }

  private static class TOlapScanNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TOlapScanNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TOlapScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.tuple_id);
      {
        oprot.writeI32(struct.key_column_name.size());
        for (java.lang.String _iter474 : struct.key_column_name)
        {
          oprot.writeString(_iter474);
        }
      }
      {
        oprot.writeI32(struct.key_column_type.size());
        for (org.apache.doris.thrift.TPrimitiveType _iter475 : struct.key_column_type)
        {
          oprot.writeI32(_iter475.getValue());
        }
      }
      oprot.writeBool(struct.is_preaggregation);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSortColumn()) {
        optionals.set(0);
      }
      if (struct.isSetKeyType()) {
        optionals.set(1);
      }
      if (struct.isSetTableName()) {
        optionals.set(2);
      }
      if (struct.isSetColumnsDesc()) {
        optionals.set(3);
      }
      if (struct.isSetSortInfo()) {
        optionals.set(4);
      }
      if (struct.isSetSortLimit()) {
        optionals.set(5);
      }
      if (struct.isSetEnableUniqueKeyMergeOnWrite()) {
        optionals.set(6);
      }
      if (struct.isSetPushDownAggTypeOpt()) {
        optionals.set(7);
      }
      if (struct.isSetUseTopnOpt()) {
        optionals.set(8);
      }
      if (struct.isSetIndexesDesc()) {
        optionals.set(9);
      }
      if (struct.isSetOutputColumnUniqueIds()) {
        optionals.set(10);
      }
      if (struct.isSetDistributeColumnIds()) {
        optionals.set(11);
      }
      if (struct.isSetSchemaVersion()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetSortColumn()) {
        oprot.writeString(struct.sort_column);
      }
      if (struct.isSetKeyType()) {
        oprot.writeI32(struct.keyType.getValue());
      }
      if (struct.isSetTableName()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetColumnsDesc()) {
        {
          oprot.writeI32(struct.columns_desc.size());
          for (org.apache.doris.thrift.TColumn _iter476 : struct.columns_desc)
          {
            _iter476.write(oprot);
          }
        }
      }
      if (struct.isSetSortInfo()) {
        struct.sort_info.write(oprot);
      }
      if (struct.isSetSortLimit()) {
        oprot.writeI64(struct.sort_limit);
      }
      if (struct.isSetEnableUniqueKeyMergeOnWrite()) {
        oprot.writeBool(struct.enable_unique_key_merge_on_write);
      }
      if (struct.isSetPushDownAggTypeOpt()) {
        oprot.writeI32(struct.push_down_agg_type_opt.getValue());
      }
      if (struct.isSetUseTopnOpt()) {
        oprot.writeBool(struct.use_topn_opt);
      }
      if (struct.isSetIndexesDesc()) {
        {
          oprot.writeI32(struct.indexes_desc.size());
          for (org.apache.doris.thrift.TOlapTableIndex _iter477 : struct.indexes_desc)
          {
            _iter477.write(oprot);
          }
        }
      }
      if (struct.isSetOutputColumnUniqueIds()) {
        {
          oprot.writeI32(struct.output_column_unique_ids.size());
          for (int _iter478 : struct.output_column_unique_ids)
          {
            oprot.writeI32(_iter478);
          }
        }
      }
      if (struct.isSetDistributeColumnIds()) {
        {
          oprot.writeI32(struct.distribute_column_ids.size());
          for (int _iter479 : struct.distribute_column_ids)
          {
            oprot.writeI32(_iter479);
          }
        }
      }
      if (struct.isSetSchemaVersion()) {
        oprot.writeI32(struct.schema_version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TOlapScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tuple_id = iprot.readI32();
      struct.setTupleIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list480 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.key_column_name = new java.util.ArrayList<java.lang.String>(_list480.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem481;
        for (int _i482 = 0; _i482 < _list480.size; ++_i482)
        {
          _elem481 = iprot.readString();
          struct.key_column_name.add(_elem481);
        }
      }
      struct.setKeyColumnNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list483 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
        struct.key_column_type = new java.util.ArrayList<org.apache.doris.thrift.TPrimitiveType>(_list483.size);
        @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TPrimitiveType _elem484;
        for (int _i485 = 0; _i485 < _list483.size; ++_i485)
        {
          _elem484 = org.apache.doris.thrift.TPrimitiveType.findByValue(iprot.readI32());
          if (_elem484 != null)
          {
            struct.key_column_type.add(_elem484);
          }
        }
      }
      struct.setKeyColumnTypeIsSet(true);
      struct.is_preaggregation = iprot.readBool();
      struct.setIsPreaggregationIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.sort_column = iprot.readString();
        struct.setSortColumnIsSet(true);
      }
      if (incoming.get(1)) {
        struct.keyType = org.apache.doris.thrift.TKeysType.findByValue(iprot.readI32());
        struct.setKeyTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.table_name = iprot.readString();
        struct.setTableNameIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list486 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.columns_desc = new java.util.ArrayList<org.apache.doris.thrift.TColumn>(_list486.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TColumn _elem487;
          for (int _i488 = 0; _i488 < _list486.size; ++_i488)
          {
            _elem487 = new org.apache.doris.thrift.TColumn();
            _elem487.read(iprot);
            struct.columns_desc.add(_elem487);
          }
        }
        struct.setColumnsDescIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sort_info = new TSortInfo();
        struct.sort_info.read(iprot);
        struct.setSortInfoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sort_limit = iprot.readI64();
        struct.setSortLimitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.enable_unique_key_merge_on_write = iprot.readBool();
        struct.setEnableUniqueKeyMergeOnWriteIsSet(true);
      }
      if (incoming.get(7)) {
        struct.push_down_agg_type_opt = org.apache.doris.thrift.TPushAggOp.findByValue(iprot.readI32());
        struct.setPushDownAggTypeOptIsSet(true);
      }
      if (incoming.get(8)) {
        struct.use_topn_opt = iprot.readBool();
        struct.setUseTopnOptIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list489 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.indexes_desc = new java.util.ArrayList<org.apache.doris.thrift.TOlapTableIndex>(_list489.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TOlapTableIndex _elem490;
          for (int _i491 = 0; _i491 < _list489.size; ++_i491)
          {
            _elem490 = new org.apache.doris.thrift.TOlapTableIndex();
            _elem490.read(iprot);
            struct.indexes_desc.add(_elem490);
          }
        }
        struct.setIndexesDescIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TSet _set492 = iprot.readSetBegin(org.apache.thrift.protocol.TType.I32);
          struct.output_column_unique_ids = new java.util.HashSet<java.lang.Integer>(2*_set492.size);
          int _elem493;
          for (int _i494 = 0; _i494 < _set492.size; ++_i494)
          {
            _elem493 = iprot.readI32();
            struct.output_column_unique_ids.add(_elem493);
          }
        }
        struct.setOutputColumnUniqueIdsIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list495 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.distribute_column_ids = new java.util.ArrayList<java.lang.Integer>(_list495.size);
          int _elem496;
          for (int _i497 = 0; _i497 < _list495.size; ++_i497)
          {
            _elem496 = iprot.readI32();
            struct.distribute_column_ids.add(_elem496);
          }
        }
        struct.setDistributeColumnIdsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.schema_version = iprot.readI32();
        struct.setSchemaVersionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

