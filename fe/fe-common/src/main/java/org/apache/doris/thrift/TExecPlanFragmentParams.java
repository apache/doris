/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-06-20")
public class TExecPlanFragmentParams implements org.apache.thrift.TBase<TExecPlanFragmentParams, TExecPlanFragmentParams._Fields>, java.io.Serializable, Cloneable, Comparable<TExecPlanFragmentParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExecPlanFragmentParams");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FRAGMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DESC_TBL_FIELD_DESC = new org.apache.thrift.protocol.TField("desc_tbl", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField COORD_FIELD_DESC = new org.apache.thrift.protocol.TField("coord", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField BACKEND_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("backend_num", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField QUERY_GLOBALS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_globals", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField QUERY_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_options", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField IS_REPORT_SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("is_report_success", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField RESOURCE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_info", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField IMPORT_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("import_label", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("db_name", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField LOAD_JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("load_job_id", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField LOAD_ERROR_HUB_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("load_error_hub_info", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField FRAGMENT_NUM_ON_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("fragment_num_on_host", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField IS_SIMPLIFIED_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("is_simplified_param", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField TXN_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("txn_conf", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField BACKEND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("backend_id", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField GLOBAL_DICT_FIELD_DESC = new org.apache.thrift.protocol.TField("global_dict", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField NEED_WAIT_EXECUTION_TRIGGER_FIELD_DESC = new org.apache.thrift.protocol.TField("need_wait_execution_trigger", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField BUILD_HASH_TABLE_FOR_BROADCAST_JOIN_FIELD_DESC = new org.apache.thrift.protocol.TField("build_hash_table_for_broadcast_join", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField INSTANCES_SHARING_HASH_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("instances_sharing_hash_table", org.apache.thrift.protocol.TType.LIST, (short)22);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)23);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TExecPlanFragmentParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TExecPlanFragmentParamsTupleSchemeFactory();

  /**
   * 
   * @see PaloInternalServiceVersion
   */
  public @org.apache.thrift.annotation.Nullable PaloInternalServiceVersion protocol_version; // required
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TPlanFragment fragment; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TDescriptorTable desc_tbl; // optional
  public @org.apache.thrift.annotation.Nullable TPlanFragmentExecParams params; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TNetworkAddress coord; // optional
  public int backend_num; // optional
  public @org.apache.thrift.annotation.Nullable TQueryGlobals query_globals; // optional
  public @org.apache.thrift.annotation.Nullable TQueryOptions query_options; // optional
  public boolean is_report_success; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TResourceInfo resource_info; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String import_label; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String db_name; // optional
  public long load_job_id; // optional
  public @org.apache.thrift.annotation.Nullable TLoadErrorHubInfo load_error_hub_info; // optional
  public int fragment_num_on_host; // optional
  public boolean is_simplified_param; // optional
  public @org.apache.thrift.annotation.Nullable TTxnParams txn_conf; // optional
  public long backend_id; // optional
  public @org.apache.thrift.annotation.Nullable TGlobalDict global_dict; // optional
  public boolean need_wait_execution_trigger; // optional
  public boolean build_hash_table_for_broadcast_join; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TUniqueId> instances_sharing_hash_table; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see PaloInternalServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    FRAGMENT((short)2, "fragment"),
    DESC_TBL((short)3, "desc_tbl"),
    PARAMS((short)4, "params"),
    COORD((short)5, "coord"),
    BACKEND_NUM((short)6, "backend_num"),
    QUERY_GLOBALS((short)7, "query_globals"),
    QUERY_OPTIONS((short)8, "query_options"),
    IS_REPORT_SUCCESS((short)9, "is_report_success"),
    RESOURCE_INFO((short)10, "resource_info"),
    IMPORT_LABEL((short)11, "import_label"),
    DB_NAME((short)12, "db_name"),
    LOAD_JOB_ID((short)13, "load_job_id"),
    LOAD_ERROR_HUB_INFO((short)14, "load_error_hub_info"),
    FRAGMENT_NUM_ON_HOST((short)15, "fragment_num_on_host"),
    IS_SIMPLIFIED_PARAM((short)16, "is_simplified_param"),
    TXN_CONF((short)17, "txn_conf"),
    BACKEND_ID((short)18, "backend_id"),
    GLOBAL_DICT((short)19, "global_dict"),
    NEED_WAIT_EXECUTION_TRIGGER((short)20, "need_wait_execution_trigger"),
    BUILD_HASH_TABLE_FOR_BROADCAST_JOIN((short)21, "build_hash_table_for_broadcast_join"),
    INSTANCES_SHARING_HASH_TABLE((short)22, "instances_sharing_hash_table"),
    TABLE_NAME((short)23, "table_name");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // FRAGMENT
          return FRAGMENT;
        case 3: // DESC_TBL
          return DESC_TBL;
        case 4: // PARAMS
          return PARAMS;
        case 5: // COORD
          return COORD;
        case 6: // BACKEND_NUM
          return BACKEND_NUM;
        case 7: // QUERY_GLOBALS
          return QUERY_GLOBALS;
        case 8: // QUERY_OPTIONS
          return QUERY_OPTIONS;
        case 9: // IS_REPORT_SUCCESS
          return IS_REPORT_SUCCESS;
        case 10: // RESOURCE_INFO
          return RESOURCE_INFO;
        case 11: // IMPORT_LABEL
          return IMPORT_LABEL;
        case 12: // DB_NAME
          return DB_NAME;
        case 13: // LOAD_JOB_ID
          return LOAD_JOB_ID;
        case 14: // LOAD_ERROR_HUB_INFO
          return LOAD_ERROR_HUB_INFO;
        case 15: // FRAGMENT_NUM_ON_HOST
          return FRAGMENT_NUM_ON_HOST;
        case 16: // IS_SIMPLIFIED_PARAM
          return IS_SIMPLIFIED_PARAM;
        case 17: // TXN_CONF
          return TXN_CONF;
        case 18: // BACKEND_ID
          return BACKEND_ID;
        case 19: // GLOBAL_DICT
          return GLOBAL_DICT;
        case 20: // NEED_WAIT_EXECUTION_TRIGGER
          return NEED_WAIT_EXECUTION_TRIGGER;
        case 21: // BUILD_HASH_TABLE_FOR_BROADCAST_JOIN
          return BUILD_HASH_TABLE_FOR_BROADCAST_JOIN;
        case 22: // INSTANCES_SHARING_HASH_TABLE
          return INSTANCES_SHARING_HASH_TABLE;
        case 23: // TABLE_NAME
          return TABLE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BACKEND_NUM_ISSET_ID = 0;
  private static final int __IS_REPORT_SUCCESS_ISSET_ID = 1;
  private static final int __LOAD_JOB_ID_ISSET_ID = 2;
  private static final int __FRAGMENT_NUM_ON_HOST_ISSET_ID = 3;
  private static final int __IS_SIMPLIFIED_PARAM_ISSET_ID = 4;
  private static final int __BACKEND_ID_ISSET_ID = 5;
  private static final int __NEED_WAIT_EXECUTION_TRIGGER_ISSET_ID = 6;
  private static final int __BUILD_HASH_TABLE_FOR_BROADCAST_JOIN_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FRAGMENT,_Fields.DESC_TBL,_Fields.PARAMS,_Fields.COORD,_Fields.BACKEND_NUM,_Fields.QUERY_GLOBALS,_Fields.QUERY_OPTIONS,_Fields.IS_REPORT_SUCCESS,_Fields.RESOURCE_INFO,_Fields.IMPORT_LABEL,_Fields.DB_NAME,_Fields.LOAD_JOB_ID,_Fields.LOAD_ERROR_HUB_INFO,_Fields.FRAGMENT_NUM_ON_HOST,_Fields.IS_SIMPLIFIED_PARAM,_Fields.TXN_CONF,_Fields.BACKEND_ID,_Fields.GLOBAL_DICT,_Fields.NEED_WAIT_EXECUTION_TRIGGER,_Fields.BUILD_HASH_TABLE_FOR_BROADCAST_JOIN,_Fields.INSTANCES_SHARING_HASH_TABLE,_Fields.TABLE_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PaloInternalServiceVersion.class)));
    tmpMap.put(_Fields.FRAGMENT, new org.apache.thrift.meta_data.FieldMetaData("fragment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TPlanFragment.class)));
    tmpMap.put(_Fields.DESC_TBL, new org.apache.thrift.meta_data.FieldMetaData("desc_tbl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TDescriptorTable.class)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlanFragmentExecParams.class)));
    tmpMap.put(_Fields.COORD, new org.apache.thrift.meta_data.FieldMetaData("coord", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.BACKEND_NUM, new org.apache.thrift.meta_data.FieldMetaData("backend_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUERY_GLOBALS, new org.apache.thrift.meta_data.FieldMetaData("query_globals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryGlobals.class)));
    tmpMap.put(_Fields.QUERY_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("query_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryOptions.class)));
    tmpMap.put(_Fields.IS_REPORT_SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("is_report_success", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESOURCE_INFO, new org.apache.thrift.meta_data.FieldMetaData("resource_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TResourceInfo.class)));
    tmpMap.put(_Fields.IMPORT_LABEL, new org.apache.thrift.meta_data.FieldMetaData("import_label", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB_NAME, new org.apache.thrift.meta_data.FieldMetaData("db_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAD_JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("load_job_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOAD_ERROR_HUB_INFO, new org.apache.thrift.meta_data.FieldMetaData("load_error_hub_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLoadErrorHubInfo.class)));
    tmpMap.put(_Fields.FRAGMENT_NUM_ON_HOST, new org.apache.thrift.meta_data.FieldMetaData("fragment_num_on_host", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_SIMPLIFIED_PARAM, new org.apache.thrift.meta_data.FieldMetaData("is_simplified_param", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TXN_CONF, new org.apache.thrift.meta_data.FieldMetaData("txn_conf", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTxnParams.class)));
    tmpMap.put(_Fields.BACKEND_ID, new org.apache.thrift.meta_data.FieldMetaData("backend_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GLOBAL_DICT, new org.apache.thrift.meta_data.FieldMetaData("global_dict", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGlobalDict.class)));
    tmpMap.put(_Fields.NEED_WAIT_EXECUTION_TRIGGER, new org.apache.thrift.meta_data.FieldMetaData("need_wait_execution_trigger", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BUILD_HASH_TABLE_FOR_BROADCAST_JOIN, new org.apache.thrift.meta_data.FieldMetaData("build_hash_table_for_broadcast_join", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INSTANCES_SHARING_HASH_TABLE, new org.apache.thrift.meta_data.FieldMetaData("instances_sharing_hash_table", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TUniqueId.class))));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExecPlanFragmentParams.class, metaDataMap);
  }

  public TExecPlanFragmentParams() {
    this.is_simplified_param = false;

    this.need_wait_execution_trigger = false;

    this.build_hash_table_for_broadcast_join = false;

  }

  public TExecPlanFragmentParams(
    PaloInternalServiceVersion protocol_version)
  {
    this();
    this.protocol_version = protocol_version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExecPlanFragmentParams(TExecPlanFragmentParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProtocolVersion()) {
      this.protocol_version = other.protocol_version;
    }
    if (other.isSetFragment()) {
      this.fragment = new org.apache.doris.thrift.TPlanFragment(other.fragment);
    }
    if (other.isSetDescTbl()) {
      this.desc_tbl = new org.apache.doris.thrift.TDescriptorTable(other.desc_tbl);
    }
    if (other.isSetParams()) {
      this.params = new TPlanFragmentExecParams(other.params);
    }
    if (other.isSetCoord()) {
      this.coord = new org.apache.doris.thrift.TNetworkAddress(other.coord);
    }
    this.backend_num = other.backend_num;
    if (other.isSetQueryGlobals()) {
      this.query_globals = new TQueryGlobals(other.query_globals);
    }
    if (other.isSetQueryOptions()) {
      this.query_options = new TQueryOptions(other.query_options);
    }
    this.is_report_success = other.is_report_success;
    if (other.isSetResourceInfo()) {
      this.resource_info = new org.apache.doris.thrift.TResourceInfo(other.resource_info);
    }
    if (other.isSetImportLabel()) {
      this.import_label = other.import_label;
    }
    if (other.isSetDbName()) {
      this.db_name = other.db_name;
    }
    this.load_job_id = other.load_job_id;
    if (other.isSetLoadErrorHubInfo()) {
      this.load_error_hub_info = new TLoadErrorHubInfo(other.load_error_hub_info);
    }
    this.fragment_num_on_host = other.fragment_num_on_host;
    this.is_simplified_param = other.is_simplified_param;
    if (other.isSetTxnConf()) {
      this.txn_conf = new TTxnParams(other.txn_conf);
    }
    this.backend_id = other.backend_id;
    if (other.isSetGlobalDict()) {
      this.global_dict = new TGlobalDict(other.global_dict);
    }
    this.need_wait_execution_trigger = other.need_wait_execution_trigger;
    this.build_hash_table_for_broadcast_join = other.build_hash_table_for_broadcast_join;
    if (other.isSetInstancesSharingHashTable()) {
      java.util.List<org.apache.doris.thrift.TUniqueId> __this__instances_sharing_hash_table = new java.util.ArrayList<org.apache.doris.thrift.TUniqueId>(other.instances_sharing_hash_table.size());
      for (org.apache.doris.thrift.TUniqueId other_element : other.instances_sharing_hash_table) {
        __this__instances_sharing_hash_table.add(new org.apache.doris.thrift.TUniqueId(other_element));
      }
      this.instances_sharing_hash_table = __this__instances_sharing_hash_table;
    }
    if (other.isSetTableName()) {
      this.table_name = other.table_name;
    }
  }

  @Override
  public TExecPlanFragmentParams deepCopy() {
    return new TExecPlanFragmentParams(this);
  }

  @Override
  public void clear() {
    this.protocol_version = null;
    this.fragment = null;
    this.desc_tbl = null;
    this.params = null;
    this.coord = null;
    setBackendNumIsSet(false);
    this.backend_num = 0;
    this.query_globals = null;
    this.query_options = null;
    setIsReportSuccessIsSet(false);
    this.is_report_success = false;
    this.resource_info = null;
    this.import_label = null;
    this.db_name = null;
    setLoadJobIdIsSet(false);
    this.load_job_id = 0;
    this.load_error_hub_info = null;
    setFragmentNumOnHostIsSet(false);
    this.fragment_num_on_host = 0;
    this.is_simplified_param = false;

    this.txn_conf = null;
    setBackendIdIsSet(false);
    this.backend_id = 0;
    this.global_dict = null;
    this.need_wait_execution_trigger = false;

    this.build_hash_table_for_broadcast_join = false;

    this.instances_sharing_hash_table = null;
    this.table_name = null;
  }

  /**
   * 
   * @see PaloInternalServiceVersion
   */
  @org.apache.thrift.annotation.Nullable
  public PaloInternalServiceVersion getProtocolVersion() {
    return this.protocol_version;
  }

  /**
   * 
   * @see PaloInternalServiceVersion
   */
  public TExecPlanFragmentParams setProtocolVersion(@org.apache.thrift.annotation.Nullable PaloInternalServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
    return this;
  }

  public void unsetProtocolVersion() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocolVersion() {
    return this.protocol_version != null;
  }

  public void setProtocolVersionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TPlanFragment getFragment() {
    return this.fragment;
  }

  public TExecPlanFragmentParams setFragment(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TPlanFragment fragment) {
    this.fragment = fragment;
    return this;
  }

  public void unsetFragment() {
    this.fragment = null;
  }

  /** Returns true if field fragment is set (has been assigned a value) and false otherwise */
  public boolean isSetFragment() {
    return this.fragment != null;
  }

  public void setFragmentIsSet(boolean value) {
    if (!value) {
      this.fragment = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TDescriptorTable getDescTbl() {
    return this.desc_tbl;
  }

  public TExecPlanFragmentParams setDescTbl(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TDescriptorTable desc_tbl) {
    this.desc_tbl = desc_tbl;
    return this;
  }

  public void unsetDescTbl() {
    this.desc_tbl = null;
  }

  /** Returns true if field desc_tbl is set (has been assigned a value) and false otherwise */
  public boolean isSetDescTbl() {
    return this.desc_tbl != null;
  }

  public void setDescTblIsSet(boolean value) {
    if (!value) {
      this.desc_tbl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TPlanFragmentExecParams getParams() {
    return this.params;
  }

  public TExecPlanFragmentParams setParams(@org.apache.thrift.annotation.Nullable TPlanFragmentExecParams params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TNetworkAddress getCoord() {
    return this.coord;
  }

  public TExecPlanFragmentParams setCoord(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TNetworkAddress coord) {
    this.coord = coord;
    return this;
  }

  public void unsetCoord() {
    this.coord = null;
  }

  /** Returns true if field coord is set (has been assigned a value) and false otherwise */
  public boolean isSetCoord() {
    return this.coord != null;
  }

  public void setCoordIsSet(boolean value) {
    if (!value) {
      this.coord = null;
    }
  }

  public int getBackendNum() {
    return this.backend_num;
  }

  public TExecPlanFragmentParams setBackendNum(int backend_num) {
    this.backend_num = backend_num;
    setBackendNumIsSet(true);
    return this;
  }

  public void unsetBackendNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  /** Returns true if field backend_num is set (has been assigned a value) and false otherwise */
  public boolean isSetBackendNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID);
  }

  public void setBackendNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BACKEND_NUM_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TQueryGlobals getQueryGlobals() {
    return this.query_globals;
  }

  public TExecPlanFragmentParams setQueryGlobals(@org.apache.thrift.annotation.Nullable TQueryGlobals query_globals) {
    this.query_globals = query_globals;
    return this;
  }

  public void unsetQueryGlobals() {
    this.query_globals = null;
  }

  /** Returns true if field query_globals is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryGlobals() {
    return this.query_globals != null;
  }

  public void setQueryGlobalsIsSet(boolean value) {
    if (!value) {
      this.query_globals = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TQueryOptions getQueryOptions() {
    return this.query_options;
  }

  public TExecPlanFragmentParams setQueryOptions(@org.apache.thrift.annotation.Nullable TQueryOptions query_options) {
    this.query_options = query_options;
    return this;
  }

  public void unsetQueryOptions() {
    this.query_options = null;
  }

  /** Returns true if field query_options is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryOptions() {
    return this.query_options != null;
  }

  public void setQueryOptionsIsSet(boolean value) {
    if (!value) {
      this.query_options = null;
    }
  }

  public boolean isIsReportSuccess() {
    return this.is_report_success;
  }

  public TExecPlanFragmentParams setIsReportSuccess(boolean is_report_success) {
    this.is_report_success = is_report_success;
    setIsReportSuccessIsSet(true);
    return this;
  }

  public void unsetIsReportSuccess() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_REPORT_SUCCESS_ISSET_ID);
  }

  /** Returns true if field is_report_success is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReportSuccess() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_REPORT_SUCCESS_ISSET_ID);
  }

  public void setIsReportSuccessIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_REPORT_SUCCESS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TResourceInfo getResourceInfo() {
    return this.resource_info;
  }

  public TExecPlanFragmentParams setResourceInfo(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TResourceInfo resource_info) {
    this.resource_info = resource_info;
    return this;
  }

  public void unsetResourceInfo() {
    this.resource_info = null;
  }

  /** Returns true if field resource_info is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceInfo() {
    return this.resource_info != null;
  }

  public void setResourceInfoIsSet(boolean value) {
    if (!value) {
      this.resource_info = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getImportLabel() {
    return this.import_label;
  }

  public TExecPlanFragmentParams setImportLabel(@org.apache.thrift.annotation.Nullable java.lang.String import_label) {
    this.import_label = import_label;
    return this;
  }

  public void unsetImportLabel() {
    this.import_label = null;
  }

  /** Returns true if field import_label is set (has been assigned a value) and false otherwise */
  public boolean isSetImportLabel() {
    return this.import_label != null;
  }

  public void setImportLabelIsSet(boolean value) {
    if (!value) {
      this.import_label = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDbName() {
    return this.db_name;
  }

  public TExecPlanFragmentParams setDbName(@org.apache.thrift.annotation.Nullable java.lang.String db_name) {
    this.db_name = db_name;
    return this;
  }

  public void unsetDbName() {
    this.db_name = null;
  }

  /** Returns true if field db_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDbName() {
    return this.db_name != null;
  }

  public void setDbNameIsSet(boolean value) {
    if (!value) {
      this.db_name = null;
    }
  }

  public long getLoadJobId() {
    return this.load_job_id;
  }

  public TExecPlanFragmentParams setLoadJobId(long load_job_id) {
    this.load_job_id = load_job_id;
    setLoadJobIdIsSet(true);
    return this;
  }

  public void unsetLoadJobId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOAD_JOB_ID_ISSET_ID);
  }

  /** Returns true if field load_job_id is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadJobId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOAD_JOB_ID_ISSET_ID);
  }

  public void setLoadJobIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOAD_JOB_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TLoadErrorHubInfo getLoadErrorHubInfo() {
    return this.load_error_hub_info;
  }

  public TExecPlanFragmentParams setLoadErrorHubInfo(@org.apache.thrift.annotation.Nullable TLoadErrorHubInfo load_error_hub_info) {
    this.load_error_hub_info = load_error_hub_info;
    return this;
  }

  public void unsetLoadErrorHubInfo() {
    this.load_error_hub_info = null;
  }

  /** Returns true if field load_error_hub_info is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadErrorHubInfo() {
    return this.load_error_hub_info != null;
  }

  public void setLoadErrorHubInfoIsSet(boolean value) {
    if (!value) {
      this.load_error_hub_info = null;
    }
  }

  public int getFragmentNumOnHost() {
    return this.fragment_num_on_host;
  }

  public TExecPlanFragmentParams setFragmentNumOnHost(int fragment_num_on_host) {
    this.fragment_num_on_host = fragment_num_on_host;
    setFragmentNumOnHostIsSet(true);
    return this;
  }

  public void unsetFragmentNumOnHost() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FRAGMENT_NUM_ON_HOST_ISSET_ID);
  }

  /** Returns true if field fragment_num_on_host is set (has been assigned a value) and false otherwise */
  public boolean isSetFragmentNumOnHost() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FRAGMENT_NUM_ON_HOST_ISSET_ID);
  }

  public void setFragmentNumOnHostIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FRAGMENT_NUM_ON_HOST_ISSET_ID, value);
  }

  public boolean isIsSimplifiedParam() {
    return this.is_simplified_param;
  }

  public TExecPlanFragmentParams setIsSimplifiedParam(boolean is_simplified_param) {
    this.is_simplified_param = is_simplified_param;
    setIsSimplifiedParamIsSet(true);
    return this;
  }

  public void unsetIsSimplifiedParam() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_SIMPLIFIED_PARAM_ISSET_ID);
  }

  /** Returns true if field is_simplified_param is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSimplifiedParam() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_SIMPLIFIED_PARAM_ISSET_ID);
  }

  public void setIsSimplifiedParamIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_SIMPLIFIED_PARAM_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TTxnParams getTxnConf() {
    return this.txn_conf;
  }

  public TExecPlanFragmentParams setTxnConf(@org.apache.thrift.annotation.Nullable TTxnParams txn_conf) {
    this.txn_conf = txn_conf;
    return this;
  }

  public void unsetTxnConf() {
    this.txn_conf = null;
  }

  /** Returns true if field txn_conf is set (has been assigned a value) and false otherwise */
  public boolean isSetTxnConf() {
    return this.txn_conf != null;
  }

  public void setTxnConfIsSet(boolean value) {
    if (!value) {
      this.txn_conf = null;
    }
  }

  public long getBackendId() {
    return this.backend_id;
  }

  public TExecPlanFragmentParams setBackendId(long backend_id) {
    this.backend_id = backend_id;
    setBackendIdIsSet(true);
    return this;
  }

  public void unsetBackendId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BACKEND_ID_ISSET_ID);
  }

  /** Returns true if field backend_id is set (has been assigned a value) and false otherwise */
  public boolean isSetBackendId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BACKEND_ID_ISSET_ID);
  }

  public void setBackendIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BACKEND_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TGlobalDict getGlobalDict() {
    return this.global_dict;
  }

  public TExecPlanFragmentParams setGlobalDict(@org.apache.thrift.annotation.Nullable TGlobalDict global_dict) {
    this.global_dict = global_dict;
    return this;
  }

  public void unsetGlobalDict() {
    this.global_dict = null;
  }

  /** Returns true if field global_dict is set (has been assigned a value) and false otherwise */
  public boolean isSetGlobalDict() {
    return this.global_dict != null;
  }

  public void setGlobalDictIsSet(boolean value) {
    if (!value) {
      this.global_dict = null;
    }
  }

  public boolean isNeedWaitExecutionTrigger() {
    return this.need_wait_execution_trigger;
  }

  public TExecPlanFragmentParams setNeedWaitExecutionTrigger(boolean need_wait_execution_trigger) {
    this.need_wait_execution_trigger = need_wait_execution_trigger;
    setNeedWaitExecutionTriggerIsSet(true);
    return this;
  }

  public void unsetNeedWaitExecutionTrigger() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEED_WAIT_EXECUTION_TRIGGER_ISSET_ID);
  }

  /** Returns true if field need_wait_execution_trigger is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedWaitExecutionTrigger() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEED_WAIT_EXECUTION_TRIGGER_ISSET_ID);
  }

  public void setNeedWaitExecutionTriggerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEED_WAIT_EXECUTION_TRIGGER_ISSET_ID, value);
  }

  public boolean isBuildHashTableForBroadcastJoin() {
    return this.build_hash_table_for_broadcast_join;
  }

  public TExecPlanFragmentParams setBuildHashTableForBroadcastJoin(boolean build_hash_table_for_broadcast_join) {
    this.build_hash_table_for_broadcast_join = build_hash_table_for_broadcast_join;
    setBuildHashTableForBroadcastJoinIsSet(true);
    return this;
  }

  public void unsetBuildHashTableForBroadcastJoin() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUILD_HASH_TABLE_FOR_BROADCAST_JOIN_ISSET_ID);
  }

  /** Returns true if field build_hash_table_for_broadcast_join is set (has been assigned a value) and false otherwise */
  public boolean isSetBuildHashTableForBroadcastJoin() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUILD_HASH_TABLE_FOR_BROADCAST_JOIN_ISSET_ID);
  }

  public void setBuildHashTableForBroadcastJoinIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUILD_HASH_TABLE_FOR_BROADCAST_JOIN_ISSET_ID, value);
  }

  public int getInstancesSharingHashTableSize() {
    return (this.instances_sharing_hash_table == null) ? 0 : this.instances_sharing_hash_table.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TUniqueId> getInstancesSharingHashTableIterator() {
    return (this.instances_sharing_hash_table == null) ? null : this.instances_sharing_hash_table.iterator();
  }

  public void addToInstancesSharingHashTable(org.apache.doris.thrift.TUniqueId elem) {
    if (this.instances_sharing_hash_table == null) {
      this.instances_sharing_hash_table = new java.util.ArrayList<org.apache.doris.thrift.TUniqueId>();
    }
    this.instances_sharing_hash_table.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TUniqueId> getInstancesSharingHashTable() {
    return this.instances_sharing_hash_table;
  }

  public TExecPlanFragmentParams setInstancesSharingHashTable(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TUniqueId> instances_sharing_hash_table) {
    this.instances_sharing_hash_table = instances_sharing_hash_table;
    return this;
  }

  public void unsetInstancesSharingHashTable() {
    this.instances_sharing_hash_table = null;
  }

  /** Returns true if field instances_sharing_hash_table is set (has been assigned a value) and false otherwise */
  public boolean isSetInstancesSharingHashTable() {
    return this.instances_sharing_hash_table != null;
  }

  public void setInstancesSharingHashTableIsSet(boolean value) {
    if (!value) {
      this.instances_sharing_hash_table = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTableName() {
    return this.table_name;
  }

  public TExecPlanFragmentParams setTableName(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTableName() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.table_name != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocolVersion();
      } else {
        setProtocolVersion((PaloInternalServiceVersion)value);
      }
      break;

    case FRAGMENT:
      if (value == null) {
        unsetFragment();
      } else {
        setFragment((org.apache.doris.thrift.TPlanFragment)value);
      }
      break;

    case DESC_TBL:
      if (value == null) {
        unsetDescTbl();
      } else {
        setDescTbl((org.apache.doris.thrift.TDescriptorTable)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((TPlanFragmentExecParams)value);
      }
      break;

    case COORD:
      if (value == null) {
        unsetCoord();
      } else {
        setCoord((org.apache.doris.thrift.TNetworkAddress)value);
      }
      break;

    case BACKEND_NUM:
      if (value == null) {
        unsetBackendNum();
      } else {
        setBackendNum((java.lang.Integer)value);
      }
      break;

    case QUERY_GLOBALS:
      if (value == null) {
        unsetQueryGlobals();
      } else {
        setQueryGlobals((TQueryGlobals)value);
      }
      break;

    case QUERY_OPTIONS:
      if (value == null) {
        unsetQueryOptions();
      } else {
        setQueryOptions((TQueryOptions)value);
      }
      break;

    case IS_REPORT_SUCCESS:
      if (value == null) {
        unsetIsReportSuccess();
      } else {
        setIsReportSuccess((java.lang.Boolean)value);
      }
      break;

    case RESOURCE_INFO:
      if (value == null) {
        unsetResourceInfo();
      } else {
        setResourceInfo((org.apache.doris.thrift.TResourceInfo)value);
      }
      break;

    case IMPORT_LABEL:
      if (value == null) {
        unsetImportLabel();
      } else {
        setImportLabel((java.lang.String)value);
      }
      break;

    case DB_NAME:
      if (value == null) {
        unsetDbName();
      } else {
        setDbName((java.lang.String)value);
      }
      break;

    case LOAD_JOB_ID:
      if (value == null) {
        unsetLoadJobId();
      } else {
        setLoadJobId((java.lang.Long)value);
      }
      break;

    case LOAD_ERROR_HUB_INFO:
      if (value == null) {
        unsetLoadErrorHubInfo();
      } else {
        setLoadErrorHubInfo((TLoadErrorHubInfo)value);
      }
      break;

    case FRAGMENT_NUM_ON_HOST:
      if (value == null) {
        unsetFragmentNumOnHost();
      } else {
        setFragmentNumOnHost((java.lang.Integer)value);
      }
      break;

    case IS_SIMPLIFIED_PARAM:
      if (value == null) {
        unsetIsSimplifiedParam();
      } else {
        setIsSimplifiedParam((java.lang.Boolean)value);
      }
      break;

    case TXN_CONF:
      if (value == null) {
        unsetTxnConf();
      } else {
        setTxnConf((TTxnParams)value);
      }
      break;

    case BACKEND_ID:
      if (value == null) {
        unsetBackendId();
      } else {
        setBackendId((java.lang.Long)value);
      }
      break;

    case GLOBAL_DICT:
      if (value == null) {
        unsetGlobalDict();
      } else {
        setGlobalDict((TGlobalDict)value);
      }
      break;

    case NEED_WAIT_EXECUTION_TRIGGER:
      if (value == null) {
        unsetNeedWaitExecutionTrigger();
      } else {
        setNeedWaitExecutionTrigger((java.lang.Boolean)value);
      }
      break;

    case BUILD_HASH_TABLE_FOR_BROADCAST_JOIN:
      if (value == null) {
        unsetBuildHashTableForBroadcastJoin();
      } else {
        setBuildHashTableForBroadcastJoin((java.lang.Boolean)value);
      }
      break;

    case INSTANCES_SHARING_HASH_TABLE:
      if (value == null) {
        unsetInstancesSharingHashTable();
      } else {
        setInstancesSharingHashTable((java.util.List<org.apache.doris.thrift.TUniqueId>)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocolVersion();

    case FRAGMENT:
      return getFragment();

    case DESC_TBL:
      return getDescTbl();

    case PARAMS:
      return getParams();

    case COORD:
      return getCoord();

    case BACKEND_NUM:
      return getBackendNum();

    case QUERY_GLOBALS:
      return getQueryGlobals();

    case QUERY_OPTIONS:
      return getQueryOptions();

    case IS_REPORT_SUCCESS:
      return isIsReportSuccess();

    case RESOURCE_INFO:
      return getResourceInfo();

    case IMPORT_LABEL:
      return getImportLabel();

    case DB_NAME:
      return getDbName();

    case LOAD_JOB_ID:
      return getLoadJobId();

    case LOAD_ERROR_HUB_INFO:
      return getLoadErrorHubInfo();

    case FRAGMENT_NUM_ON_HOST:
      return getFragmentNumOnHost();

    case IS_SIMPLIFIED_PARAM:
      return isIsSimplifiedParam();

    case TXN_CONF:
      return getTxnConf();

    case BACKEND_ID:
      return getBackendId();

    case GLOBAL_DICT:
      return getGlobalDict();

    case NEED_WAIT_EXECUTION_TRIGGER:
      return isNeedWaitExecutionTrigger();

    case BUILD_HASH_TABLE_FOR_BROADCAST_JOIN:
      return isBuildHashTableForBroadcastJoin();

    case INSTANCES_SHARING_HASH_TABLE:
      return getInstancesSharingHashTable();

    case TABLE_NAME:
      return getTableName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocolVersion();
    case FRAGMENT:
      return isSetFragment();
    case DESC_TBL:
      return isSetDescTbl();
    case PARAMS:
      return isSetParams();
    case COORD:
      return isSetCoord();
    case BACKEND_NUM:
      return isSetBackendNum();
    case QUERY_GLOBALS:
      return isSetQueryGlobals();
    case QUERY_OPTIONS:
      return isSetQueryOptions();
    case IS_REPORT_SUCCESS:
      return isSetIsReportSuccess();
    case RESOURCE_INFO:
      return isSetResourceInfo();
    case IMPORT_LABEL:
      return isSetImportLabel();
    case DB_NAME:
      return isSetDbName();
    case LOAD_JOB_ID:
      return isSetLoadJobId();
    case LOAD_ERROR_HUB_INFO:
      return isSetLoadErrorHubInfo();
    case FRAGMENT_NUM_ON_HOST:
      return isSetFragmentNumOnHost();
    case IS_SIMPLIFIED_PARAM:
      return isSetIsSimplifiedParam();
    case TXN_CONF:
      return isSetTxnConf();
    case BACKEND_ID:
      return isSetBackendId();
    case GLOBAL_DICT:
      return isSetGlobalDict();
    case NEED_WAIT_EXECUTION_TRIGGER:
      return isSetNeedWaitExecutionTrigger();
    case BUILD_HASH_TABLE_FOR_BROADCAST_JOIN:
      return isSetBuildHashTableForBroadcastJoin();
    case INSTANCES_SHARING_HASH_TABLE:
      return isSetInstancesSharingHashTable();
    case TABLE_NAME:
      return isSetTableName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TExecPlanFragmentParams)
      return this.equals((TExecPlanFragmentParams)that);
    return false;
  }

  public boolean equals(TExecPlanFragmentParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_protocol_version = true && this.isSetProtocolVersion();
    boolean that_present_protocol_version = true && that.isSetProtocolVersion();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_fragment = true && this.isSetFragment();
    boolean that_present_fragment = true && that.isSetFragment();
    if (this_present_fragment || that_present_fragment) {
      if (!(this_present_fragment && that_present_fragment))
        return false;
      if (!this.fragment.equals(that.fragment))
        return false;
    }

    boolean this_present_desc_tbl = true && this.isSetDescTbl();
    boolean that_present_desc_tbl = true && that.isSetDescTbl();
    if (this_present_desc_tbl || that_present_desc_tbl) {
      if (!(this_present_desc_tbl && that_present_desc_tbl))
        return false;
      if (!this.desc_tbl.equals(that.desc_tbl))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_coord = true && this.isSetCoord();
    boolean that_present_coord = true && that.isSetCoord();
    if (this_present_coord || that_present_coord) {
      if (!(this_present_coord && that_present_coord))
        return false;
      if (!this.coord.equals(that.coord))
        return false;
    }

    boolean this_present_backend_num = true && this.isSetBackendNum();
    boolean that_present_backend_num = true && that.isSetBackendNum();
    if (this_present_backend_num || that_present_backend_num) {
      if (!(this_present_backend_num && that_present_backend_num))
        return false;
      if (this.backend_num != that.backend_num)
        return false;
    }

    boolean this_present_query_globals = true && this.isSetQueryGlobals();
    boolean that_present_query_globals = true && that.isSetQueryGlobals();
    if (this_present_query_globals || that_present_query_globals) {
      if (!(this_present_query_globals && that_present_query_globals))
        return false;
      if (!this.query_globals.equals(that.query_globals))
        return false;
    }

    boolean this_present_query_options = true && this.isSetQueryOptions();
    boolean that_present_query_options = true && that.isSetQueryOptions();
    if (this_present_query_options || that_present_query_options) {
      if (!(this_present_query_options && that_present_query_options))
        return false;
      if (!this.query_options.equals(that.query_options))
        return false;
    }

    boolean this_present_is_report_success = true && this.isSetIsReportSuccess();
    boolean that_present_is_report_success = true && that.isSetIsReportSuccess();
    if (this_present_is_report_success || that_present_is_report_success) {
      if (!(this_present_is_report_success && that_present_is_report_success))
        return false;
      if (this.is_report_success != that.is_report_success)
        return false;
    }

    boolean this_present_resource_info = true && this.isSetResourceInfo();
    boolean that_present_resource_info = true && that.isSetResourceInfo();
    if (this_present_resource_info || that_present_resource_info) {
      if (!(this_present_resource_info && that_present_resource_info))
        return false;
      if (!this.resource_info.equals(that.resource_info))
        return false;
    }

    boolean this_present_import_label = true && this.isSetImportLabel();
    boolean that_present_import_label = true && that.isSetImportLabel();
    if (this_present_import_label || that_present_import_label) {
      if (!(this_present_import_label && that_present_import_label))
        return false;
      if (!this.import_label.equals(that.import_label))
        return false;
    }

    boolean this_present_db_name = true && this.isSetDbName();
    boolean that_present_db_name = true && that.isSetDbName();
    if (this_present_db_name || that_present_db_name) {
      if (!(this_present_db_name && that_present_db_name))
        return false;
      if (!this.db_name.equals(that.db_name))
        return false;
    }

    boolean this_present_load_job_id = true && this.isSetLoadJobId();
    boolean that_present_load_job_id = true && that.isSetLoadJobId();
    if (this_present_load_job_id || that_present_load_job_id) {
      if (!(this_present_load_job_id && that_present_load_job_id))
        return false;
      if (this.load_job_id != that.load_job_id)
        return false;
    }

    boolean this_present_load_error_hub_info = true && this.isSetLoadErrorHubInfo();
    boolean that_present_load_error_hub_info = true && that.isSetLoadErrorHubInfo();
    if (this_present_load_error_hub_info || that_present_load_error_hub_info) {
      if (!(this_present_load_error_hub_info && that_present_load_error_hub_info))
        return false;
      if (!this.load_error_hub_info.equals(that.load_error_hub_info))
        return false;
    }

    boolean this_present_fragment_num_on_host = true && this.isSetFragmentNumOnHost();
    boolean that_present_fragment_num_on_host = true && that.isSetFragmentNumOnHost();
    if (this_present_fragment_num_on_host || that_present_fragment_num_on_host) {
      if (!(this_present_fragment_num_on_host && that_present_fragment_num_on_host))
        return false;
      if (this.fragment_num_on_host != that.fragment_num_on_host)
        return false;
    }

    boolean this_present_is_simplified_param = true && this.isSetIsSimplifiedParam();
    boolean that_present_is_simplified_param = true && that.isSetIsSimplifiedParam();
    if (this_present_is_simplified_param || that_present_is_simplified_param) {
      if (!(this_present_is_simplified_param && that_present_is_simplified_param))
        return false;
      if (this.is_simplified_param != that.is_simplified_param)
        return false;
    }

    boolean this_present_txn_conf = true && this.isSetTxnConf();
    boolean that_present_txn_conf = true && that.isSetTxnConf();
    if (this_present_txn_conf || that_present_txn_conf) {
      if (!(this_present_txn_conf && that_present_txn_conf))
        return false;
      if (!this.txn_conf.equals(that.txn_conf))
        return false;
    }

    boolean this_present_backend_id = true && this.isSetBackendId();
    boolean that_present_backend_id = true && that.isSetBackendId();
    if (this_present_backend_id || that_present_backend_id) {
      if (!(this_present_backend_id && that_present_backend_id))
        return false;
      if (this.backend_id != that.backend_id)
        return false;
    }

    boolean this_present_global_dict = true && this.isSetGlobalDict();
    boolean that_present_global_dict = true && that.isSetGlobalDict();
    if (this_present_global_dict || that_present_global_dict) {
      if (!(this_present_global_dict && that_present_global_dict))
        return false;
      if (!this.global_dict.equals(that.global_dict))
        return false;
    }

    boolean this_present_need_wait_execution_trigger = true && this.isSetNeedWaitExecutionTrigger();
    boolean that_present_need_wait_execution_trigger = true && that.isSetNeedWaitExecutionTrigger();
    if (this_present_need_wait_execution_trigger || that_present_need_wait_execution_trigger) {
      if (!(this_present_need_wait_execution_trigger && that_present_need_wait_execution_trigger))
        return false;
      if (this.need_wait_execution_trigger != that.need_wait_execution_trigger)
        return false;
    }

    boolean this_present_build_hash_table_for_broadcast_join = true && this.isSetBuildHashTableForBroadcastJoin();
    boolean that_present_build_hash_table_for_broadcast_join = true && that.isSetBuildHashTableForBroadcastJoin();
    if (this_present_build_hash_table_for_broadcast_join || that_present_build_hash_table_for_broadcast_join) {
      if (!(this_present_build_hash_table_for_broadcast_join && that_present_build_hash_table_for_broadcast_join))
        return false;
      if (this.build_hash_table_for_broadcast_join != that.build_hash_table_for_broadcast_join)
        return false;
    }

    boolean this_present_instances_sharing_hash_table = true && this.isSetInstancesSharingHashTable();
    boolean that_present_instances_sharing_hash_table = true && that.isSetInstancesSharingHashTable();
    if (this_present_instances_sharing_hash_table || that_present_instances_sharing_hash_table) {
      if (!(this_present_instances_sharing_hash_table && that_present_instances_sharing_hash_table))
        return false;
      if (!this.instances_sharing_hash_table.equals(that.instances_sharing_hash_table))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTableName();
    boolean that_present_table_name = true && that.isSetTableName();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetProtocolVersion()) ? 131071 : 524287);
    if (isSetProtocolVersion())
      hashCode = hashCode * 8191 + protocol_version.getValue();

    hashCode = hashCode * 8191 + ((isSetFragment()) ? 131071 : 524287);
    if (isSetFragment())
      hashCode = hashCode * 8191 + fragment.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescTbl()) ? 131071 : 524287);
    if (isSetDescTbl())
      hashCode = hashCode * 8191 + desc_tbl.hashCode();

    hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
    if (isSetParams())
      hashCode = hashCode * 8191 + params.hashCode();

    hashCode = hashCode * 8191 + ((isSetCoord()) ? 131071 : 524287);
    if (isSetCoord())
      hashCode = hashCode * 8191 + coord.hashCode();

    hashCode = hashCode * 8191 + ((isSetBackendNum()) ? 131071 : 524287);
    if (isSetBackendNum())
      hashCode = hashCode * 8191 + backend_num;

    hashCode = hashCode * 8191 + ((isSetQueryGlobals()) ? 131071 : 524287);
    if (isSetQueryGlobals())
      hashCode = hashCode * 8191 + query_globals.hashCode();

    hashCode = hashCode * 8191 + ((isSetQueryOptions()) ? 131071 : 524287);
    if (isSetQueryOptions())
      hashCode = hashCode * 8191 + query_options.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsReportSuccess()) ? 131071 : 524287);
    if (isSetIsReportSuccess())
      hashCode = hashCode * 8191 + ((is_report_success) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetResourceInfo()) ? 131071 : 524287);
    if (isSetResourceInfo())
      hashCode = hashCode * 8191 + resource_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetImportLabel()) ? 131071 : 524287);
    if (isSetImportLabel())
      hashCode = hashCode * 8191 + import_label.hashCode();

    hashCode = hashCode * 8191 + ((isSetDbName()) ? 131071 : 524287);
    if (isSetDbName())
      hashCode = hashCode * 8191 + db_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetLoadJobId()) ? 131071 : 524287);
    if (isSetLoadJobId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(load_job_id);

    hashCode = hashCode * 8191 + ((isSetLoadErrorHubInfo()) ? 131071 : 524287);
    if (isSetLoadErrorHubInfo())
      hashCode = hashCode * 8191 + load_error_hub_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetFragmentNumOnHost()) ? 131071 : 524287);
    if (isSetFragmentNumOnHost())
      hashCode = hashCode * 8191 + fragment_num_on_host;

    hashCode = hashCode * 8191 + ((isSetIsSimplifiedParam()) ? 131071 : 524287);
    if (isSetIsSimplifiedParam())
      hashCode = hashCode * 8191 + ((is_simplified_param) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTxnConf()) ? 131071 : 524287);
    if (isSetTxnConf())
      hashCode = hashCode * 8191 + txn_conf.hashCode();

    hashCode = hashCode * 8191 + ((isSetBackendId()) ? 131071 : 524287);
    if (isSetBackendId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(backend_id);

    hashCode = hashCode * 8191 + ((isSetGlobalDict()) ? 131071 : 524287);
    if (isSetGlobalDict())
      hashCode = hashCode * 8191 + global_dict.hashCode();

    hashCode = hashCode * 8191 + ((isSetNeedWaitExecutionTrigger()) ? 131071 : 524287);
    if (isSetNeedWaitExecutionTrigger())
      hashCode = hashCode * 8191 + ((need_wait_execution_trigger) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBuildHashTableForBroadcastJoin()) ? 131071 : 524287);
    if (isSetBuildHashTableForBroadcastJoin())
      hashCode = hashCode * 8191 + ((build_hash_table_for_broadcast_join) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetInstancesSharingHashTable()) ? 131071 : 524287);
    if (isSetInstancesSharingHashTable())
      hashCode = hashCode * 8191 + instances_sharing_hash_table.hashCode();

    hashCode = hashCode * 8191 + ((isSetTableName()) ? 131071 : 524287);
    if (isSetTableName())
      hashCode = hashCode * 8191 + table_name.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TExecPlanFragmentParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetProtocolVersion(), other.isSetProtocolVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocolVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, other.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFragment(), other.isSetFragment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment, other.fragment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDescTbl(), other.isSetDescTbl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescTbl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc_tbl, other.desc_tbl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetParams(), other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCoord(), other.isSetCoord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coord, other.coord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBackendNum(), other.isSetBackendNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackendNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend_num, other.backend_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryGlobals(), other.isSetQueryGlobals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryGlobals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_globals, other.query_globals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryOptions(), other.isSetQueryOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_options, other.query_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsReportSuccess(), other.isSetIsReportSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReportSuccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_report_success, other.is_report_success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResourceInfo(), other.isSetResourceInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource_info, other.resource_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetImportLabel(), other.isSetImportLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImportLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.import_label, other.import_label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDbName(), other.isSetDbName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDbName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db_name, other.db_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoadJobId(), other.isSetLoadJobId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadJobId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_job_id, other.load_job_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoadErrorHubInfo(), other.isSetLoadErrorHubInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadErrorHubInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.load_error_hub_info, other.load_error_hub_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFragmentNumOnHost(), other.isSetFragmentNumOnHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragmentNumOnHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragment_num_on_host, other.fragment_num_on_host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsSimplifiedParam(), other.isSetIsSimplifiedParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSimplifiedParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_simplified_param, other.is_simplified_param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTxnConf(), other.isSetTxnConf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTxnConf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txn_conf, other.txn_conf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBackendId(), other.isSetBackendId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackendId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backend_id, other.backend_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetGlobalDict(), other.isSetGlobalDict());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGlobalDict()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.global_dict, other.global_dict);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNeedWaitExecutionTrigger(), other.isSetNeedWaitExecutionTrigger());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedWaitExecutionTrigger()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.need_wait_execution_trigger, other.need_wait_execution_trigger);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBuildHashTableForBroadcastJoin(), other.isSetBuildHashTableForBroadcastJoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuildHashTableForBroadcastJoin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.build_hash_table_for_broadcast_join, other.build_hash_table_for_broadcast_join);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInstancesSharingHashTable(), other.isSetInstancesSharingHashTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstancesSharingHashTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instances_sharing_hash_table, other.instances_sharing_hash_table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTableName(), other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TExecPlanFragmentParams(");
    boolean first = true;

    sb.append("protocol_version:");
    if (this.protocol_version == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol_version);
    }
    first = false;
    if (isSetFragment()) {
      if (!first) sb.append(", ");
      sb.append("fragment:");
      if (this.fragment == null) {
        sb.append("null");
      } else {
        sb.append(this.fragment);
      }
      first = false;
    }
    if (isSetDescTbl()) {
      if (!first) sb.append(", ");
      sb.append("desc_tbl:");
      if (this.desc_tbl == null) {
        sb.append("null");
      } else {
        sb.append(this.desc_tbl);
      }
      first = false;
    }
    if (isSetParams()) {
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
    }
    if (isSetCoord()) {
      if (!first) sb.append(", ");
      sb.append("coord:");
      if (this.coord == null) {
        sb.append("null");
      } else {
        sb.append(this.coord);
      }
      first = false;
    }
    if (isSetBackendNum()) {
      if (!first) sb.append(", ");
      sb.append("backend_num:");
      sb.append(this.backend_num);
      first = false;
    }
    if (isSetQueryGlobals()) {
      if (!first) sb.append(", ");
      sb.append("query_globals:");
      if (this.query_globals == null) {
        sb.append("null");
      } else {
        sb.append(this.query_globals);
      }
      first = false;
    }
    if (isSetQueryOptions()) {
      if (!first) sb.append(", ");
      sb.append("query_options:");
      if (this.query_options == null) {
        sb.append("null");
      } else {
        sb.append(this.query_options);
      }
      first = false;
    }
    if (isSetIsReportSuccess()) {
      if (!first) sb.append(", ");
      sb.append("is_report_success:");
      sb.append(this.is_report_success);
      first = false;
    }
    if (isSetResourceInfo()) {
      if (!first) sb.append(", ");
      sb.append("resource_info:");
      if (this.resource_info == null) {
        sb.append("null");
      } else {
        sb.append(this.resource_info);
      }
      first = false;
    }
    if (isSetImportLabel()) {
      if (!first) sb.append(", ");
      sb.append("import_label:");
      if (this.import_label == null) {
        sb.append("null");
      } else {
        sb.append(this.import_label);
      }
      first = false;
    }
    if (isSetDbName()) {
      if (!first) sb.append(", ");
      sb.append("db_name:");
      if (this.db_name == null) {
        sb.append("null");
      } else {
        sb.append(this.db_name);
      }
      first = false;
    }
    if (isSetLoadJobId()) {
      if (!first) sb.append(", ");
      sb.append("load_job_id:");
      sb.append(this.load_job_id);
      first = false;
    }
    if (isSetLoadErrorHubInfo()) {
      if (!first) sb.append(", ");
      sb.append("load_error_hub_info:");
      if (this.load_error_hub_info == null) {
        sb.append("null");
      } else {
        sb.append(this.load_error_hub_info);
      }
      first = false;
    }
    if (isSetFragmentNumOnHost()) {
      if (!first) sb.append(", ");
      sb.append("fragment_num_on_host:");
      sb.append(this.fragment_num_on_host);
      first = false;
    }
    if (isSetIsSimplifiedParam()) {
      if (!first) sb.append(", ");
      sb.append("is_simplified_param:");
      sb.append(this.is_simplified_param);
      first = false;
    }
    if (isSetTxnConf()) {
      if (!first) sb.append(", ");
      sb.append("txn_conf:");
      if (this.txn_conf == null) {
        sb.append("null");
      } else {
        sb.append(this.txn_conf);
      }
      first = false;
    }
    if (isSetBackendId()) {
      if (!first) sb.append(", ");
      sb.append("backend_id:");
      sb.append(this.backend_id);
      first = false;
    }
    if (isSetGlobalDict()) {
      if (!first) sb.append(", ");
      sb.append("global_dict:");
      if (this.global_dict == null) {
        sb.append("null");
      } else {
        sb.append(this.global_dict);
      }
      first = false;
    }
    if (isSetNeedWaitExecutionTrigger()) {
      if (!first) sb.append(", ");
      sb.append("need_wait_execution_trigger:");
      sb.append(this.need_wait_execution_trigger);
      first = false;
    }
    if (isSetBuildHashTableForBroadcastJoin()) {
      if (!first) sb.append(", ");
      sb.append("build_hash_table_for_broadcast_join:");
      sb.append(this.build_hash_table_for_broadcast_join);
      first = false;
    }
    if (isSetInstancesSharingHashTable()) {
      if (!first) sb.append(", ");
      sb.append("instances_sharing_hash_table:");
      if (this.instances_sharing_hash_table == null) {
        sb.append("null");
      } else {
        sb.append(this.instances_sharing_hash_table);
      }
      first = false;
    }
    if (isSetTableName()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocol_version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol_version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (fragment != null) {
      fragment.validate();
    }
    if (desc_tbl != null) {
      desc_tbl.validate();
    }
    if (params != null) {
      params.validate();
    }
    if (coord != null) {
      coord.validate();
    }
    if (query_globals != null) {
      query_globals.validate();
    }
    if (query_options != null) {
      query_options.validate();
    }
    if (resource_info != null) {
      resource_info.validate();
    }
    if (load_error_hub_info != null) {
      load_error_hub_info.validate();
    }
    if (txn_conf != null) {
      txn_conf.validate();
    }
    if (global_dict != null) {
      global_dict.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecPlanFragmentParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecPlanFragmentParamsStandardScheme getScheme() {
      return new TExecPlanFragmentParamsStandardScheme();
    }
  }

  private static class TExecPlanFragmentParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TExecPlanFragmentParams> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = org.apache.doris.thrift.PaloInternalServiceVersion.findByValue(iprot.readI32());
              struct.setProtocolVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAGMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fragment = new org.apache.doris.thrift.TPlanFragment();
              struct.fragment.read(iprot);
              struct.setFragmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESC_TBL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.desc_tbl = new org.apache.doris.thrift.TDescriptorTable();
              struct.desc_tbl.read(iprot);
              struct.setDescTblIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.params = new TPlanFragmentExecParams();
              struct.params.read(iprot);
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.coord = new org.apache.doris.thrift.TNetworkAddress();
              struct.coord.read(iprot);
              struct.setCoordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BACKEND_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.backend_num = iprot.readI32();
              struct.setBackendNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUERY_GLOBALS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_globals = new TQueryGlobals();
              struct.query_globals.read(iprot);
              struct.setQueryGlobalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // QUERY_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_options = new TQueryOptions();
              struct.query_options.read(iprot);
              struct.setQueryOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_REPORT_SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_report_success = iprot.readBool();
              struct.setIsReportSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RESOURCE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resource_info = new org.apache.doris.thrift.TResourceInfo();
              struct.resource_info.read(iprot);
              struct.setResourceInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IMPORT_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.import_label = iprot.readString();
              struct.setImportLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db_name = iprot.readString();
              struct.setDbNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LOAD_JOB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.load_job_id = iprot.readI64();
              struct.setLoadJobIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LOAD_ERROR_HUB_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.load_error_hub_info = new TLoadErrorHubInfo();
              struct.load_error_hub_info.read(iprot);
              struct.setLoadErrorHubInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FRAGMENT_NUM_ON_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fragment_num_on_host = iprot.readI32();
              struct.setFragmentNumOnHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // IS_SIMPLIFIED_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_simplified_param = iprot.readBool();
              struct.setIsSimplifiedParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TXN_CONF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.txn_conf = new TTxnParams();
              struct.txn_conf.read(iprot);
              struct.setTxnConfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // BACKEND_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.backend_id = iprot.readI64();
              struct.setBackendIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // GLOBAL_DICT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.global_dict = new TGlobalDict();
              struct.global_dict.read(iprot);
              struct.setGlobalDictIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // NEED_WAIT_EXECUTION_TRIGGER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.need_wait_execution_trigger = iprot.readBool();
              struct.setNeedWaitExecutionTriggerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // BUILD_HASH_TABLE_FOR_BROADCAST_JOIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.build_hash_table_for_broadcast_join = iprot.readBool();
              struct.setBuildHashTableForBroadcastJoinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // INSTANCES_SHARING_HASH_TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list138 = iprot.readListBegin();
                struct.instances_sharing_hash_table = new java.util.ArrayList<org.apache.doris.thrift.TUniqueId>(_list138.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId _elem139;
                for (int _i140 = 0; _i140 < _list138.size; ++_i140)
                {
                  _elem139 = new org.apache.doris.thrift.TUniqueId();
                  _elem139.read(iprot);
                  struct.instances_sharing_hash_table.add(_elem139);
                }
                iprot.readListEnd();
              }
              struct.setInstancesSharingHashTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocol_version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.fragment != null) {
        if (struct.isSetFragment()) {
          oprot.writeFieldBegin(FRAGMENT_FIELD_DESC);
          struct.fragment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.desc_tbl != null) {
        if (struct.isSetDescTbl()) {
          oprot.writeFieldBegin(DESC_TBL_FIELD_DESC);
          struct.desc_tbl.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.params != null) {
        if (struct.isSetParams()) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.coord != null) {
        if (struct.isSetCoord()) {
          oprot.writeFieldBegin(COORD_FIELD_DESC);
          struct.coord.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBackendNum()) {
        oprot.writeFieldBegin(BACKEND_NUM_FIELD_DESC);
        oprot.writeI32(struct.backend_num);
        oprot.writeFieldEnd();
      }
      if (struct.query_globals != null) {
        if (struct.isSetQueryGlobals()) {
          oprot.writeFieldBegin(QUERY_GLOBALS_FIELD_DESC);
          struct.query_globals.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_options != null) {
        if (struct.isSetQueryOptions()) {
          oprot.writeFieldBegin(QUERY_OPTIONS_FIELD_DESC);
          struct.query_options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsReportSuccess()) {
        oprot.writeFieldBegin(IS_REPORT_SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.is_report_success);
        oprot.writeFieldEnd();
      }
      if (struct.resource_info != null) {
        if (struct.isSetResourceInfo()) {
          oprot.writeFieldBegin(RESOURCE_INFO_FIELD_DESC);
          struct.resource_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.import_label != null) {
        if (struct.isSetImportLabel()) {
          oprot.writeFieldBegin(IMPORT_LABEL_FIELD_DESC);
          oprot.writeString(struct.import_label);
          oprot.writeFieldEnd();
        }
      }
      if (struct.db_name != null) {
        if (struct.isSetDbName()) {
          oprot.writeFieldBegin(DB_NAME_FIELD_DESC);
          oprot.writeString(struct.db_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLoadJobId()) {
        oprot.writeFieldBegin(LOAD_JOB_ID_FIELD_DESC);
        oprot.writeI64(struct.load_job_id);
        oprot.writeFieldEnd();
      }
      if (struct.load_error_hub_info != null) {
        if (struct.isSetLoadErrorHubInfo()) {
          oprot.writeFieldBegin(LOAD_ERROR_HUB_INFO_FIELD_DESC);
          struct.load_error_hub_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFragmentNumOnHost()) {
        oprot.writeFieldBegin(FRAGMENT_NUM_ON_HOST_FIELD_DESC);
        oprot.writeI32(struct.fragment_num_on_host);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsSimplifiedParam()) {
        oprot.writeFieldBegin(IS_SIMPLIFIED_PARAM_FIELD_DESC);
        oprot.writeBool(struct.is_simplified_param);
        oprot.writeFieldEnd();
      }
      if (struct.txn_conf != null) {
        if (struct.isSetTxnConf()) {
          oprot.writeFieldBegin(TXN_CONF_FIELD_DESC);
          struct.txn_conf.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBackendId()) {
        oprot.writeFieldBegin(BACKEND_ID_FIELD_DESC);
        oprot.writeI64(struct.backend_id);
        oprot.writeFieldEnd();
      }
      if (struct.global_dict != null) {
        if (struct.isSetGlobalDict()) {
          oprot.writeFieldBegin(GLOBAL_DICT_FIELD_DESC);
          struct.global_dict.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNeedWaitExecutionTrigger()) {
        oprot.writeFieldBegin(NEED_WAIT_EXECUTION_TRIGGER_FIELD_DESC);
        oprot.writeBool(struct.need_wait_execution_trigger);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBuildHashTableForBroadcastJoin()) {
        oprot.writeFieldBegin(BUILD_HASH_TABLE_FOR_BROADCAST_JOIN_FIELD_DESC);
        oprot.writeBool(struct.build_hash_table_for_broadcast_join);
        oprot.writeFieldEnd();
      }
      if (struct.instances_sharing_hash_table != null) {
        if (struct.isSetInstancesSharingHashTable()) {
          oprot.writeFieldBegin(INSTANCES_SHARING_HASH_TABLE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.instances_sharing_hash_table.size()));
            for (org.apache.doris.thrift.TUniqueId _iter141 : struct.instances_sharing_hash_table)
            {
              _iter141.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTableName()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExecPlanFragmentParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecPlanFragmentParamsTupleScheme getScheme() {
      return new TExecPlanFragmentParamsTupleScheme();
    }
  }

  private static class TExecPlanFragmentParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TExecPlanFragmentParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.protocol_version.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFragment()) {
        optionals.set(0);
      }
      if (struct.isSetDescTbl()) {
        optionals.set(1);
      }
      if (struct.isSetParams()) {
        optionals.set(2);
      }
      if (struct.isSetCoord()) {
        optionals.set(3);
      }
      if (struct.isSetBackendNum()) {
        optionals.set(4);
      }
      if (struct.isSetQueryGlobals()) {
        optionals.set(5);
      }
      if (struct.isSetQueryOptions()) {
        optionals.set(6);
      }
      if (struct.isSetIsReportSuccess()) {
        optionals.set(7);
      }
      if (struct.isSetResourceInfo()) {
        optionals.set(8);
      }
      if (struct.isSetImportLabel()) {
        optionals.set(9);
      }
      if (struct.isSetDbName()) {
        optionals.set(10);
      }
      if (struct.isSetLoadJobId()) {
        optionals.set(11);
      }
      if (struct.isSetLoadErrorHubInfo()) {
        optionals.set(12);
      }
      if (struct.isSetFragmentNumOnHost()) {
        optionals.set(13);
      }
      if (struct.isSetIsSimplifiedParam()) {
        optionals.set(14);
      }
      if (struct.isSetTxnConf()) {
        optionals.set(15);
      }
      if (struct.isSetBackendId()) {
        optionals.set(16);
      }
      if (struct.isSetGlobalDict()) {
        optionals.set(17);
      }
      if (struct.isSetNeedWaitExecutionTrigger()) {
        optionals.set(18);
      }
      if (struct.isSetBuildHashTableForBroadcastJoin()) {
        optionals.set(19);
      }
      if (struct.isSetInstancesSharingHashTable()) {
        optionals.set(20);
      }
      if (struct.isSetTableName()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetFragment()) {
        struct.fragment.write(oprot);
      }
      if (struct.isSetDescTbl()) {
        struct.desc_tbl.write(oprot);
      }
      if (struct.isSetParams()) {
        struct.params.write(oprot);
      }
      if (struct.isSetCoord()) {
        struct.coord.write(oprot);
      }
      if (struct.isSetBackendNum()) {
        oprot.writeI32(struct.backend_num);
      }
      if (struct.isSetQueryGlobals()) {
        struct.query_globals.write(oprot);
      }
      if (struct.isSetQueryOptions()) {
        struct.query_options.write(oprot);
      }
      if (struct.isSetIsReportSuccess()) {
        oprot.writeBool(struct.is_report_success);
      }
      if (struct.isSetResourceInfo()) {
        struct.resource_info.write(oprot);
      }
      if (struct.isSetImportLabel()) {
        oprot.writeString(struct.import_label);
      }
      if (struct.isSetDbName()) {
        oprot.writeString(struct.db_name);
      }
      if (struct.isSetLoadJobId()) {
        oprot.writeI64(struct.load_job_id);
      }
      if (struct.isSetLoadErrorHubInfo()) {
        struct.load_error_hub_info.write(oprot);
      }
      if (struct.isSetFragmentNumOnHost()) {
        oprot.writeI32(struct.fragment_num_on_host);
      }
      if (struct.isSetIsSimplifiedParam()) {
        oprot.writeBool(struct.is_simplified_param);
      }
      if (struct.isSetTxnConf()) {
        struct.txn_conf.write(oprot);
      }
      if (struct.isSetBackendId()) {
        oprot.writeI64(struct.backend_id);
      }
      if (struct.isSetGlobalDict()) {
        struct.global_dict.write(oprot);
      }
      if (struct.isSetNeedWaitExecutionTrigger()) {
        oprot.writeBool(struct.need_wait_execution_trigger);
      }
      if (struct.isSetBuildHashTableForBroadcastJoin()) {
        oprot.writeBool(struct.build_hash_table_for_broadcast_join);
      }
      if (struct.isSetInstancesSharingHashTable()) {
        {
          oprot.writeI32(struct.instances_sharing_hash_table.size());
          for (org.apache.doris.thrift.TUniqueId _iter142 : struct.instances_sharing_hash_table)
          {
            _iter142.write(oprot);
          }
        }
      }
      if (struct.isSetTableName()) {
        oprot.writeString(struct.table_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecPlanFragmentParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.protocol_version = org.apache.doris.thrift.PaloInternalServiceVersion.findByValue(iprot.readI32());
      struct.setProtocolVersionIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.fragment = new org.apache.doris.thrift.TPlanFragment();
        struct.fragment.read(iprot);
        struct.setFragmentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.desc_tbl = new org.apache.doris.thrift.TDescriptorTable();
        struct.desc_tbl.read(iprot);
        struct.setDescTblIsSet(true);
      }
      if (incoming.get(2)) {
        struct.params = new TPlanFragmentExecParams();
        struct.params.read(iprot);
        struct.setParamsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.coord = new org.apache.doris.thrift.TNetworkAddress();
        struct.coord.read(iprot);
        struct.setCoordIsSet(true);
      }
      if (incoming.get(4)) {
        struct.backend_num = iprot.readI32();
        struct.setBackendNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.query_globals = new TQueryGlobals();
        struct.query_globals.read(iprot);
        struct.setQueryGlobalsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.query_options = new TQueryOptions();
        struct.query_options.read(iprot);
        struct.setQueryOptionsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.is_report_success = iprot.readBool();
        struct.setIsReportSuccessIsSet(true);
      }
      if (incoming.get(8)) {
        struct.resource_info = new org.apache.doris.thrift.TResourceInfo();
        struct.resource_info.read(iprot);
        struct.setResourceInfoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.import_label = iprot.readString();
        struct.setImportLabelIsSet(true);
      }
      if (incoming.get(10)) {
        struct.db_name = iprot.readString();
        struct.setDbNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.load_job_id = iprot.readI64();
        struct.setLoadJobIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.load_error_hub_info = new TLoadErrorHubInfo();
        struct.load_error_hub_info.read(iprot);
        struct.setLoadErrorHubInfoIsSet(true);
      }
      if (incoming.get(13)) {
        struct.fragment_num_on_host = iprot.readI32();
        struct.setFragmentNumOnHostIsSet(true);
      }
      if (incoming.get(14)) {
        struct.is_simplified_param = iprot.readBool();
        struct.setIsSimplifiedParamIsSet(true);
      }
      if (incoming.get(15)) {
        struct.txn_conf = new TTxnParams();
        struct.txn_conf.read(iprot);
        struct.setTxnConfIsSet(true);
      }
      if (incoming.get(16)) {
        struct.backend_id = iprot.readI64();
        struct.setBackendIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.global_dict = new TGlobalDict();
        struct.global_dict.read(iprot);
        struct.setGlobalDictIsSet(true);
      }
      if (incoming.get(18)) {
        struct.need_wait_execution_trigger = iprot.readBool();
        struct.setNeedWaitExecutionTriggerIsSet(true);
      }
      if (incoming.get(19)) {
        struct.build_hash_table_for_broadcast_join = iprot.readBool();
        struct.setBuildHashTableForBroadcastJoinIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list143 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.instances_sharing_hash_table = new java.util.ArrayList<org.apache.doris.thrift.TUniqueId>(_list143.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId _elem144;
          for (int _i145 = 0; _i145 < _list143.size; ++_i145)
          {
            _elem144 = new org.apache.doris.thrift.TUniqueId();
            _elem144.read(iprot);
            struct.instances_sharing_hash_table.add(_elem144);
          }
        }
        struct.setInstancesSharingHashTableIsSet(true);
      }
      if (incoming.get(21)) {
        struct.table_name = iprot.readString();
        struct.setTableNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

