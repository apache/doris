/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-08-29")
public class TFrontendPingFrontendResult implements org.apache.thrift.TBase<TFrontendPingFrontendResult, TFrontendPingFrontendResult._Fields>, java.io.Serializable, Cloneable, Comparable<TFrontendPingFrontendResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFrontendPingFrontendResult");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField QUERY_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryPort", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RPC_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("rpcPort", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField REPLAYED_JOURNAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("replayedJournalId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LAST_STARTUP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastStartupTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField DISK_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("diskInfos", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TFrontendPingFrontendResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TFrontendPingFrontendResultTupleSchemeFactory();

  /**
   * 
   * @see TFrontendPingFrontendStatusCode
   */
  public @org.apache.thrift.annotation.Nullable TFrontendPingFrontendStatusCode status; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String msg; // required
  public int queryPort; // required
  public int rpcPort; // required
  public long replayedJournalId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String version; // required
  public long lastStartupTime; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TDiskInfo> diskInfos; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TFrontendPingFrontendStatusCode
     */
    STATUS((short)1, "status"),
    MSG((short)2, "msg"),
    QUERY_PORT((short)3, "queryPort"),
    RPC_PORT((short)4, "rpcPort"),
    REPLAYED_JOURNAL_ID((short)5, "replayedJournalId"),
    VERSION((short)6, "version"),
    LAST_STARTUP_TIME((short)7, "lastStartupTime"),
    DISK_INFOS((short)8, "diskInfos");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // MSG
          return MSG;
        case 3: // QUERY_PORT
          return QUERY_PORT;
        case 4: // RPC_PORT
          return RPC_PORT;
        case 5: // REPLAYED_JOURNAL_ID
          return REPLAYED_JOURNAL_ID;
        case 6: // VERSION
          return VERSION;
        case 7: // LAST_STARTUP_TIME
          return LAST_STARTUP_TIME;
        case 8: // DISK_INFOS
          return DISK_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUERYPORT_ISSET_ID = 0;
  private static final int __RPCPORT_ISSET_ID = 1;
  private static final int __REPLAYEDJOURNALID_ISSET_ID = 2;
  private static final int __LASTSTARTUPTIME_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LAST_STARTUP_TIME,_Fields.DISK_INFOS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TFrontendPingFrontendStatusCode.class)));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_PORT, new org.apache.thrift.meta_data.FieldMetaData("queryPort", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RPC_PORT, new org.apache.thrift.meta_data.FieldMetaData("rpcPort", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPLAYED_JOURNAL_ID, new org.apache.thrift.meta_data.FieldMetaData("replayedJournalId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_STARTUP_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastStartupTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DISK_INFOS, new org.apache.thrift.meta_data.FieldMetaData("diskInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDiskInfo.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFrontendPingFrontendResult.class, metaDataMap);
  }

  public TFrontendPingFrontendResult() {
  }

  public TFrontendPingFrontendResult(
    TFrontendPingFrontendStatusCode status,
    java.lang.String msg,
    int queryPort,
    int rpcPort,
    long replayedJournalId,
    java.lang.String version)
  {
    this();
    this.status = status;
    this.msg = msg;
    this.queryPort = queryPort;
    setQueryPortIsSet(true);
    this.rpcPort = rpcPort;
    setRpcPortIsSet(true);
    this.replayedJournalId = replayedJournalId;
    setReplayedJournalIdIsSet(true);
    this.version = version;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFrontendPingFrontendResult(TFrontendPingFrontendResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetMsg()) {
      this.msg = other.msg;
    }
    this.queryPort = other.queryPort;
    this.rpcPort = other.rpcPort;
    this.replayedJournalId = other.replayedJournalId;
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    this.lastStartupTime = other.lastStartupTime;
    if (other.isSetDiskInfos()) {
      java.util.List<TDiskInfo> __this__diskInfos = new java.util.ArrayList<TDiskInfo>(other.diskInfos.size());
      for (TDiskInfo other_element : other.diskInfos) {
        __this__diskInfos.add(new TDiskInfo(other_element));
      }
      this.diskInfos = __this__diskInfos;
    }
  }

  @Override
  public TFrontendPingFrontendResult deepCopy() {
    return new TFrontendPingFrontendResult(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.msg = null;
    setQueryPortIsSet(false);
    this.queryPort = 0;
    setRpcPortIsSet(false);
    this.rpcPort = 0;
    setReplayedJournalIdIsSet(false);
    this.replayedJournalId = 0;
    this.version = null;
    setLastStartupTimeIsSet(false);
    this.lastStartupTime = 0;
    this.diskInfos = null;
  }

  /**
   * 
   * @see TFrontendPingFrontendStatusCode
   */
  @org.apache.thrift.annotation.Nullable
  public TFrontendPingFrontendStatusCode getStatus() {
    return this.status;
  }

  /**
   * 
   * @see TFrontendPingFrontendStatusCode
   */
  public TFrontendPingFrontendResult setStatus(@org.apache.thrift.annotation.Nullable TFrontendPingFrontendStatusCode status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMsg() {
    return this.msg;
  }

  public TFrontendPingFrontendResult setMsg(@org.apache.thrift.annotation.Nullable java.lang.String msg) {
    this.msg = msg;
    return this;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public int getQueryPort() {
    return this.queryPort;
  }

  public TFrontendPingFrontendResult setQueryPort(int queryPort) {
    this.queryPort = queryPort;
    setQueryPortIsSet(true);
    return this;
  }

  public void unsetQueryPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERYPORT_ISSET_ID);
  }

  /** Returns true if field queryPort is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERYPORT_ISSET_ID);
  }

  public void setQueryPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERYPORT_ISSET_ID, value);
  }

  public int getRpcPort() {
    return this.rpcPort;
  }

  public TFrontendPingFrontendResult setRpcPort(int rpcPort) {
    this.rpcPort = rpcPort;
    setRpcPortIsSet(true);
    return this;
  }

  public void unsetRpcPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RPCPORT_ISSET_ID);
  }

  /** Returns true if field rpcPort is set (has been assigned a value) and false otherwise */
  public boolean isSetRpcPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RPCPORT_ISSET_ID);
  }

  public void setRpcPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RPCPORT_ISSET_ID, value);
  }

  public long getReplayedJournalId() {
    return this.replayedJournalId;
  }

  public TFrontendPingFrontendResult setReplayedJournalId(long replayedJournalId) {
    this.replayedJournalId = replayedJournalId;
    setReplayedJournalIdIsSet(true);
    return this;
  }

  public void unsetReplayedJournalId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPLAYEDJOURNALID_ISSET_ID);
  }

  /** Returns true if field replayedJournalId is set (has been assigned a value) and false otherwise */
  public boolean isSetReplayedJournalId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPLAYEDJOURNALID_ISSET_ID);
  }

  public void setReplayedJournalIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPLAYEDJOURNALID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVersion() {
    return this.version;
  }

  public TFrontendPingFrontendResult setVersion(@org.apache.thrift.annotation.Nullable java.lang.String version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public long getLastStartupTime() {
    return this.lastStartupTime;
  }

  public TFrontendPingFrontendResult setLastStartupTime(long lastStartupTime) {
    this.lastStartupTime = lastStartupTime;
    setLastStartupTimeIsSet(true);
    return this;
  }

  public void unsetLastStartupTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTSTARTUPTIME_ISSET_ID);
  }

  /** Returns true if field lastStartupTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastStartupTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTSTARTUPTIME_ISSET_ID);
  }

  public void setLastStartupTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTSTARTUPTIME_ISSET_ID, value);
  }

  public int getDiskInfosSize() {
    return (this.diskInfos == null) ? 0 : this.diskInfos.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TDiskInfo> getDiskInfosIterator() {
    return (this.diskInfos == null) ? null : this.diskInfos.iterator();
  }

  public void addToDiskInfos(TDiskInfo elem) {
    if (this.diskInfos == null) {
      this.diskInfos = new java.util.ArrayList<TDiskInfo>();
    }
    this.diskInfos.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TDiskInfo> getDiskInfos() {
    return this.diskInfos;
  }

  public TFrontendPingFrontendResult setDiskInfos(@org.apache.thrift.annotation.Nullable java.util.List<TDiskInfo> diskInfos) {
    this.diskInfos = diskInfos;
    return this;
  }

  public void unsetDiskInfos() {
    this.diskInfos = null;
  }

  /** Returns true if field diskInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetDiskInfos() {
    return this.diskInfos != null;
  }

  public void setDiskInfosIsSet(boolean value) {
    if (!value) {
      this.diskInfos = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((TFrontendPingFrontendStatusCode)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((java.lang.String)value);
      }
      break;

    case QUERY_PORT:
      if (value == null) {
        unsetQueryPort();
      } else {
        setQueryPort((java.lang.Integer)value);
      }
      break;

    case RPC_PORT:
      if (value == null) {
        unsetRpcPort();
      } else {
        setRpcPort((java.lang.Integer)value);
      }
      break;

    case REPLAYED_JOURNAL_ID:
      if (value == null) {
        unsetReplayedJournalId();
      } else {
        setReplayedJournalId((java.lang.Long)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((java.lang.String)value);
      }
      break;

    case LAST_STARTUP_TIME:
      if (value == null) {
        unsetLastStartupTime();
      } else {
        setLastStartupTime((java.lang.Long)value);
      }
      break;

    case DISK_INFOS:
      if (value == null) {
        unsetDiskInfos();
      } else {
        setDiskInfos((java.util.List<TDiskInfo>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case MSG:
      return getMsg();

    case QUERY_PORT:
      return getQueryPort();

    case RPC_PORT:
      return getRpcPort();

    case REPLAYED_JOURNAL_ID:
      return getReplayedJournalId();

    case VERSION:
      return getVersion();

    case LAST_STARTUP_TIME:
      return getLastStartupTime();

    case DISK_INFOS:
      return getDiskInfos();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case MSG:
      return isSetMsg();
    case QUERY_PORT:
      return isSetQueryPort();
    case RPC_PORT:
      return isSetRpcPort();
    case REPLAYED_JOURNAL_ID:
      return isSetReplayedJournalId();
    case VERSION:
      return isSetVersion();
    case LAST_STARTUP_TIME:
      return isSetLastStartupTime();
    case DISK_INFOS:
      return isSetDiskInfos();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TFrontendPingFrontendResult)
      return this.equals((TFrontendPingFrontendResult)that);
    return false;
  }

  public boolean equals(TFrontendPingFrontendResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    boolean this_present_queryPort = true;
    boolean that_present_queryPort = true;
    if (this_present_queryPort || that_present_queryPort) {
      if (!(this_present_queryPort && that_present_queryPort))
        return false;
      if (this.queryPort != that.queryPort)
        return false;
    }

    boolean this_present_rpcPort = true;
    boolean that_present_rpcPort = true;
    if (this_present_rpcPort || that_present_rpcPort) {
      if (!(this_present_rpcPort && that_present_rpcPort))
        return false;
      if (this.rpcPort != that.rpcPort)
        return false;
    }

    boolean this_present_replayedJournalId = true;
    boolean that_present_replayedJournalId = true;
    if (this_present_replayedJournalId || that_present_replayedJournalId) {
      if (!(this_present_replayedJournalId && that_present_replayedJournalId))
        return false;
      if (this.replayedJournalId != that.replayedJournalId)
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_lastStartupTime = true && this.isSetLastStartupTime();
    boolean that_present_lastStartupTime = true && that.isSetLastStartupTime();
    if (this_present_lastStartupTime || that_present_lastStartupTime) {
      if (!(this_present_lastStartupTime && that_present_lastStartupTime))
        return false;
      if (this.lastStartupTime != that.lastStartupTime)
        return false;
    }

    boolean this_present_diskInfos = true && this.isSetDiskInfos();
    boolean that_present_diskInfos = true && that.isSetDiskInfos();
    if (this_present_diskInfos || that_present_diskInfos) {
      if (!(this_present_diskInfos && that_present_diskInfos))
        return false;
      if (!this.diskInfos.equals(that.diskInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.getValue();

    hashCode = hashCode * 8191 + ((isSetMsg()) ? 131071 : 524287);
    if (isSetMsg())
      hashCode = hashCode * 8191 + msg.hashCode();

    hashCode = hashCode * 8191 + queryPort;

    hashCode = hashCode * 8191 + rpcPort;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(replayedJournalId);

    hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
    if (isSetVersion())
      hashCode = hashCode * 8191 + version.hashCode();

    hashCode = hashCode * 8191 + ((isSetLastStartupTime()) ? 131071 : 524287);
    if (isSetLastStartupTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastStartupTime);

    hashCode = hashCode * 8191 + ((isSetDiskInfos()) ? 131071 : 524287);
    if (isSetDiskInfos())
      hashCode = hashCode * 8191 + diskInfos.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TFrontendPingFrontendResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMsg(), other.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryPort(), other.isSetQueryPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryPort, other.queryPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRpcPort(), other.isSetRpcPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpcPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpcPort, other.rpcPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReplayedJournalId(), other.isSetReplayedJournalId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplayedJournalId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replayedJournalId, other.replayedJournalId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLastStartupTime(), other.isSetLastStartupTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastStartupTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastStartupTime, other.lastStartupTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDiskInfos(), other.isSetDiskInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiskInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diskInfos, other.diskInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TFrontendPingFrontendResult(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msg:");
    if (this.msg == null) {
      sb.append("null");
    } else {
      sb.append(this.msg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryPort:");
    sb.append(this.queryPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rpcPort:");
    sb.append(this.rpcPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("replayedJournalId:");
    sb.append(this.replayedJournalId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (isSetLastStartupTime()) {
      if (!first) sb.append(", ");
      sb.append("lastStartupTime:");
      sb.append(this.lastStartupTime);
      first = false;
    }
    if (isSetDiskInfos()) {
      if (!first) sb.append(", ");
      sb.append("diskInfos:");
      if (this.diskInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.diskInfos);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    if (msg == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'msg' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'queryPort' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'rpcPort' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'replayedJournalId' because it's a primitive and you chose the non-beans generator.
    if (version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'version' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFrontendPingFrontendResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TFrontendPingFrontendResultStandardScheme getScheme() {
      return new TFrontendPingFrontendResultStandardScheme();
    }
  }

  private static class TFrontendPingFrontendResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TFrontendPingFrontendResult> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TFrontendPingFrontendResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = org.apache.doris.thrift.TFrontendPingFrontendStatusCode.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUERY_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queryPort = iprot.readI32();
              struct.setQueryPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RPC_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rpcPort = iprot.readI32();
              struct.setRpcPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REPLAYED_JOURNAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.replayedJournalId = iprot.readI64();
              struct.setReplayedJournalIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LAST_STARTUP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastStartupTime = iprot.readI64();
              struct.setLastStartupTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DISK_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list316 = iprot.readListBegin();
                struct.diskInfos = new java.util.ArrayList<TDiskInfo>(_list316.size);
                @org.apache.thrift.annotation.Nullable TDiskInfo _elem317;
                for (int _i318 = 0; _i318 < _list316.size; ++_i318)
                {
                  _elem317 = new TDiskInfo();
                  _elem317.read(iprot);
                  struct.diskInfos.add(_elem317);
                }
                iprot.readListEnd();
              }
              struct.setDiskInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetQueryPort()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'queryPort' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRpcPort()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rpcPort' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetReplayedJournalId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'replayedJournalId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TFrontendPingFrontendResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        oprot.writeString(struct.msg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUERY_PORT_FIELD_DESC);
      oprot.writeI32(struct.queryPort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RPC_PORT_FIELD_DESC);
      oprot.writeI32(struct.rpcPort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPLAYED_JOURNAL_ID_FIELD_DESC);
      oprot.writeI64(struct.replayedJournalId);
      oprot.writeFieldEnd();
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastStartupTime()) {
        oprot.writeFieldBegin(LAST_STARTUP_TIME_FIELD_DESC);
        oprot.writeI64(struct.lastStartupTime);
        oprot.writeFieldEnd();
      }
      if (struct.diskInfos != null) {
        if (struct.isSetDiskInfos()) {
          oprot.writeFieldBegin(DISK_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.diskInfos.size()));
            for (TDiskInfo _iter319 : struct.diskInfos)
            {
              _iter319.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFrontendPingFrontendResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TFrontendPingFrontendResultTupleScheme getScheme() {
      return new TFrontendPingFrontendResultTupleScheme();
    }
  }

  private static class TFrontendPingFrontendResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TFrontendPingFrontendResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFrontendPingFrontendResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.status.getValue());
      oprot.writeString(struct.msg);
      oprot.writeI32(struct.queryPort);
      oprot.writeI32(struct.rpcPort);
      oprot.writeI64(struct.replayedJournalId);
      oprot.writeString(struct.version);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLastStartupTime()) {
        optionals.set(0);
      }
      if (struct.isSetDiskInfos()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLastStartupTime()) {
        oprot.writeI64(struct.lastStartupTime);
      }
      if (struct.isSetDiskInfos()) {
        {
          oprot.writeI32(struct.diskInfos.size());
          for (TDiskInfo _iter320 : struct.diskInfos)
          {
            _iter320.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFrontendPingFrontendResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.status = org.apache.doris.thrift.TFrontendPingFrontendStatusCode.findByValue(iprot.readI32());
      struct.setStatusIsSet(true);
      struct.msg = iprot.readString();
      struct.setMsgIsSet(true);
      struct.queryPort = iprot.readI32();
      struct.setQueryPortIsSet(true);
      struct.rpcPort = iprot.readI32();
      struct.setRpcPortIsSet(true);
      struct.replayedJournalId = iprot.readI64();
      struct.setReplayedJournalIdIsSet(true);
      struct.version = iprot.readString();
      struct.setVersionIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.lastStartupTime = iprot.readI64();
        struct.setLastStartupTimeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list321 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.diskInfos = new java.util.ArrayList<TDiskInfo>(_list321.size);
          @org.apache.thrift.annotation.Nullable TDiskInfo _elem322;
          for (int _i323 = 0; _i323 < _list321.size; ++_i323)
          {
            _elem322 = new TDiskInfo();
            _elem322.read(iprot);
            struct.diskInfos.add(_elem322);
          }
        }
        struct.setDiskInfosIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

