/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-06-29")
public class TTypeDesc implements org.apache.thrift.TBase<TTypeDesc, TTypeDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TTypeDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTypeDesc");

  private static final org.apache.thrift.protocol.TField TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("types", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField IS_NULLABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_nullable", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField BYTE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_size", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SUB_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("sub_types", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField RESULT_IS_NULLABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("result_is_nullable", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField FUNCTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("function_name", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTypeDescStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTypeDescTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<TTypeNode> types; // required
  public boolean is_nullable; // optional
  public long byte_size; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TTypeDesc> sub_types; // optional
  public boolean result_is_nullable; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String function_name; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPES((short)1, "types"),
    IS_NULLABLE((short)2, "is_nullable"),
    BYTE_SIZE((short)3, "byte_size"),
    SUB_TYPES((short)4, "sub_types"),
    RESULT_IS_NULLABLE((short)5, "result_is_nullable"),
    FUNCTION_NAME((short)6, "function_name");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPES
          return TYPES;
        case 2: // IS_NULLABLE
          return IS_NULLABLE;
        case 3: // BYTE_SIZE
          return BYTE_SIZE;
        case 4: // SUB_TYPES
          return SUB_TYPES;
        case 5: // RESULT_IS_NULLABLE
          return RESULT_IS_NULLABLE;
        case 6: // FUNCTION_NAME
          return FUNCTION_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_NULLABLE_ISSET_ID = 0;
  private static final int __BYTE_SIZE_ISSET_ID = 1;
  private static final int __RESULT_IS_NULLABLE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.IS_NULLABLE,_Fields.BYTE_SIZE,_Fields.SUB_TYPES,_Fields.RESULT_IS_NULLABLE,_Fields.FUNCTION_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPES, new org.apache.thrift.meta_data.FieldMetaData("types", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTypeNode.class))));
    tmpMap.put(_Fields.IS_NULLABLE, new org.apache.thrift.meta_data.FieldMetaData("is_nullable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BYTE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("byte_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUB_TYPES, new org.apache.thrift.meta_data.FieldMetaData("sub_types", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTypeDesc.class))));
    tmpMap.put(_Fields.RESULT_IS_NULLABLE, new org.apache.thrift.meta_data.FieldMetaData("result_is_nullable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FUNCTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("function_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTypeDesc.class, metaDataMap);
  }

  public TTypeDesc() {
  }

  public TTypeDesc(
    java.util.List<TTypeNode> types)
  {
    this();
    this.types = types;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTypeDesc(TTypeDesc other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTypes()) {
      java.util.List<TTypeNode> __this__types = new java.util.ArrayList<TTypeNode>(other.types.size());
      for (TTypeNode other_element : other.types) {
        __this__types.add(new TTypeNode(other_element));
      }
      this.types = __this__types;
    }
    this.is_nullable = other.is_nullable;
    this.byte_size = other.byte_size;
    if (other.isSetSubTypes()) {
      java.util.List<TTypeDesc> __this__sub_types = new java.util.ArrayList<TTypeDesc>(other.sub_types.size());
      for (TTypeDesc other_element : other.sub_types) {
        __this__sub_types.add(new TTypeDesc(other_element));
      }
      this.sub_types = __this__sub_types;
    }
    this.result_is_nullable = other.result_is_nullable;
    if (other.isSetFunctionName()) {
      this.function_name = other.function_name;
    }
  }

  @Override
  public TTypeDesc deepCopy() {
    return new TTypeDesc(this);
  }

  @Override
  public void clear() {
    this.types = null;
    setIsNullableIsSet(false);
    this.is_nullable = false;
    setByteSizeIsSet(false);
    this.byte_size = 0;
    this.sub_types = null;
    setResultIsNullableIsSet(false);
    this.result_is_nullable = false;
    this.function_name = null;
  }

  public int getTypesSize() {
    return (this.types == null) ? 0 : this.types.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TTypeNode> getTypesIterator() {
    return (this.types == null) ? null : this.types.iterator();
  }

  public void addToTypes(TTypeNode elem) {
    if (this.types == null) {
      this.types = new java.util.ArrayList<TTypeNode>();
    }
    this.types.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TTypeNode> getTypes() {
    return this.types;
  }

  public TTypeDesc setTypes(@org.apache.thrift.annotation.Nullable java.util.List<TTypeNode> types) {
    this.types = types;
    return this;
  }

  public void unsetTypes() {
    this.types = null;
  }

  /** Returns true if field types is set (has been assigned a value) and false otherwise */
  public boolean isSetTypes() {
    return this.types != null;
  }

  public void setTypesIsSet(boolean value) {
    if (!value) {
      this.types = null;
    }
  }

  public boolean isIsNullable() {
    return this.is_nullable;
  }

  public TTypeDesc setIsNullable(boolean is_nullable) {
    this.is_nullable = is_nullable;
    setIsNullableIsSet(true);
    return this;
  }

  public void unsetIsNullable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_NULLABLE_ISSET_ID);
  }

  /** Returns true if field is_nullable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNullable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_NULLABLE_ISSET_ID);
  }

  public void setIsNullableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_NULLABLE_ISSET_ID, value);
  }

  public long getByteSize() {
    return this.byte_size;
  }

  public TTypeDesc setByteSize(long byte_size) {
    this.byte_size = byte_size;
    setByteSizeIsSet(true);
    return this;
  }

  public void unsetByteSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BYTE_SIZE_ISSET_ID);
  }

  /** Returns true if field byte_size is set (has been assigned a value) and false otherwise */
  public boolean isSetByteSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BYTE_SIZE_ISSET_ID);
  }

  public void setByteSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BYTE_SIZE_ISSET_ID, value);
  }

  public int getSubTypesSize() {
    return (this.sub_types == null) ? 0 : this.sub_types.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TTypeDesc> getSubTypesIterator() {
    return (this.sub_types == null) ? null : this.sub_types.iterator();
  }

  public void addToSubTypes(TTypeDesc elem) {
    if (this.sub_types == null) {
      this.sub_types = new java.util.ArrayList<TTypeDesc>();
    }
    this.sub_types.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TTypeDesc> getSubTypes() {
    return this.sub_types;
  }

  public TTypeDesc setSubTypes(@org.apache.thrift.annotation.Nullable java.util.List<TTypeDesc> sub_types) {
    this.sub_types = sub_types;
    return this;
  }

  public void unsetSubTypes() {
    this.sub_types = null;
  }

  /** Returns true if field sub_types is set (has been assigned a value) and false otherwise */
  public boolean isSetSubTypes() {
    return this.sub_types != null;
  }

  public void setSubTypesIsSet(boolean value) {
    if (!value) {
      this.sub_types = null;
    }
  }

  public boolean isResultIsNullable() {
    return this.result_is_nullable;
  }

  public TTypeDesc setResultIsNullable(boolean result_is_nullable) {
    this.result_is_nullable = result_is_nullable;
    setResultIsNullableIsSet(true);
    return this;
  }

  public void unsetResultIsNullable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESULT_IS_NULLABLE_ISSET_ID);
  }

  /** Returns true if field result_is_nullable is set (has been assigned a value) and false otherwise */
  public boolean isSetResultIsNullable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESULT_IS_NULLABLE_ISSET_ID);
  }

  public void setResultIsNullableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESULT_IS_NULLABLE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFunctionName() {
    return this.function_name;
  }

  public TTypeDesc setFunctionName(@org.apache.thrift.annotation.Nullable java.lang.String function_name) {
    this.function_name = function_name;
    return this;
  }

  public void unsetFunctionName() {
    this.function_name = null;
  }

  /** Returns true if field function_name is set (has been assigned a value) and false otherwise */
  public boolean isSetFunctionName() {
    return this.function_name != null;
  }

  public void setFunctionNameIsSet(boolean value) {
    if (!value) {
      this.function_name = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TYPES:
      if (value == null) {
        unsetTypes();
      } else {
        setTypes((java.util.List<TTypeNode>)value);
      }
      break;

    case IS_NULLABLE:
      if (value == null) {
        unsetIsNullable();
      } else {
        setIsNullable((java.lang.Boolean)value);
      }
      break;

    case BYTE_SIZE:
      if (value == null) {
        unsetByteSize();
      } else {
        setByteSize((java.lang.Long)value);
      }
      break;

    case SUB_TYPES:
      if (value == null) {
        unsetSubTypes();
      } else {
        setSubTypes((java.util.List<TTypeDesc>)value);
      }
      break;

    case RESULT_IS_NULLABLE:
      if (value == null) {
        unsetResultIsNullable();
      } else {
        setResultIsNullable((java.lang.Boolean)value);
      }
      break;

    case FUNCTION_NAME:
      if (value == null) {
        unsetFunctionName();
      } else {
        setFunctionName((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPES:
      return getTypes();

    case IS_NULLABLE:
      return isIsNullable();

    case BYTE_SIZE:
      return getByteSize();

    case SUB_TYPES:
      return getSubTypes();

    case RESULT_IS_NULLABLE:
      return isResultIsNullable();

    case FUNCTION_NAME:
      return getFunctionName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPES:
      return isSetTypes();
    case IS_NULLABLE:
      return isSetIsNullable();
    case BYTE_SIZE:
      return isSetByteSize();
    case SUB_TYPES:
      return isSetSubTypes();
    case RESULT_IS_NULLABLE:
      return isSetResultIsNullable();
    case FUNCTION_NAME:
      return isSetFunctionName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTypeDesc)
      return this.equals((TTypeDesc)that);
    return false;
  }

  public boolean equals(TTypeDesc that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_types = true && this.isSetTypes();
    boolean that_present_types = true && that.isSetTypes();
    if (this_present_types || that_present_types) {
      if (!(this_present_types && that_present_types))
        return false;
      if (!this.types.equals(that.types))
        return false;
    }

    boolean this_present_is_nullable = true && this.isSetIsNullable();
    boolean that_present_is_nullable = true && that.isSetIsNullable();
    if (this_present_is_nullable || that_present_is_nullable) {
      if (!(this_present_is_nullable && that_present_is_nullable))
        return false;
      if (this.is_nullable != that.is_nullable)
        return false;
    }

    boolean this_present_byte_size = true && this.isSetByteSize();
    boolean that_present_byte_size = true && that.isSetByteSize();
    if (this_present_byte_size || that_present_byte_size) {
      if (!(this_present_byte_size && that_present_byte_size))
        return false;
      if (this.byte_size != that.byte_size)
        return false;
    }

    boolean this_present_sub_types = true && this.isSetSubTypes();
    boolean that_present_sub_types = true && that.isSetSubTypes();
    if (this_present_sub_types || that_present_sub_types) {
      if (!(this_present_sub_types && that_present_sub_types))
        return false;
      if (!this.sub_types.equals(that.sub_types))
        return false;
    }

    boolean this_present_result_is_nullable = true && this.isSetResultIsNullable();
    boolean that_present_result_is_nullable = true && that.isSetResultIsNullable();
    if (this_present_result_is_nullable || that_present_result_is_nullable) {
      if (!(this_present_result_is_nullable && that_present_result_is_nullable))
        return false;
      if (this.result_is_nullable != that.result_is_nullable)
        return false;
    }

    boolean this_present_function_name = true && this.isSetFunctionName();
    boolean that_present_function_name = true && that.isSetFunctionName();
    if (this_present_function_name || that_present_function_name) {
      if (!(this_present_function_name && that_present_function_name))
        return false;
      if (!this.function_name.equals(that.function_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTypes()) ? 131071 : 524287);
    if (isSetTypes())
      hashCode = hashCode * 8191 + types.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsNullable()) ? 131071 : 524287);
    if (isSetIsNullable())
      hashCode = hashCode * 8191 + ((is_nullable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetByteSize()) ? 131071 : 524287);
    if (isSetByteSize())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(byte_size);

    hashCode = hashCode * 8191 + ((isSetSubTypes()) ? 131071 : 524287);
    if (isSetSubTypes())
      hashCode = hashCode * 8191 + sub_types.hashCode();

    hashCode = hashCode * 8191 + ((isSetResultIsNullable()) ? 131071 : 524287);
    if (isSetResultIsNullable())
      hashCode = hashCode * 8191 + ((result_is_nullable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetFunctionName()) ? 131071 : 524287);
    if (isSetFunctionName())
      hashCode = hashCode * 8191 + function_name.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TTypeDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTypes(), other.isSetTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.types, other.types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsNullable(), other.isSetIsNullable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNullable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_nullable, other.is_nullable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetByteSize(), other.isSetByteSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_size, other.byte_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSubTypes(), other.isSetSubTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sub_types, other.sub_types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResultIsNullable(), other.isSetResultIsNullable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultIsNullable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_is_nullable, other.result_is_nullable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFunctionName(), other.isSetFunctionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunctionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.function_name, other.function_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTypeDesc(");
    boolean first = true;

    sb.append("types:");
    if (this.types == null) {
      sb.append("null");
    } else {
      sb.append(this.types);
    }
    first = false;
    if (isSetIsNullable()) {
      if (!first) sb.append(", ");
      sb.append("is_nullable:");
      sb.append(this.is_nullable);
      first = false;
    }
    if (isSetByteSize()) {
      if (!first) sb.append(", ");
      sb.append("byte_size:");
      sb.append(this.byte_size);
      first = false;
    }
    if (isSetSubTypes()) {
      if (!first) sb.append(", ");
      sb.append("sub_types:");
      if (this.sub_types == null) {
        sb.append("null");
      } else {
        sb.append(this.sub_types);
      }
      first = false;
    }
    if (isSetResultIsNullable()) {
      if (!first) sb.append(", ");
      sb.append("result_is_nullable:");
      sb.append(this.result_is_nullable);
      first = false;
    }
    if (isSetFunctionName()) {
      if (!first) sb.append(", ");
      sb.append("function_name:");
      if (this.function_name == null) {
        sb.append("null");
      } else {
        sb.append(this.function_name);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTypeDescStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTypeDescStandardScheme getScheme() {
      return new TTypeDescStandardScheme();
    }
  }

  private static class TTypeDescStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTypeDesc> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TTypeDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.types = new java.util.ArrayList<TTypeNode>(_list16.size);
                @org.apache.thrift.annotation.Nullable TTypeNode _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new TTypeNode();
                  _elem17.read(iprot);
                  struct.types.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_NULLABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_nullable = iprot.readBool();
              struct.setIsNullableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BYTE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.byte_size = iprot.readI64();
              struct.setByteSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUB_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.sub_types = new java.util.ArrayList<TTypeDesc>(_list19.size);
                @org.apache.thrift.annotation.Nullable TTypeDesc _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new TTypeDesc();
                  _elem20.read(iprot);
                  struct.sub_types.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setSubTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESULT_IS_NULLABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.result_is_nullable = iprot.readBool();
              struct.setResultIsNullableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FUNCTION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.function_name = iprot.readString();
              struct.setFunctionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TTypeDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.types != null) {
        oprot.writeFieldBegin(TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.types.size()));
          for (TTypeNode _iter22 : struct.types)
          {
            _iter22.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetIsNullable()) {
        oprot.writeFieldBegin(IS_NULLABLE_FIELD_DESC);
        oprot.writeBool(struct.is_nullable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetByteSize()) {
        oprot.writeFieldBegin(BYTE_SIZE_FIELD_DESC);
        oprot.writeI64(struct.byte_size);
        oprot.writeFieldEnd();
      }
      if (struct.sub_types != null) {
        if (struct.isSetSubTypes()) {
          oprot.writeFieldBegin(SUB_TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sub_types.size()));
            for (TTypeDesc _iter23 : struct.sub_types)
            {
              _iter23.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetResultIsNullable()) {
        oprot.writeFieldBegin(RESULT_IS_NULLABLE_FIELD_DESC);
        oprot.writeBool(struct.result_is_nullable);
        oprot.writeFieldEnd();
      }
      if (struct.function_name != null) {
        if (struct.isSetFunctionName()) {
          oprot.writeFieldBegin(FUNCTION_NAME_FIELD_DESC);
          oprot.writeString(struct.function_name);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTypeDescTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTypeDescTupleScheme getScheme() {
      return new TTypeDescTupleScheme();
    }
  }

  private static class TTypeDescTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTypeDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTypeDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTypes()) {
        optionals.set(0);
      }
      if (struct.isSetIsNullable()) {
        optionals.set(1);
      }
      if (struct.isSetByteSize()) {
        optionals.set(2);
      }
      if (struct.isSetSubTypes()) {
        optionals.set(3);
      }
      if (struct.isSetResultIsNullable()) {
        optionals.set(4);
      }
      if (struct.isSetFunctionName()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTypes()) {
        {
          oprot.writeI32(struct.types.size());
          for (TTypeNode _iter24 : struct.types)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetIsNullable()) {
        oprot.writeBool(struct.is_nullable);
      }
      if (struct.isSetByteSize()) {
        oprot.writeI64(struct.byte_size);
      }
      if (struct.isSetSubTypes()) {
        {
          oprot.writeI32(struct.sub_types.size());
          for (TTypeDesc _iter25 : struct.sub_types)
          {
            _iter25.write(oprot);
          }
        }
      }
      if (struct.isSetResultIsNullable()) {
        oprot.writeBool(struct.result_is_nullable);
      }
      if (struct.isSetFunctionName()) {
        oprot.writeString(struct.function_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTypeDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list26 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.types = new java.util.ArrayList<TTypeNode>(_list26.size);
          @org.apache.thrift.annotation.Nullable TTypeNode _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = new TTypeNode();
            _elem27.read(iprot);
            struct.types.add(_elem27);
          }
        }
        struct.setTypesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.is_nullable = iprot.readBool();
        struct.setIsNullableIsSet(true);
      }
      if (incoming.get(2)) {
        struct.byte_size = iprot.readI64();
        struct.setByteSizeIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.sub_types = new java.util.ArrayList<TTypeDesc>(_list29.size);
          @org.apache.thrift.annotation.Nullable TTypeDesc _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new TTypeDesc();
            _elem30.read(iprot);
            struct.sub_types.add(_elem30);
          }
        }
        struct.setSubTypesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.result_is_nullable = iprot.readBool();
        struct.setResultIsNullableIsSet(true);
      }
      if (incoming.get(5)) {
        struct.function_name = iprot.readString();
        struct.setFunctionNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

