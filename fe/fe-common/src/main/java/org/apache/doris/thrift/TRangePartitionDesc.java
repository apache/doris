/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-06-20")
public class TRangePartitionDesc implements org.apache.thrift.TBase<TRangePartitionDesc, TRangePartitionDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TRangePartitionDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRangePartitionDesc");

  private static final org.apache.thrift.protocol.TField COLUMN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("column_list", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField RANGE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("range_value", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRangePartitionDescStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRangePartitionDescTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> column_list; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<TRangeValue> range_value; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLUMN_LIST((short)1, "column_list"),
    RANGE_VALUE((short)2, "range_value");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLUMN_LIST
          return COLUMN_LIST;
        case 2: // RANGE_VALUE
          return RANGE_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.RANGE_VALUE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLUMN_LIST, new org.apache.thrift.meta_data.FieldMetaData("column_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RANGE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("range_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRangeValue.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRangePartitionDesc.class, metaDataMap);
  }

  public TRangePartitionDesc() {
  }

  public TRangePartitionDesc(
    java.util.List<java.lang.String> column_list)
  {
    this();
    this.column_list = column_list;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRangePartitionDesc(TRangePartitionDesc other) {
    if (other.isSetColumnList()) {
      java.util.List<java.lang.String> __this__column_list = new java.util.ArrayList<java.lang.String>(other.column_list);
      this.column_list = __this__column_list;
    }
    if (other.isSetRangeValue()) {
      java.util.List<TRangeValue> __this__range_value = new java.util.ArrayList<TRangeValue>(other.range_value.size());
      for (TRangeValue other_element : other.range_value) {
        __this__range_value.add(new TRangeValue(other_element));
      }
      this.range_value = __this__range_value;
    }
  }

  @Override
  public TRangePartitionDesc deepCopy() {
    return new TRangePartitionDesc(this);
  }

  @Override
  public void clear() {
    this.column_list = null;
    this.range_value = null;
  }

  public int getColumnListSize() {
    return (this.column_list == null) ? 0 : this.column_list.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getColumnListIterator() {
    return (this.column_list == null) ? null : this.column_list.iterator();
  }

  public void addToColumnList(java.lang.String elem) {
    if (this.column_list == null) {
      this.column_list = new java.util.ArrayList<java.lang.String>();
    }
    this.column_list.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getColumnList() {
    return this.column_list;
  }

  public TRangePartitionDesc setColumnList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> column_list) {
    this.column_list = column_list;
    return this;
  }

  public void unsetColumnList() {
    this.column_list = null;
  }

  /** Returns true if field column_list is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnList() {
    return this.column_list != null;
  }

  public void setColumnListIsSet(boolean value) {
    if (!value) {
      this.column_list = null;
    }
  }

  public int getRangeValueSize() {
    return (this.range_value == null) ? 0 : this.range_value.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TRangeValue> getRangeValueIterator() {
    return (this.range_value == null) ? null : this.range_value.iterator();
  }

  public void addToRangeValue(TRangeValue elem) {
    if (this.range_value == null) {
      this.range_value = new java.util.ArrayList<TRangeValue>();
    }
    this.range_value.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TRangeValue> getRangeValue() {
    return this.range_value;
  }

  public TRangePartitionDesc setRangeValue(@org.apache.thrift.annotation.Nullable java.util.List<TRangeValue> range_value) {
    this.range_value = range_value;
    return this;
  }

  public void unsetRangeValue() {
    this.range_value = null;
  }

  /** Returns true if field range_value is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeValue() {
    return this.range_value != null;
  }

  public void setRangeValueIsSet(boolean value) {
    if (!value) {
      this.range_value = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COLUMN_LIST:
      if (value == null) {
        unsetColumnList();
      } else {
        setColumnList((java.util.List<java.lang.String>)value);
      }
      break;

    case RANGE_VALUE:
      if (value == null) {
        unsetRangeValue();
      } else {
        setRangeValue((java.util.List<TRangeValue>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_LIST:
      return getColumnList();

    case RANGE_VALUE:
      return getRangeValue();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COLUMN_LIST:
      return isSetColumnList();
    case RANGE_VALUE:
      return isSetRangeValue();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TRangePartitionDesc)
      return this.equals((TRangePartitionDesc)that);
    return false;
  }

  public boolean equals(TRangePartitionDesc that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_column_list = true && this.isSetColumnList();
    boolean that_present_column_list = true && that.isSetColumnList();
    if (this_present_column_list || that_present_column_list) {
      if (!(this_present_column_list && that_present_column_list))
        return false;
      if (!this.column_list.equals(that.column_list))
        return false;
    }

    boolean this_present_range_value = true && this.isSetRangeValue();
    boolean that_present_range_value = true && that.isSetRangeValue();
    if (this_present_range_value || that_present_range_value) {
      if (!(this_present_range_value && that_present_range_value))
        return false;
      if (!this.range_value.equals(that.range_value))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetColumnList()) ? 131071 : 524287);
    if (isSetColumnList())
      hashCode = hashCode * 8191 + column_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetRangeValue()) ? 131071 : 524287);
    if (isSetRangeValue())
      hashCode = hashCode * 8191 + range_value.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TRangePartitionDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetColumnList(), other.isSetColumnList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_list, other.column_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRangeValue(), other.isSetRangeValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range_value, other.range_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRangePartitionDesc(");
    boolean first = true;

    sb.append("column_list:");
    if (this.column_list == null) {
      sb.append("null");
    } else {
      sb.append(this.column_list);
    }
    first = false;
    if (isSetRangeValue()) {
      if (!first) sb.append(", ");
      sb.append("range_value:");
      if (this.range_value == null) {
        sb.append("null");
      } else {
        sb.append(this.range_value);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (column_list == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_list' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRangePartitionDescStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRangePartitionDescStandardScheme getScheme() {
      return new TRangePartitionDescStandardScheme();
    }
  }

  private static class TRangePartitionDescStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRangePartitionDesc> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TRangePartitionDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLUMN_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.column_list = new java.util.ArrayList<java.lang.String>(_list16.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readString();
                  struct.column_list.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setColumnListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RANGE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.range_value = new java.util.ArrayList<TRangeValue>(_list19.size);
                @org.apache.thrift.annotation.Nullable TRangeValue _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new TRangeValue();
                  _elem20.read(iprot);
                  struct.range_value.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setRangeValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TRangePartitionDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.column_list != null) {
        oprot.writeFieldBegin(COLUMN_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.column_list.size()));
          for (java.lang.String _iter22 : struct.column_list)
          {
            oprot.writeString(_iter22);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.range_value != null) {
        if (struct.isSetRangeValue()) {
          oprot.writeFieldBegin(RANGE_VALUE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.range_value.size()));
            for (TRangeValue _iter23 : struct.range_value)
            {
              _iter23.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRangePartitionDescTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRangePartitionDescTupleScheme getScheme() {
      return new TRangePartitionDescTupleScheme();
    }
  }

  private static class TRangePartitionDescTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRangePartitionDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRangePartitionDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.column_list.size());
        for (java.lang.String _iter24 : struct.column_list)
        {
          oprot.writeString(_iter24);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRangeValue()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetRangeValue()) {
        {
          oprot.writeI32(struct.range_value.size());
          for (TRangeValue _iter25 : struct.range_value)
          {
            _iter25.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRangePartitionDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list26 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.column_list = new java.util.ArrayList<java.lang.String>(_list26.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem27;
        for (int _i28 = 0; _i28 < _list26.size; ++_i28)
        {
          _elem27 = iprot.readString();
          struct.column_list.add(_elem27);
        }
      }
      struct.setColumnListIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list29 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.range_value = new java.util.ArrayList<TRangeValue>(_list29.size);
          @org.apache.thrift.annotation.Nullable TRangeValue _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new TRangeValue();
            _elem30.read(iprot);
            struct.range_value.add(_elem30);
          }
        }
        struct.setRangeValueIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

