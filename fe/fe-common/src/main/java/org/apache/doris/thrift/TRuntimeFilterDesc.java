/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-08-29")
public class TRuntimeFilterDesc implements org.apache.thrift.TBase<TRuntimeFilterDesc, TRuntimeFilterDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TRuntimeFilterDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRuntimeFilterDesc");

  private static final org.apache.thrift.protocol.TField FILTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("filter_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SRC_EXPR_FIELD_DESC = new org.apache.thrift.protocol.TField("src_expr", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField EXPR_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("expr_order", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PLAN_ID_TO_TARGET_EXPR_FIELD_DESC = new org.apache.thrift.protocol.TField("planId_to_target_expr", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField IS_BROADCAST_JOIN_FIELD_DESC = new org.apache.thrift.protocol.TField("is_broadcast_join", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField HAS_LOCAL_TARGETS_FIELD_DESC = new org.apache.thrift.protocol.TField("has_local_targets", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField HAS_REMOTE_TARGETS_FIELD_DESC = new org.apache.thrift.protocol.TField("has_remote_targets", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField BLOOM_FILTER_SIZE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("bloom_filter_size_bytes", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField BITMAP_TARGET_EXPR_FIELD_DESC = new org.apache.thrift.protocol.TField("bitmap_target_expr", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField BITMAP_FILTER_NOT_IN_FIELD_DESC = new org.apache.thrift.protocol.TField("bitmap_filter_not_in", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField OPT_REMOTE_RF_FIELD_DESC = new org.apache.thrift.protocol.TField("opt_remote_rf", org.apache.thrift.protocol.TType.BOOL, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRuntimeFilterDescStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRuntimeFilterDescTupleSchemeFactory();

  public int filter_id; // required
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr src_expr; // required
  public int expr_order; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,org.apache.doris.thrift.TExpr> planId_to_target_expr; // required
  public boolean is_broadcast_join; // required
  public boolean has_local_targets; // required
  public boolean has_remote_targets; // required
  /**
   * 
   * @see TRuntimeFilterType
   */
  public @org.apache.thrift.annotation.Nullable TRuntimeFilterType type; // required
  public long bloom_filter_size_bytes; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr bitmap_target_expr; // optional
  public boolean bitmap_filter_not_in; // optional
  public boolean opt_remote_rf; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILTER_ID((short)1, "filter_id"),
    SRC_EXPR((short)2, "src_expr"),
    EXPR_ORDER((short)3, "expr_order"),
    PLAN_ID_TO_TARGET_EXPR((short)4, "planId_to_target_expr"),
    IS_BROADCAST_JOIN((short)5, "is_broadcast_join"),
    HAS_LOCAL_TARGETS((short)6, "has_local_targets"),
    HAS_REMOTE_TARGETS((short)7, "has_remote_targets"),
    /**
     * 
     * @see TRuntimeFilterType
     */
    TYPE((short)8, "type"),
    BLOOM_FILTER_SIZE_BYTES((short)9, "bloom_filter_size_bytes"),
    BITMAP_TARGET_EXPR((short)10, "bitmap_target_expr"),
    BITMAP_FILTER_NOT_IN((short)11, "bitmap_filter_not_in"),
    OPT_REMOTE_RF((short)12, "opt_remote_rf");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILTER_ID
          return FILTER_ID;
        case 2: // SRC_EXPR
          return SRC_EXPR;
        case 3: // EXPR_ORDER
          return EXPR_ORDER;
        case 4: // PLAN_ID_TO_TARGET_EXPR
          return PLAN_ID_TO_TARGET_EXPR;
        case 5: // IS_BROADCAST_JOIN
          return IS_BROADCAST_JOIN;
        case 6: // HAS_LOCAL_TARGETS
          return HAS_LOCAL_TARGETS;
        case 7: // HAS_REMOTE_TARGETS
          return HAS_REMOTE_TARGETS;
        case 8: // TYPE
          return TYPE;
        case 9: // BLOOM_FILTER_SIZE_BYTES
          return BLOOM_FILTER_SIZE_BYTES;
        case 10: // BITMAP_TARGET_EXPR
          return BITMAP_TARGET_EXPR;
        case 11: // BITMAP_FILTER_NOT_IN
          return BITMAP_FILTER_NOT_IN;
        case 12: // OPT_REMOTE_RF
          return OPT_REMOTE_RF;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FILTER_ID_ISSET_ID = 0;
  private static final int __EXPR_ORDER_ISSET_ID = 1;
  private static final int __IS_BROADCAST_JOIN_ISSET_ID = 2;
  private static final int __HAS_LOCAL_TARGETS_ISSET_ID = 3;
  private static final int __HAS_REMOTE_TARGETS_ISSET_ID = 4;
  private static final int __BLOOM_FILTER_SIZE_BYTES_ISSET_ID = 5;
  private static final int __BITMAP_FILTER_NOT_IN_ISSET_ID = 6;
  private static final int __OPT_REMOTE_RF_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BLOOM_FILTER_SIZE_BYTES,_Fields.BITMAP_TARGET_EXPR,_Fields.BITMAP_FILTER_NOT_IN,_Fields.OPT_REMOTE_RF};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILTER_ID, new org.apache.thrift.meta_data.FieldMetaData("filter_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SRC_EXPR, new org.apache.thrift.meta_data.FieldMetaData("src_expr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TExpr.class)));
    tmpMap.put(_Fields.EXPR_ORDER, new org.apache.thrift.meta_data.FieldMetaData("expr_order", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_ID_TO_TARGET_EXPR, new org.apache.thrift.meta_data.FieldMetaData("planId_to_target_expr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TPlanNodeId"), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TExpr.class))));
    tmpMap.put(_Fields.IS_BROADCAST_JOIN, new org.apache.thrift.meta_data.FieldMetaData("is_broadcast_join", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_LOCAL_TARGETS, new org.apache.thrift.meta_data.FieldMetaData("has_local_targets", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_REMOTE_TARGETS, new org.apache.thrift.meta_data.FieldMetaData("has_remote_targets", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TRuntimeFilterType.class)));
    tmpMap.put(_Fields.BLOOM_FILTER_SIZE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("bloom_filter_size_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BITMAP_TARGET_EXPR, new org.apache.thrift.meta_data.FieldMetaData("bitmap_target_expr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TExpr.class)));
    tmpMap.put(_Fields.BITMAP_FILTER_NOT_IN, new org.apache.thrift.meta_data.FieldMetaData("bitmap_filter_not_in", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OPT_REMOTE_RF, new org.apache.thrift.meta_data.FieldMetaData("opt_remote_rf", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRuntimeFilterDesc.class, metaDataMap);
  }

  public TRuntimeFilterDesc() {
  }

  public TRuntimeFilterDesc(
    int filter_id,
    org.apache.doris.thrift.TExpr src_expr,
    int expr_order,
    java.util.Map<java.lang.Integer,org.apache.doris.thrift.TExpr> planId_to_target_expr,
    boolean is_broadcast_join,
    boolean has_local_targets,
    boolean has_remote_targets,
    TRuntimeFilterType type)
  {
    this();
    this.filter_id = filter_id;
    setFilterIdIsSet(true);
    this.src_expr = src_expr;
    this.expr_order = expr_order;
    setExprOrderIsSet(true);
    this.planId_to_target_expr = planId_to_target_expr;
    this.is_broadcast_join = is_broadcast_join;
    setIsBroadcastJoinIsSet(true);
    this.has_local_targets = has_local_targets;
    setHasLocalTargetsIsSet(true);
    this.has_remote_targets = has_remote_targets;
    setHasRemoteTargetsIsSet(true);
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRuntimeFilterDesc(TRuntimeFilterDesc other) {
    __isset_bitfield = other.__isset_bitfield;
    this.filter_id = other.filter_id;
    if (other.isSetSrcExpr()) {
      this.src_expr = new org.apache.doris.thrift.TExpr(other.src_expr);
    }
    this.expr_order = other.expr_order;
    if (other.isSetPlanIdToTargetExpr()) {
      java.util.Map<java.lang.Integer,org.apache.doris.thrift.TExpr> __this__planId_to_target_expr = new java.util.HashMap<java.lang.Integer,org.apache.doris.thrift.TExpr>(other.planId_to_target_expr.size());
      for (java.util.Map.Entry<java.lang.Integer, org.apache.doris.thrift.TExpr> other_element : other.planId_to_target_expr.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        org.apache.doris.thrift.TExpr other_element_value = other_element.getValue();

        java.lang.Integer __this__planId_to_target_expr_copy_key = other_element_key;

        org.apache.doris.thrift.TExpr __this__planId_to_target_expr_copy_value = new org.apache.doris.thrift.TExpr(other_element_value);

        __this__planId_to_target_expr.put(__this__planId_to_target_expr_copy_key, __this__planId_to_target_expr_copy_value);
      }
      this.planId_to_target_expr = __this__planId_to_target_expr;
    }
    this.is_broadcast_join = other.is_broadcast_join;
    this.has_local_targets = other.has_local_targets;
    this.has_remote_targets = other.has_remote_targets;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.bloom_filter_size_bytes = other.bloom_filter_size_bytes;
    if (other.isSetBitmapTargetExpr()) {
      this.bitmap_target_expr = new org.apache.doris.thrift.TExpr(other.bitmap_target_expr);
    }
    this.bitmap_filter_not_in = other.bitmap_filter_not_in;
    this.opt_remote_rf = other.opt_remote_rf;
  }

  @Override
  public TRuntimeFilterDesc deepCopy() {
    return new TRuntimeFilterDesc(this);
  }

  @Override
  public void clear() {
    setFilterIdIsSet(false);
    this.filter_id = 0;
    this.src_expr = null;
    setExprOrderIsSet(false);
    this.expr_order = 0;
    this.planId_to_target_expr = null;
    setIsBroadcastJoinIsSet(false);
    this.is_broadcast_join = false;
    setHasLocalTargetsIsSet(false);
    this.has_local_targets = false;
    setHasRemoteTargetsIsSet(false);
    this.has_remote_targets = false;
    this.type = null;
    setBloomFilterSizeBytesIsSet(false);
    this.bloom_filter_size_bytes = 0;
    this.bitmap_target_expr = null;
    setBitmapFilterNotInIsSet(false);
    this.bitmap_filter_not_in = false;
    setOptRemoteRfIsSet(false);
    this.opt_remote_rf = false;
  }

  public int getFilterId() {
    return this.filter_id;
  }

  public TRuntimeFilterDesc setFilterId(int filter_id) {
    this.filter_id = filter_id;
    setFilterIdIsSet(true);
    return this;
  }

  public void unsetFilterId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILTER_ID_ISSET_ID);
  }

  /** Returns true if field filter_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFilterId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILTER_ID_ISSET_ID);
  }

  public void setFilterIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILTER_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TExpr getSrcExpr() {
    return this.src_expr;
  }

  public TRuntimeFilterDesc setSrcExpr(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr src_expr) {
    this.src_expr = src_expr;
    return this;
  }

  public void unsetSrcExpr() {
    this.src_expr = null;
  }

  /** Returns true if field src_expr is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcExpr() {
    return this.src_expr != null;
  }

  public void setSrcExprIsSet(boolean value) {
    if (!value) {
      this.src_expr = null;
    }
  }

  public int getExprOrder() {
    return this.expr_order;
  }

  public TRuntimeFilterDesc setExprOrder(int expr_order) {
    this.expr_order = expr_order;
    setExprOrderIsSet(true);
    return this;
  }

  public void unsetExprOrder() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPR_ORDER_ISSET_ID);
  }

  /** Returns true if field expr_order is set (has been assigned a value) and false otherwise */
  public boolean isSetExprOrder() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPR_ORDER_ISSET_ID);
  }

  public void setExprOrderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPR_ORDER_ISSET_ID, value);
  }

  public int getPlanIdToTargetExprSize() {
    return (this.planId_to_target_expr == null) ? 0 : this.planId_to_target_expr.size();
  }

  public void putToPlanIdToTargetExpr(int key, org.apache.doris.thrift.TExpr val) {
    if (this.planId_to_target_expr == null) {
      this.planId_to_target_expr = new java.util.HashMap<java.lang.Integer,org.apache.doris.thrift.TExpr>();
    }
    this.planId_to_target_expr.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,org.apache.doris.thrift.TExpr> getPlanIdToTargetExpr() {
    return this.planId_to_target_expr;
  }

  public TRuntimeFilterDesc setPlanIdToTargetExpr(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,org.apache.doris.thrift.TExpr> planId_to_target_expr) {
    this.planId_to_target_expr = planId_to_target_expr;
    return this;
  }

  public void unsetPlanIdToTargetExpr() {
    this.planId_to_target_expr = null;
  }

  /** Returns true if field planId_to_target_expr is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanIdToTargetExpr() {
    return this.planId_to_target_expr != null;
  }

  public void setPlanIdToTargetExprIsSet(boolean value) {
    if (!value) {
      this.planId_to_target_expr = null;
    }
  }

  public boolean isIsBroadcastJoin() {
    return this.is_broadcast_join;
  }

  public TRuntimeFilterDesc setIsBroadcastJoin(boolean is_broadcast_join) {
    this.is_broadcast_join = is_broadcast_join;
    setIsBroadcastJoinIsSet(true);
    return this;
  }

  public void unsetIsBroadcastJoin() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_BROADCAST_JOIN_ISSET_ID);
  }

  /** Returns true if field is_broadcast_join is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBroadcastJoin() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_BROADCAST_JOIN_ISSET_ID);
  }

  public void setIsBroadcastJoinIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_BROADCAST_JOIN_ISSET_ID, value);
  }

  public boolean isHasLocalTargets() {
    return this.has_local_targets;
  }

  public TRuntimeFilterDesc setHasLocalTargets(boolean has_local_targets) {
    this.has_local_targets = has_local_targets;
    setHasLocalTargetsIsSet(true);
    return this;
  }

  public void unsetHasLocalTargets() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HAS_LOCAL_TARGETS_ISSET_ID);
  }

  /** Returns true if field has_local_targets is set (has been assigned a value) and false otherwise */
  public boolean isSetHasLocalTargets() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HAS_LOCAL_TARGETS_ISSET_ID);
  }

  public void setHasLocalTargetsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HAS_LOCAL_TARGETS_ISSET_ID, value);
  }

  public boolean isHasRemoteTargets() {
    return this.has_remote_targets;
  }

  public TRuntimeFilterDesc setHasRemoteTargets(boolean has_remote_targets) {
    this.has_remote_targets = has_remote_targets;
    setHasRemoteTargetsIsSet(true);
    return this;
  }

  public void unsetHasRemoteTargets() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HAS_REMOTE_TARGETS_ISSET_ID);
  }

  /** Returns true if field has_remote_targets is set (has been assigned a value) and false otherwise */
  public boolean isSetHasRemoteTargets() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HAS_REMOTE_TARGETS_ISSET_ID);
  }

  public void setHasRemoteTargetsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HAS_REMOTE_TARGETS_ISSET_ID, value);
  }

  /**
   * 
   * @see TRuntimeFilterType
   */
  @org.apache.thrift.annotation.Nullable
  public TRuntimeFilterType getType() {
    return this.type;
  }

  /**
   * 
   * @see TRuntimeFilterType
   */
  public TRuntimeFilterDesc setType(@org.apache.thrift.annotation.Nullable TRuntimeFilterType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getBloomFilterSizeBytes() {
    return this.bloom_filter_size_bytes;
  }

  public TRuntimeFilterDesc setBloomFilterSizeBytes(long bloom_filter_size_bytes) {
    this.bloom_filter_size_bytes = bloom_filter_size_bytes;
    setBloomFilterSizeBytesIsSet(true);
    return this;
  }

  public void unsetBloomFilterSizeBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOOM_FILTER_SIZE_BYTES_ISSET_ID);
  }

  /** Returns true if field bloom_filter_size_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetBloomFilterSizeBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOOM_FILTER_SIZE_BYTES_ISSET_ID);
  }

  public void setBloomFilterSizeBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOOM_FILTER_SIZE_BYTES_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TExpr getBitmapTargetExpr() {
    return this.bitmap_target_expr;
  }

  public TRuntimeFilterDesc setBitmapTargetExpr(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr bitmap_target_expr) {
    this.bitmap_target_expr = bitmap_target_expr;
    return this;
  }

  public void unsetBitmapTargetExpr() {
    this.bitmap_target_expr = null;
  }

  /** Returns true if field bitmap_target_expr is set (has been assigned a value) and false otherwise */
  public boolean isSetBitmapTargetExpr() {
    return this.bitmap_target_expr != null;
  }

  public void setBitmapTargetExprIsSet(boolean value) {
    if (!value) {
      this.bitmap_target_expr = null;
    }
  }

  public boolean isBitmapFilterNotIn() {
    return this.bitmap_filter_not_in;
  }

  public TRuntimeFilterDesc setBitmapFilterNotIn(boolean bitmap_filter_not_in) {
    this.bitmap_filter_not_in = bitmap_filter_not_in;
    setBitmapFilterNotInIsSet(true);
    return this;
  }

  public void unsetBitmapFilterNotIn() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BITMAP_FILTER_NOT_IN_ISSET_ID);
  }

  /** Returns true if field bitmap_filter_not_in is set (has been assigned a value) and false otherwise */
  public boolean isSetBitmapFilterNotIn() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BITMAP_FILTER_NOT_IN_ISSET_ID);
  }

  public void setBitmapFilterNotInIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BITMAP_FILTER_NOT_IN_ISSET_ID, value);
  }

  public boolean isOptRemoteRf() {
    return this.opt_remote_rf;
  }

  public TRuntimeFilterDesc setOptRemoteRf(boolean opt_remote_rf) {
    this.opt_remote_rf = opt_remote_rf;
    setOptRemoteRfIsSet(true);
    return this;
  }

  public void unsetOptRemoteRf() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPT_REMOTE_RF_ISSET_ID);
  }

  /** Returns true if field opt_remote_rf is set (has been assigned a value) and false otherwise */
  public boolean isSetOptRemoteRf() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPT_REMOTE_RF_ISSET_ID);
  }

  public void setOptRemoteRfIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPT_REMOTE_RF_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FILTER_ID:
      if (value == null) {
        unsetFilterId();
      } else {
        setFilterId((java.lang.Integer)value);
      }
      break;

    case SRC_EXPR:
      if (value == null) {
        unsetSrcExpr();
      } else {
        setSrcExpr((org.apache.doris.thrift.TExpr)value);
      }
      break;

    case EXPR_ORDER:
      if (value == null) {
        unsetExprOrder();
      } else {
        setExprOrder((java.lang.Integer)value);
      }
      break;

    case PLAN_ID_TO_TARGET_EXPR:
      if (value == null) {
        unsetPlanIdToTargetExpr();
      } else {
        setPlanIdToTargetExpr((java.util.Map<java.lang.Integer,org.apache.doris.thrift.TExpr>)value);
      }
      break;

    case IS_BROADCAST_JOIN:
      if (value == null) {
        unsetIsBroadcastJoin();
      } else {
        setIsBroadcastJoin((java.lang.Boolean)value);
      }
      break;

    case HAS_LOCAL_TARGETS:
      if (value == null) {
        unsetHasLocalTargets();
      } else {
        setHasLocalTargets((java.lang.Boolean)value);
      }
      break;

    case HAS_REMOTE_TARGETS:
      if (value == null) {
        unsetHasRemoteTargets();
      } else {
        setHasRemoteTargets((java.lang.Boolean)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TRuntimeFilterType)value);
      }
      break;

    case BLOOM_FILTER_SIZE_BYTES:
      if (value == null) {
        unsetBloomFilterSizeBytes();
      } else {
        setBloomFilterSizeBytes((java.lang.Long)value);
      }
      break;

    case BITMAP_TARGET_EXPR:
      if (value == null) {
        unsetBitmapTargetExpr();
      } else {
        setBitmapTargetExpr((org.apache.doris.thrift.TExpr)value);
      }
      break;

    case BITMAP_FILTER_NOT_IN:
      if (value == null) {
        unsetBitmapFilterNotIn();
      } else {
        setBitmapFilterNotIn((java.lang.Boolean)value);
      }
      break;

    case OPT_REMOTE_RF:
      if (value == null) {
        unsetOptRemoteRf();
      } else {
        setOptRemoteRf((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FILTER_ID:
      return getFilterId();

    case SRC_EXPR:
      return getSrcExpr();

    case EXPR_ORDER:
      return getExprOrder();

    case PLAN_ID_TO_TARGET_EXPR:
      return getPlanIdToTargetExpr();

    case IS_BROADCAST_JOIN:
      return isIsBroadcastJoin();

    case HAS_LOCAL_TARGETS:
      return isHasLocalTargets();

    case HAS_REMOTE_TARGETS:
      return isHasRemoteTargets();

    case TYPE:
      return getType();

    case BLOOM_FILTER_SIZE_BYTES:
      return getBloomFilterSizeBytes();

    case BITMAP_TARGET_EXPR:
      return getBitmapTargetExpr();

    case BITMAP_FILTER_NOT_IN:
      return isBitmapFilterNotIn();

    case OPT_REMOTE_RF:
      return isOptRemoteRf();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FILTER_ID:
      return isSetFilterId();
    case SRC_EXPR:
      return isSetSrcExpr();
    case EXPR_ORDER:
      return isSetExprOrder();
    case PLAN_ID_TO_TARGET_EXPR:
      return isSetPlanIdToTargetExpr();
    case IS_BROADCAST_JOIN:
      return isSetIsBroadcastJoin();
    case HAS_LOCAL_TARGETS:
      return isSetHasLocalTargets();
    case HAS_REMOTE_TARGETS:
      return isSetHasRemoteTargets();
    case TYPE:
      return isSetType();
    case BLOOM_FILTER_SIZE_BYTES:
      return isSetBloomFilterSizeBytes();
    case BITMAP_TARGET_EXPR:
      return isSetBitmapTargetExpr();
    case BITMAP_FILTER_NOT_IN:
      return isSetBitmapFilterNotIn();
    case OPT_REMOTE_RF:
      return isSetOptRemoteRf();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TRuntimeFilterDesc)
      return this.equals((TRuntimeFilterDesc)that);
    return false;
  }

  public boolean equals(TRuntimeFilterDesc that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_filter_id = true;
    boolean that_present_filter_id = true;
    if (this_present_filter_id || that_present_filter_id) {
      if (!(this_present_filter_id && that_present_filter_id))
        return false;
      if (this.filter_id != that.filter_id)
        return false;
    }

    boolean this_present_src_expr = true && this.isSetSrcExpr();
    boolean that_present_src_expr = true && that.isSetSrcExpr();
    if (this_present_src_expr || that_present_src_expr) {
      if (!(this_present_src_expr && that_present_src_expr))
        return false;
      if (!this.src_expr.equals(that.src_expr))
        return false;
    }

    boolean this_present_expr_order = true;
    boolean that_present_expr_order = true;
    if (this_present_expr_order || that_present_expr_order) {
      if (!(this_present_expr_order && that_present_expr_order))
        return false;
      if (this.expr_order != that.expr_order)
        return false;
    }

    boolean this_present_planId_to_target_expr = true && this.isSetPlanIdToTargetExpr();
    boolean that_present_planId_to_target_expr = true && that.isSetPlanIdToTargetExpr();
    if (this_present_planId_to_target_expr || that_present_planId_to_target_expr) {
      if (!(this_present_planId_to_target_expr && that_present_planId_to_target_expr))
        return false;
      if (!this.planId_to_target_expr.equals(that.planId_to_target_expr))
        return false;
    }

    boolean this_present_is_broadcast_join = true;
    boolean that_present_is_broadcast_join = true;
    if (this_present_is_broadcast_join || that_present_is_broadcast_join) {
      if (!(this_present_is_broadcast_join && that_present_is_broadcast_join))
        return false;
      if (this.is_broadcast_join != that.is_broadcast_join)
        return false;
    }

    boolean this_present_has_local_targets = true;
    boolean that_present_has_local_targets = true;
    if (this_present_has_local_targets || that_present_has_local_targets) {
      if (!(this_present_has_local_targets && that_present_has_local_targets))
        return false;
      if (this.has_local_targets != that.has_local_targets)
        return false;
    }

    boolean this_present_has_remote_targets = true;
    boolean that_present_has_remote_targets = true;
    if (this_present_has_remote_targets || that_present_has_remote_targets) {
      if (!(this_present_has_remote_targets && that_present_has_remote_targets))
        return false;
      if (this.has_remote_targets != that.has_remote_targets)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_bloom_filter_size_bytes = true && this.isSetBloomFilterSizeBytes();
    boolean that_present_bloom_filter_size_bytes = true && that.isSetBloomFilterSizeBytes();
    if (this_present_bloom_filter_size_bytes || that_present_bloom_filter_size_bytes) {
      if (!(this_present_bloom_filter_size_bytes && that_present_bloom_filter_size_bytes))
        return false;
      if (this.bloom_filter_size_bytes != that.bloom_filter_size_bytes)
        return false;
    }

    boolean this_present_bitmap_target_expr = true && this.isSetBitmapTargetExpr();
    boolean that_present_bitmap_target_expr = true && that.isSetBitmapTargetExpr();
    if (this_present_bitmap_target_expr || that_present_bitmap_target_expr) {
      if (!(this_present_bitmap_target_expr && that_present_bitmap_target_expr))
        return false;
      if (!this.bitmap_target_expr.equals(that.bitmap_target_expr))
        return false;
    }

    boolean this_present_bitmap_filter_not_in = true && this.isSetBitmapFilterNotIn();
    boolean that_present_bitmap_filter_not_in = true && that.isSetBitmapFilterNotIn();
    if (this_present_bitmap_filter_not_in || that_present_bitmap_filter_not_in) {
      if (!(this_present_bitmap_filter_not_in && that_present_bitmap_filter_not_in))
        return false;
      if (this.bitmap_filter_not_in != that.bitmap_filter_not_in)
        return false;
    }

    boolean this_present_opt_remote_rf = true && this.isSetOptRemoteRf();
    boolean that_present_opt_remote_rf = true && that.isSetOptRemoteRf();
    if (this_present_opt_remote_rf || that_present_opt_remote_rf) {
      if (!(this_present_opt_remote_rf && that_present_opt_remote_rf))
        return false;
      if (this.opt_remote_rf != that.opt_remote_rf)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + filter_id;

    hashCode = hashCode * 8191 + ((isSetSrcExpr()) ? 131071 : 524287);
    if (isSetSrcExpr())
      hashCode = hashCode * 8191 + src_expr.hashCode();

    hashCode = hashCode * 8191 + expr_order;

    hashCode = hashCode * 8191 + ((isSetPlanIdToTargetExpr()) ? 131071 : 524287);
    if (isSetPlanIdToTargetExpr())
      hashCode = hashCode * 8191 + planId_to_target_expr.hashCode();

    hashCode = hashCode * 8191 + ((is_broadcast_join) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((has_local_targets) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((has_remote_targets) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetBloomFilterSizeBytes()) ? 131071 : 524287);
    if (isSetBloomFilterSizeBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bloom_filter_size_bytes);

    hashCode = hashCode * 8191 + ((isSetBitmapTargetExpr()) ? 131071 : 524287);
    if (isSetBitmapTargetExpr())
      hashCode = hashCode * 8191 + bitmap_target_expr.hashCode();

    hashCode = hashCode * 8191 + ((isSetBitmapFilterNotIn()) ? 131071 : 524287);
    if (isSetBitmapFilterNotIn())
      hashCode = hashCode * 8191 + ((bitmap_filter_not_in) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetOptRemoteRf()) ? 131071 : 524287);
    if (isSetOptRemoteRf())
      hashCode = hashCode * 8191 + ((opt_remote_rf) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TRuntimeFilterDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFilterId(), other.isSetFilterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter_id, other.filter_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSrcExpr(), other.isSetSrcExpr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcExpr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src_expr, other.src_expr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExprOrder(), other.isSetExprOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExprOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expr_order, other.expr_order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPlanIdToTargetExpr(), other.isSetPlanIdToTargetExpr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanIdToTargetExpr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planId_to_target_expr, other.planId_to_target_expr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsBroadcastJoin(), other.isSetIsBroadcastJoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBroadcastJoin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_broadcast_join, other.is_broadcast_join);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHasLocalTargets(), other.isSetHasLocalTargets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasLocalTargets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_local_targets, other.has_local_targets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHasRemoteTargets(), other.isSetHasRemoteTargets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasRemoteTargets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_remote_targets, other.has_remote_targets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBloomFilterSizeBytes(), other.isSetBloomFilterSizeBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBloomFilterSizeBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bloom_filter_size_bytes, other.bloom_filter_size_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBitmapTargetExpr(), other.isSetBitmapTargetExpr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBitmapTargetExpr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bitmap_target_expr, other.bitmap_target_expr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBitmapFilterNotIn(), other.isSetBitmapFilterNotIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBitmapFilterNotIn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bitmap_filter_not_in, other.bitmap_filter_not_in);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOptRemoteRf(), other.isSetOptRemoteRf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptRemoteRf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opt_remote_rf, other.opt_remote_rf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRuntimeFilterDesc(");
    boolean first = true;

    sb.append("filter_id:");
    sb.append(this.filter_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("src_expr:");
    if (this.src_expr == null) {
      sb.append("null");
    } else {
      sb.append(this.src_expr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expr_order:");
    sb.append(this.expr_order);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planId_to_target_expr:");
    if (this.planId_to_target_expr == null) {
      sb.append("null");
    } else {
      sb.append(this.planId_to_target_expr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("is_broadcast_join:");
    sb.append(this.is_broadcast_join);
    first = false;
    if (!first) sb.append(", ");
    sb.append("has_local_targets:");
    sb.append(this.has_local_targets);
    first = false;
    if (!first) sb.append(", ");
    sb.append("has_remote_targets:");
    sb.append(this.has_remote_targets);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetBloomFilterSizeBytes()) {
      if (!first) sb.append(", ");
      sb.append("bloom_filter_size_bytes:");
      sb.append(this.bloom_filter_size_bytes);
      first = false;
    }
    if (isSetBitmapTargetExpr()) {
      if (!first) sb.append(", ");
      sb.append("bitmap_target_expr:");
      if (this.bitmap_target_expr == null) {
        sb.append("null");
      } else {
        sb.append(this.bitmap_target_expr);
      }
      first = false;
    }
    if (isSetBitmapFilterNotIn()) {
      if (!first) sb.append(", ");
      sb.append("bitmap_filter_not_in:");
      sb.append(this.bitmap_filter_not_in);
      first = false;
    }
    if (isSetOptRemoteRf()) {
      if (!first) sb.append(", ");
      sb.append("opt_remote_rf:");
      sb.append(this.opt_remote_rf);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'filter_id' because it's a primitive and you chose the non-beans generator.
    if (src_expr == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'src_expr' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'expr_order' because it's a primitive and you chose the non-beans generator.
    if (planId_to_target_expr == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'planId_to_target_expr' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'is_broadcast_join' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'has_local_targets' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'has_remote_targets' because it's a primitive and you chose the non-beans generator.
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (src_expr != null) {
      src_expr.validate();
    }
    if (bitmap_target_expr != null) {
      bitmap_target_expr.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRuntimeFilterDescStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRuntimeFilterDescStandardScheme getScheme() {
      return new TRuntimeFilterDescStandardScheme();
    }
  }

  private static class TRuntimeFilterDescStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRuntimeFilterDesc> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TRuntimeFilterDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILTER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.filter_id = iprot.readI32();
              struct.setFilterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SRC_EXPR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.src_expr = new org.apache.doris.thrift.TExpr();
              struct.src_expr.read(iprot);
              struct.setSrcExprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXPR_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.expr_order = iprot.readI32();
              struct.setExprOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLAN_ID_TO_TARGET_EXPR
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map884 = iprot.readMapBegin();
                struct.planId_to_target_expr = new java.util.HashMap<java.lang.Integer,org.apache.doris.thrift.TExpr>(2*_map884.size);
                int _key885;
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _val886;
                for (int _i887 = 0; _i887 < _map884.size; ++_i887)
                {
                  _key885 = iprot.readI32();
                  _val886 = new org.apache.doris.thrift.TExpr();
                  _val886.read(iprot);
                  struct.planId_to_target_expr.put(_key885, _val886);
                }
                iprot.readMapEnd();
              }
              struct.setPlanIdToTargetExprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_BROADCAST_JOIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_broadcast_join = iprot.readBool();
              struct.setIsBroadcastJoinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HAS_LOCAL_TARGETS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_local_targets = iprot.readBool();
              struct.setHasLocalTargetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HAS_REMOTE_TARGETS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.has_remote_targets = iprot.readBool();
              struct.setHasRemoteTargetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = org.apache.doris.thrift.TRuntimeFilterType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BLOOM_FILTER_SIZE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bloom_filter_size_bytes = iprot.readI64();
              struct.setBloomFilterSizeBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BITMAP_TARGET_EXPR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bitmap_target_expr = new org.apache.doris.thrift.TExpr();
              struct.bitmap_target_expr.read(iprot);
              struct.setBitmapTargetExprIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // BITMAP_FILTER_NOT_IN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bitmap_filter_not_in = iprot.readBool();
              struct.setBitmapFilterNotInIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OPT_REMOTE_RF
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.opt_remote_rf = iprot.readBool();
              struct.setOptRemoteRfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetFilterId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'filter_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetExprOrder()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'expr_order' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsBroadcastJoin()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_broadcast_join' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHasLocalTargets()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'has_local_targets' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHasRemoteTargets()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'has_remote_targets' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TRuntimeFilterDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FILTER_ID_FIELD_DESC);
      oprot.writeI32(struct.filter_id);
      oprot.writeFieldEnd();
      if (struct.src_expr != null) {
        oprot.writeFieldBegin(SRC_EXPR_FIELD_DESC);
        struct.src_expr.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPR_ORDER_FIELD_DESC);
      oprot.writeI32(struct.expr_order);
      oprot.writeFieldEnd();
      if (struct.planId_to_target_expr != null) {
        oprot.writeFieldBegin(PLAN_ID_TO_TARGET_EXPR_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.planId_to_target_expr.size()));
          for (java.util.Map.Entry<java.lang.Integer, org.apache.doris.thrift.TExpr> _iter888 : struct.planId_to_target_expr.entrySet())
          {
            oprot.writeI32(_iter888.getKey());
            _iter888.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_BROADCAST_JOIN_FIELD_DESC);
      oprot.writeBool(struct.is_broadcast_join);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_LOCAL_TARGETS_FIELD_DESC);
      oprot.writeBool(struct.has_local_targets);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_REMOTE_TARGETS_FIELD_DESC);
      oprot.writeBool(struct.has_remote_targets);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetBloomFilterSizeBytes()) {
        oprot.writeFieldBegin(BLOOM_FILTER_SIZE_BYTES_FIELD_DESC);
        oprot.writeI64(struct.bloom_filter_size_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.bitmap_target_expr != null) {
        if (struct.isSetBitmapTargetExpr()) {
          oprot.writeFieldBegin(BITMAP_TARGET_EXPR_FIELD_DESC);
          struct.bitmap_target_expr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBitmapFilterNotIn()) {
        oprot.writeFieldBegin(BITMAP_FILTER_NOT_IN_FIELD_DESC);
        oprot.writeBool(struct.bitmap_filter_not_in);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOptRemoteRf()) {
        oprot.writeFieldBegin(OPT_REMOTE_RF_FIELD_DESC);
        oprot.writeBool(struct.opt_remote_rf);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRuntimeFilterDescTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRuntimeFilterDescTupleScheme getScheme() {
      return new TRuntimeFilterDescTupleScheme();
    }
  }

  private static class TRuntimeFilterDescTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRuntimeFilterDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRuntimeFilterDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.filter_id);
      struct.src_expr.write(oprot);
      oprot.writeI32(struct.expr_order);
      {
        oprot.writeI32(struct.planId_to_target_expr.size());
        for (java.util.Map.Entry<java.lang.Integer, org.apache.doris.thrift.TExpr> _iter889 : struct.planId_to_target_expr.entrySet())
        {
          oprot.writeI32(_iter889.getKey());
          _iter889.getValue().write(oprot);
        }
      }
      oprot.writeBool(struct.is_broadcast_join);
      oprot.writeBool(struct.has_local_targets);
      oprot.writeBool(struct.has_remote_targets);
      oprot.writeI32(struct.type.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBloomFilterSizeBytes()) {
        optionals.set(0);
      }
      if (struct.isSetBitmapTargetExpr()) {
        optionals.set(1);
      }
      if (struct.isSetBitmapFilterNotIn()) {
        optionals.set(2);
      }
      if (struct.isSetOptRemoteRf()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBloomFilterSizeBytes()) {
        oprot.writeI64(struct.bloom_filter_size_bytes);
      }
      if (struct.isSetBitmapTargetExpr()) {
        struct.bitmap_target_expr.write(oprot);
      }
      if (struct.isSetBitmapFilterNotIn()) {
        oprot.writeBool(struct.bitmap_filter_not_in);
      }
      if (struct.isSetOptRemoteRf()) {
        oprot.writeBool(struct.opt_remote_rf);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRuntimeFilterDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.filter_id = iprot.readI32();
      struct.setFilterIdIsSet(true);
      struct.src_expr = new org.apache.doris.thrift.TExpr();
      struct.src_expr.read(iprot);
      struct.setSrcExprIsSet(true);
      struct.expr_order = iprot.readI32();
      struct.setExprOrderIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map890 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT); 
        struct.planId_to_target_expr = new java.util.HashMap<java.lang.Integer,org.apache.doris.thrift.TExpr>(2*_map890.size);
        int _key891;
        @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _val892;
        for (int _i893 = 0; _i893 < _map890.size; ++_i893)
        {
          _key891 = iprot.readI32();
          _val892 = new org.apache.doris.thrift.TExpr();
          _val892.read(iprot);
          struct.planId_to_target_expr.put(_key891, _val892);
        }
      }
      struct.setPlanIdToTargetExprIsSet(true);
      struct.is_broadcast_join = iprot.readBool();
      struct.setIsBroadcastJoinIsSet(true);
      struct.has_local_targets = iprot.readBool();
      struct.setHasLocalTargetsIsSet(true);
      struct.has_remote_targets = iprot.readBool();
      struct.setHasRemoteTargetsIsSet(true);
      struct.type = org.apache.doris.thrift.TRuntimeFilterType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.bloom_filter_size_bytes = iprot.readI64();
        struct.setBloomFilterSizeBytesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bitmap_target_expr = new org.apache.doris.thrift.TExpr();
        struct.bitmap_target_expr.read(iprot);
        struct.setBitmapTargetExprIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bitmap_filter_not_in = iprot.readBool();
        struct.setBitmapFilterNotInIsSet(true);
      }
      if (incoming.get(3)) {
        struct.opt_remote_rf = iprot.readBool();
        struct.setOptRemoteRfIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

