/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-07-19")
public class TMasterOpRequest implements org.apache.thrift.TBase<TMasterOpRequest, TMasterOpRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TMasterOpRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMasterOpRequest");

  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RESOURCE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceInfo", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField CLUSTER_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXEC_MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("execMemLimit", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField QUERY_TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryTimeout", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField USER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("user_ip", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TIME_ZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("time_zone", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STMT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stmt_id", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField SQL_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sqlMode", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField LOAD_MEM_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("loadMemLimit", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField ENABLE_STRICT_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("enableStrictMode", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField CURRENT_USER_IDENT_FIELD_DESC = new org.apache.thrift.protocol.TField("current_user_ident", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField STMT_IDX_FIELD_DESC = new org.apache.thrift.protocol.TField("stmtIdx", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField QUERY_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_options", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("query_id", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField INSERT_VISIBLE_TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("insert_visible_timeout_ms", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField SESSION_VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("session_variables", org.apache.thrift.protocol.TType.MAP, (short)19);
  private static final org.apache.thrift.protocol.TField FOLD_CONSTANT_BY_BE_FIELD_DESC = new org.apache.thrift.protocol.TField("foldConstantByBe", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField TRACE_CARRIER_FIELD_DESC = new org.apache.thrift.protocol.TField("trace_carrier", org.apache.thrift.protocol.TType.MAP, (short)21);
  private static final org.apache.thrift.protocol.TField CLIENT_NODE_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("clientNodeHost", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CLIENT_NODE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("clientNodePort", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField SYNC_JOURNAL_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("syncJournalOnly", org.apache.thrift.protocol.TType.BOOL, (short)24);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TMasterOpRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TMasterOpRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String user; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String db; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String sql; // required
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TResourceInfo resourceInfo; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String cluster; // optional
  public long execMemLimit; // optional
  public int queryTimeout; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String user_ip; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String time_zone; // optional
  public long stmt_id; // optional
  public long sqlMode; // optional
  public long loadMemLimit; // optional
  public boolean enableStrictMode; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUserIdentity current_user_ident; // optional
  public int stmtIdx; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TQueryOptions query_options; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId query_id; // optional
  public long insert_visible_timeout_ms; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> session_variables; // optional
  public boolean foldConstantByBe; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> trace_carrier; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String clientNodeHost; // optional
  public int clientNodePort; // optional
  public boolean syncJournalOnly; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER((short)1, "user"),
    DB((short)2, "db"),
    SQL((short)3, "sql"),
    RESOURCE_INFO((short)4, "resourceInfo"),
    CLUSTER((short)5, "cluster"),
    EXEC_MEM_LIMIT((short)6, "execMemLimit"),
    QUERY_TIMEOUT((short)7, "queryTimeout"),
    USER_IP((short)8, "user_ip"),
    TIME_ZONE((short)9, "time_zone"),
    STMT_ID((short)10, "stmt_id"),
    SQL_MODE((short)11, "sqlMode"),
    LOAD_MEM_LIMIT((short)12, "loadMemLimit"),
    ENABLE_STRICT_MODE((short)13, "enableStrictMode"),
    CURRENT_USER_IDENT((short)14, "current_user_ident"),
    STMT_IDX((short)15, "stmtIdx"),
    QUERY_OPTIONS((short)16, "query_options"),
    QUERY_ID((short)17, "query_id"),
    INSERT_VISIBLE_TIMEOUT_MS((short)18, "insert_visible_timeout_ms"),
    SESSION_VARIABLES((short)19, "session_variables"),
    FOLD_CONSTANT_BY_BE((short)20, "foldConstantByBe"),
    TRACE_CARRIER((short)21, "trace_carrier"),
    CLIENT_NODE_HOST((short)22, "clientNodeHost"),
    CLIENT_NODE_PORT((short)23, "clientNodePort"),
    SYNC_JOURNAL_ONLY((short)24, "syncJournalOnly");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER
          return USER;
        case 2: // DB
          return DB;
        case 3: // SQL
          return SQL;
        case 4: // RESOURCE_INFO
          return RESOURCE_INFO;
        case 5: // CLUSTER
          return CLUSTER;
        case 6: // EXEC_MEM_LIMIT
          return EXEC_MEM_LIMIT;
        case 7: // QUERY_TIMEOUT
          return QUERY_TIMEOUT;
        case 8: // USER_IP
          return USER_IP;
        case 9: // TIME_ZONE
          return TIME_ZONE;
        case 10: // STMT_ID
          return STMT_ID;
        case 11: // SQL_MODE
          return SQL_MODE;
        case 12: // LOAD_MEM_LIMIT
          return LOAD_MEM_LIMIT;
        case 13: // ENABLE_STRICT_MODE
          return ENABLE_STRICT_MODE;
        case 14: // CURRENT_USER_IDENT
          return CURRENT_USER_IDENT;
        case 15: // STMT_IDX
          return STMT_IDX;
        case 16: // QUERY_OPTIONS
          return QUERY_OPTIONS;
        case 17: // QUERY_ID
          return QUERY_ID;
        case 18: // INSERT_VISIBLE_TIMEOUT_MS
          return INSERT_VISIBLE_TIMEOUT_MS;
        case 19: // SESSION_VARIABLES
          return SESSION_VARIABLES;
        case 20: // FOLD_CONSTANT_BY_BE
          return FOLD_CONSTANT_BY_BE;
        case 21: // TRACE_CARRIER
          return TRACE_CARRIER;
        case 22: // CLIENT_NODE_HOST
          return CLIENT_NODE_HOST;
        case 23: // CLIENT_NODE_PORT
          return CLIENT_NODE_PORT;
        case 24: // SYNC_JOURNAL_ONLY
          return SYNC_JOURNAL_ONLY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECMEMLIMIT_ISSET_ID = 0;
  private static final int __QUERYTIMEOUT_ISSET_ID = 1;
  private static final int __STMT_ID_ISSET_ID = 2;
  private static final int __SQLMODE_ISSET_ID = 3;
  private static final int __LOADMEMLIMIT_ISSET_ID = 4;
  private static final int __ENABLESTRICTMODE_ISSET_ID = 5;
  private static final int __STMTIDX_ISSET_ID = 6;
  private static final int __INSERT_VISIBLE_TIMEOUT_MS_ISSET_ID = 7;
  private static final int __FOLDCONSTANTBYBE_ISSET_ID = 8;
  private static final int __CLIENTNODEPORT_ISSET_ID = 9;
  private static final int __SYNCJOURNALONLY_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RESOURCE_INFO,_Fields.CLUSTER,_Fields.EXEC_MEM_LIMIT,_Fields.QUERY_TIMEOUT,_Fields.USER_IP,_Fields.TIME_ZONE,_Fields.STMT_ID,_Fields.SQL_MODE,_Fields.LOAD_MEM_LIMIT,_Fields.ENABLE_STRICT_MODE,_Fields.CURRENT_USER_IDENT,_Fields.STMT_IDX,_Fields.QUERY_OPTIONS,_Fields.QUERY_ID,_Fields.INSERT_VISIBLE_TIMEOUT_MS,_Fields.SESSION_VARIABLES,_Fields.FOLD_CONSTANT_BY_BE,_Fields.TRACE_CARRIER,_Fields.CLIENT_NODE_HOST,_Fields.CLIENT_NODE_PORT,_Fields.SYNC_JOURNAL_ONLY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_INFO, new org.apache.thrift.meta_data.FieldMetaData("resourceInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TResourceInfo.class)));
    tmpMap.put(_Fields.CLUSTER, new org.apache.thrift.meta_data.FieldMetaData("cluster", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXEC_MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("execMemLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.QUERY_TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("queryTimeout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IP, new org.apache.thrift.meta_data.FieldMetaData("user_ip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_ZONE, new org.apache.thrift.meta_data.FieldMetaData("time_zone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STMT_ID, new org.apache.thrift.meta_data.FieldMetaData("stmt_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SQL_MODE, new org.apache.thrift.meta_data.FieldMetaData("sqlMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOAD_MEM_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("loadMemLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENABLE_STRICT_MODE, new org.apache.thrift.meta_data.FieldMetaData("enableStrictMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CURRENT_USER_IDENT, new org.apache.thrift.meta_data.FieldMetaData("current_user_ident", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TUserIdentity.class)));
    tmpMap.put(_Fields.STMT_IDX, new org.apache.thrift.meta_data.FieldMetaData("stmtIdx", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUERY_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("query_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TQueryOptions.class)));
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("query_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.INSERT_VISIBLE_TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("insert_visible_timeout_ms", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SESSION_VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("session_variables", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FOLD_CONSTANT_BY_BE, new org.apache.thrift.meta_data.FieldMetaData("foldConstantByBe", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TRACE_CARRIER, new org.apache.thrift.meta_data.FieldMetaData("trace_carrier", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CLIENT_NODE_HOST, new org.apache.thrift.meta_data.FieldMetaData("clientNodeHost", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_NODE_PORT, new org.apache.thrift.meta_data.FieldMetaData("clientNodePort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SYNC_JOURNAL_ONLY, new org.apache.thrift.meta_data.FieldMetaData("syncJournalOnly", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMasterOpRequest.class, metaDataMap);
  }

  public TMasterOpRequest() {
  }

  public TMasterOpRequest(
    java.lang.String user,
    java.lang.String db,
    java.lang.String sql)
  {
    this();
    this.user = user;
    this.db = db;
    this.sql = sql;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMasterOpRequest(TMasterOpRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetDb()) {
      this.db = other.db;
    }
    if (other.isSetSql()) {
      this.sql = other.sql;
    }
    if (other.isSetResourceInfo()) {
      this.resourceInfo = new org.apache.doris.thrift.TResourceInfo(other.resourceInfo);
    }
    if (other.isSetCluster()) {
      this.cluster = other.cluster;
    }
    this.execMemLimit = other.execMemLimit;
    this.queryTimeout = other.queryTimeout;
    if (other.isSetUserIp()) {
      this.user_ip = other.user_ip;
    }
    if (other.isSetTimeZone()) {
      this.time_zone = other.time_zone;
    }
    this.stmt_id = other.stmt_id;
    this.sqlMode = other.sqlMode;
    this.loadMemLimit = other.loadMemLimit;
    this.enableStrictMode = other.enableStrictMode;
    if (other.isSetCurrentUserIdent()) {
      this.current_user_ident = new org.apache.doris.thrift.TUserIdentity(other.current_user_ident);
    }
    this.stmtIdx = other.stmtIdx;
    if (other.isSetQueryOptions()) {
      this.query_options = new org.apache.doris.thrift.TQueryOptions(other.query_options);
    }
    if (other.isSetQueryId()) {
      this.query_id = new org.apache.doris.thrift.TUniqueId(other.query_id);
    }
    this.insert_visible_timeout_ms = other.insert_visible_timeout_ms;
    if (other.isSetSessionVariables()) {
      java.util.Map<java.lang.String,java.lang.String> __this__session_variables = new java.util.HashMap<java.lang.String,java.lang.String>(other.session_variables);
      this.session_variables = __this__session_variables;
    }
    this.foldConstantByBe = other.foldConstantByBe;
    if (other.isSetTraceCarrier()) {
      java.util.Map<java.lang.String,java.lang.String> __this__trace_carrier = new java.util.HashMap<java.lang.String,java.lang.String>(other.trace_carrier);
      this.trace_carrier = __this__trace_carrier;
    }
    if (other.isSetClientNodeHost()) {
      this.clientNodeHost = other.clientNodeHost;
    }
    this.clientNodePort = other.clientNodePort;
    this.syncJournalOnly = other.syncJournalOnly;
  }

  @Override
  public TMasterOpRequest deepCopy() {
    return new TMasterOpRequest(this);
  }

  @Override
  public void clear() {
    this.user = null;
    this.db = null;
    this.sql = null;
    this.resourceInfo = null;
    this.cluster = null;
    setExecMemLimitIsSet(false);
    this.execMemLimit = 0;
    setQueryTimeoutIsSet(false);
    this.queryTimeout = 0;
    this.user_ip = null;
    this.time_zone = null;
    setStmtIdIsSet(false);
    this.stmt_id = 0;
    setSqlModeIsSet(false);
    this.sqlMode = 0;
    setLoadMemLimitIsSet(false);
    this.loadMemLimit = 0;
    setEnableStrictModeIsSet(false);
    this.enableStrictMode = false;
    this.current_user_ident = null;
    setStmtIdxIsSet(false);
    this.stmtIdx = 0;
    this.query_options = null;
    this.query_id = null;
    setInsertVisibleTimeoutMsIsSet(false);
    this.insert_visible_timeout_ms = 0;
    this.session_variables = null;
    setFoldConstantByBeIsSet(false);
    this.foldConstantByBe = false;
    this.trace_carrier = null;
    this.clientNodeHost = null;
    setClientNodePortIsSet(false);
    this.clientNodePort = 0;
    setSyncJournalOnlyIsSet(false);
    this.syncJournalOnly = false;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUser() {
    return this.user;
  }

  public TMasterOpRequest setUser(@org.apache.thrift.annotation.Nullable java.lang.String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb() {
    return this.db;
  }

  public TMasterOpRequest setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
    this.db = db;
    return this;
  }

  public void unsetDb() {
    this.db = null;
  }

  /** Returns true if field db is set (has been assigned a value) and false otherwise */
  public boolean isSetDb() {
    return this.db != null;
  }

  public void setDbIsSet(boolean value) {
    if (!value) {
      this.db = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSql() {
    return this.sql;
  }

  public TMasterOpRequest setSql(@org.apache.thrift.annotation.Nullable java.lang.String sql) {
    this.sql = sql;
    return this;
  }

  public void unsetSql() {
    this.sql = null;
  }

  /** Returns true if field sql is set (has been assigned a value) and false otherwise */
  public boolean isSetSql() {
    return this.sql != null;
  }

  public void setSqlIsSet(boolean value) {
    if (!value) {
      this.sql = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TResourceInfo getResourceInfo() {
    return this.resourceInfo;
  }

  public TMasterOpRequest setResourceInfo(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TResourceInfo resourceInfo) {
    this.resourceInfo = resourceInfo;
    return this;
  }

  public void unsetResourceInfo() {
    this.resourceInfo = null;
  }

  /** Returns true if field resourceInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceInfo() {
    return this.resourceInfo != null;
  }

  public void setResourceInfoIsSet(boolean value) {
    if (!value) {
      this.resourceInfo = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCluster() {
    return this.cluster;
  }

  public TMasterOpRequest setCluster(@org.apache.thrift.annotation.Nullable java.lang.String cluster) {
    this.cluster = cluster;
    return this;
  }

  public void unsetCluster() {
    this.cluster = null;
  }

  /** Returns true if field cluster is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster() {
    return this.cluster != null;
  }

  public void setClusterIsSet(boolean value) {
    if (!value) {
      this.cluster = null;
    }
  }

  public long getExecMemLimit() {
    return this.execMemLimit;
  }

  public TMasterOpRequest setExecMemLimit(long execMemLimit) {
    this.execMemLimit = execMemLimit;
    setExecMemLimitIsSet(true);
    return this;
  }

  public void unsetExecMemLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXECMEMLIMIT_ISSET_ID);
  }

  /** Returns true if field execMemLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetExecMemLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXECMEMLIMIT_ISSET_ID);
  }

  public void setExecMemLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXECMEMLIMIT_ISSET_ID, value);
  }

  public int getQueryTimeout() {
    return this.queryTimeout;
  }

  public TMasterOpRequest setQueryTimeout(int queryTimeout) {
    this.queryTimeout = queryTimeout;
    setQueryTimeoutIsSet(true);
    return this;
  }

  public void unsetQueryTimeout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERYTIMEOUT_ISSET_ID);
  }

  /** Returns true if field queryTimeout is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryTimeout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERYTIMEOUT_ISSET_ID);
  }

  public void setQueryTimeoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERYTIMEOUT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUserIp() {
    return this.user_ip;
  }

  public TMasterOpRequest setUserIp(@org.apache.thrift.annotation.Nullable java.lang.String user_ip) {
    this.user_ip = user_ip;
    return this;
  }

  public void unsetUserIp() {
    this.user_ip = null;
  }

  /** Returns true if field user_ip is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIp() {
    return this.user_ip != null;
  }

  public void setUserIpIsSet(boolean value) {
    if (!value) {
      this.user_ip = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTimeZone() {
    return this.time_zone;
  }

  public TMasterOpRequest setTimeZone(@org.apache.thrift.annotation.Nullable java.lang.String time_zone) {
    this.time_zone = time_zone;
    return this;
  }

  public void unsetTimeZone() {
    this.time_zone = null;
  }

  /** Returns true if field time_zone is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeZone() {
    return this.time_zone != null;
  }

  public void setTimeZoneIsSet(boolean value) {
    if (!value) {
      this.time_zone = null;
    }
  }

  public long getStmtId() {
    return this.stmt_id;
  }

  public TMasterOpRequest setStmtId(long stmt_id) {
    this.stmt_id = stmt_id;
    setStmtIdIsSet(true);
    return this;
  }

  public void unsetStmtId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STMT_ID_ISSET_ID);
  }

  /** Returns true if field stmt_id is set (has been assigned a value) and false otherwise */
  public boolean isSetStmtId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STMT_ID_ISSET_ID);
  }

  public void setStmtIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STMT_ID_ISSET_ID, value);
  }

  public long getSqlMode() {
    return this.sqlMode;
  }

  public TMasterOpRequest setSqlMode(long sqlMode) {
    this.sqlMode = sqlMode;
    setSqlModeIsSet(true);
    return this;
  }

  public void unsetSqlMode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SQLMODE_ISSET_ID);
  }

  /** Returns true if field sqlMode is set (has been assigned a value) and false otherwise */
  public boolean isSetSqlMode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SQLMODE_ISSET_ID);
  }

  public void setSqlModeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SQLMODE_ISSET_ID, value);
  }

  public long getLoadMemLimit() {
    return this.loadMemLimit;
  }

  public TMasterOpRequest setLoadMemLimit(long loadMemLimit) {
    this.loadMemLimit = loadMemLimit;
    setLoadMemLimitIsSet(true);
    return this;
  }

  public void unsetLoadMemLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOADMEMLIMIT_ISSET_ID);
  }

  /** Returns true if field loadMemLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadMemLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOADMEMLIMIT_ISSET_ID);
  }

  public void setLoadMemLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOADMEMLIMIT_ISSET_ID, value);
  }

  public boolean isEnableStrictMode() {
    return this.enableStrictMode;
  }

  public TMasterOpRequest setEnableStrictMode(boolean enableStrictMode) {
    this.enableStrictMode = enableStrictMode;
    setEnableStrictModeIsSet(true);
    return this;
  }

  public void unsetEnableStrictMode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLESTRICTMODE_ISSET_ID);
  }

  /** Returns true if field enableStrictMode is set (has been assigned a value) and false otherwise */
  public boolean isSetEnableStrictMode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLESTRICTMODE_ISSET_ID);
  }

  public void setEnableStrictModeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLESTRICTMODE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TUserIdentity getCurrentUserIdent() {
    return this.current_user_ident;
  }

  public TMasterOpRequest setCurrentUserIdent(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUserIdentity current_user_ident) {
    this.current_user_ident = current_user_ident;
    return this;
  }

  public void unsetCurrentUserIdent() {
    this.current_user_ident = null;
  }

  /** Returns true if field current_user_ident is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentUserIdent() {
    return this.current_user_ident != null;
  }

  public void setCurrentUserIdentIsSet(boolean value) {
    if (!value) {
      this.current_user_ident = null;
    }
  }

  public int getStmtIdx() {
    return this.stmtIdx;
  }

  public TMasterOpRequest setStmtIdx(int stmtIdx) {
    this.stmtIdx = stmtIdx;
    setStmtIdxIsSet(true);
    return this;
  }

  public void unsetStmtIdx() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STMTIDX_ISSET_ID);
  }

  /** Returns true if field stmtIdx is set (has been assigned a value) and false otherwise */
  public boolean isSetStmtIdx() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STMTIDX_ISSET_ID);
  }

  public void setStmtIdxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STMTIDX_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TQueryOptions getQueryOptions() {
    return this.query_options;
  }

  public TMasterOpRequest setQueryOptions(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TQueryOptions query_options) {
    this.query_options = query_options;
    return this;
  }

  public void unsetQueryOptions() {
    this.query_options = null;
  }

  /** Returns true if field query_options is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryOptions() {
    return this.query_options != null;
  }

  public void setQueryOptionsIsSet(boolean value) {
    if (!value) {
      this.query_options = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TUniqueId getQueryId() {
    return this.query_id;
  }

  public TMasterOpRequest setQueryId(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId query_id) {
    this.query_id = query_id;
    return this;
  }

  public void unsetQueryId() {
    this.query_id = null;
  }

  /** Returns true if field query_id is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryId() {
    return this.query_id != null;
  }

  public void setQueryIdIsSet(boolean value) {
    if (!value) {
      this.query_id = null;
    }
  }

  public long getInsertVisibleTimeoutMs() {
    return this.insert_visible_timeout_ms;
  }

  public TMasterOpRequest setInsertVisibleTimeoutMs(long insert_visible_timeout_ms) {
    this.insert_visible_timeout_ms = insert_visible_timeout_ms;
    setInsertVisibleTimeoutMsIsSet(true);
    return this;
  }

  public void unsetInsertVisibleTimeoutMs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INSERT_VISIBLE_TIMEOUT_MS_ISSET_ID);
  }

  /** Returns true if field insert_visible_timeout_ms is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertVisibleTimeoutMs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INSERT_VISIBLE_TIMEOUT_MS_ISSET_ID);
  }

  public void setInsertVisibleTimeoutMsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INSERT_VISIBLE_TIMEOUT_MS_ISSET_ID, value);
  }

  public int getSessionVariablesSize() {
    return (this.session_variables == null) ? 0 : this.session_variables.size();
  }

  public void putToSessionVariables(java.lang.String key, java.lang.String val) {
    if (this.session_variables == null) {
      this.session_variables = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.session_variables.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getSessionVariables() {
    return this.session_variables;
  }

  public TMasterOpRequest setSessionVariables(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> session_variables) {
    this.session_variables = session_variables;
    return this;
  }

  public void unsetSessionVariables() {
    this.session_variables = null;
  }

  /** Returns true if field session_variables is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionVariables() {
    return this.session_variables != null;
  }

  public void setSessionVariablesIsSet(boolean value) {
    if (!value) {
      this.session_variables = null;
    }
  }

  public boolean isFoldConstantByBe() {
    return this.foldConstantByBe;
  }

  public TMasterOpRequest setFoldConstantByBe(boolean foldConstantByBe) {
    this.foldConstantByBe = foldConstantByBe;
    setFoldConstantByBeIsSet(true);
    return this;
  }

  public void unsetFoldConstantByBe() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FOLDCONSTANTBYBE_ISSET_ID);
  }

  /** Returns true if field foldConstantByBe is set (has been assigned a value) and false otherwise */
  public boolean isSetFoldConstantByBe() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FOLDCONSTANTBYBE_ISSET_ID);
  }

  public void setFoldConstantByBeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FOLDCONSTANTBYBE_ISSET_ID, value);
  }

  public int getTraceCarrierSize() {
    return (this.trace_carrier == null) ? 0 : this.trace_carrier.size();
  }

  public void putToTraceCarrier(java.lang.String key, java.lang.String val) {
    if (this.trace_carrier == null) {
      this.trace_carrier = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.trace_carrier.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getTraceCarrier() {
    return this.trace_carrier;
  }

  public TMasterOpRequest setTraceCarrier(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> trace_carrier) {
    this.trace_carrier = trace_carrier;
    return this;
  }

  public void unsetTraceCarrier() {
    this.trace_carrier = null;
  }

  /** Returns true if field trace_carrier is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceCarrier() {
    return this.trace_carrier != null;
  }

  public void setTraceCarrierIsSet(boolean value) {
    if (!value) {
      this.trace_carrier = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getClientNodeHost() {
    return this.clientNodeHost;
  }

  public TMasterOpRequest setClientNodeHost(@org.apache.thrift.annotation.Nullable java.lang.String clientNodeHost) {
    this.clientNodeHost = clientNodeHost;
    return this;
  }

  public void unsetClientNodeHost() {
    this.clientNodeHost = null;
  }

  /** Returns true if field clientNodeHost is set (has been assigned a value) and false otherwise */
  public boolean isSetClientNodeHost() {
    return this.clientNodeHost != null;
  }

  public void setClientNodeHostIsSet(boolean value) {
    if (!value) {
      this.clientNodeHost = null;
    }
  }

  public int getClientNodePort() {
    return this.clientNodePort;
  }

  public TMasterOpRequest setClientNodePort(int clientNodePort) {
    this.clientNodePort = clientNodePort;
    setClientNodePortIsSet(true);
    return this;
  }

  public void unsetClientNodePort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLIENTNODEPORT_ISSET_ID);
  }

  /** Returns true if field clientNodePort is set (has been assigned a value) and false otherwise */
  public boolean isSetClientNodePort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLIENTNODEPORT_ISSET_ID);
  }

  public void setClientNodePortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLIENTNODEPORT_ISSET_ID, value);
  }

  public boolean isSyncJournalOnly() {
    return this.syncJournalOnly;
  }

  public TMasterOpRequest setSyncJournalOnly(boolean syncJournalOnly) {
    this.syncJournalOnly = syncJournalOnly;
    setSyncJournalOnlyIsSet(true);
    return this;
  }

  public void unsetSyncJournalOnly() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SYNCJOURNALONLY_ISSET_ID);
  }

  /** Returns true if field syncJournalOnly is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncJournalOnly() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SYNCJOURNALONLY_ISSET_ID);
  }

  public void setSyncJournalOnlyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SYNCJOURNALONLY_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((java.lang.String)value);
      }
      break;

    case DB:
      if (value == null) {
        unsetDb();
      } else {
        setDb((java.lang.String)value);
      }
      break;

    case SQL:
      if (value == null) {
        unsetSql();
      } else {
        setSql((java.lang.String)value);
      }
      break;

    case RESOURCE_INFO:
      if (value == null) {
        unsetResourceInfo();
      } else {
        setResourceInfo((org.apache.doris.thrift.TResourceInfo)value);
      }
      break;

    case CLUSTER:
      if (value == null) {
        unsetCluster();
      } else {
        setCluster((java.lang.String)value);
      }
      break;

    case EXEC_MEM_LIMIT:
      if (value == null) {
        unsetExecMemLimit();
      } else {
        setExecMemLimit((java.lang.Long)value);
      }
      break;

    case QUERY_TIMEOUT:
      if (value == null) {
        unsetQueryTimeout();
      } else {
        setQueryTimeout((java.lang.Integer)value);
      }
      break;

    case USER_IP:
      if (value == null) {
        unsetUserIp();
      } else {
        setUserIp((java.lang.String)value);
      }
      break;

    case TIME_ZONE:
      if (value == null) {
        unsetTimeZone();
      } else {
        setTimeZone((java.lang.String)value);
      }
      break;

    case STMT_ID:
      if (value == null) {
        unsetStmtId();
      } else {
        setStmtId((java.lang.Long)value);
      }
      break;

    case SQL_MODE:
      if (value == null) {
        unsetSqlMode();
      } else {
        setSqlMode((java.lang.Long)value);
      }
      break;

    case LOAD_MEM_LIMIT:
      if (value == null) {
        unsetLoadMemLimit();
      } else {
        setLoadMemLimit((java.lang.Long)value);
      }
      break;

    case ENABLE_STRICT_MODE:
      if (value == null) {
        unsetEnableStrictMode();
      } else {
        setEnableStrictMode((java.lang.Boolean)value);
      }
      break;

    case CURRENT_USER_IDENT:
      if (value == null) {
        unsetCurrentUserIdent();
      } else {
        setCurrentUserIdent((org.apache.doris.thrift.TUserIdentity)value);
      }
      break;

    case STMT_IDX:
      if (value == null) {
        unsetStmtIdx();
      } else {
        setStmtIdx((java.lang.Integer)value);
      }
      break;

    case QUERY_OPTIONS:
      if (value == null) {
        unsetQueryOptions();
      } else {
        setQueryOptions((org.apache.doris.thrift.TQueryOptions)value);
      }
      break;

    case QUERY_ID:
      if (value == null) {
        unsetQueryId();
      } else {
        setQueryId((org.apache.doris.thrift.TUniqueId)value);
      }
      break;

    case INSERT_VISIBLE_TIMEOUT_MS:
      if (value == null) {
        unsetInsertVisibleTimeoutMs();
      } else {
        setInsertVisibleTimeoutMs((java.lang.Long)value);
      }
      break;

    case SESSION_VARIABLES:
      if (value == null) {
        unsetSessionVariables();
      } else {
        setSessionVariables((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case FOLD_CONSTANT_BY_BE:
      if (value == null) {
        unsetFoldConstantByBe();
      } else {
        setFoldConstantByBe((java.lang.Boolean)value);
      }
      break;

    case TRACE_CARRIER:
      if (value == null) {
        unsetTraceCarrier();
      } else {
        setTraceCarrier((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case CLIENT_NODE_HOST:
      if (value == null) {
        unsetClientNodeHost();
      } else {
        setClientNodeHost((java.lang.String)value);
      }
      break;

    case CLIENT_NODE_PORT:
      if (value == null) {
        unsetClientNodePort();
      } else {
        setClientNodePort((java.lang.Integer)value);
      }
      break;

    case SYNC_JOURNAL_ONLY:
      if (value == null) {
        unsetSyncJournalOnly();
      } else {
        setSyncJournalOnly((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER:
      return getUser();

    case DB:
      return getDb();

    case SQL:
      return getSql();

    case RESOURCE_INFO:
      return getResourceInfo();

    case CLUSTER:
      return getCluster();

    case EXEC_MEM_LIMIT:
      return getExecMemLimit();

    case QUERY_TIMEOUT:
      return getQueryTimeout();

    case USER_IP:
      return getUserIp();

    case TIME_ZONE:
      return getTimeZone();

    case STMT_ID:
      return getStmtId();

    case SQL_MODE:
      return getSqlMode();

    case LOAD_MEM_LIMIT:
      return getLoadMemLimit();

    case ENABLE_STRICT_MODE:
      return isEnableStrictMode();

    case CURRENT_USER_IDENT:
      return getCurrentUserIdent();

    case STMT_IDX:
      return getStmtIdx();

    case QUERY_OPTIONS:
      return getQueryOptions();

    case QUERY_ID:
      return getQueryId();

    case INSERT_VISIBLE_TIMEOUT_MS:
      return getInsertVisibleTimeoutMs();

    case SESSION_VARIABLES:
      return getSessionVariables();

    case FOLD_CONSTANT_BY_BE:
      return isFoldConstantByBe();

    case TRACE_CARRIER:
      return getTraceCarrier();

    case CLIENT_NODE_HOST:
      return getClientNodeHost();

    case CLIENT_NODE_PORT:
      return getClientNodePort();

    case SYNC_JOURNAL_ONLY:
      return isSyncJournalOnly();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER:
      return isSetUser();
    case DB:
      return isSetDb();
    case SQL:
      return isSetSql();
    case RESOURCE_INFO:
      return isSetResourceInfo();
    case CLUSTER:
      return isSetCluster();
    case EXEC_MEM_LIMIT:
      return isSetExecMemLimit();
    case QUERY_TIMEOUT:
      return isSetQueryTimeout();
    case USER_IP:
      return isSetUserIp();
    case TIME_ZONE:
      return isSetTimeZone();
    case STMT_ID:
      return isSetStmtId();
    case SQL_MODE:
      return isSetSqlMode();
    case LOAD_MEM_LIMIT:
      return isSetLoadMemLimit();
    case ENABLE_STRICT_MODE:
      return isSetEnableStrictMode();
    case CURRENT_USER_IDENT:
      return isSetCurrentUserIdent();
    case STMT_IDX:
      return isSetStmtIdx();
    case QUERY_OPTIONS:
      return isSetQueryOptions();
    case QUERY_ID:
      return isSetQueryId();
    case INSERT_VISIBLE_TIMEOUT_MS:
      return isSetInsertVisibleTimeoutMs();
    case SESSION_VARIABLES:
      return isSetSessionVariables();
    case FOLD_CONSTANT_BY_BE:
      return isSetFoldConstantByBe();
    case TRACE_CARRIER:
      return isSetTraceCarrier();
    case CLIENT_NODE_HOST:
      return isSetClientNodeHost();
    case CLIENT_NODE_PORT:
      return isSetClientNodePort();
    case SYNC_JOURNAL_ONLY:
      return isSetSyncJournalOnly();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TMasterOpRequest)
      return this.equals((TMasterOpRequest)that);
    return false;
  }

  public boolean equals(TMasterOpRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_db = true && this.isSetDb();
    boolean that_present_db = true && that.isSetDb();
    if (this_present_db || that_present_db) {
      if (!(this_present_db && that_present_db))
        return false;
      if (!this.db.equals(that.db))
        return false;
    }

    boolean this_present_sql = true && this.isSetSql();
    boolean that_present_sql = true && that.isSetSql();
    if (this_present_sql || that_present_sql) {
      if (!(this_present_sql && that_present_sql))
        return false;
      if (!this.sql.equals(that.sql))
        return false;
    }

    boolean this_present_resourceInfo = true && this.isSetResourceInfo();
    boolean that_present_resourceInfo = true && that.isSetResourceInfo();
    if (this_present_resourceInfo || that_present_resourceInfo) {
      if (!(this_present_resourceInfo && that_present_resourceInfo))
        return false;
      if (!this.resourceInfo.equals(that.resourceInfo))
        return false;
    }

    boolean this_present_cluster = true && this.isSetCluster();
    boolean that_present_cluster = true && that.isSetCluster();
    if (this_present_cluster || that_present_cluster) {
      if (!(this_present_cluster && that_present_cluster))
        return false;
      if (!this.cluster.equals(that.cluster))
        return false;
    }

    boolean this_present_execMemLimit = true && this.isSetExecMemLimit();
    boolean that_present_execMemLimit = true && that.isSetExecMemLimit();
    if (this_present_execMemLimit || that_present_execMemLimit) {
      if (!(this_present_execMemLimit && that_present_execMemLimit))
        return false;
      if (this.execMemLimit != that.execMemLimit)
        return false;
    }

    boolean this_present_queryTimeout = true && this.isSetQueryTimeout();
    boolean that_present_queryTimeout = true && that.isSetQueryTimeout();
    if (this_present_queryTimeout || that_present_queryTimeout) {
      if (!(this_present_queryTimeout && that_present_queryTimeout))
        return false;
      if (this.queryTimeout != that.queryTimeout)
        return false;
    }

    boolean this_present_user_ip = true && this.isSetUserIp();
    boolean that_present_user_ip = true && that.isSetUserIp();
    if (this_present_user_ip || that_present_user_ip) {
      if (!(this_present_user_ip && that_present_user_ip))
        return false;
      if (!this.user_ip.equals(that.user_ip))
        return false;
    }

    boolean this_present_time_zone = true && this.isSetTimeZone();
    boolean that_present_time_zone = true && that.isSetTimeZone();
    if (this_present_time_zone || that_present_time_zone) {
      if (!(this_present_time_zone && that_present_time_zone))
        return false;
      if (!this.time_zone.equals(that.time_zone))
        return false;
    }

    boolean this_present_stmt_id = true && this.isSetStmtId();
    boolean that_present_stmt_id = true && that.isSetStmtId();
    if (this_present_stmt_id || that_present_stmt_id) {
      if (!(this_present_stmt_id && that_present_stmt_id))
        return false;
      if (this.stmt_id != that.stmt_id)
        return false;
    }

    boolean this_present_sqlMode = true && this.isSetSqlMode();
    boolean that_present_sqlMode = true && that.isSetSqlMode();
    if (this_present_sqlMode || that_present_sqlMode) {
      if (!(this_present_sqlMode && that_present_sqlMode))
        return false;
      if (this.sqlMode != that.sqlMode)
        return false;
    }

    boolean this_present_loadMemLimit = true && this.isSetLoadMemLimit();
    boolean that_present_loadMemLimit = true && that.isSetLoadMemLimit();
    if (this_present_loadMemLimit || that_present_loadMemLimit) {
      if (!(this_present_loadMemLimit && that_present_loadMemLimit))
        return false;
      if (this.loadMemLimit != that.loadMemLimit)
        return false;
    }

    boolean this_present_enableStrictMode = true && this.isSetEnableStrictMode();
    boolean that_present_enableStrictMode = true && that.isSetEnableStrictMode();
    if (this_present_enableStrictMode || that_present_enableStrictMode) {
      if (!(this_present_enableStrictMode && that_present_enableStrictMode))
        return false;
      if (this.enableStrictMode != that.enableStrictMode)
        return false;
    }

    boolean this_present_current_user_ident = true && this.isSetCurrentUserIdent();
    boolean that_present_current_user_ident = true && that.isSetCurrentUserIdent();
    if (this_present_current_user_ident || that_present_current_user_ident) {
      if (!(this_present_current_user_ident && that_present_current_user_ident))
        return false;
      if (!this.current_user_ident.equals(that.current_user_ident))
        return false;
    }

    boolean this_present_stmtIdx = true && this.isSetStmtIdx();
    boolean that_present_stmtIdx = true && that.isSetStmtIdx();
    if (this_present_stmtIdx || that_present_stmtIdx) {
      if (!(this_present_stmtIdx && that_present_stmtIdx))
        return false;
      if (this.stmtIdx != that.stmtIdx)
        return false;
    }

    boolean this_present_query_options = true && this.isSetQueryOptions();
    boolean that_present_query_options = true && that.isSetQueryOptions();
    if (this_present_query_options || that_present_query_options) {
      if (!(this_present_query_options && that_present_query_options))
        return false;
      if (!this.query_options.equals(that.query_options))
        return false;
    }

    boolean this_present_query_id = true && this.isSetQueryId();
    boolean that_present_query_id = true && that.isSetQueryId();
    if (this_present_query_id || that_present_query_id) {
      if (!(this_present_query_id && that_present_query_id))
        return false;
      if (!this.query_id.equals(that.query_id))
        return false;
    }

    boolean this_present_insert_visible_timeout_ms = true && this.isSetInsertVisibleTimeoutMs();
    boolean that_present_insert_visible_timeout_ms = true && that.isSetInsertVisibleTimeoutMs();
    if (this_present_insert_visible_timeout_ms || that_present_insert_visible_timeout_ms) {
      if (!(this_present_insert_visible_timeout_ms && that_present_insert_visible_timeout_ms))
        return false;
      if (this.insert_visible_timeout_ms != that.insert_visible_timeout_ms)
        return false;
    }

    boolean this_present_session_variables = true && this.isSetSessionVariables();
    boolean that_present_session_variables = true && that.isSetSessionVariables();
    if (this_present_session_variables || that_present_session_variables) {
      if (!(this_present_session_variables && that_present_session_variables))
        return false;
      if (!this.session_variables.equals(that.session_variables))
        return false;
    }

    boolean this_present_foldConstantByBe = true && this.isSetFoldConstantByBe();
    boolean that_present_foldConstantByBe = true && that.isSetFoldConstantByBe();
    if (this_present_foldConstantByBe || that_present_foldConstantByBe) {
      if (!(this_present_foldConstantByBe && that_present_foldConstantByBe))
        return false;
      if (this.foldConstantByBe != that.foldConstantByBe)
        return false;
    }

    boolean this_present_trace_carrier = true && this.isSetTraceCarrier();
    boolean that_present_trace_carrier = true && that.isSetTraceCarrier();
    if (this_present_trace_carrier || that_present_trace_carrier) {
      if (!(this_present_trace_carrier && that_present_trace_carrier))
        return false;
      if (!this.trace_carrier.equals(that.trace_carrier))
        return false;
    }

    boolean this_present_clientNodeHost = true && this.isSetClientNodeHost();
    boolean that_present_clientNodeHost = true && that.isSetClientNodeHost();
    if (this_present_clientNodeHost || that_present_clientNodeHost) {
      if (!(this_present_clientNodeHost && that_present_clientNodeHost))
        return false;
      if (!this.clientNodeHost.equals(that.clientNodeHost))
        return false;
    }

    boolean this_present_clientNodePort = true && this.isSetClientNodePort();
    boolean that_present_clientNodePort = true && that.isSetClientNodePort();
    if (this_present_clientNodePort || that_present_clientNodePort) {
      if (!(this_present_clientNodePort && that_present_clientNodePort))
        return false;
      if (this.clientNodePort != that.clientNodePort)
        return false;
    }

    boolean this_present_syncJournalOnly = true && this.isSetSyncJournalOnly();
    boolean that_present_syncJournalOnly = true && that.isSetSyncJournalOnly();
    if (this_present_syncJournalOnly || that_present_syncJournalOnly) {
      if (!(this_present_syncJournalOnly && that_present_syncJournalOnly))
        return false;
      if (this.syncJournalOnly != that.syncJournalOnly)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
    if (isSetUser())
      hashCode = hashCode * 8191 + user.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
    if (isSetDb())
      hashCode = hashCode * 8191 + db.hashCode();

    hashCode = hashCode * 8191 + ((isSetSql()) ? 131071 : 524287);
    if (isSetSql())
      hashCode = hashCode * 8191 + sql.hashCode();

    hashCode = hashCode * 8191 + ((isSetResourceInfo()) ? 131071 : 524287);
    if (isSetResourceInfo())
      hashCode = hashCode * 8191 + resourceInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetCluster()) ? 131071 : 524287);
    if (isSetCluster())
      hashCode = hashCode * 8191 + cluster.hashCode();

    hashCode = hashCode * 8191 + ((isSetExecMemLimit()) ? 131071 : 524287);
    if (isSetExecMemLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(execMemLimit);

    hashCode = hashCode * 8191 + ((isSetQueryTimeout()) ? 131071 : 524287);
    if (isSetQueryTimeout())
      hashCode = hashCode * 8191 + queryTimeout;

    hashCode = hashCode * 8191 + ((isSetUserIp()) ? 131071 : 524287);
    if (isSetUserIp())
      hashCode = hashCode * 8191 + user_ip.hashCode();

    hashCode = hashCode * 8191 + ((isSetTimeZone()) ? 131071 : 524287);
    if (isSetTimeZone())
      hashCode = hashCode * 8191 + time_zone.hashCode();

    hashCode = hashCode * 8191 + ((isSetStmtId()) ? 131071 : 524287);
    if (isSetStmtId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(stmt_id);

    hashCode = hashCode * 8191 + ((isSetSqlMode()) ? 131071 : 524287);
    if (isSetSqlMode())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sqlMode);

    hashCode = hashCode * 8191 + ((isSetLoadMemLimit()) ? 131071 : 524287);
    if (isSetLoadMemLimit())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(loadMemLimit);

    hashCode = hashCode * 8191 + ((isSetEnableStrictMode()) ? 131071 : 524287);
    if (isSetEnableStrictMode())
      hashCode = hashCode * 8191 + ((enableStrictMode) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCurrentUserIdent()) ? 131071 : 524287);
    if (isSetCurrentUserIdent())
      hashCode = hashCode * 8191 + current_user_ident.hashCode();

    hashCode = hashCode * 8191 + ((isSetStmtIdx()) ? 131071 : 524287);
    if (isSetStmtIdx())
      hashCode = hashCode * 8191 + stmtIdx;

    hashCode = hashCode * 8191 + ((isSetQueryOptions()) ? 131071 : 524287);
    if (isSetQueryOptions())
      hashCode = hashCode * 8191 + query_options.hashCode();

    hashCode = hashCode * 8191 + ((isSetQueryId()) ? 131071 : 524287);
    if (isSetQueryId())
      hashCode = hashCode * 8191 + query_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetInsertVisibleTimeoutMs()) ? 131071 : 524287);
    if (isSetInsertVisibleTimeoutMs())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(insert_visible_timeout_ms);

    hashCode = hashCode * 8191 + ((isSetSessionVariables()) ? 131071 : 524287);
    if (isSetSessionVariables())
      hashCode = hashCode * 8191 + session_variables.hashCode();

    hashCode = hashCode * 8191 + ((isSetFoldConstantByBe()) ? 131071 : 524287);
    if (isSetFoldConstantByBe())
      hashCode = hashCode * 8191 + ((foldConstantByBe) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTraceCarrier()) ? 131071 : 524287);
    if (isSetTraceCarrier())
      hashCode = hashCode * 8191 + trace_carrier.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientNodeHost()) ? 131071 : 524287);
    if (isSetClientNodeHost())
      hashCode = hashCode * 8191 + clientNodeHost.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientNodePort()) ? 131071 : 524287);
    if (isSetClientNodePort())
      hashCode = hashCode * 8191 + clientNodePort;

    hashCode = hashCode * 8191 + ((isSetSyncJournalOnly()) ? 131071 : 524287);
    if (isSetSyncJournalOnly())
      hashCode = hashCode * 8191 + ((syncJournalOnly) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TMasterOpRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetUser(), other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb(), other.isSetDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSql(), other.isSetSql());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResourceInfo(), other.isSetResourceInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceInfo, other.resourceInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCluster(), other.isSetCluster());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster, other.cluster);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExecMemLimit(), other.isSetExecMemLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecMemLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execMemLimit, other.execMemLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryTimeout(), other.isSetQueryTimeout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryTimeout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryTimeout, other.queryTimeout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUserIp(), other.isSetUserIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_ip, other.user_ip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimeZone(), other.isSetTimeZone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeZone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_zone, other.time_zone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStmtId(), other.isSetStmtId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStmtId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stmt_id, other.stmt_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSqlMode(), other.isSetSqlMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSqlMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sqlMode, other.sqlMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoadMemLimit(), other.isSetLoadMemLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadMemLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadMemLimit, other.loadMemLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnableStrictMode(), other.isSetEnableStrictMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnableStrictMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enableStrictMode, other.enableStrictMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCurrentUserIdent(), other.isSetCurrentUserIdent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentUserIdent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_user_ident, other.current_user_ident);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStmtIdx(), other.isSetStmtIdx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStmtIdx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stmtIdx, other.stmtIdx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryOptions(), other.isSetQueryOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_options, other.query_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryId(), other.isSetQueryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_id, other.query_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInsertVisibleTimeoutMs(), other.isSetInsertVisibleTimeoutMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertVisibleTimeoutMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insert_visible_timeout_ms, other.insert_visible_timeout_ms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSessionVariables(), other.isSetSessionVariables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionVariables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session_variables, other.session_variables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFoldConstantByBe(), other.isSetFoldConstantByBe());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoldConstantByBe()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foldConstantByBe, other.foldConstantByBe);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTraceCarrier(), other.isSetTraceCarrier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceCarrier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trace_carrier, other.trace_carrier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClientNodeHost(), other.isSetClientNodeHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientNodeHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientNodeHost, other.clientNodeHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClientNodePort(), other.isSetClientNodePort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientNodePort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientNodePort, other.clientNodePort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSyncJournalOnly(), other.isSetSyncJournalOnly());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncJournalOnly()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncJournalOnly, other.syncJournalOnly);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TMasterOpRequest(");
    boolean first = true;

    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("db:");
    if (this.db == null) {
      sb.append("null");
    } else {
      sb.append(this.db);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sql:");
    if (this.sql == null) {
      sb.append("null");
    } else {
      sb.append(this.sql);
    }
    first = false;
    if (isSetResourceInfo()) {
      if (!first) sb.append(", ");
      sb.append("resourceInfo:");
      if (this.resourceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceInfo);
      }
      first = false;
    }
    if (isSetCluster()) {
      if (!first) sb.append(", ");
      sb.append("cluster:");
      if (this.cluster == null) {
        sb.append("null");
      } else {
        sb.append(this.cluster);
      }
      first = false;
    }
    if (isSetExecMemLimit()) {
      if (!first) sb.append(", ");
      sb.append("execMemLimit:");
      sb.append(this.execMemLimit);
      first = false;
    }
    if (isSetQueryTimeout()) {
      if (!first) sb.append(", ");
      sb.append("queryTimeout:");
      sb.append(this.queryTimeout);
      first = false;
    }
    if (isSetUserIp()) {
      if (!first) sb.append(", ");
      sb.append("user_ip:");
      if (this.user_ip == null) {
        sb.append("null");
      } else {
        sb.append(this.user_ip);
      }
      first = false;
    }
    if (isSetTimeZone()) {
      if (!first) sb.append(", ");
      sb.append("time_zone:");
      if (this.time_zone == null) {
        sb.append("null");
      } else {
        sb.append(this.time_zone);
      }
      first = false;
    }
    if (isSetStmtId()) {
      if (!first) sb.append(", ");
      sb.append("stmt_id:");
      sb.append(this.stmt_id);
      first = false;
    }
    if (isSetSqlMode()) {
      if (!first) sb.append(", ");
      sb.append("sqlMode:");
      sb.append(this.sqlMode);
      first = false;
    }
    if (isSetLoadMemLimit()) {
      if (!first) sb.append(", ");
      sb.append("loadMemLimit:");
      sb.append(this.loadMemLimit);
      first = false;
    }
    if (isSetEnableStrictMode()) {
      if (!first) sb.append(", ");
      sb.append("enableStrictMode:");
      sb.append(this.enableStrictMode);
      first = false;
    }
    if (isSetCurrentUserIdent()) {
      if (!first) sb.append(", ");
      sb.append("current_user_ident:");
      if (this.current_user_ident == null) {
        sb.append("null");
      } else {
        sb.append(this.current_user_ident);
      }
      first = false;
    }
    if (isSetStmtIdx()) {
      if (!first) sb.append(", ");
      sb.append("stmtIdx:");
      sb.append(this.stmtIdx);
      first = false;
    }
    if (isSetQueryOptions()) {
      if (!first) sb.append(", ");
      sb.append("query_options:");
      if (this.query_options == null) {
        sb.append("null");
      } else {
        sb.append(this.query_options);
      }
      first = false;
    }
    if (isSetQueryId()) {
      if (!first) sb.append(", ");
      sb.append("query_id:");
      if (this.query_id == null) {
        sb.append("null");
      } else {
        sb.append(this.query_id);
      }
      first = false;
    }
    if (isSetInsertVisibleTimeoutMs()) {
      if (!first) sb.append(", ");
      sb.append("insert_visible_timeout_ms:");
      sb.append(this.insert_visible_timeout_ms);
      first = false;
    }
    if (isSetSessionVariables()) {
      if (!first) sb.append(", ");
      sb.append("session_variables:");
      if (this.session_variables == null) {
        sb.append("null");
      } else {
        sb.append(this.session_variables);
      }
      first = false;
    }
    if (isSetFoldConstantByBe()) {
      if (!first) sb.append(", ");
      sb.append("foldConstantByBe:");
      sb.append(this.foldConstantByBe);
      first = false;
    }
    if (isSetTraceCarrier()) {
      if (!first) sb.append(", ");
      sb.append("trace_carrier:");
      if (this.trace_carrier == null) {
        sb.append("null");
      } else {
        sb.append(this.trace_carrier);
      }
      first = false;
    }
    if (isSetClientNodeHost()) {
      if (!first) sb.append(", ");
      sb.append("clientNodeHost:");
      if (this.clientNodeHost == null) {
        sb.append("null");
      } else {
        sb.append(this.clientNodeHost);
      }
      first = false;
    }
    if (isSetClientNodePort()) {
      if (!first) sb.append(", ");
      sb.append("clientNodePort:");
      sb.append(this.clientNodePort);
      first = false;
    }
    if (isSetSyncJournalOnly()) {
      if (!first) sb.append(", ");
      sb.append("syncJournalOnly:");
      sb.append(this.syncJournalOnly);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (user == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user' was not present! Struct: " + toString());
    }
    if (db == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'db' was not present! Struct: " + toString());
    }
    if (sql == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sql' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (resourceInfo != null) {
      resourceInfo.validate();
    }
    if (current_user_ident != null) {
      current_user_ident.validate();
    }
    if (query_options != null) {
      query_options.validate();
    }
    if (query_id != null) {
      query_id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMasterOpRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMasterOpRequestStandardScheme getScheme() {
      return new TMasterOpRequestStandardScheme();
    }
  }

  private static class TMasterOpRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TMasterOpRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TMasterOpRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db = iprot.readString();
              struct.setDbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SQL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql = iprot.readString();
              struct.setSqlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESOURCE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resourceInfo = new org.apache.doris.thrift.TResourceInfo();
              struct.resourceInfo.read(iprot);
              struct.setResourceInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLUSTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cluster = iprot.readString();
              struct.setClusterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXEC_MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execMemLimit = iprot.readI64();
              struct.setExecMemLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUERY_TIMEOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queryTimeout = iprot.readI32();
              struct.setQueryTimeoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_ip = iprot.readString();
              struct.setUserIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TIME_ZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time_zone = iprot.readString();
              struct.setTimeZoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STMT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.stmt_id = iprot.readI64();
              struct.setStmtIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SQL_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sqlMode = iprot.readI64();
              struct.setSqlModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LOAD_MEM_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loadMemLimit = iprot.readI64();
              struct.setLoadMemLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ENABLE_STRICT_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enableStrictMode = iprot.readBool();
              struct.setEnableStrictModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CURRENT_USER_IDENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.current_user_ident = new org.apache.doris.thrift.TUserIdentity();
              struct.current_user_ident.read(iprot);
              struct.setCurrentUserIdentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // STMT_IDX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stmtIdx = iprot.readI32();
              struct.setStmtIdxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // QUERY_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_options = new org.apache.doris.thrift.TQueryOptions();
              struct.query_options.read(iprot);
              struct.setQueryOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.query_id = new org.apache.doris.thrift.TUniqueId();
              struct.query_id.read(iprot);
              struct.setQueryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // INSERT_VISIBLE_TIMEOUT_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.insert_visible_timeout_ms = iprot.readI64();
              struct.setInsertVisibleTimeoutMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SESSION_VARIABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map198 = iprot.readMapBegin();
                struct.session_variables = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map198.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key199;
                @org.apache.thrift.annotation.Nullable java.lang.String _val200;
                for (int _i201 = 0; _i201 < _map198.size; ++_i201)
                {
                  _key199 = iprot.readString();
                  _val200 = iprot.readString();
                  struct.session_variables.put(_key199, _val200);
                }
                iprot.readMapEnd();
              }
              struct.setSessionVariablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // FOLD_CONSTANT_BY_BE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.foldConstantByBe = iprot.readBool();
              struct.setFoldConstantByBeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TRACE_CARRIER
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map202 = iprot.readMapBegin();
                struct.trace_carrier = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map202.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key203;
                @org.apache.thrift.annotation.Nullable java.lang.String _val204;
                for (int _i205 = 0; _i205 < _map202.size; ++_i205)
                {
                  _key203 = iprot.readString();
                  _val204 = iprot.readString();
                  struct.trace_carrier.put(_key203, _val204);
                }
                iprot.readMapEnd();
              }
              struct.setTraceCarrierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CLIENT_NODE_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientNodeHost = iprot.readString();
              struct.setClientNodeHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CLIENT_NODE_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.clientNodePort = iprot.readI32();
              struct.setClientNodePortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SYNC_JOURNAL_ONLY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.syncJournalOnly = iprot.readBool();
              struct.setSyncJournalOnlyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TMasterOpRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeString(struct.user);
        oprot.writeFieldEnd();
      }
      if (struct.db != null) {
        oprot.writeFieldBegin(DB_FIELD_DESC);
        oprot.writeString(struct.db);
        oprot.writeFieldEnd();
      }
      if (struct.sql != null) {
        oprot.writeFieldBegin(SQL_FIELD_DESC);
        oprot.writeString(struct.sql);
        oprot.writeFieldEnd();
      }
      if (struct.resourceInfo != null) {
        if (struct.isSetResourceInfo()) {
          oprot.writeFieldBegin(RESOURCE_INFO_FIELD_DESC);
          struct.resourceInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cluster != null) {
        if (struct.isSetCluster()) {
          oprot.writeFieldBegin(CLUSTER_FIELD_DESC);
          oprot.writeString(struct.cluster);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExecMemLimit()) {
        oprot.writeFieldBegin(EXEC_MEM_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.execMemLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQueryTimeout()) {
        oprot.writeFieldBegin(QUERY_TIMEOUT_FIELD_DESC);
        oprot.writeI32(struct.queryTimeout);
        oprot.writeFieldEnd();
      }
      if (struct.user_ip != null) {
        if (struct.isSetUserIp()) {
          oprot.writeFieldBegin(USER_IP_FIELD_DESC);
          oprot.writeString(struct.user_ip);
          oprot.writeFieldEnd();
        }
      }
      if (struct.time_zone != null) {
        if (struct.isSetTimeZone()) {
          oprot.writeFieldBegin(TIME_ZONE_FIELD_DESC);
          oprot.writeString(struct.time_zone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStmtId()) {
        oprot.writeFieldBegin(STMT_ID_FIELD_DESC);
        oprot.writeI64(struct.stmt_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSqlMode()) {
        oprot.writeFieldBegin(SQL_MODE_FIELD_DESC);
        oprot.writeI64(struct.sqlMode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLoadMemLimit()) {
        oprot.writeFieldBegin(LOAD_MEM_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.loadMemLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnableStrictMode()) {
        oprot.writeFieldBegin(ENABLE_STRICT_MODE_FIELD_DESC);
        oprot.writeBool(struct.enableStrictMode);
        oprot.writeFieldEnd();
      }
      if (struct.current_user_ident != null) {
        if (struct.isSetCurrentUserIdent()) {
          oprot.writeFieldBegin(CURRENT_USER_IDENT_FIELD_DESC);
          struct.current_user_ident.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStmtIdx()) {
        oprot.writeFieldBegin(STMT_IDX_FIELD_DESC);
        oprot.writeI32(struct.stmtIdx);
        oprot.writeFieldEnd();
      }
      if (struct.query_options != null) {
        if (struct.isSetQueryOptions()) {
          oprot.writeFieldBegin(QUERY_OPTIONS_FIELD_DESC);
          struct.query_options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_id != null) {
        if (struct.isSetQueryId()) {
          oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
          struct.query_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInsertVisibleTimeoutMs()) {
        oprot.writeFieldBegin(INSERT_VISIBLE_TIMEOUT_MS_FIELD_DESC);
        oprot.writeI64(struct.insert_visible_timeout_ms);
        oprot.writeFieldEnd();
      }
      if (struct.session_variables != null) {
        if (struct.isSetSessionVariables()) {
          oprot.writeFieldBegin(SESSION_VARIABLES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.session_variables.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter206 : struct.session_variables.entrySet())
            {
              oprot.writeString(_iter206.getKey());
              oprot.writeString(_iter206.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFoldConstantByBe()) {
        oprot.writeFieldBegin(FOLD_CONSTANT_BY_BE_FIELD_DESC);
        oprot.writeBool(struct.foldConstantByBe);
        oprot.writeFieldEnd();
      }
      if (struct.trace_carrier != null) {
        if (struct.isSetTraceCarrier()) {
          oprot.writeFieldBegin(TRACE_CARRIER_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.trace_carrier.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter207 : struct.trace_carrier.entrySet())
            {
              oprot.writeString(_iter207.getKey());
              oprot.writeString(_iter207.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientNodeHost != null) {
        if (struct.isSetClientNodeHost()) {
          oprot.writeFieldBegin(CLIENT_NODE_HOST_FIELD_DESC);
          oprot.writeString(struct.clientNodeHost);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetClientNodePort()) {
        oprot.writeFieldBegin(CLIENT_NODE_PORT_FIELD_DESC);
        oprot.writeI32(struct.clientNodePort);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSyncJournalOnly()) {
        oprot.writeFieldBegin(SYNC_JOURNAL_ONLY_FIELD_DESC);
        oprot.writeBool(struct.syncJournalOnly);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMasterOpRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMasterOpRequestTupleScheme getScheme() {
      return new TMasterOpRequestTupleScheme();
    }
  }

  private static class TMasterOpRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TMasterOpRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMasterOpRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.user);
      oprot.writeString(struct.db);
      oprot.writeString(struct.sql);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetResourceInfo()) {
        optionals.set(0);
      }
      if (struct.isSetCluster()) {
        optionals.set(1);
      }
      if (struct.isSetExecMemLimit()) {
        optionals.set(2);
      }
      if (struct.isSetQueryTimeout()) {
        optionals.set(3);
      }
      if (struct.isSetUserIp()) {
        optionals.set(4);
      }
      if (struct.isSetTimeZone()) {
        optionals.set(5);
      }
      if (struct.isSetStmtId()) {
        optionals.set(6);
      }
      if (struct.isSetSqlMode()) {
        optionals.set(7);
      }
      if (struct.isSetLoadMemLimit()) {
        optionals.set(8);
      }
      if (struct.isSetEnableStrictMode()) {
        optionals.set(9);
      }
      if (struct.isSetCurrentUserIdent()) {
        optionals.set(10);
      }
      if (struct.isSetStmtIdx()) {
        optionals.set(11);
      }
      if (struct.isSetQueryOptions()) {
        optionals.set(12);
      }
      if (struct.isSetQueryId()) {
        optionals.set(13);
      }
      if (struct.isSetInsertVisibleTimeoutMs()) {
        optionals.set(14);
      }
      if (struct.isSetSessionVariables()) {
        optionals.set(15);
      }
      if (struct.isSetFoldConstantByBe()) {
        optionals.set(16);
      }
      if (struct.isSetTraceCarrier()) {
        optionals.set(17);
      }
      if (struct.isSetClientNodeHost()) {
        optionals.set(18);
      }
      if (struct.isSetClientNodePort()) {
        optionals.set(19);
      }
      if (struct.isSetSyncJournalOnly()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetResourceInfo()) {
        struct.resourceInfo.write(oprot);
      }
      if (struct.isSetCluster()) {
        oprot.writeString(struct.cluster);
      }
      if (struct.isSetExecMemLimit()) {
        oprot.writeI64(struct.execMemLimit);
      }
      if (struct.isSetQueryTimeout()) {
        oprot.writeI32(struct.queryTimeout);
      }
      if (struct.isSetUserIp()) {
        oprot.writeString(struct.user_ip);
      }
      if (struct.isSetTimeZone()) {
        oprot.writeString(struct.time_zone);
      }
      if (struct.isSetStmtId()) {
        oprot.writeI64(struct.stmt_id);
      }
      if (struct.isSetSqlMode()) {
        oprot.writeI64(struct.sqlMode);
      }
      if (struct.isSetLoadMemLimit()) {
        oprot.writeI64(struct.loadMemLimit);
      }
      if (struct.isSetEnableStrictMode()) {
        oprot.writeBool(struct.enableStrictMode);
      }
      if (struct.isSetCurrentUserIdent()) {
        struct.current_user_ident.write(oprot);
      }
      if (struct.isSetStmtIdx()) {
        oprot.writeI32(struct.stmtIdx);
      }
      if (struct.isSetQueryOptions()) {
        struct.query_options.write(oprot);
      }
      if (struct.isSetQueryId()) {
        struct.query_id.write(oprot);
      }
      if (struct.isSetInsertVisibleTimeoutMs()) {
        oprot.writeI64(struct.insert_visible_timeout_ms);
      }
      if (struct.isSetSessionVariables()) {
        {
          oprot.writeI32(struct.session_variables.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter208 : struct.session_variables.entrySet())
          {
            oprot.writeString(_iter208.getKey());
            oprot.writeString(_iter208.getValue());
          }
        }
      }
      if (struct.isSetFoldConstantByBe()) {
        oprot.writeBool(struct.foldConstantByBe);
      }
      if (struct.isSetTraceCarrier()) {
        {
          oprot.writeI32(struct.trace_carrier.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter209 : struct.trace_carrier.entrySet())
          {
            oprot.writeString(_iter209.getKey());
            oprot.writeString(_iter209.getValue());
          }
        }
      }
      if (struct.isSetClientNodeHost()) {
        oprot.writeString(struct.clientNodeHost);
      }
      if (struct.isSetClientNodePort()) {
        oprot.writeI32(struct.clientNodePort);
      }
      if (struct.isSetSyncJournalOnly()) {
        oprot.writeBool(struct.syncJournalOnly);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMasterOpRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.user = iprot.readString();
      struct.setUserIsSet(true);
      struct.db = iprot.readString();
      struct.setDbIsSet(true);
      struct.sql = iprot.readString();
      struct.setSqlIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.resourceInfo = new org.apache.doris.thrift.TResourceInfo();
        struct.resourceInfo.read(iprot);
        struct.setResourceInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cluster = iprot.readString();
        struct.setClusterIsSet(true);
      }
      if (incoming.get(2)) {
        struct.execMemLimit = iprot.readI64();
        struct.setExecMemLimitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.queryTimeout = iprot.readI32();
        struct.setQueryTimeoutIsSet(true);
      }
      if (incoming.get(4)) {
        struct.user_ip = iprot.readString();
        struct.setUserIpIsSet(true);
      }
      if (incoming.get(5)) {
        struct.time_zone = iprot.readString();
        struct.setTimeZoneIsSet(true);
      }
      if (incoming.get(6)) {
        struct.stmt_id = iprot.readI64();
        struct.setStmtIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.sqlMode = iprot.readI64();
        struct.setSqlModeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.loadMemLimit = iprot.readI64();
        struct.setLoadMemLimitIsSet(true);
      }
      if (incoming.get(9)) {
        struct.enableStrictMode = iprot.readBool();
        struct.setEnableStrictModeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.current_user_ident = new org.apache.doris.thrift.TUserIdentity();
        struct.current_user_ident.read(iprot);
        struct.setCurrentUserIdentIsSet(true);
      }
      if (incoming.get(11)) {
        struct.stmtIdx = iprot.readI32();
        struct.setStmtIdxIsSet(true);
      }
      if (incoming.get(12)) {
        struct.query_options = new org.apache.doris.thrift.TQueryOptions();
        struct.query_options.read(iprot);
        struct.setQueryOptionsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.query_id = new org.apache.doris.thrift.TUniqueId();
        struct.query_id.read(iprot);
        struct.setQueryIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.insert_visible_timeout_ms = iprot.readI64();
        struct.setInsertVisibleTimeoutMsIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TMap _map210 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.session_variables = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map210.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key211;
          @org.apache.thrift.annotation.Nullable java.lang.String _val212;
          for (int _i213 = 0; _i213 < _map210.size; ++_i213)
          {
            _key211 = iprot.readString();
            _val212 = iprot.readString();
            struct.session_variables.put(_key211, _val212);
          }
        }
        struct.setSessionVariablesIsSet(true);
      }
      if (incoming.get(16)) {
        struct.foldConstantByBe = iprot.readBool();
        struct.setFoldConstantByBeIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TMap _map214 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.trace_carrier = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map214.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key215;
          @org.apache.thrift.annotation.Nullable java.lang.String _val216;
          for (int _i217 = 0; _i217 < _map214.size; ++_i217)
          {
            _key215 = iprot.readString();
            _val216 = iprot.readString();
            struct.trace_carrier.put(_key215, _val216);
          }
        }
        struct.setTraceCarrierIsSet(true);
      }
      if (incoming.get(18)) {
        struct.clientNodeHost = iprot.readString();
        struct.setClientNodeHostIsSet(true);
      }
      if (incoming.get(19)) {
        struct.clientNodePort = iprot.readI32();
        struct.setClientNodePortIsSet(true);
      }
      if (incoming.get(20)) {
        struct.syncJournalOnly = iprot.readBool();
        struct.setSyncJournalOnlyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

