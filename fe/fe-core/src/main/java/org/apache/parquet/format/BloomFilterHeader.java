/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.parquet.format;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Bloom filter header is stored at beginning of Bloom filter data of each column
 * and followed by its bitset.
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-04-28")
public class BloomFilterHeader implements org.apache.thrift.TBase<BloomFilterHeader, BloomFilterHeader._Fields>, java.io.Serializable, Cloneable, Comparable<BloomFilterHeader> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BloomFilterHeader");

  private static final org.apache.thrift.protocol.TField NUM_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("numBytes", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ALGORITHM_FIELD_DESC = new org.apache.thrift.protocol.TField("algorithm", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("hash", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField COMPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("compression", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BloomFilterHeaderStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BloomFilterHeaderTupleSchemeFactory();

  /**
   * The size of bitset in bytes *
   */
  public int numBytes; // required
  /**
   * The algorithm for setting bits. *
   */
  public @org.apache.thrift.annotation.Nullable BloomFilterAlgorithm algorithm; // required
  /**
   * The hash function used for Bloom filter. *
   */
  public @org.apache.thrift.annotation.Nullable BloomFilterHash hash; // required
  /**
   * The compression used in the Bloom filter *
   */
  public @org.apache.thrift.annotation.Nullable BloomFilterCompression compression; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The size of bitset in bytes *
     */
    NUM_BYTES((short)1, "numBytes"),
    /**
     * The algorithm for setting bits. *
     */
    ALGORITHM((short)2, "algorithm"),
    /**
     * The hash function used for Bloom filter. *
     */
    HASH((short)3, "hash"),
    /**
     * The compression used in the Bloom filter *
     */
    COMPRESSION((short)4, "compression");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_BYTES
          return NUM_BYTES;
        case 2: // ALGORITHM
          return ALGORITHM;
        case 3: // HASH
          return HASH;
        case 4: // COMPRESSION
          return COMPRESSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBYTES_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_BYTES, new org.apache.thrift.meta_data.FieldMetaData("numBytes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALGORITHM, new org.apache.thrift.meta_data.FieldMetaData("algorithm", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BloomFilterAlgorithm.class)));
    tmpMap.put(_Fields.HASH, new org.apache.thrift.meta_data.FieldMetaData("hash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BloomFilterHash.class)));
    tmpMap.put(_Fields.COMPRESSION, new org.apache.thrift.meta_data.FieldMetaData("compression", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BloomFilterCompression.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BloomFilterHeader.class, metaDataMap);
  }

  public BloomFilterHeader() {
  }

  public BloomFilterHeader(
    int numBytes,
    BloomFilterAlgorithm algorithm,
    BloomFilterHash hash,
    BloomFilterCompression compression)
  {
    this();
    this.numBytes = numBytes;
    setNumBytesIsSet(true);
    this.algorithm = algorithm;
    this.hash = hash;
    this.compression = compression;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BloomFilterHeader(BloomFilterHeader other) {
    __isset_bitfield = other.__isset_bitfield;
    this.numBytes = other.numBytes;
    if (other.isSetAlgorithm()) {
      this.algorithm = new BloomFilterAlgorithm(other.algorithm);
    }
    if (other.isSetHash()) {
      this.hash = new BloomFilterHash(other.hash);
    }
    if (other.isSetCompression()) {
      this.compression = new BloomFilterCompression(other.compression);
    }
  }

  public BloomFilterHeader deepCopy() {
    return new BloomFilterHeader(this);
  }

  @Override
  public void clear() {
    setNumBytesIsSet(false);
    this.numBytes = 0;
    this.algorithm = null;
    this.hash = null;
    this.compression = null;
  }

  /**
   * The size of bitset in bytes *
   */
  public int getNumBytes() {
    return this.numBytes;
  }

  /**
   * The size of bitset in bytes *
   */
  public BloomFilterHeader setNumBytes(int numBytes) {
    this.numBytes = numBytes;
    setNumBytesIsSet(true);
    return this;
  }

  public void unsetNumBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBYTES_ISSET_ID);
  }

  /** Returns true if field numBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetNumBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBYTES_ISSET_ID);
  }

  public void setNumBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBYTES_ISSET_ID, value);
  }

  /**
   * The algorithm for setting bits. *
   */
  @org.apache.thrift.annotation.Nullable
  public BloomFilterAlgorithm getAlgorithm() {
    return this.algorithm;
  }

  /**
   * The algorithm for setting bits. *
   */
  public BloomFilterHeader setAlgorithm(@org.apache.thrift.annotation.Nullable BloomFilterAlgorithm algorithm) {
    this.algorithm = algorithm;
    return this;
  }

  public void unsetAlgorithm() {
    this.algorithm = null;
  }

  /** Returns true if field algorithm is set (has been assigned a value) and false otherwise */
  public boolean isSetAlgorithm() {
    return this.algorithm != null;
  }

  public void setAlgorithmIsSet(boolean value) {
    if (!value) {
      this.algorithm = null;
    }
  }

  /**
   * The hash function used for Bloom filter. *
   */
  @org.apache.thrift.annotation.Nullable
  public BloomFilterHash getHash() {
    return this.hash;
  }

  /**
   * The hash function used for Bloom filter. *
   */
  public BloomFilterHeader setHash(@org.apache.thrift.annotation.Nullable BloomFilterHash hash) {
    this.hash = hash;
    return this;
  }

  public void unsetHash() {
    this.hash = null;
  }

  /** Returns true if field hash is set (has been assigned a value) and false otherwise */
  public boolean isSetHash() {
    return this.hash != null;
  }

  public void setHashIsSet(boolean value) {
    if (!value) {
      this.hash = null;
    }
  }

  /**
   * The compression used in the Bloom filter *
   */
  @org.apache.thrift.annotation.Nullable
  public BloomFilterCompression getCompression() {
    return this.compression;
  }

  /**
   * The compression used in the Bloom filter *
   */
  public BloomFilterHeader setCompression(@org.apache.thrift.annotation.Nullable BloomFilterCompression compression) {
    this.compression = compression;
    return this;
  }

  public void unsetCompression() {
    this.compression = null;
  }

  /** Returns true if field compression is set (has been assigned a value) and false otherwise */
  public boolean isSetCompression() {
    return this.compression != null;
  }

  public void setCompressionIsSet(boolean value) {
    if (!value) {
      this.compression = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NUM_BYTES:
      if (value == null) {
        unsetNumBytes();
      } else {
        setNumBytes((java.lang.Integer)value);
      }
      break;

    case ALGORITHM:
      if (value == null) {
        unsetAlgorithm();
      } else {
        setAlgorithm((BloomFilterAlgorithm)value);
      }
      break;

    case HASH:
      if (value == null) {
        unsetHash();
      } else {
        setHash((BloomFilterHash)value);
      }
      break;

    case COMPRESSION:
      if (value == null) {
        unsetCompression();
      } else {
        setCompression((BloomFilterCompression)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_BYTES:
      return getNumBytes();

    case ALGORITHM:
      return getAlgorithm();

    case HASH:
      return getHash();

    case COMPRESSION:
      return getCompression();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NUM_BYTES:
      return isSetNumBytes();
    case ALGORITHM:
      return isSetAlgorithm();
    case HASH:
      return isSetHash();
    case COMPRESSION:
      return isSetCompression();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof BloomFilterHeader)
      return this.equals((BloomFilterHeader)that);
    return false;
  }

  public boolean equals(BloomFilterHeader that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_numBytes = true;
    boolean that_present_numBytes = true;
    if (this_present_numBytes || that_present_numBytes) {
      if (!(this_present_numBytes && that_present_numBytes))
        return false;
      if (this.numBytes != that.numBytes)
        return false;
    }

    boolean this_present_algorithm = true && this.isSetAlgorithm();
    boolean that_present_algorithm = true && that.isSetAlgorithm();
    if (this_present_algorithm || that_present_algorithm) {
      if (!(this_present_algorithm && that_present_algorithm))
        return false;
      if (!this.algorithm.equals(that.algorithm))
        return false;
    }

    boolean this_present_hash = true && this.isSetHash();
    boolean that_present_hash = true && that.isSetHash();
    if (this_present_hash || that_present_hash) {
      if (!(this_present_hash && that_present_hash))
        return false;
      if (!this.hash.equals(that.hash))
        return false;
    }

    boolean this_present_compression = true && this.isSetCompression();
    boolean that_present_compression = true && that.isSetCompression();
    if (this_present_compression || that_present_compression) {
      if (!(this_present_compression && that_present_compression))
        return false;
      if (!this.compression.equals(that.compression))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + numBytes;

    hashCode = hashCode * 8191 + ((isSetAlgorithm()) ? 131071 : 524287);
    if (isSetAlgorithm())
      hashCode = hashCode * 8191 + algorithm.hashCode();

    hashCode = hashCode * 8191 + ((isSetHash()) ? 131071 : 524287);
    if (isSetHash())
      hashCode = hashCode * 8191 + hash.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompression()) ? 131071 : 524287);
    if (isSetCompression())
      hashCode = hashCode * 8191 + compression.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(BloomFilterHeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNumBytes(), other.isSetNumBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numBytes, other.numBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAlgorithm(), other.isSetAlgorithm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlgorithm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.algorithm, other.algorithm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHash(), other.isSetHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash, other.hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCompression(), other.isSetCompression());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompression()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compression, other.compression);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BloomFilterHeader(");
    boolean first = true;

    sb.append("numBytes:");
    sb.append(this.numBytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("algorithm:");
    if (this.algorithm == null) {
      sb.append("null");
    } else {
      sb.append(this.algorithm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hash:");
    if (this.hash == null) {
      sb.append("null");
    } else {
      sb.append(this.hash);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compression:");
    if (this.compression == null) {
      sb.append("null");
    } else {
      sb.append(this.compression);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'numBytes' because it's a primitive and you chose the non-beans generator.
    if (algorithm == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'algorithm' was not present! Struct: " + toString());
    }
    if (hash == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hash' was not present! Struct: " + toString());
    }
    if (compression == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'compression' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BloomFilterHeaderStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BloomFilterHeaderStandardScheme getScheme() {
      return new BloomFilterHeaderStandardScheme();
    }
  }

  private static class BloomFilterHeaderStandardScheme extends org.apache.thrift.scheme.StandardScheme<BloomFilterHeader> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BloomFilterHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numBytes = iprot.readI32();
              struct.setNumBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ALGORITHM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.algorithm = new BloomFilterAlgorithm();
              struct.algorithm.read(iprot);
              struct.setAlgorithmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hash = new BloomFilterHash();
              struct.hash.read(iprot);
              struct.setHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.compression = new BloomFilterCompression();
              struct.compression.read(iprot);
              struct.setCompressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNumBytes()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'numBytes' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BloomFilterHeader struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_BYTES_FIELD_DESC);
      oprot.writeI32(struct.numBytes);
      oprot.writeFieldEnd();
      if (struct.algorithm != null) {
        oprot.writeFieldBegin(ALGORITHM_FIELD_DESC);
        struct.algorithm.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.hash != null) {
        oprot.writeFieldBegin(HASH_FIELD_DESC);
        struct.hash.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.compression != null) {
        oprot.writeFieldBegin(COMPRESSION_FIELD_DESC);
        struct.compression.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BloomFilterHeaderTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BloomFilterHeaderTupleScheme getScheme() {
      return new BloomFilterHeaderTupleScheme();
    }
  }

  private static class BloomFilterHeaderTupleScheme extends org.apache.thrift.scheme.TupleScheme<BloomFilterHeader> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BloomFilterHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.numBytes);
      struct.algorithm.write(oprot);
      struct.hash.write(oprot);
      struct.compression.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BloomFilterHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.numBytes = iprot.readI32();
      struct.setNumBytesIsSet(true);
      struct.algorithm = new BloomFilterAlgorithm();
      struct.algorithm.read(iprot);
      struct.setAlgorithmIsSet(true);
      struct.hash = new BloomFilterHash();
      struct.hash.read(iprot);
      struct.setHashIsSet(true);
      struct.compression = new BloomFilterCompression();
      struct.compression.read(iprot);
      struct.setCompressionIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

