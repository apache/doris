/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-04-28")
public class TAgentTaskRequest implements org.apache.thrift.TBase<TAgentTaskRequest, TAgentTaskRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TAgentTaskRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAgentTaskRequest");

  private static final org.apache.thrift.protocol.TField PROTOCOL_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol_version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("task_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CREATE_TABLET_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("create_tablet_req", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField DROP_TABLET_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("drop_tablet_req", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField ALTER_TABLET_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("alter_tablet_req", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField CLONE_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("clone_req", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField PUSH_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("push_req", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField CANCEL_DELETE_DATA_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("cancel_delete_data_req", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField RESOURCE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("resource_info", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField STORAGE_MEDIUM_MIGRATE_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("storage_medium_migrate_req", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField CHECK_CONSISTENCY_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("check_consistency_req", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField UPLOAD_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("upload_req", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField DOWNLOAD_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("download_req", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField SNAPSHOT_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshot_req", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField RELEASE_SNAPSHOT_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("release_snapshot_req", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField CLEAR_REMOTE_FILE_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("clear_remote_file_req", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField PUBLISH_VERSION_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("publish_version_req", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField CLEAR_ALTER_TASK_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("clear_alter_task_req", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField CLEAR_TRANSACTION_TASK_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("clear_transaction_task_req", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField MOVE_DIR_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("move_dir_req", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField RECOVER_TABLET_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("recover_tablet_req", org.apache.thrift.protocol.TType.STRUCT, (short)23);
  private static final org.apache.thrift.protocol.TField ALTER_TABLET_REQ_V2_FIELD_DESC = new org.apache.thrift.protocol.TField("alter_tablet_req_v2", org.apache.thrift.protocol.TType.STRUCT, (short)24);
  private static final org.apache.thrift.protocol.TField RECV_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("recv_time", org.apache.thrift.protocol.TType.I64, (short)25);
  private static final org.apache.thrift.protocol.TField UPDATE_TABLET_META_INFO_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("update_tablet_meta_info_req", org.apache.thrift.protocol.TType.STRUCT, (short)26);
  private static final org.apache.thrift.protocol.TField COMPACTION_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("compaction_req", org.apache.thrift.protocol.TType.STRUCT, (short)27);
  private static final org.apache.thrift.protocol.TField STORAGE_MIGRATION_REQ_V2_FIELD_DESC = new org.apache.thrift.protocol.TField("storage_migration_req_v2", org.apache.thrift.protocol.TType.STRUCT, (short)28);
  private static final org.apache.thrift.protocol.TField PUSH_COOLDOWN_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("push_cooldown_conf", org.apache.thrift.protocol.TType.STRUCT, (short)30);
  private static final org.apache.thrift.protocol.TField PUSH_STORAGE_POLICY_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("push_storage_policy_req", org.apache.thrift.protocol.TType.STRUCT, (short)31);
  private static final org.apache.thrift.protocol.TField ALTER_INVERTED_INDEX_REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("alter_inverted_index_req", org.apache.thrift.protocol.TType.STRUCT, (short)32);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAgentTaskRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAgentTaskRequestTupleSchemeFactory();

  /**
   * 
   * @see TAgentServiceVersion
   */
  public @org.apache.thrift.annotation.Nullable TAgentServiceVersion protocol_version; // required
  /**
   * 
   * @see org.apache.doris.thrift.TTaskType
   */
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TTaskType task_type; // required
  public long signature; // required
  /**
   * 
   * @see org.apache.doris.thrift.TPriority
   */
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TPriority priority; // optional
  public @org.apache.thrift.annotation.Nullable TCreateTabletReq create_tablet_req; // optional
  public @org.apache.thrift.annotation.Nullable TDropTabletReq drop_tablet_req; // optional
  public @org.apache.thrift.annotation.Nullable TAlterTabletReq alter_tablet_req; // optional
  public @org.apache.thrift.annotation.Nullable TCloneReq clone_req; // optional
  public @org.apache.thrift.annotation.Nullable TPushReq push_req; // optional
  public @org.apache.thrift.annotation.Nullable TCancelDeleteDataReq cancel_delete_data_req; // optional
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TResourceInfo resource_info; // optional
  public @org.apache.thrift.annotation.Nullable TStorageMediumMigrateReq storage_medium_migrate_req; // optional
  public @org.apache.thrift.annotation.Nullable TCheckConsistencyReq check_consistency_req; // optional
  public @org.apache.thrift.annotation.Nullable TUploadReq upload_req; // optional
  public @org.apache.thrift.annotation.Nullable TDownloadReq download_req; // optional
  public @org.apache.thrift.annotation.Nullable TSnapshotRequest snapshot_req; // optional
  public @org.apache.thrift.annotation.Nullable TReleaseSnapshotRequest release_snapshot_req; // optional
  public @org.apache.thrift.annotation.Nullable TClearRemoteFileReq clear_remote_file_req; // optional
  public @org.apache.thrift.annotation.Nullable TPublishVersionRequest publish_version_req; // optional
  public @org.apache.thrift.annotation.Nullable TClearAlterTaskRequest clear_alter_task_req; // optional
  public @org.apache.thrift.annotation.Nullable TClearTransactionTaskRequest clear_transaction_task_req; // optional
  public @org.apache.thrift.annotation.Nullable TMoveDirReq move_dir_req; // optional
  public @org.apache.thrift.annotation.Nullable TRecoverTabletReq recover_tablet_req; // optional
  public @org.apache.thrift.annotation.Nullable TAlterTabletReqV2 alter_tablet_req_v2; // optional
  public long recv_time; // optional
  public @org.apache.thrift.annotation.Nullable TUpdateTabletMetaInfoReq update_tablet_meta_info_req; // optional
  public @org.apache.thrift.annotation.Nullable TCompactionReq compaction_req; // optional
  public @org.apache.thrift.annotation.Nullable TStorageMigrationReqV2 storage_migration_req_v2; // optional
  public @org.apache.thrift.annotation.Nullable TPushCooldownConfReq push_cooldown_conf; // optional
  public @org.apache.thrift.annotation.Nullable TPushStoragePolicyReq push_storage_policy_req; // optional
  public @org.apache.thrift.annotation.Nullable TAlterInvertedIndexReq alter_inverted_index_req; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TAgentServiceVersion
     */
    PROTOCOL_VERSION((short)1, "protocol_version"),
    /**
     * 
     * @see org.apache.doris.thrift.TTaskType
     */
    TASK_TYPE((short)2, "task_type"),
    SIGNATURE((short)3, "signature"),
    /**
     * 
     * @see org.apache.doris.thrift.TPriority
     */
    PRIORITY((short)4, "priority"),
    CREATE_TABLET_REQ((short)5, "create_tablet_req"),
    DROP_TABLET_REQ((short)6, "drop_tablet_req"),
    ALTER_TABLET_REQ((short)7, "alter_tablet_req"),
    CLONE_REQ((short)8, "clone_req"),
    PUSH_REQ((short)9, "push_req"),
    CANCEL_DELETE_DATA_REQ((short)10, "cancel_delete_data_req"),
    RESOURCE_INFO((short)11, "resource_info"),
    STORAGE_MEDIUM_MIGRATE_REQ((short)12, "storage_medium_migrate_req"),
    CHECK_CONSISTENCY_REQ((short)13, "check_consistency_req"),
    UPLOAD_REQ((short)14, "upload_req"),
    DOWNLOAD_REQ((short)15, "download_req"),
    SNAPSHOT_REQ((short)16, "snapshot_req"),
    RELEASE_SNAPSHOT_REQ((short)17, "release_snapshot_req"),
    CLEAR_REMOTE_FILE_REQ((short)18, "clear_remote_file_req"),
    PUBLISH_VERSION_REQ((short)19, "publish_version_req"),
    CLEAR_ALTER_TASK_REQ((short)20, "clear_alter_task_req"),
    CLEAR_TRANSACTION_TASK_REQ((short)21, "clear_transaction_task_req"),
    MOVE_DIR_REQ((short)22, "move_dir_req"),
    RECOVER_TABLET_REQ((short)23, "recover_tablet_req"),
    ALTER_TABLET_REQ_V2((short)24, "alter_tablet_req_v2"),
    RECV_TIME((short)25, "recv_time"),
    UPDATE_TABLET_META_INFO_REQ((short)26, "update_tablet_meta_info_req"),
    COMPACTION_REQ((short)27, "compaction_req"),
    STORAGE_MIGRATION_REQ_V2((short)28, "storage_migration_req_v2"),
    PUSH_COOLDOWN_CONF((short)30, "push_cooldown_conf"),
    PUSH_STORAGE_POLICY_REQ((short)31, "push_storage_policy_req"),
    ALTER_INVERTED_INDEX_REQ((short)32, "alter_inverted_index_req");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL_VERSION
          return PROTOCOL_VERSION;
        case 2: // TASK_TYPE
          return TASK_TYPE;
        case 3: // SIGNATURE
          return SIGNATURE;
        case 4: // PRIORITY
          return PRIORITY;
        case 5: // CREATE_TABLET_REQ
          return CREATE_TABLET_REQ;
        case 6: // DROP_TABLET_REQ
          return DROP_TABLET_REQ;
        case 7: // ALTER_TABLET_REQ
          return ALTER_TABLET_REQ;
        case 8: // CLONE_REQ
          return CLONE_REQ;
        case 9: // PUSH_REQ
          return PUSH_REQ;
        case 10: // CANCEL_DELETE_DATA_REQ
          return CANCEL_DELETE_DATA_REQ;
        case 11: // RESOURCE_INFO
          return RESOURCE_INFO;
        case 12: // STORAGE_MEDIUM_MIGRATE_REQ
          return STORAGE_MEDIUM_MIGRATE_REQ;
        case 13: // CHECK_CONSISTENCY_REQ
          return CHECK_CONSISTENCY_REQ;
        case 14: // UPLOAD_REQ
          return UPLOAD_REQ;
        case 15: // DOWNLOAD_REQ
          return DOWNLOAD_REQ;
        case 16: // SNAPSHOT_REQ
          return SNAPSHOT_REQ;
        case 17: // RELEASE_SNAPSHOT_REQ
          return RELEASE_SNAPSHOT_REQ;
        case 18: // CLEAR_REMOTE_FILE_REQ
          return CLEAR_REMOTE_FILE_REQ;
        case 19: // PUBLISH_VERSION_REQ
          return PUBLISH_VERSION_REQ;
        case 20: // CLEAR_ALTER_TASK_REQ
          return CLEAR_ALTER_TASK_REQ;
        case 21: // CLEAR_TRANSACTION_TASK_REQ
          return CLEAR_TRANSACTION_TASK_REQ;
        case 22: // MOVE_DIR_REQ
          return MOVE_DIR_REQ;
        case 23: // RECOVER_TABLET_REQ
          return RECOVER_TABLET_REQ;
        case 24: // ALTER_TABLET_REQ_V2
          return ALTER_TABLET_REQ_V2;
        case 25: // RECV_TIME
          return RECV_TIME;
        case 26: // UPDATE_TABLET_META_INFO_REQ
          return UPDATE_TABLET_META_INFO_REQ;
        case 27: // COMPACTION_REQ
          return COMPACTION_REQ;
        case 28: // STORAGE_MIGRATION_REQ_V2
          return STORAGE_MIGRATION_REQ_V2;
        case 30: // PUSH_COOLDOWN_CONF
          return PUSH_COOLDOWN_CONF;
        case 31: // PUSH_STORAGE_POLICY_REQ
          return PUSH_STORAGE_POLICY_REQ;
        case 32: // ALTER_INVERTED_INDEX_REQ
          return ALTER_INVERTED_INDEX_REQ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SIGNATURE_ISSET_ID = 0;
  private static final int __RECV_TIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PRIORITY,_Fields.CREATE_TABLET_REQ,_Fields.DROP_TABLET_REQ,_Fields.ALTER_TABLET_REQ,_Fields.CLONE_REQ,_Fields.PUSH_REQ,_Fields.CANCEL_DELETE_DATA_REQ,_Fields.RESOURCE_INFO,_Fields.STORAGE_MEDIUM_MIGRATE_REQ,_Fields.CHECK_CONSISTENCY_REQ,_Fields.UPLOAD_REQ,_Fields.DOWNLOAD_REQ,_Fields.SNAPSHOT_REQ,_Fields.RELEASE_SNAPSHOT_REQ,_Fields.CLEAR_REMOTE_FILE_REQ,_Fields.PUBLISH_VERSION_REQ,_Fields.CLEAR_ALTER_TASK_REQ,_Fields.CLEAR_TRANSACTION_TASK_REQ,_Fields.MOVE_DIR_REQ,_Fields.RECOVER_TABLET_REQ,_Fields.ALTER_TABLET_REQ_V2,_Fields.RECV_TIME,_Fields.UPDATE_TABLET_META_INFO_REQ,_Fields.COMPACTION_REQ,_Fields.STORAGE_MIGRATION_REQ_V2,_Fields.PUSH_COOLDOWN_CONF,_Fields.PUSH_STORAGE_POLICY_REQ,_Fields.ALTER_INVERTED_INDEX_REQ};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL_VERSION, new org.apache.thrift.meta_data.FieldMetaData("protocol_version", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TAgentServiceVersion.class)));
    tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("task_type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.doris.thrift.TTaskType.class)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.doris.thrift.TPriority.class)));
    tmpMap.put(_Fields.CREATE_TABLET_REQ, new org.apache.thrift.meta_data.FieldMetaData("create_tablet_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCreateTabletReq.class)));
    tmpMap.put(_Fields.DROP_TABLET_REQ, new org.apache.thrift.meta_data.FieldMetaData("drop_tablet_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDropTabletReq.class)));
    tmpMap.put(_Fields.ALTER_TABLET_REQ, new org.apache.thrift.meta_data.FieldMetaData("alter_tablet_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterTabletReq.class)));
    tmpMap.put(_Fields.CLONE_REQ, new org.apache.thrift.meta_data.FieldMetaData("clone_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCloneReq.class)));
    tmpMap.put(_Fields.PUSH_REQ, new org.apache.thrift.meta_data.FieldMetaData("push_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPushReq.class)));
    tmpMap.put(_Fields.CANCEL_DELETE_DATA_REQ, new org.apache.thrift.meta_data.FieldMetaData("cancel_delete_data_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCancelDeleteDataReq.class)));
    tmpMap.put(_Fields.RESOURCE_INFO, new org.apache.thrift.meta_data.FieldMetaData("resource_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TResourceInfo.class)));
    tmpMap.put(_Fields.STORAGE_MEDIUM_MIGRATE_REQ, new org.apache.thrift.meta_data.FieldMetaData("storage_medium_migrate_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStorageMediumMigrateReq.class)));
    tmpMap.put(_Fields.CHECK_CONSISTENCY_REQ, new org.apache.thrift.meta_data.FieldMetaData("check_consistency_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCheckConsistencyReq.class)));
    tmpMap.put(_Fields.UPLOAD_REQ, new org.apache.thrift.meta_data.FieldMetaData("upload_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUploadReq.class)));
    tmpMap.put(_Fields.DOWNLOAD_REQ, new org.apache.thrift.meta_data.FieldMetaData("download_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDownloadReq.class)));
    tmpMap.put(_Fields.SNAPSHOT_REQ, new org.apache.thrift.meta_data.FieldMetaData("snapshot_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSnapshotRequest.class)));
    tmpMap.put(_Fields.RELEASE_SNAPSHOT_REQ, new org.apache.thrift.meta_data.FieldMetaData("release_snapshot_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TReleaseSnapshotRequest.class)));
    tmpMap.put(_Fields.CLEAR_REMOTE_FILE_REQ, new org.apache.thrift.meta_data.FieldMetaData("clear_remote_file_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TClearRemoteFileReq.class)));
    tmpMap.put(_Fields.PUBLISH_VERSION_REQ, new org.apache.thrift.meta_data.FieldMetaData("publish_version_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPublishVersionRequest.class)));
    tmpMap.put(_Fields.CLEAR_ALTER_TASK_REQ, new org.apache.thrift.meta_data.FieldMetaData("clear_alter_task_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TClearAlterTaskRequest.class)));
    tmpMap.put(_Fields.CLEAR_TRANSACTION_TASK_REQ, new org.apache.thrift.meta_data.FieldMetaData("clear_transaction_task_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TClearTransactionTaskRequest.class)));
    tmpMap.put(_Fields.MOVE_DIR_REQ, new org.apache.thrift.meta_data.FieldMetaData("move_dir_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMoveDirReq.class)));
    tmpMap.put(_Fields.RECOVER_TABLET_REQ, new org.apache.thrift.meta_data.FieldMetaData("recover_tablet_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRecoverTabletReq.class)));
    tmpMap.put(_Fields.ALTER_TABLET_REQ_V2, new org.apache.thrift.meta_data.FieldMetaData("alter_tablet_req_v2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterTabletReqV2.class)));
    tmpMap.put(_Fields.RECV_TIME, new org.apache.thrift.meta_data.FieldMetaData("recv_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TABLET_META_INFO_REQ, new org.apache.thrift.meta_data.FieldMetaData("update_tablet_meta_info_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUpdateTabletMetaInfoReq.class)));
    tmpMap.put(_Fields.COMPACTION_REQ, new org.apache.thrift.meta_data.FieldMetaData("compaction_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCompactionReq.class)));
    tmpMap.put(_Fields.STORAGE_MIGRATION_REQ_V2, new org.apache.thrift.meta_data.FieldMetaData("storage_migration_req_v2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStorageMigrationReqV2.class)));
    tmpMap.put(_Fields.PUSH_COOLDOWN_CONF, new org.apache.thrift.meta_data.FieldMetaData("push_cooldown_conf", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPushCooldownConfReq.class)));
    tmpMap.put(_Fields.PUSH_STORAGE_POLICY_REQ, new org.apache.thrift.meta_data.FieldMetaData("push_storage_policy_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPushStoragePolicyReq.class)));
    tmpMap.put(_Fields.ALTER_INVERTED_INDEX_REQ, new org.apache.thrift.meta_data.FieldMetaData("alter_inverted_index_req", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlterInvertedIndexReq.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAgentTaskRequest.class, metaDataMap);
  }

  public TAgentTaskRequest() {
  }

  public TAgentTaskRequest(
    TAgentServiceVersion protocol_version,
    org.apache.doris.thrift.TTaskType task_type,
    long signature)
  {
    this();
    this.protocol_version = protocol_version;
    this.task_type = task_type;
    this.signature = signature;
    setSignatureIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAgentTaskRequest(TAgentTaskRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProtocolVersion()) {
      this.protocol_version = other.protocol_version;
    }
    if (other.isSetTaskType()) {
      this.task_type = other.task_type;
    }
    this.signature = other.signature;
    if (other.isSetPriority()) {
      this.priority = other.priority;
    }
    if (other.isSetCreateTabletReq()) {
      this.create_tablet_req = new TCreateTabletReq(other.create_tablet_req);
    }
    if (other.isSetDropTabletReq()) {
      this.drop_tablet_req = new TDropTabletReq(other.drop_tablet_req);
    }
    if (other.isSetAlterTabletReq()) {
      this.alter_tablet_req = new TAlterTabletReq(other.alter_tablet_req);
    }
    if (other.isSetCloneReq()) {
      this.clone_req = new TCloneReq(other.clone_req);
    }
    if (other.isSetPushReq()) {
      this.push_req = new TPushReq(other.push_req);
    }
    if (other.isSetCancelDeleteDataReq()) {
      this.cancel_delete_data_req = new TCancelDeleteDataReq(other.cancel_delete_data_req);
    }
    if (other.isSetResourceInfo()) {
      this.resource_info = new org.apache.doris.thrift.TResourceInfo(other.resource_info);
    }
    if (other.isSetStorageMediumMigrateReq()) {
      this.storage_medium_migrate_req = new TStorageMediumMigrateReq(other.storage_medium_migrate_req);
    }
    if (other.isSetCheckConsistencyReq()) {
      this.check_consistency_req = new TCheckConsistencyReq(other.check_consistency_req);
    }
    if (other.isSetUploadReq()) {
      this.upload_req = new TUploadReq(other.upload_req);
    }
    if (other.isSetDownloadReq()) {
      this.download_req = new TDownloadReq(other.download_req);
    }
    if (other.isSetSnapshotReq()) {
      this.snapshot_req = new TSnapshotRequest(other.snapshot_req);
    }
    if (other.isSetReleaseSnapshotReq()) {
      this.release_snapshot_req = new TReleaseSnapshotRequest(other.release_snapshot_req);
    }
    if (other.isSetClearRemoteFileReq()) {
      this.clear_remote_file_req = new TClearRemoteFileReq(other.clear_remote_file_req);
    }
    if (other.isSetPublishVersionReq()) {
      this.publish_version_req = new TPublishVersionRequest(other.publish_version_req);
    }
    if (other.isSetClearAlterTaskReq()) {
      this.clear_alter_task_req = new TClearAlterTaskRequest(other.clear_alter_task_req);
    }
    if (other.isSetClearTransactionTaskReq()) {
      this.clear_transaction_task_req = new TClearTransactionTaskRequest(other.clear_transaction_task_req);
    }
    if (other.isSetMoveDirReq()) {
      this.move_dir_req = new TMoveDirReq(other.move_dir_req);
    }
    if (other.isSetRecoverTabletReq()) {
      this.recover_tablet_req = new TRecoverTabletReq(other.recover_tablet_req);
    }
    if (other.isSetAlterTabletReqV2()) {
      this.alter_tablet_req_v2 = new TAlterTabletReqV2(other.alter_tablet_req_v2);
    }
    this.recv_time = other.recv_time;
    if (other.isSetUpdateTabletMetaInfoReq()) {
      this.update_tablet_meta_info_req = new TUpdateTabletMetaInfoReq(other.update_tablet_meta_info_req);
    }
    if (other.isSetCompactionReq()) {
      this.compaction_req = new TCompactionReq(other.compaction_req);
    }
    if (other.isSetStorageMigrationReqV2()) {
      this.storage_migration_req_v2 = new TStorageMigrationReqV2(other.storage_migration_req_v2);
    }
    if (other.isSetPushCooldownConf()) {
      this.push_cooldown_conf = new TPushCooldownConfReq(other.push_cooldown_conf);
    }
    if (other.isSetPushStoragePolicyReq()) {
      this.push_storage_policy_req = new TPushStoragePolicyReq(other.push_storage_policy_req);
    }
    if (other.isSetAlterInvertedIndexReq()) {
      this.alter_inverted_index_req = new TAlterInvertedIndexReq(other.alter_inverted_index_req);
    }
  }

  public TAgentTaskRequest deepCopy() {
    return new TAgentTaskRequest(this);
  }

  @Override
  public void clear() {
    this.protocol_version = null;
    this.task_type = null;
    setSignatureIsSet(false);
    this.signature = 0;
    this.priority = null;
    this.create_tablet_req = null;
    this.drop_tablet_req = null;
    this.alter_tablet_req = null;
    this.clone_req = null;
    this.push_req = null;
    this.cancel_delete_data_req = null;
    this.resource_info = null;
    this.storage_medium_migrate_req = null;
    this.check_consistency_req = null;
    this.upload_req = null;
    this.download_req = null;
    this.snapshot_req = null;
    this.release_snapshot_req = null;
    this.clear_remote_file_req = null;
    this.publish_version_req = null;
    this.clear_alter_task_req = null;
    this.clear_transaction_task_req = null;
    this.move_dir_req = null;
    this.recover_tablet_req = null;
    this.alter_tablet_req_v2 = null;
    setRecvTimeIsSet(false);
    this.recv_time = 0;
    this.update_tablet_meta_info_req = null;
    this.compaction_req = null;
    this.storage_migration_req_v2 = null;
    this.push_cooldown_conf = null;
    this.push_storage_policy_req = null;
    this.alter_inverted_index_req = null;
  }

  /**
   * 
   * @see TAgentServiceVersion
   */
  @org.apache.thrift.annotation.Nullable
  public TAgentServiceVersion getProtocolVersion() {
    return this.protocol_version;
  }

  /**
   * 
   * @see TAgentServiceVersion
   */
  public TAgentTaskRequest setProtocolVersion(@org.apache.thrift.annotation.Nullable TAgentServiceVersion protocol_version) {
    this.protocol_version = protocol_version;
    return this;
  }

  public void unsetProtocolVersion() {
    this.protocol_version = null;
  }

  /** Returns true if field protocol_version is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocolVersion() {
    return this.protocol_version != null;
  }

  public void setProtocolVersionIsSet(boolean value) {
    if (!value) {
      this.protocol_version = null;
    }
  }

  /**
   * 
   * @see org.apache.doris.thrift.TTaskType
   */
  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TTaskType getTaskType() {
    return this.task_type;
  }

  /**
   * 
   * @see org.apache.doris.thrift.TTaskType
   */
  public TAgentTaskRequest setTaskType(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TTaskType task_type) {
    this.task_type = task_type;
    return this;
  }

  public void unsetTaskType() {
    this.task_type = null;
  }

  /** Returns true if field task_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskType() {
    return this.task_type != null;
  }

  public void setTaskTypeIsSet(boolean value) {
    if (!value) {
      this.task_type = null;
    }
  }

  public long getSignature() {
    return this.signature;
  }

  public TAgentTaskRequest setSignature(long signature) {
    this.signature = signature;
    setSignatureIsSet(true);
    return this;
  }

  public void unsetSignature() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIGNATURE_ISSET_ID);
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIGNATURE_ISSET_ID);
  }

  public void setSignatureIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIGNATURE_ISSET_ID, value);
  }

  /**
   * 
   * @see org.apache.doris.thrift.TPriority
   */
  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TPriority getPriority() {
    return this.priority;
  }

  /**
   * 
   * @see org.apache.doris.thrift.TPriority
   */
  public TAgentTaskRequest setPriority(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TPriority priority) {
    this.priority = priority;
    return this;
  }

  public void unsetPriority() {
    this.priority = null;
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return this.priority != null;
  }

  public void setPriorityIsSet(boolean value) {
    if (!value) {
      this.priority = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TCreateTabletReq getCreateTabletReq() {
    return this.create_tablet_req;
  }

  public TAgentTaskRequest setCreateTabletReq(@org.apache.thrift.annotation.Nullable TCreateTabletReq create_tablet_req) {
    this.create_tablet_req = create_tablet_req;
    return this;
  }

  public void unsetCreateTabletReq() {
    this.create_tablet_req = null;
  }

  /** Returns true if field create_tablet_req is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTabletReq() {
    return this.create_tablet_req != null;
  }

  public void setCreateTabletReqIsSet(boolean value) {
    if (!value) {
      this.create_tablet_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDropTabletReq getDropTabletReq() {
    return this.drop_tablet_req;
  }

  public TAgentTaskRequest setDropTabletReq(@org.apache.thrift.annotation.Nullable TDropTabletReq drop_tablet_req) {
    this.drop_tablet_req = drop_tablet_req;
    return this;
  }

  public void unsetDropTabletReq() {
    this.drop_tablet_req = null;
  }

  /** Returns true if field drop_tablet_req is set (has been assigned a value) and false otherwise */
  public boolean isSetDropTabletReq() {
    return this.drop_tablet_req != null;
  }

  public void setDropTabletReqIsSet(boolean value) {
    if (!value) {
      this.drop_tablet_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TAlterTabletReq getAlterTabletReq() {
    return this.alter_tablet_req;
  }

  public TAgentTaskRequest setAlterTabletReq(@org.apache.thrift.annotation.Nullable TAlterTabletReq alter_tablet_req) {
    this.alter_tablet_req = alter_tablet_req;
    return this;
  }

  public void unsetAlterTabletReq() {
    this.alter_tablet_req = null;
  }

  /** Returns true if field alter_tablet_req is set (has been assigned a value) and false otherwise */
  public boolean isSetAlterTabletReq() {
    return this.alter_tablet_req != null;
  }

  public void setAlterTabletReqIsSet(boolean value) {
    if (!value) {
      this.alter_tablet_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TCloneReq getCloneReq() {
    return this.clone_req;
  }

  public TAgentTaskRequest setCloneReq(@org.apache.thrift.annotation.Nullable TCloneReq clone_req) {
    this.clone_req = clone_req;
    return this;
  }

  public void unsetCloneReq() {
    this.clone_req = null;
  }

  /** Returns true if field clone_req is set (has been assigned a value) and false otherwise */
  public boolean isSetCloneReq() {
    return this.clone_req != null;
  }

  public void setCloneReqIsSet(boolean value) {
    if (!value) {
      this.clone_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TPushReq getPushReq() {
    return this.push_req;
  }

  public TAgentTaskRequest setPushReq(@org.apache.thrift.annotation.Nullable TPushReq push_req) {
    this.push_req = push_req;
    return this;
  }

  public void unsetPushReq() {
    this.push_req = null;
  }

  /** Returns true if field push_req is set (has been assigned a value) and false otherwise */
  public boolean isSetPushReq() {
    return this.push_req != null;
  }

  public void setPushReqIsSet(boolean value) {
    if (!value) {
      this.push_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TCancelDeleteDataReq getCancelDeleteDataReq() {
    return this.cancel_delete_data_req;
  }

  public TAgentTaskRequest setCancelDeleteDataReq(@org.apache.thrift.annotation.Nullable TCancelDeleteDataReq cancel_delete_data_req) {
    this.cancel_delete_data_req = cancel_delete_data_req;
    return this;
  }

  public void unsetCancelDeleteDataReq() {
    this.cancel_delete_data_req = null;
  }

  /** Returns true if field cancel_delete_data_req is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelDeleteDataReq() {
    return this.cancel_delete_data_req != null;
  }

  public void setCancelDeleteDataReqIsSet(boolean value) {
    if (!value) {
      this.cancel_delete_data_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TResourceInfo getResourceInfo() {
    return this.resource_info;
  }

  public TAgentTaskRequest setResourceInfo(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TResourceInfo resource_info) {
    this.resource_info = resource_info;
    return this;
  }

  public void unsetResourceInfo() {
    this.resource_info = null;
  }

  /** Returns true if field resource_info is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceInfo() {
    return this.resource_info != null;
  }

  public void setResourceInfoIsSet(boolean value) {
    if (!value) {
      this.resource_info = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TStorageMediumMigrateReq getStorageMediumMigrateReq() {
    return this.storage_medium_migrate_req;
  }

  public TAgentTaskRequest setStorageMediumMigrateReq(@org.apache.thrift.annotation.Nullable TStorageMediumMigrateReq storage_medium_migrate_req) {
    this.storage_medium_migrate_req = storage_medium_migrate_req;
    return this;
  }

  public void unsetStorageMediumMigrateReq() {
    this.storage_medium_migrate_req = null;
  }

  /** Returns true if field storage_medium_migrate_req is set (has been assigned a value) and false otherwise */
  public boolean isSetStorageMediumMigrateReq() {
    return this.storage_medium_migrate_req != null;
  }

  public void setStorageMediumMigrateReqIsSet(boolean value) {
    if (!value) {
      this.storage_medium_migrate_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TCheckConsistencyReq getCheckConsistencyReq() {
    return this.check_consistency_req;
  }

  public TAgentTaskRequest setCheckConsistencyReq(@org.apache.thrift.annotation.Nullable TCheckConsistencyReq check_consistency_req) {
    this.check_consistency_req = check_consistency_req;
    return this;
  }

  public void unsetCheckConsistencyReq() {
    this.check_consistency_req = null;
  }

  /** Returns true if field check_consistency_req is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckConsistencyReq() {
    return this.check_consistency_req != null;
  }

  public void setCheckConsistencyReqIsSet(boolean value) {
    if (!value) {
      this.check_consistency_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TUploadReq getUploadReq() {
    return this.upload_req;
  }

  public TAgentTaskRequest setUploadReq(@org.apache.thrift.annotation.Nullable TUploadReq upload_req) {
    this.upload_req = upload_req;
    return this;
  }

  public void unsetUploadReq() {
    this.upload_req = null;
  }

  /** Returns true if field upload_req is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadReq() {
    return this.upload_req != null;
  }

  public void setUploadReqIsSet(boolean value) {
    if (!value) {
      this.upload_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TDownloadReq getDownloadReq() {
    return this.download_req;
  }

  public TAgentTaskRequest setDownloadReq(@org.apache.thrift.annotation.Nullable TDownloadReq download_req) {
    this.download_req = download_req;
    return this;
  }

  public void unsetDownloadReq() {
    this.download_req = null;
  }

  /** Returns true if field download_req is set (has been assigned a value) and false otherwise */
  public boolean isSetDownloadReq() {
    return this.download_req != null;
  }

  public void setDownloadReqIsSet(boolean value) {
    if (!value) {
      this.download_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TSnapshotRequest getSnapshotReq() {
    return this.snapshot_req;
  }

  public TAgentTaskRequest setSnapshotReq(@org.apache.thrift.annotation.Nullable TSnapshotRequest snapshot_req) {
    this.snapshot_req = snapshot_req;
    return this;
  }

  public void unsetSnapshotReq() {
    this.snapshot_req = null;
  }

  /** Returns true if field snapshot_req is set (has been assigned a value) and false otherwise */
  public boolean isSetSnapshotReq() {
    return this.snapshot_req != null;
  }

  public void setSnapshotReqIsSet(boolean value) {
    if (!value) {
      this.snapshot_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TReleaseSnapshotRequest getReleaseSnapshotReq() {
    return this.release_snapshot_req;
  }

  public TAgentTaskRequest setReleaseSnapshotReq(@org.apache.thrift.annotation.Nullable TReleaseSnapshotRequest release_snapshot_req) {
    this.release_snapshot_req = release_snapshot_req;
    return this;
  }

  public void unsetReleaseSnapshotReq() {
    this.release_snapshot_req = null;
  }

  /** Returns true if field release_snapshot_req is set (has been assigned a value) and false otherwise */
  public boolean isSetReleaseSnapshotReq() {
    return this.release_snapshot_req != null;
  }

  public void setReleaseSnapshotReqIsSet(boolean value) {
    if (!value) {
      this.release_snapshot_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TClearRemoteFileReq getClearRemoteFileReq() {
    return this.clear_remote_file_req;
  }

  public TAgentTaskRequest setClearRemoteFileReq(@org.apache.thrift.annotation.Nullable TClearRemoteFileReq clear_remote_file_req) {
    this.clear_remote_file_req = clear_remote_file_req;
    return this;
  }

  public void unsetClearRemoteFileReq() {
    this.clear_remote_file_req = null;
  }

  /** Returns true if field clear_remote_file_req is set (has been assigned a value) and false otherwise */
  public boolean isSetClearRemoteFileReq() {
    return this.clear_remote_file_req != null;
  }

  public void setClearRemoteFileReqIsSet(boolean value) {
    if (!value) {
      this.clear_remote_file_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TPublishVersionRequest getPublishVersionReq() {
    return this.publish_version_req;
  }

  public TAgentTaskRequest setPublishVersionReq(@org.apache.thrift.annotation.Nullable TPublishVersionRequest publish_version_req) {
    this.publish_version_req = publish_version_req;
    return this;
  }

  public void unsetPublishVersionReq() {
    this.publish_version_req = null;
  }

  /** Returns true if field publish_version_req is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishVersionReq() {
    return this.publish_version_req != null;
  }

  public void setPublishVersionReqIsSet(boolean value) {
    if (!value) {
      this.publish_version_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TClearAlterTaskRequest getClearAlterTaskReq() {
    return this.clear_alter_task_req;
  }

  public TAgentTaskRequest setClearAlterTaskReq(@org.apache.thrift.annotation.Nullable TClearAlterTaskRequest clear_alter_task_req) {
    this.clear_alter_task_req = clear_alter_task_req;
    return this;
  }

  public void unsetClearAlterTaskReq() {
    this.clear_alter_task_req = null;
  }

  /** Returns true if field clear_alter_task_req is set (has been assigned a value) and false otherwise */
  public boolean isSetClearAlterTaskReq() {
    return this.clear_alter_task_req != null;
  }

  public void setClearAlterTaskReqIsSet(boolean value) {
    if (!value) {
      this.clear_alter_task_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TClearTransactionTaskRequest getClearTransactionTaskReq() {
    return this.clear_transaction_task_req;
  }

  public TAgentTaskRequest setClearTransactionTaskReq(@org.apache.thrift.annotation.Nullable TClearTransactionTaskRequest clear_transaction_task_req) {
    this.clear_transaction_task_req = clear_transaction_task_req;
    return this;
  }

  public void unsetClearTransactionTaskReq() {
    this.clear_transaction_task_req = null;
  }

  /** Returns true if field clear_transaction_task_req is set (has been assigned a value) and false otherwise */
  public boolean isSetClearTransactionTaskReq() {
    return this.clear_transaction_task_req != null;
  }

  public void setClearTransactionTaskReqIsSet(boolean value) {
    if (!value) {
      this.clear_transaction_task_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TMoveDirReq getMoveDirReq() {
    return this.move_dir_req;
  }

  public TAgentTaskRequest setMoveDirReq(@org.apache.thrift.annotation.Nullable TMoveDirReq move_dir_req) {
    this.move_dir_req = move_dir_req;
    return this;
  }

  public void unsetMoveDirReq() {
    this.move_dir_req = null;
  }

  /** Returns true if field move_dir_req is set (has been assigned a value) and false otherwise */
  public boolean isSetMoveDirReq() {
    return this.move_dir_req != null;
  }

  public void setMoveDirReqIsSet(boolean value) {
    if (!value) {
      this.move_dir_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TRecoverTabletReq getRecoverTabletReq() {
    return this.recover_tablet_req;
  }

  public TAgentTaskRequest setRecoverTabletReq(@org.apache.thrift.annotation.Nullable TRecoverTabletReq recover_tablet_req) {
    this.recover_tablet_req = recover_tablet_req;
    return this;
  }

  public void unsetRecoverTabletReq() {
    this.recover_tablet_req = null;
  }

  /** Returns true if field recover_tablet_req is set (has been assigned a value) and false otherwise */
  public boolean isSetRecoverTabletReq() {
    return this.recover_tablet_req != null;
  }

  public void setRecoverTabletReqIsSet(boolean value) {
    if (!value) {
      this.recover_tablet_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TAlterTabletReqV2 getAlterTabletReqV2() {
    return this.alter_tablet_req_v2;
  }

  public TAgentTaskRequest setAlterTabletReqV2(@org.apache.thrift.annotation.Nullable TAlterTabletReqV2 alter_tablet_req_v2) {
    this.alter_tablet_req_v2 = alter_tablet_req_v2;
    return this;
  }

  public void unsetAlterTabletReqV2() {
    this.alter_tablet_req_v2 = null;
  }

  /** Returns true if field alter_tablet_req_v2 is set (has been assigned a value) and false otherwise */
  public boolean isSetAlterTabletReqV2() {
    return this.alter_tablet_req_v2 != null;
  }

  public void setAlterTabletReqV2IsSet(boolean value) {
    if (!value) {
      this.alter_tablet_req_v2 = null;
    }
  }

  public long getRecvTime() {
    return this.recv_time;
  }

  public TAgentTaskRequest setRecvTime(long recv_time) {
    this.recv_time = recv_time;
    setRecvTimeIsSet(true);
    return this;
  }

  public void unsetRecvTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECV_TIME_ISSET_ID);
  }

  /** Returns true if field recv_time is set (has been assigned a value) and false otherwise */
  public boolean isSetRecvTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECV_TIME_ISSET_ID);
  }

  public void setRecvTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECV_TIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TUpdateTabletMetaInfoReq getUpdateTabletMetaInfoReq() {
    return this.update_tablet_meta_info_req;
  }

  public TAgentTaskRequest setUpdateTabletMetaInfoReq(@org.apache.thrift.annotation.Nullable TUpdateTabletMetaInfoReq update_tablet_meta_info_req) {
    this.update_tablet_meta_info_req = update_tablet_meta_info_req;
    return this;
  }

  public void unsetUpdateTabletMetaInfoReq() {
    this.update_tablet_meta_info_req = null;
  }

  /** Returns true if field update_tablet_meta_info_req is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTabletMetaInfoReq() {
    return this.update_tablet_meta_info_req != null;
  }

  public void setUpdateTabletMetaInfoReqIsSet(boolean value) {
    if (!value) {
      this.update_tablet_meta_info_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TCompactionReq getCompactionReq() {
    return this.compaction_req;
  }

  public TAgentTaskRequest setCompactionReq(@org.apache.thrift.annotation.Nullable TCompactionReq compaction_req) {
    this.compaction_req = compaction_req;
    return this;
  }

  public void unsetCompactionReq() {
    this.compaction_req = null;
  }

  /** Returns true if field compaction_req is set (has been assigned a value) and false otherwise */
  public boolean isSetCompactionReq() {
    return this.compaction_req != null;
  }

  public void setCompactionReqIsSet(boolean value) {
    if (!value) {
      this.compaction_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TStorageMigrationReqV2 getStorageMigrationReqV2() {
    return this.storage_migration_req_v2;
  }

  public TAgentTaskRequest setStorageMigrationReqV2(@org.apache.thrift.annotation.Nullable TStorageMigrationReqV2 storage_migration_req_v2) {
    this.storage_migration_req_v2 = storage_migration_req_v2;
    return this;
  }

  public void unsetStorageMigrationReqV2() {
    this.storage_migration_req_v2 = null;
  }

  /** Returns true if field storage_migration_req_v2 is set (has been assigned a value) and false otherwise */
  public boolean isSetStorageMigrationReqV2() {
    return this.storage_migration_req_v2 != null;
  }

  public void setStorageMigrationReqV2IsSet(boolean value) {
    if (!value) {
      this.storage_migration_req_v2 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TPushCooldownConfReq getPushCooldownConf() {
    return this.push_cooldown_conf;
  }

  public TAgentTaskRequest setPushCooldownConf(@org.apache.thrift.annotation.Nullable TPushCooldownConfReq push_cooldown_conf) {
    this.push_cooldown_conf = push_cooldown_conf;
    return this;
  }

  public void unsetPushCooldownConf() {
    this.push_cooldown_conf = null;
  }

  /** Returns true if field push_cooldown_conf is set (has been assigned a value) and false otherwise */
  public boolean isSetPushCooldownConf() {
    return this.push_cooldown_conf != null;
  }

  public void setPushCooldownConfIsSet(boolean value) {
    if (!value) {
      this.push_cooldown_conf = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TPushStoragePolicyReq getPushStoragePolicyReq() {
    return this.push_storage_policy_req;
  }

  public TAgentTaskRequest setPushStoragePolicyReq(@org.apache.thrift.annotation.Nullable TPushStoragePolicyReq push_storage_policy_req) {
    this.push_storage_policy_req = push_storage_policy_req;
    return this;
  }

  public void unsetPushStoragePolicyReq() {
    this.push_storage_policy_req = null;
  }

  /** Returns true if field push_storage_policy_req is set (has been assigned a value) and false otherwise */
  public boolean isSetPushStoragePolicyReq() {
    return this.push_storage_policy_req != null;
  }

  public void setPushStoragePolicyReqIsSet(boolean value) {
    if (!value) {
      this.push_storage_policy_req = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TAlterInvertedIndexReq getAlterInvertedIndexReq() {
    return this.alter_inverted_index_req;
  }

  public TAgentTaskRequest setAlterInvertedIndexReq(@org.apache.thrift.annotation.Nullable TAlterInvertedIndexReq alter_inverted_index_req) {
    this.alter_inverted_index_req = alter_inverted_index_req;
    return this;
  }

  public void unsetAlterInvertedIndexReq() {
    this.alter_inverted_index_req = null;
  }

  /** Returns true if field alter_inverted_index_req is set (has been assigned a value) and false otherwise */
  public boolean isSetAlterInvertedIndexReq() {
    return this.alter_inverted_index_req != null;
  }

  public void setAlterInvertedIndexReqIsSet(boolean value) {
    if (!value) {
      this.alter_inverted_index_req = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case PROTOCOL_VERSION:
      if (value == null) {
        unsetProtocolVersion();
      } else {
        setProtocolVersion((TAgentServiceVersion)value);
      }
      break;

    case TASK_TYPE:
      if (value == null) {
        unsetTaskType();
      } else {
        setTaskType((org.apache.doris.thrift.TTaskType)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((java.lang.Long)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((org.apache.doris.thrift.TPriority)value);
      }
      break;

    case CREATE_TABLET_REQ:
      if (value == null) {
        unsetCreateTabletReq();
      } else {
        setCreateTabletReq((TCreateTabletReq)value);
      }
      break;

    case DROP_TABLET_REQ:
      if (value == null) {
        unsetDropTabletReq();
      } else {
        setDropTabletReq((TDropTabletReq)value);
      }
      break;

    case ALTER_TABLET_REQ:
      if (value == null) {
        unsetAlterTabletReq();
      } else {
        setAlterTabletReq((TAlterTabletReq)value);
      }
      break;

    case CLONE_REQ:
      if (value == null) {
        unsetCloneReq();
      } else {
        setCloneReq((TCloneReq)value);
      }
      break;

    case PUSH_REQ:
      if (value == null) {
        unsetPushReq();
      } else {
        setPushReq((TPushReq)value);
      }
      break;

    case CANCEL_DELETE_DATA_REQ:
      if (value == null) {
        unsetCancelDeleteDataReq();
      } else {
        setCancelDeleteDataReq((TCancelDeleteDataReq)value);
      }
      break;

    case RESOURCE_INFO:
      if (value == null) {
        unsetResourceInfo();
      } else {
        setResourceInfo((org.apache.doris.thrift.TResourceInfo)value);
      }
      break;

    case STORAGE_MEDIUM_MIGRATE_REQ:
      if (value == null) {
        unsetStorageMediumMigrateReq();
      } else {
        setStorageMediumMigrateReq((TStorageMediumMigrateReq)value);
      }
      break;

    case CHECK_CONSISTENCY_REQ:
      if (value == null) {
        unsetCheckConsistencyReq();
      } else {
        setCheckConsistencyReq((TCheckConsistencyReq)value);
      }
      break;

    case UPLOAD_REQ:
      if (value == null) {
        unsetUploadReq();
      } else {
        setUploadReq((TUploadReq)value);
      }
      break;

    case DOWNLOAD_REQ:
      if (value == null) {
        unsetDownloadReq();
      } else {
        setDownloadReq((TDownloadReq)value);
      }
      break;

    case SNAPSHOT_REQ:
      if (value == null) {
        unsetSnapshotReq();
      } else {
        setSnapshotReq((TSnapshotRequest)value);
      }
      break;

    case RELEASE_SNAPSHOT_REQ:
      if (value == null) {
        unsetReleaseSnapshotReq();
      } else {
        setReleaseSnapshotReq((TReleaseSnapshotRequest)value);
      }
      break;

    case CLEAR_REMOTE_FILE_REQ:
      if (value == null) {
        unsetClearRemoteFileReq();
      } else {
        setClearRemoteFileReq((TClearRemoteFileReq)value);
      }
      break;

    case PUBLISH_VERSION_REQ:
      if (value == null) {
        unsetPublishVersionReq();
      } else {
        setPublishVersionReq((TPublishVersionRequest)value);
      }
      break;

    case CLEAR_ALTER_TASK_REQ:
      if (value == null) {
        unsetClearAlterTaskReq();
      } else {
        setClearAlterTaskReq((TClearAlterTaskRequest)value);
      }
      break;

    case CLEAR_TRANSACTION_TASK_REQ:
      if (value == null) {
        unsetClearTransactionTaskReq();
      } else {
        setClearTransactionTaskReq((TClearTransactionTaskRequest)value);
      }
      break;

    case MOVE_DIR_REQ:
      if (value == null) {
        unsetMoveDirReq();
      } else {
        setMoveDirReq((TMoveDirReq)value);
      }
      break;

    case RECOVER_TABLET_REQ:
      if (value == null) {
        unsetRecoverTabletReq();
      } else {
        setRecoverTabletReq((TRecoverTabletReq)value);
      }
      break;

    case ALTER_TABLET_REQ_V2:
      if (value == null) {
        unsetAlterTabletReqV2();
      } else {
        setAlterTabletReqV2((TAlterTabletReqV2)value);
      }
      break;

    case RECV_TIME:
      if (value == null) {
        unsetRecvTime();
      } else {
        setRecvTime((java.lang.Long)value);
      }
      break;

    case UPDATE_TABLET_META_INFO_REQ:
      if (value == null) {
        unsetUpdateTabletMetaInfoReq();
      } else {
        setUpdateTabletMetaInfoReq((TUpdateTabletMetaInfoReq)value);
      }
      break;

    case COMPACTION_REQ:
      if (value == null) {
        unsetCompactionReq();
      } else {
        setCompactionReq((TCompactionReq)value);
      }
      break;

    case STORAGE_MIGRATION_REQ_V2:
      if (value == null) {
        unsetStorageMigrationReqV2();
      } else {
        setStorageMigrationReqV2((TStorageMigrationReqV2)value);
      }
      break;

    case PUSH_COOLDOWN_CONF:
      if (value == null) {
        unsetPushCooldownConf();
      } else {
        setPushCooldownConf((TPushCooldownConfReq)value);
      }
      break;

    case PUSH_STORAGE_POLICY_REQ:
      if (value == null) {
        unsetPushStoragePolicyReq();
      } else {
        setPushStoragePolicyReq((TPushStoragePolicyReq)value);
      }
      break;

    case ALTER_INVERTED_INDEX_REQ:
      if (value == null) {
        unsetAlterInvertedIndexReq();
      } else {
        setAlterInvertedIndexReq((TAlterInvertedIndexReq)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL_VERSION:
      return getProtocolVersion();

    case TASK_TYPE:
      return getTaskType();

    case SIGNATURE:
      return getSignature();

    case PRIORITY:
      return getPriority();

    case CREATE_TABLET_REQ:
      return getCreateTabletReq();

    case DROP_TABLET_REQ:
      return getDropTabletReq();

    case ALTER_TABLET_REQ:
      return getAlterTabletReq();

    case CLONE_REQ:
      return getCloneReq();

    case PUSH_REQ:
      return getPushReq();

    case CANCEL_DELETE_DATA_REQ:
      return getCancelDeleteDataReq();

    case RESOURCE_INFO:
      return getResourceInfo();

    case STORAGE_MEDIUM_MIGRATE_REQ:
      return getStorageMediumMigrateReq();

    case CHECK_CONSISTENCY_REQ:
      return getCheckConsistencyReq();

    case UPLOAD_REQ:
      return getUploadReq();

    case DOWNLOAD_REQ:
      return getDownloadReq();

    case SNAPSHOT_REQ:
      return getSnapshotReq();

    case RELEASE_SNAPSHOT_REQ:
      return getReleaseSnapshotReq();

    case CLEAR_REMOTE_FILE_REQ:
      return getClearRemoteFileReq();

    case PUBLISH_VERSION_REQ:
      return getPublishVersionReq();

    case CLEAR_ALTER_TASK_REQ:
      return getClearAlterTaskReq();

    case CLEAR_TRANSACTION_TASK_REQ:
      return getClearTransactionTaskReq();

    case MOVE_DIR_REQ:
      return getMoveDirReq();

    case RECOVER_TABLET_REQ:
      return getRecoverTabletReq();

    case ALTER_TABLET_REQ_V2:
      return getAlterTabletReqV2();

    case RECV_TIME:
      return getRecvTime();

    case UPDATE_TABLET_META_INFO_REQ:
      return getUpdateTabletMetaInfoReq();

    case COMPACTION_REQ:
      return getCompactionReq();

    case STORAGE_MIGRATION_REQ_V2:
      return getStorageMigrationReqV2();

    case PUSH_COOLDOWN_CONF:
      return getPushCooldownConf();

    case PUSH_STORAGE_POLICY_REQ:
      return getPushStoragePolicyReq();

    case ALTER_INVERTED_INDEX_REQ:
      return getAlterInvertedIndexReq();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL_VERSION:
      return isSetProtocolVersion();
    case TASK_TYPE:
      return isSetTaskType();
    case SIGNATURE:
      return isSetSignature();
    case PRIORITY:
      return isSetPriority();
    case CREATE_TABLET_REQ:
      return isSetCreateTabletReq();
    case DROP_TABLET_REQ:
      return isSetDropTabletReq();
    case ALTER_TABLET_REQ:
      return isSetAlterTabletReq();
    case CLONE_REQ:
      return isSetCloneReq();
    case PUSH_REQ:
      return isSetPushReq();
    case CANCEL_DELETE_DATA_REQ:
      return isSetCancelDeleteDataReq();
    case RESOURCE_INFO:
      return isSetResourceInfo();
    case STORAGE_MEDIUM_MIGRATE_REQ:
      return isSetStorageMediumMigrateReq();
    case CHECK_CONSISTENCY_REQ:
      return isSetCheckConsistencyReq();
    case UPLOAD_REQ:
      return isSetUploadReq();
    case DOWNLOAD_REQ:
      return isSetDownloadReq();
    case SNAPSHOT_REQ:
      return isSetSnapshotReq();
    case RELEASE_SNAPSHOT_REQ:
      return isSetReleaseSnapshotReq();
    case CLEAR_REMOTE_FILE_REQ:
      return isSetClearRemoteFileReq();
    case PUBLISH_VERSION_REQ:
      return isSetPublishVersionReq();
    case CLEAR_ALTER_TASK_REQ:
      return isSetClearAlterTaskReq();
    case CLEAR_TRANSACTION_TASK_REQ:
      return isSetClearTransactionTaskReq();
    case MOVE_DIR_REQ:
      return isSetMoveDirReq();
    case RECOVER_TABLET_REQ:
      return isSetRecoverTabletReq();
    case ALTER_TABLET_REQ_V2:
      return isSetAlterTabletReqV2();
    case RECV_TIME:
      return isSetRecvTime();
    case UPDATE_TABLET_META_INFO_REQ:
      return isSetUpdateTabletMetaInfoReq();
    case COMPACTION_REQ:
      return isSetCompactionReq();
    case STORAGE_MIGRATION_REQ_V2:
      return isSetStorageMigrationReqV2();
    case PUSH_COOLDOWN_CONF:
      return isSetPushCooldownConf();
    case PUSH_STORAGE_POLICY_REQ:
      return isSetPushStoragePolicyReq();
    case ALTER_INVERTED_INDEX_REQ:
      return isSetAlterInvertedIndexReq();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TAgentTaskRequest)
      return this.equals((TAgentTaskRequest)that);
    return false;
  }

  public boolean equals(TAgentTaskRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_protocol_version = true && this.isSetProtocolVersion();
    boolean that_present_protocol_version = true && that.isSetProtocolVersion();
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (!this.protocol_version.equals(that.protocol_version))
        return false;
    }

    boolean this_present_task_type = true && this.isSetTaskType();
    boolean that_present_task_type = true && that.isSetTaskType();
    if (this_present_task_type || that_present_task_type) {
      if (!(this_present_task_type && that_present_task_type))
        return false;
      if (!this.task_type.equals(that.task_type))
        return false;
    }

    boolean this_present_signature = true;
    boolean that_present_signature = true;
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (this.signature != that.signature)
        return false;
    }

    boolean this_present_priority = true && this.isSetPriority();
    boolean that_present_priority = true && that.isSetPriority();
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (!this.priority.equals(that.priority))
        return false;
    }

    boolean this_present_create_tablet_req = true && this.isSetCreateTabletReq();
    boolean that_present_create_tablet_req = true && that.isSetCreateTabletReq();
    if (this_present_create_tablet_req || that_present_create_tablet_req) {
      if (!(this_present_create_tablet_req && that_present_create_tablet_req))
        return false;
      if (!this.create_tablet_req.equals(that.create_tablet_req))
        return false;
    }

    boolean this_present_drop_tablet_req = true && this.isSetDropTabletReq();
    boolean that_present_drop_tablet_req = true && that.isSetDropTabletReq();
    if (this_present_drop_tablet_req || that_present_drop_tablet_req) {
      if (!(this_present_drop_tablet_req && that_present_drop_tablet_req))
        return false;
      if (!this.drop_tablet_req.equals(that.drop_tablet_req))
        return false;
    }

    boolean this_present_alter_tablet_req = true && this.isSetAlterTabletReq();
    boolean that_present_alter_tablet_req = true && that.isSetAlterTabletReq();
    if (this_present_alter_tablet_req || that_present_alter_tablet_req) {
      if (!(this_present_alter_tablet_req && that_present_alter_tablet_req))
        return false;
      if (!this.alter_tablet_req.equals(that.alter_tablet_req))
        return false;
    }

    boolean this_present_clone_req = true && this.isSetCloneReq();
    boolean that_present_clone_req = true && that.isSetCloneReq();
    if (this_present_clone_req || that_present_clone_req) {
      if (!(this_present_clone_req && that_present_clone_req))
        return false;
      if (!this.clone_req.equals(that.clone_req))
        return false;
    }

    boolean this_present_push_req = true && this.isSetPushReq();
    boolean that_present_push_req = true && that.isSetPushReq();
    if (this_present_push_req || that_present_push_req) {
      if (!(this_present_push_req && that_present_push_req))
        return false;
      if (!this.push_req.equals(that.push_req))
        return false;
    }

    boolean this_present_cancel_delete_data_req = true && this.isSetCancelDeleteDataReq();
    boolean that_present_cancel_delete_data_req = true && that.isSetCancelDeleteDataReq();
    if (this_present_cancel_delete_data_req || that_present_cancel_delete_data_req) {
      if (!(this_present_cancel_delete_data_req && that_present_cancel_delete_data_req))
        return false;
      if (!this.cancel_delete_data_req.equals(that.cancel_delete_data_req))
        return false;
    }

    boolean this_present_resource_info = true && this.isSetResourceInfo();
    boolean that_present_resource_info = true && that.isSetResourceInfo();
    if (this_present_resource_info || that_present_resource_info) {
      if (!(this_present_resource_info && that_present_resource_info))
        return false;
      if (!this.resource_info.equals(that.resource_info))
        return false;
    }

    boolean this_present_storage_medium_migrate_req = true && this.isSetStorageMediumMigrateReq();
    boolean that_present_storage_medium_migrate_req = true && that.isSetStorageMediumMigrateReq();
    if (this_present_storage_medium_migrate_req || that_present_storage_medium_migrate_req) {
      if (!(this_present_storage_medium_migrate_req && that_present_storage_medium_migrate_req))
        return false;
      if (!this.storage_medium_migrate_req.equals(that.storage_medium_migrate_req))
        return false;
    }

    boolean this_present_check_consistency_req = true && this.isSetCheckConsistencyReq();
    boolean that_present_check_consistency_req = true && that.isSetCheckConsistencyReq();
    if (this_present_check_consistency_req || that_present_check_consistency_req) {
      if (!(this_present_check_consistency_req && that_present_check_consistency_req))
        return false;
      if (!this.check_consistency_req.equals(that.check_consistency_req))
        return false;
    }

    boolean this_present_upload_req = true && this.isSetUploadReq();
    boolean that_present_upload_req = true && that.isSetUploadReq();
    if (this_present_upload_req || that_present_upload_req) {
      if (!(this_present_upload_req && that_present_upload_req))
        return false;
      if (!this.upload_req.equals(that.upload_req))
        return false;
    }

    boolean this_present_download_req = true && this.isSetDownloadReq();
    boolean that_present_download_req = true && that.isSetDownloadReq();
    if (this_present_download_req || that_present_download_req) {
      if (!(this_present_download_req && that_present_download_req))
        return false;
      if (!this.download_req.equals(that.download_req))
        return false;
    }

    boolean this_present_snapshot_req = true && this.isSetSnapshotReq();
    boolean that_present_snapshot_req = true && that.isSetSnapshotReq();
    if (this_present_snapshot_req || that_present_snapshot_req) {
      if (!(this_present_snapshot_req && that_present_snapshot_req))
        return false;
      if (!this.snapshot_req.equals(that.snapshot_req))
        return false;
    }

    boolean this_present_release_snapshot_req = true && this.isSetReleaseSnapshotReq();
    boolean that_present_release_snapshot_req = true && that.isSetReleaseSnapshotReq();
    if (this_present_release_snapshot_req || that_present_release_snapshot_req) {
      if (!(this_present_release_snapshot_req && that_present_release_snapshot_req))
        return false;
      if (!this.release_snapshot_req.equals(that.release_snapshot_req))
        return false;
    }

    boolean this_present_clear_remote_file_req = true && this.isSetClearRemoteFileReq();
    boolean that_present_clear_remote_file_req = true && that.isSetClearRemoteFileReq();
    if (this_present_clear_remote_file_req || that_present_clear_remote_file_req) {
      if (!(this_present_clear_remote_file_req && that_present_clear_remote_file_req))
        return false;
      if (!this.clear_remote_file_req.equals(that.clear_remote_file_req))
        return false;
    }

    boolean this_present_publish_version_req = true && this.isSetPublishVersionReq();
    boolean that_present_publish_version_req = true && that.isSetPublishVersionReq();
    if (this_present_publish_version_req || that_present_publish_version_req) {
      if (!(this_present_publish_version_req && that_present_publish_version_req))
        return false;
      if (!this.publish_version_req.equals(that.publish_version_req))
        return false;
    }

    boolean this_present_clear_alter_task_req = true && this.isSetClearAlterTaskReq();
    boolean that_present_clear_alter_task_req = true && that.isSetClearAlterTaskReq();
    if (this_present_clear_alter_task_req || that_present_clear_alter_task_req) {
      if (!(this_present_clear_alter_task_req && that_present_clear_alter_task_req))
        return false;
      if (!this.clear_alter_task_req.equals(that.clear_alter_task_req))
        return false;
    }

    boolean this_present_clear_transaction_task_req = true && this.isSetClearTransactionTaskReq();
    boolean that_present_clear_transaction_task_req = true && that.isSetClearTransactionTaskReq();
    if (this_present_clear_transaction_task_req || that_present_clear_transaction_task_req) {
      if (!(this_present_clear_transaction_task_req && that_present_clear_transaction_task_req))
        return false;
      if (!this.clear_transaction_task_req.equals(that.clear_transaction_task_req))
        return false;
    }

    boolean this_present_move_dir_req = true && this.isSetMoveDirReq();
    boolean that_present_move_dir_req = true && that.isSetMoveDirReq();
    if (this_present_move_dir_req || that_present_move_dir_req) {
      if (!(this_present_move_dir_req && that_present_move_dir_req))
        return false;
      if (!this.move_dir_req.equals(that.move_dir_req))
        return false;
    }

    boolean this_present_recover_tablet_req = true && this.isSetRecoverTabletReq();
    boolean that_present_recover_tablet_req = true && that.isSetRecoverTabletReq();
    if (this_present_recover_tablet_req || that_present_recover_tablet_req) {
      if (!(this_present_recover_tablet_req && that_present_recover_tablet_req))
        return false;
      if (!this.recover_tablet_req.equals(that.recover_tablet_req))
        return false;
    }

    boolean this_present_alter_tablet_req_v2 = true && this.isSetAlterTabletReqV2();
    boolean that_present_alter_tablet_req_v2 = true && that.isSetAlterTabletReqV2();
    if (this_present_alter_tablet_req_v2 || that_present_alter_tablet_req_v2) {
      if (!(this_present_alter_tablet_req_v2 && that_present_alter_tablet_req_v2))
        return false;
      if (!this.alter_tablet_req_v2.equals(that.alter_tablet_req_v2))
        return false;
    }

    boolean this_present_recv_time = true && this.isSetRecvTime();
    boolean that_present_recv_time = true && that.isSetRecvTime();
    if (this_present_recv_time || that_present_recv_time) {
      if (!(this_present_recv_time && that_present_recv_time))
        return false;
      if (this.recv_time != that.recv_time)
        return false;
    }

    boolean this_present_update_tablet_meta_info_req = true && this.isSetUpdateTabletMetaInfoReq();
    boolean that_present_update_tablet_meta_info_req = true && that.isSetUpdateTabletMetaInfoReq();
    if (this_present_update_tablet_meta_info_req || that_present_update_tablet_meta_info_req) {
      if (!(this_present_update_tablet_meta_info_req && that_present_update_tablet_meta_info_req))
        return false;
      if (!this.update_tablet_meta_info_req.equals(that.update_tablet_meta_info_req))
        return false;
    }

    boolean this_present_compaction_req = true && this.isSetCompactionReq();
    boolean that_present_compaction_req = true && that.isSetCompactionReq();
    if (this_present_compaction_req || that_present_compaction_req) {
      if (!(this_present_compaction_req && that_present_compaction_req))
        return false;
      if (!this.compaction_req.equals(that.compaction_req))
        return false;
    }

    boolean this_present_storage_migration_req_v2 = true && this.isSetStorageMigrationReqV2();
    boolean that_present_storage_migration_req_v2 = true && that.isSetStorageMigrationReqV2();
    if (this_present_storage_migration_req_v2 || that_present_storage_migration_req_v2) {
      if (!(this_present_storage_migration_req_v2 && that_present_storage_migration_req_v2))
        return false;
      if (!this.storage_migration_req_v2.equals(that.storage_migration_req_v2))
        return false;
    }

    boolean this_present_push_cooldown_conf = true && this.isSetPushCooldownConf();
    boolean that_present_push_cooldown_conf = true && that.isSetPushCooldownConf();
    if (this_present_push_cooldown_conf || that_present_push_cooldown_conf) {
      if (!(this_present_push_cooldown_conf && that_present_push_cooldown_conf))
        return false;
      if (!this.push_cooldown_conf.equals(that.push_cooldown_conf))
        return false;
    }

    boolean this_present_push_storage_policy_req = true && this.isSetPushStoragePolicyReq();
    boolean that_present_push_storage_policy_req = true && that.isSetPushStoragePolicyReq();
    if (this_present_push_storage_policy_req || that_present_push_storage_policy_req) {
      if (!(this_present_push_storage_policy_req && that_present_push_storage_policy_req))
        return false;
      if (!this.push_storage_policy_req.equals(that.push_storage_policy_req))
        return false;
    }

    boolean this_present_alter_inverted_index_req = true && this.isSetAlterInvertedIndexReq();
    boolean that_present_alter_inverted_index_req = true && that.isSetAlterInvertedIndexReq();
    if (this_present_alter_inverted_index_req || that_present_alter_inverted_index_req) {
      if (!(this_present_alter_inverted_index_req && that_present_alter_inverted_index_req))
        return false;
      if (!this.alter_inverted_index_req.equals(that.alter_inverted_index_req))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetProtocolVersion()) ? 131071 : 524287);
    if (isSetProtocolVersion())
      hashCode = hashCode * 8191 + protocol_version.getValue();

    hashCode = hashCode * 8191 + ((isSetTaskType()) ? 131071 : 524287);
    if (isSetTaskType())
      hashCode = hashCode * 8191 + task_type.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(signature);

    hashCode = hashCode * 8191 + ((isSetPriority()) ? 131071 : 524287);
    if (isSetPriority())
      hashCode = hashCode * 8191 + priority.getValue();

    hashCode = hashCode * 8191 + ((isSetCreateTabletReq()) ? 131071 : 524287);
    if (isSetCreateTabletReq())
      hashCode = hashCode * 8191 + create_tablet_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetDropTabletReq()) ? 131071 : 524287);
    if (isSetDropTabletReq())
      hashCode = hashCode * 8191 + drop_tablet_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetAlterTabletReq()) ? 131071 : 524287);
    if (isSetAlterTabletReq())
      hashCode = hashCode * 8191 + alter_tablet_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetCloneReq()) ? 131071 : 524287);
    if (isSetCloneReq())
      hashCode = hashCode * 8191 + clone_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetPushReq()) ? 131071 : 524287);
    if (isSetPushReq())
      hashCode = hashCode * 8191 + push_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetCancelDeleteDataReq()) ? 131071 : 524287);
    if (isSetCancelDeleteDataReq())
      hashCode = hashCode * 8191 + cancel_delete_data_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetResourceInfo()) ? 131071 : 524287);
    if (isSetResourceInfo())
      hashCode = hashCode * 8191 + resource_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetStorageMediumMigrateReq()) ? 131071 : 524287);
    if (isSetStorageMediumMigrateReq())
      hashCode = hashCode * 8191 + storage_medium_migrate_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetCheckConsistencyReq()) ? 131071 : 524287);
    if (isSetCheckConsistencyReq())
      hashCode = hashCode * 8191 + check_consistency_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetUploadReq()) ? 131071 : 524287);
    if (isSetUploadReq())
      hashCode = hashCode * 8191 + upload_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetDownloadReq()) ? 131071 : 524287);
    if (isSetDownloadReq())
      hashCode = hashCode * 8191 + download_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetSnapshotReq()) ? 131071 : 524287);
    if (isSetSnapshotReq())
      hashCode = hashCode * 8191 + snapshot_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetReleaseSnapshotReq()) ? 131071 : 524287);
    if (isSetReleaseSnapshotReq())
      hashCode = hashCode * 8191 + release_snapshot_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetClearRemoteFileReq()) ? 131071 : 524287);
    if (isSetClearRemoteFileReq())
      hashCode = hashCode * 8191 + clear_remote_file_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetPublishVersionReq()) ? 131071 : 524287);
    if (isSetPublishVersionReq())
      hashCode = hashCode * 8191 + publish_version_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetClearAlterTaskReq()) ? 131071 : 524287);
    if (isSetClearAlterTaskReq())
      hashCode = hashCode * 8191 + clear_alter_task_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetClearTransactionTaskReq()) ? 131071 : 524287);
    if (isSetClearTransactionTaskReq())
      hashCode = hashCode * 8191 + clear_transaction_task_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetMoveDirReq()) ? 131071 : 524287);
    if (isSetMoveDirReq())
      hashCode = hashCode * 8191 + move_dir_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetRecoverTabletReq()) ? 131071 : 524287);
    if (isSetRecoverTabletReq())
      hashCode = hashCode * 8191 + recover_tablet_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetAlterTabletReqV2()) ? 131071 : 524287);
    if (isSetAlterTabletReqV2())
      hashCode = hashCode * 8191 + alter_tablet_req_v2.hashCode();

    hashCode = hashCode * 8191 + ((isSetRecvTime()) ? 131071 : 524287);
    if (isSetRecvTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(recv_time);

    hashCode = hashCode * 8191 + ((isSetUpdateTabletMetaInfoReq()) ? 131071 : 524287);
    if (isSetUpdateTabletMetaInfoReq())
      hashCode = hashCode * 8191 + update_tablet_meta_info_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompactionReq()) ? 131071 : 524287);
    if (isSetCompactionReq())
      hashCode = hashCode * 8191 + compaction_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetStorageMigrationReqV2()) ? 131071 : 524287);
    if (isSetStorageMigrationReqV2())
      hashCode = hashCode * 8191 + storage_migration_req_v2.hashCode();

    hashCode = hashCode * 8191 + ((isSetPushCooldownConf()) ? 131071 : 524287);
    if (isSetPushCooldownConf())
      hashCode = hashCode * 8191 + push_cooldown_conf.hashCode();

    hashCode = hashCode * 8191 + ((isSetPushStoragePolicyReq()) ? 131071 : 524287);
    if (isSetPushStoragePolicyReq())
      hashCode = hashCode * 8191 + push_storage_policy_req.hashCode();

    hashCode = hashCode * 8191 + ((isSetAlterInvertedIndexReq()) ? 131071 : 524287);
    if (isSetAlterInvertedIndexReq())
      hashCode = hashCode * 8191 + alter_inverted_index_req.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TAgentTaskRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetProtocolVersion(), other.isSetProtocolVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocolVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol_version, other.protocol_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTaskType(), other.isSetTaskType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_type, other.task_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSignature(), other.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPriority(), other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreateTabletReq(), other.isSetCreateTabletReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTabletReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_tablet_req, other.create_tablet_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDropTabletReq(), other.isSetDropTabletReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDropTabletReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drop_tablet_req, other.drop_tablet_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAlterTabletReq(), other.isSetAlterTabletReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlterTabletReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alter_tablet_req, other.alter_tablet_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCloneReq(), other.isSetCloneReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloneReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clone_req, other.clone_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPushReq(), other.isSetPushReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.push_req, other.push_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCancelDeleteDataReq(), other.isSetCancelDeleteDataReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelDeleteDataReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancel_delete_data_req, other.cancel_delete_data_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResourceInfo(), other.isSetResourceInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource_info, other.resource_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStorageMediumMigrateReq(), other.isSetStorageMediumMigrateReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorageMediumMigrateReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage_medium_migrate_req, other.storage_medium_migrate_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCheckConsistencyReq(), other.isSetCheckConsistencyReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckConsistencyReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.check_consistency_req, other.check_consistency_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUploadReq(), other.isSetUploadReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upload_req, other.upload_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDownloadReq(), other.isSetDownloadReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownloadReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.download_req, other.download_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSnapshotReq(), other.isSetSnapshotReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnapshotReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshot_req, other.snapshot_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReleaseSnapshotReq(), other.isSetReleaseSnapshotReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReleaseSnapshotReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.release_snapshot_req, other.release_snapshot_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClearRemoteFileReq(), other.isSetClearRemoteFileReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearRemoteFileReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clear_remote_file_req, other.clear_remote_file_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPublishVersionReq(), other.isSetPublishVersionReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishVersionReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publish_version_req, other.publish_version_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClearAlterTaskReq(), other.isSetClearAlterTaskReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearAlterTaskReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clear_alter_task_req, other.clear_alter_task_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClearTransactionTaskReq(), other.isSetClearTransactionTaskReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearTransactionTaskReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clear_transaction_task_req, other.clear_transaction_task_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMoveDirReq(), other.isSetMoveDirReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoveDirReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.move_dir_req, other.move_dir_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRecoverTabletReq(), other.isSetRecoverTabletReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecoverTabletReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recover_tablet_req, other.recover_tablet_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAlterTabletReqV2(), other.isSetAlterTabletReqV2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlterTabletReqV2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alter_tablet_req_v2, other.alter_tablet_req_v2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRecvTime(), other.isSetRecvTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecvTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recv_time, other.recv_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUpdateTabletMetaInfoReq(), other.isSetUpdateTabletMetaInfoReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTabletMetaInfoReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_tablet_meta_info_req, other.update_tablet_meta_info_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCompactionReq(), other.isSetCompactionReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompactionReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compaction_req, other.compaction_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStorageMigrationReqV2(), other.isSetStorageMigrationReqV2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorageMigrationReqV2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage_migration_req_v2, other.storage_migration_req_v2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPushCooldownConf(), other.isSetPushCooldownConf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushCooldownConf()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.push_cooldown_conf, other.push_cooldown_conf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPushStoragePolicyReq(), other.isSetPushStoragePolicyReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPushStoragePolicyReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.push_storage_policy_req, other.push_storage_policy_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAlterInvertedIndexReq(), other.isSetAlterInvertedIndexReq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlterInvertedIndexReq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alter_inverted_index_req, other.alter_inverted_index_req);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TAgentTaskRequest(");
    boolean first = true;

    sb.append("protocol_version:");
    if (this.protocol_version == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol_version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("task_type:");
    if (this.task_type == null) {
      sb.append("null");
    } else {
      sb.append(this.task_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signature:");
    sb.append(this.signature);
    first = false;
    if (isSetPriority()) {
      if (!first) sb.append(", ");
      sb.append("priority:");
      if (this.priority == null) {
        sb.append("null");
      } else {
        sb.append(this.priority);
      }
      first = false;
    }
    if (isSetCreateTabletReq()) {
      if (!first) sb.append(", ");
      sb.append("create_tablet_req:");
      if (this.create_tablet_req == null) {
        sb.append("null");
      } else {
        sb.append(this.create_tablet_req);
      }
      first = false;
    }
    if (isSetDropTabletReq()) {
      if (!first) sb.append(", ");
      sb.append("drop_tablet_req:");
      if (this.drop_tablet_req == null) {
        sb.append("null");
      } else {
        sb.append(this.drop_tablet_req);
      }
      first = false;
    }
    if (isSetAlterTabletReq()) {
      if (!first) sb.append(", ");
      sb.append("alter_tablet_req:");
      if (this.alter_tablet_req == null) {
        sb.append("null");
      } else {
        sb.append(this.alter_tablet_req);
      }
      first = false;
    }
    if (isSetCloneReq()) {
      if (!first) sb.append(", ");
      sb.append("clone_req:");
      if (this.clone_req == null) {
        sb.append("null");
      } else {
        sb.append(this.clone_req);
      }
      first = false;
    }
    if (isSetPushReq()) {
      if (!first) sb.append(", ");
      sb.append("push_req:");
      if (this.push_req == null) {
        sb.append("null");
      } else {
        sb.append(this.push_req);
      }
      first = false;
    }
    if (isSetCancelDeleteDataReq()) {
      if (!first) sb.append(", ");
      sb.append("cancel_delete_data_req:");
      if (this.cancel_delete_data_req == null) {
        sb.append("null");
      } else {
        sb.append(this.cancel_delete_data_req);
      }
      first = false;
    }
    if (isSetResourceInfo()) {
      if (!first) sb.append(", ");
      sb.append("resource_info:");
      if (this.resource_info == null) {
        sb.append("null");
      } else {
        sb.append(this.resource_info);
      }
      first = false;
    }
    if (isSetStorageMediumMigrateReq()) {
      if (!first) sb.append(", ");
      sb.append("storage_medium_migrate_req:");
      if (this.storage_medium_migrate_req == null) {
        sb.append("null");
      } else {
        sb.append(this.storage_medium_migrate_req);
      }
      first = false;
    }
    if (isSetCheckConsistencyReq()) {
      if (!first) sb.append(", ");
      sb.append("check_consistency_req:");
      if (this.check_consistency_req == null) {
        sb.append("null");
      } else {
        sb.append(this.check_consistency_req);
      }
      first = false;
    }
    if (isSetUploadReq()) {
      if (!first) sb.append(", ");
      sb.append("upload_req:");
      if (this.upload_req == null) {
        sb.append("null");
      } else {
        sb.append(this.upload_req);
      }
      first = false;
    }
    if (isSetDownloadReq()) {
      if (!first) sb.append(", ");
      sb.append("download_req:");
      if (this.download_req == null) {
        sb.append("null");
      } else {
        sb.append(this.download_req);
      }
      first = false;
    }
    if (isSetSnapshotReq()) {
      if (!first) sb.append(", ");
      sb.append("snapshot_req:");
      if (this.snapshot_req == null) {
        sb.append("null");
      } else {
        sb.append(this.snapshot_req);
      }
      first = false;
    }
    if (isSetReleaseSnapshotReq()) {
      if (!first) sb.append(", ");
      sb.append("release_snapshot_req:");
      if (this.release_snapshot_req == null) {
        sb.append("null");
      } else {
        sb.append(this.release_snapshot_req);
      }
      first = false;
    }
    if (isSetClearRemoteFileReq()) {
      if (!first) sb.append(", ");
      sb.append("clear_remote_file_req:");
      if (this.clear_remote_file_req == null) {
        sb.append("null");
      } else {
        sb.append(this.clear_remote_file_req);
      }
      first = false;
    }
    if (isSetPublishVersionReq()) {
      if (!first) sb.append(", ");
      sb.append("publish_version_req:");
      if (this.publish_version_req == null) {
        sb.append("null");
      } else {
        sb.append(this.publish_version_req);
      }
      first = false;
    }
    if (isSetClearAlterTaskReq()) {
      if (!first) sb.append(", ");
      sb.append("clear_alter_task_req:");
      if (this.clear_alter_task_req == null) {
        sb.append("null");
      } else {
        sb.append(this.clear_alter_task_req);
      }
      first = false;
    }
    if (isSetClearTransactionTaskReq()) {
      if (!first) sb.append(", ");
      sb.append("clear_transaction_task_req:");
      if (this.clear_transaction_task_req == null) {
        sb.append("null");
      } else {
        sb.append(this.clear_transaction_task_req);
      }
      first = false;
    }
    if (isSetMoveDirReq()) {
      if (!first) sb.append(", ");
      sb.append("move_dir_req:");
      if (this.move_dir_req == null) {
        sb.append("null");
      } else {
        sb.append(this.move_dir_req);
      }
      first = false;
    }
    if (isSetRecoverTabletReq()) {
      if (!first) sb.append(", ");
      sb.append("recover_tablet_req:");
      if (this.recover_tablet_req == null) {
        sb.append("null");
      } else {
        sb.append(this.recover_tablet_req);
      }
      first = false;
    }
    if (isSetAlterTabletReqV2()) {
      if (!first) sb.append(", ");
      sb.append("alter_tablet_req_v2:");
      if (this.alter_tablet_req_v2 == null) {
        sb.append("null");
      } else {
        sb.append(this.alter_tablet_req_v2);
      }
      first = false;
    }
    if (isSetRecvTime()) {
      if (!first) sb.append(", ");
      sb.append("recv_time:");
      sb.append(this.recv_time);
      first = false;
    }
    if (isSetUpdateTabletMetaInfoReq()) {
      if (!first) sb.append(", ");
      sb.append("update_tablet_meta_info_req:");
      if (this.update_tablet_meta_info_req == null) {
        sb.append("null");
      } else {
        sb.append(this.update_tablet_meta_info_req);
      }
      first = false;
    }
    if (isSetCompactionReq()) {
      if (!first) sb.append(", ");
      sb.append("compaction_req:");
      if (this.compaction_req == null) {
        sb.append("null");
      } else {
        sb.append(this.compaction_req);
      }
      first = false;
    }
    if (isSetStorageMigrationReqV2()) {
      if (!first) sb.append(", ");
      sb.append("storage_migration_req_v2:");
      if (this.storage_migration_req_v2 == null) {
        sb.append("null");
      } else {
        sb.append(this.storage_migration_req_v2);
      }
      first = false;
    }
    if (isSetPushCooldownConf()) {
      if (!first) sb.append(", ");
      sb.append("push_cooldown_conf:");
      if (this.push_cooldown_conf == null) {
        sb.append("null");
      } else {
        sb.append(this.push_cooldown_conf);
      }
      first = false;
    }
    if (isSetPushStoragePolicyReq()) {
      if (!first) sb.append(", ");
      sb.append("push_storage_policy_req:");
      if (this.push_storage_policy_req == null) {
        sb.append("null");
      } else {
        sb.append(this.push_storage_policy_req);
      }
      first = false;
    }
    if (isSetAlterInvertedIndexReq()) {
      if (!first) sb.append(", ");
      sb.append("alter_inverted_index_req:");
      if (this.alter_inverted_index_req == null) {
        sb.append("null");
      } else {
        sb.append(this.alter_inverted_index_req);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocol_version == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol_version' was not present! Struct: " + toString());
    }
    if (task_type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'task_type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'signature' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (create_tablet_req != null) {
      create_tablet_req.validate();
    }
    if (drop_tablet_req != null) {
      drop_tablet_req.validate();
    }
    if (alter_tablet_req != null) {
      alter_tablet_req.validate();
    }
    if (clone_req != null) {
      clone_req.validate();
    }
    if (push_req != null) {
      push_req.validate();
    }
    if (cancel_delete_data_req != null) {
      cancel_delete_data_req.validate();
    }
    if (resource_info != null) {
      resource_info.validate();
    }
    if (storage_medium_migrate_req != null) {
      storage_medium_migrate_req.validate();
    }
    if (check_consistency_req != null) {
      check_consistency_req.validate();
    }
    if (upload_req != null) {
      upload_req.validate();
    }
    if (download_req != null) {
      download_req.validate();
    }
    if (snapshot_req != null) {
      snapshot_req.validate();
    }
    if (release_snapshot_req != null) {
      release_snapshot_req.validate();
    }
    if (clear_remote_file_req != null) {
      clear_remote_file_req.validate();
    }
    if (publish_version_req != null) {
      publish_version_req.validate();
    }
    if (clear_alter_task_req != null) {
      clear_alter_task_req.validate();
    }
    if (clear_transaction_task_req != null) {
      clear_transaction_task_req.validate();
    }
    if (move_dir_req != null) {
      move_dir_req.validate();
    }
    if (recover_tablet_req != null) {
      recover_tablet_req.validate();
    }
    if (alter_tablet_req_v2 != null) {
      alter_tablet_req_v2.validate();
    }
    if (update_tablet_meta_info_req != null) {
      update_tablet_meta_info_req.validate();
    }
    if (compaction_req != null) {
      compaction_req.validate();
    }
    if (storage_migration_req_v2 != null) {
      storage_migration_req_v2.validate();
    }
    if (push_cooldown_conf != null) {
      push_cooldown_conf.validate();
    }
    if (push_storage_policy_req != null) {
      push_storage_policy_req.validate();
    }
    if (alter_inverted_index_req != null) {
      alter_inverted_index_req.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAgentTaskRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAgentTaskRequestStandardScheme getScheme() {
      return new TAgentTaskRequestStandardScheme();
    }
  }

  private static class TAgentTaskRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAgentTaskRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAgentTaskRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol_version = org.apache.doris.thrift.TAgentServiceVersion.findByValue(iprot.readI32());
              struct.setProtocolVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.task_type = org.apache.doris.thrift.TTaskType.findByValue(iprot.readI32());
              struct.setTaskTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.signature = iprot.readI64();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = org.apache.doris.thrift.TPriority.findByValue(iprot.readI32());
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATE_TABLET_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.create_tablet_req = new TCreateTabletReq();
              struct.create_tablet_req.read(iprot);
              struct.setCreateTabletReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DROP_TABLET_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.drop_tablet_req = new TDropTabletReq();
              struct.drop_tablet_req.read(iprot);
              struct.setDropTabletReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ALTER_TABLET_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.alter_tablet_req = new TAlterTabletReq();
              struct.alter_tablet_req.read(iprot);
              struct.setAlterTabletReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CLONE_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.clone_req = new TCloneReq();
              struct.clone_req.read(iprot);
              struct.setCloneReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PUSH_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.push_req = new TPushReq();
              struct.push_req.read(iprot);
              struct.setPushReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CANCEL_DELETE_DATA_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cancel_delete_data_req = new TCancelDeleteDataReq();
              struct.cancel_delete_data_req.read(iprot);
              struct.setCancelDeleteDataReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RESOURCE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.resource_info = new org.apache.doris.thrift.TResourceInfo();
              struct.resource_info.read(iprot);
              struct.setResourceInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STORAGE_MEDIUM_MIGRATE_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.storage_medium_migrate_req = new TStorageMediumMigrateReq();
              struct.storage_medium_migrate_req.read(iprot);
              struct.setStorageMediumMigrateReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CHECK_CONSISTENCY_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.check_consistency_req = new TCheckConsistencyReq();
              struct.check_consistency_req.read(iprot);
              struct.setCheckConsistencyReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // UPLOAD_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.upload_req = new TUploadReq();
              struct.upload_req.read(iprot);
              struct.setUploadReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DOWNLOAD_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.download_req = new TDownloadReq();
              struct.download_req.read(iprot);
              struct.setDownloadReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SNAPSHOT_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.snapshot_req = new TSnapshotRequest();
              struct.snapshot_req.read(iprot);
              struct.setSnapshotReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RELEASE_SNAPSHOT_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.release_snapshot_req = new TReleaseSnapshotRequest();
              struct.release_snapshot_req.read(iprot);
              struct.setReleaseSnapshotReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CLEAR_REMOTE_FILE_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.clear_remote_file_req = new TClearRemoteFileReq();
              struct.clear_remote_file_req.read(iprot);
              struct.setClearRemoteFileReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PUBLISH_VERSION_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.publish_version_req = new TPublishVersionRequest();
              struct.publish_version_req.read(iprot);
              struct.setPublishVersionReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CLEAR_ALTER_TASK_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.clear_alter_task_req = new TClearAlterTaskRequest();
              struct.clear_alter_task_req.read(iprot);
              struct.setClearAlterTaskReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CLEAR_TRANSACTION_TASK_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.clear_transaction_task_req = new TClearTransactionTaskRequest();
              struct.clear_transaction_task_req.read(iprot);
              struct.setClearTransactionTaskReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // MOVE_DIR_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.move_dir_req = new TMoveDirReq();
              struct.move_dir_req.read(iprot);
              struct.setMoveDirReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // RECOVER_TABLET_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.recover_tablet_req = new TRecoverTabletReq();
              struct.recover_tablet_req.read(iprot);
              struct.setRecoverTabletReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ALTER_TABLET_REQ_V2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.alter_tablet_req_v2 = new TAlterTabletReqV2();
              struct.alter_tablet_req_v2.read(iprot);
              struct.setAlterTabletReqV2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // RECV_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.recv_time = iprot.readI64();
              struct.setRecvTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // UPDATE_TABLET_META_INFO_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.update_tablet_meta_info_req = new TUpdateTabletMetaInfoReq();
              struct.update_tablet_meta_info_req.read(iprot);
              struct.setUpdateTabletMetaInfoReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // COMPACTION_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.compaction_req = new TCompactionReq();
              struct.compaction_req.read(iprot);
              struct.setCompactionReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // STORAGE_MIGRATION_REQ_V2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.storage_migration_req_v2 = new TStorageMigrationReqV2();
              struct.storage_migration_req_v2.read(iprot);
              struct.setStorageMigrationReqV2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // PUSH_COOLDOWN_CONF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.push_cooldown_conf = new TPushCooldownConfReq();
              struct.push_cooldown_conf.read(iprot);
              struct.setPushCooldownConfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // PUSH_STORAGE_POLICY_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.push_storage_policy_req = new TPushStoragePolicyReq();
              struct.push_storage_policy_req.read(iprot);
              struct.setPushStoragePolicyReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // ALTER_INVERTED_INDEX_REQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.alter_inverted_index_req = new TAlterInvertedIndexReq();
              struct.alter_inverted_index_req.read(iprot);
              struct.setAlterInvertedIndexReqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSignature()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'signature' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAgentTaskRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol_version != null) {
        oprot.writeFieldBegin(PROTOCOL_VERSION_FIELD_DESC);
        oprot.writeI32(struct.protocol_version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.task_type != null) {
        oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
        oprot.writeI32(struct.task_type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
      oprot.writeI64(struct.signature);
      oprot.writeFieldEnd();
      if (struct.priority != null) {
        if (struct.isSetPriority()) {
          oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
          oprot.writeI32(struct.priority.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.create_tablet_req != null) {
        if (struct.isSetCreateTabletReq()) {
          oprot.writeFieldBegin(CREATE_TABLET_REQ_FIELD_DESC);
          struct.create_tablet_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.drop_tablet_req != null) {
        if (struct.isSetDropTabletReq()) {
          oprot.writeFieldBegin(DROP_TABLET_REQ_FIELD_DESC);
          struct.drop_tablet_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.alter_tablet_req != null) {
        if (struct.isSetAlterTabletReq()) {
          oprot.writeFieldBegin(ALTER_TABLET_REQ_FIELD_DESC);
          struct.alter_tablet_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clone_req != null) {
        if (struct.isSetCloneReq()) {
          oprot.writeFieldBegin(CLONE_REQ_FIELD_DESC);
          struct.clone_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.push_req != null) {
        if (struct.isSetPushReq()) {
          oprot.writeFieldBegin(PUSH_REQ_FIELD_DESC);
          struct.push_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cancel_delete_data_req != null) {
        if (struct.isSetCancelDeleteDataReq()) {
          oprot.writeFieldBegin(CANCEL_DELETE_DATA_REQ_FIELD_DESC);
          struct.cancel_delete_data_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resource_info != null) {
        if (struct.isSetResourceInfo()) {
          oprot.writeFieldBegin(RESOURCE_INFO_FIELD_DESC);
          struct.resource_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.storage_medium_migrate_req != null) {
        if (struct.isSetStorageMediumMigrateReq()) {
          oprot.writeFieldBegin(STORAGE_MEDIUM_MIGRATE_REQ_FIELD_DESC);
          struct.storage_medium_migrate_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.check_consistency_req != null) {
        if (struct.isSetCheckConsistencyReq()) {
          oprot.writeFieldBegin(CHECK_CONSISTENCY_REQ_FIELD_DESC);
          struct.check_consistency_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.upload_req != null) {
        if (struct.isSetUploadReq()) {
          oprot.writeFieldBegin(UPLOAD_REQ_FIELD_DESC);
          struct.upload_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.download_req != null) {
        if (struct.isSetDownloadReq()) {
          oprot.writeFieldBegin(DOWNLOAD_REQ_FIELD_DESC);
          struct.download_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.snapshot_req != null) {
        if (struct.isSetSnapshotReq()) {
          oprot.writeFieldBegin(SNAPSHOT_REQ_FIELD_DESC);
          struct.snapshot_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.release_snapshot_req != null) {
        if (struct.isSetReleaseSnapshotReq()) {
          oprot.writeFieldBegin(RELEASE_SNAPSHOT_REQ_FIELD_DESC);
          struct.release_snapshot_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clear_remote_file_req != null) {
        if (struct.isSetClearRemoteFileReq()) {
          oprot.writeFieldBegin(CLEAR_REMOTE_FILE_REQ_FIELD_DESC);
          struct.clear_remote_file_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.publish_version_req != null) {
        if (struct.isSetPublishVersionReq()) {
          oprot.writeFieldBegin(PUBLISH_VERSION_REQ_FIELD_DESC);
          struct.publish_version_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clear_alter_task_req != null) {
        if (struct.isSetClearAlterTaskReq()) {
          oprot.writeFieldBegin(CLEAR_ALTER_TASK_REQ_FIELD_DESC);
          struct.clear_alter_task_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clear_transaction_task_req != null) {
        if (struct.isSetClearTransactionTaskReq()) {
          oprot.writeFieldBegin(CLEAR_TRANSACTION_TASK_REQ_FIELD_DESC);
          struct.clear_transaction_task_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.move_dir_req != null) {
        if (struct.isSetMoveDirReq()) {
          oprot.writeFieldBegin(MOVE_DIR_REQ_FIELD_DESC);
          struct.move_dir_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.recover_tablet_req != null) {
        if (struct.isSetRecoverTabletReq()) {
          oprot.writeFieldBegin(RECOVER_TABLET_REQ_FIELD_DESC);
          struct.recover_tablet_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.alter_tablet_req_v2 != null) {
        if (struct.isSetAlterTabletReqV2()) {
          oprot.writeFieldBegin(ALTER_TABLET_REQ_V2_FIELD_DESC);
          struct.alter_tablet_req_v2.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRecvTime()) {
        oprot.writeFieldBegin(RECV_TIME_FIELD_DESC);
        oprot.writeI64(struct.recv_time);
        oprot.writeFieldEnd();
      }
      if (struct.update_tablet_meta_info_req != null) {
        if (struct.isSetUpdateTabletMetaInfoReq()) {
          oprot.writeFieldBegin(UPDATE_TABLET_META_INFO_REQ_FIELD_DESC);
          struct.update_tablet_meta_info_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.compaction_req != null) {
        if (struct.isSetCompactionReq()) {
          oprot.writeFieldBegin(COMPACTION_REQ_FIELD_DESC);
          struct.compaction_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.storage_migration_req_v2 != null) {
        if (struct.isSetStorageMigrationReqV2()) {
          oprot.writeFieldBegin(STORAGE_MIGRATION_REQ_V2_FIELD_DESC);
          struct.storage_migration_req_v2.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.push_cooldown_conf != null) {
        if (struct.isSetPushCooldownConf()) {
          oprot.writeFieldBegin(PUSH_COOLDOWN_CONF_FIELD_DESC);
          struct.push_cooldown_conf.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.push_storage_policy_req != null) {
        if (struct.isSetPushStoragePolicyReq()) {
          oprot.writeFieldBegin(PUSH_STORAGE_POLICY_REQ_FIELD_DESC);
          struct.push_storage_policy_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.alter_inverted_index_req != null) {
        if (struct.isSetAlterInvertedIndexReq()) {
          oprot.writeFieldBegin(ALTER_INVERTED_INDEX_REQ_FIELD_DESC);
          struct.alter_inverted_index_req.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAgentTaskRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAgentTaskRequestTupleScheme getScheme() {
      return new TAgentTaskRequestTupleScheme();
    }
  }

  private static class TAgentTaskRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAgentTaskRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAgentTaskRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.protocol_version.getValue());
      oprot.writeI32(struct.task_type.getValue());
      oprot.writeI64(struct.signature);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPriority()) {
        optionals.set(0);
      }
      if (struct.isSetCreateTabletReq()) {
        optionals.set(1);
      }
      if (struct.isSetDropTabletReq()) {
        optionals.set(2);
      }
      if (struct.isSetAlterTabletReq()) {
        optionals.set(3);
      }
      if (struct.isSetCloneReq()) {
        optionals.set(4);
      }
      if (struct.isSetPushReq()) {
        optionals.set(5);
      }
      if (struct.isSetCancelDeleteDataReq()) {
        optionals.set(6);
      }
      if (struct.isSetResourceInfo()) {
        optionals.set(7);
      }
      if (struct.isSetStorageMediumMigrateReq()) {
        optionals.set(8);
      }
      if (struct.isSetCheckConsistencyReq()) {
        optionals.set(9);
      }
      if (struct.isSetUploadReq()) {
        optionals.set(10);
      }
      if (struct.isSetDownloadReq()) {
        optionals.set(11);
      }
      if (struct.isSetSnapshotReq()) {
        optionals.set(12);
      }
      if (struct.isSetReleaseSnapshotReq()) {
        optionals.set(13);
      }
      if (struct.isSetClearRemoteFileReq()) {
        optionals.set(14);
      }
      if (struct.isSetPublishVersionReq()) {
        optionals.set(15);
      }
      if (struct.isSetClearAlterTaskReq()) {
        optionals.set(16);
      }
      if (struct.isSetClearTransactionTaskReq()) {
        optionals.set(17);
      }
      if (struct.isSetMoveDirReq()) {
        optionals.set(18);
      }
      if (struct.isSetRecoverTabletReq()) {
        optionals.set(19);
      }
      if (struct.isSetAlterTabletReqV2()) {
        optionals.set(20);
      }
      if (struct.isSetRecvTime()) {
        optionals.set(21);
      }
      if (struct.isSetUpdateTabletMetaInfoReq()) {
        optionals.set(22);
      }
      if (struct.isSetCompactionReq()) {
        optionals.set(23);
      }
      if (struct.isSetStorageMigrationReqV2()) {
        optionals.set(24);
      }
      if (struct.isSetPushCooldownConf()) {
        optionals.set(25);
      }
      if (struct.isSetPushStoragePolicyReq()) {
        optionals.set(26);
      }
      if (struct.isSetAlterInvertedIndexReq()) {
        optionals.set(27);
      }
      oprot.writeBitSet(optionals, 28);
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority.getValue());
      }
      if (struct.isSetCreateTabletReq()) {
        struct.create_tablet_req.write(oprot);
      }
      if (struct.isSetDropTabletReq()) {
        struct.drop_tablet_req.write(oprot);
      }
      if (struct.isSetAlterTabletReq()) {
        struct.alter_tablet_req.write(oprot);
      }
      if (struct.isSetCloneReq()) {
        struct.clone_req.write(oprot);
      }
      if (struct.isSetPushReq()) {
        struct.push_req.write(oprot);
      }
      if (struct.isSetCancelDeleteDataReq()) {
        struct.cancel_delete_data_req.write(oprot);
      }
      if (struct.isSetResourceInfo()) {
        struct.resource_info.write(oprot);
      }
      if (struct.isSetStorageMediumMigrateReq()) {
        struct.storage_medium_migrate_req.write(oprot);
      }
      if (struct.isSetCheckConsistencyReq()) {
        struct.check_consistency_req.write(oprot);
      }
      if (struct.isSetUploadReq()) {
        struct.upload_req.write(oprot);
      }
      if (struct.isSetDownloadReq()) {
        struct.download_req.write(oprot);
      }
      if (struct.isSetSnapshotReq()) {
        struct.snapshot_req.write(oprot);
      }
      if (struct.isSetReleaseSnapshotReq()) {
        struct.release_snapshot_req.write(oprot);
      }
      if (struct.isSetClearRemoteFileReq()) {
        struct.clear_remote_file_req.write(oprot);
      }
      if (struct.isSetPublishVersionReq()) {
        struct.publish_version_req.write(oprot);
      }
      if (struct.isSetClearAlterTaskReq()) {
        struct.clear_alter_task_req.write(oprot);
      }
      if (struct.isSetClearTransactionTaskReq()) {
        struct.clear_transaction_task_req.write(oprot);
      }
      if (struct.isSetMoveDirReq()) {
        struct.move_dir_req.write(oprot);
      }
      if (struct.isSetRecoverTabletReq()) {
        struct.recover_tablet_req.write(oprot);
      }
      if (struct.isSetAlterTabletReqV2()) {
        struct.alter_tablet_req_v2.write(oprot);
      }
      if (struct.isSetRecvTime()) {
        oprot.writeI64(struct.recv_time);
      }
      if (struct.isSetUpdateTabletMetaInfoReq()) {
        struct.update_tablet_meta_info_req.write(oprot);
      }
      if (struct.isSetCompactionReq()) {
        struct.compaction_req.write(oprot);
      }
      if (struct.isSetStorageMigrationReqV2()) {
        struct.storage_migration_req_v2.write(oprot);
      }
      if (struct.isSetPushCooldownConf()) {
        struct.push_cooldown_conf.write(oprot);
      }
      if (struct.isSetPushStoragePolicyReq()) {
        struct.push_storage_policy_req.write(oprot);
      }
      if (struct.isSetAlterInvertedIndexReq()) {
        struct.alter_inverted_index_req.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAgentTaskRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.protocol_version = org.apache.doris.thrift.TAgentServiceVersion.findByValue(iprot.readI32());
      struct.setProtocolVersionIsSet(true);
      struct.task_type = org.apache.doris.thrift.TTaskType.findByValue(iprot.readI32());
      struct.setTaskTypeIsSet(true);
      struct.signature = iprot.readI64();
      struct.setSignatureIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(28);
      if (incoming.get(0)) {
        struct.priority = org.apache.doris.thrift.TPriority.findByValue(iprot.readI32());
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(1)) {
        struct.create_tablet_req = new TCreateTabletReq();
        struct.create_tablet_req.read(iprot);
        struct.setCreateTabletReqIsSet(true);
      }
      if (incoming.get(2)) {
        struct.drop_tablet_req = new TDropTabletReq();
        struct.drop_tablet_req.read(iprot);
        struct.setDropTabletReqIsSet(true);
      }
      if (incoming.get(3)) {
        struct.alter_tablet_req = new TAlterTabletReq();
        struct.alter_tablet_req.read(iprot);
        struct.setAlterTabletReqIsSet(true);
      }
      if (incoming.get(4)) {
        struct.clone_req = new TCloneReq();
        struct.clone_req.read(iprot);
        struct.setCloneReqIsSet(true);
      }
      if (incoming.get(5)) {
        struct.push_req = new TPushReq();
        struct.push_req.read(iprot);
        struct.setPushReqIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cancel_delete_data_req = new TCancelDeleteDataReq();
        struct.cancel_delete_data_req.read(iprot);
        struct.setCancelDeleteDataReqIsSet(true);
      }
      if (incoming.get(7)) {
        struct.resource_info = new org.apache.doris.thrift.TResourceInfo();
        struct.resource_info.read(iprot);
        struct.setResourceInfoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.storage_medium_migrate_req = new TStorageMediumMigrateReq();
        struct.storage_medium_migrate_req.read(iprot);
        struct.setStorageMediumMigrateReqIsSet(true);
      }
      if (incoming.get(9)) {
        struct.check_consistency_req = new TCheckConsistencyReq();
        struct.check_consistency_req.read(iprot);
        struct.setCheckConsistencyReqIsSet(true);
      }
      if (incoming.get(10)) {
        struct.upload_req = new TUploadReq();
        struct.upload_req.read(iprot);
        struct.setUploadReqIsSet(true);
      }
      if (incoming.get(11)) {
        struct.download_req = new TDownloadReq();
        struct.download_req.read(iprot);
        struct.setDownloadReqIsSet(true);
      }
      if (incoming.get(12)) {
        struct.snapshot_req = new TSnapshotRequest();
        struct.snapshot_req.read(iprot);
        struct.setSnapshotReqIsSet(true);
      }
      if (incoming.get(13)) {
        struct.release_snapshot_req = new TReleaseSnapshotRequest();
        struct.release_snapshot_req.read(iprot);
        struct.setReleaseSnapshotReqIsSet(true);
      }
      if (incoming.get(14)) {
        struct.clear_remote_file_req = new TClearRemoteFileReq();
        struct.clear_remote_file_req.read(iprot);
        struct.setClearRemoteFileReqIsSet(true);
      }
      if (incoming.get(15)) {
        struct.publish_version_req = new TPublishVersionRequest();
        struct.publish_version_req.read(iprot);
        struct.setPublishVersionReqIsSet(true);
      }
      if (incoming.get(16)) {
        struct.clear_alter_task_req = new TClearAlterTaskRequest();
        struct.clear_alter_task_req.read(iprot);
        struct.setClearAlterTaskReqIsSet(true);
      }
      if (incoming.get(17)) {
        struct.clear_transaction_task_req = new TClearTransactionTaskRequest();
        struct.clear_transaction_task_req.read(iprot);
        struct.setClearTransactionTaskReqIsSet(true);
      }
      if (incoming.get(18)) {
        struct.move_dir_req = new TMoveDirReq();
        struct.move_dir_req.read(iprot);
        struct.setMoveDirReqIsSet(true);
      }
      if (incoming.get(19)) {
        struct.recover_tablet_req = new TRecoverTabletReq();
        struct.recover_tablet_req.read(iprot);
        struct.setRecoverTabletReqIsSet(true);
      }
      if (incoming.get(20)) {
        struct.alter_tablet_req_v2 = new TAlterTabletReqV2();
        struct.alter_tablet_req_v2.read(iprot);
        struct.setAlterTabletReqV2IsSet(true);
      }
      if (incoming.get(21)) {
        struct.recv_time = iprot.readI64();
        struct.setRecvTimeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.update_tablet_meta_info_req = new TUpdateTabletMetaInfoReq();
        struct.update_tablet_meta_info_req.read(iprot);
        struct.setUpdateTabletMetaInfoReqIsSet(true);
      }
      if (incoming.get(23)) {
        struct.compaction_req = new TCompactionReq();
        struct.compaction_req.read(iprot);
        struct.setCompactionReqIsSet(true);
      }
      if (incoming.get(24)) {
        struct.storage_migration_req_v2 = new TStorageMigrationReqV2();
        struct.storage_migration_req_v2.read(iprot);
        struct.setStorageMigrationReqV2IsSet(true);
      }
      if (incoming.get(25)) {
        struct.push_cooldown_conf = new TPushCooldownConfReq();
        struct.push_cooldown_conf.read(iprot);
        struct.setPushCooldownConfIsSet(true);
      }
      if (incoming.get(26)) {
        struct.push_storage_policy_req = new TPushStoragePolicyReq();
        struct.push_storage_policy_req.read(iprot);
        struct.setPushStoragePolicyReqIsSet(true);
      }
      if (incoming.get(27)) {
        struct.alter_inverted_index_req = new TAlterInvertedIndexReq();
        struct.alter_inverted_index_req.read(iprot);
        struct.setAlterInvertedIndexReqIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

