// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package org.apache.doris.nereids.trees.expressions.functions.scalar;

import org.apache.doris.catalog.FunctionSignature;
import org.apache.doris.nereids.trees.expressions.Expression;
import org.apache.doris.nereids.trees.expressions.functions.ExplicitlyCastableSignature;
import org.apache.doris.nereids.trees.expressions.functions.PropagateNullableOnDateLikeV2Args;
import org.apache.doris.nereids.trees.expressions.shape.UnaryExpression;
import org.apache.doris.nereids.trees.expressions.visitor.ExpressionVisitor;
import org.apache.doris.nereids.types.DateTimeType;
import org.apache.doris.nereids.types.DateTimeV2Type;
import org.apache.doris.nereids.types.DateType;
import org.apache.doris.nereids.types.DateV2Type;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;

import java.util.List;

/**
 * ScalarFunction 'last_day'. This class is not generated by GenerateFunction.
 */
public class LastDay extends ScalarFunction
        implements ExplicitlyCastableSignature, PropagateNullableOnDateLikeV2Args {

    public static final List<FunctionSignature> SIGNATURES = ImmutableList.of(
            FunctionSignature.ret(DateV2Type.INSTANCE).args(DateV2Type.INSTANCE, StringType.INSTANCE),
            FunctionSignature.ret(DateV2Type.INSTANCE).args(DateTimeV2Type.SYSTEM_DEFAULT, StringType.INSTANCE),
            FunctionSignature.ret(DateType.INSTANCE).args(DateType.INSTANCE, StringType.INSTANCE),
            FunctionSignature.ret(DateType.INSTANCE).args(DateTimeType.INSTANCE, StringType.INSTANCE),
            FunctionSignature.ret(DateV2Type.INSTANCE).args(DateV2Type.INSTANCE),
            FunctionSignature.ret(DateV2Type.INSTANCE).args(DateTimeV2Type.SYSTEM_DEFAULT),
            FunctionSignature.ret(DateType.INSTANCE).args(DateType.INSTANCE),
            FunctionSignature.ret(DateType.INSTANCE).args(DateTimeType.INSTANCE)
    );

    /**
     * constructor with 2 argument.
     */
    public LastDay(Expression arg, Expression timeUnit) {
        super("last_day", arg, timeUnit);
    }

    /**
     * withChildren.
     */
    @Override
    public LastDay withChildren(List<Expression> children) {
        Preconditions.checkArgument(children.size() == 1 || children.size() == 2);
        if (children.size() == 1) {
            return new LastDay(children.get(0), null);
        } else {
            return new LastDay(children.get(0), children.get(1));
        }
    }

    @Override
    public <R, C> R accept(ExpressionVisitor<R, C> visitor, C context) {
        if (getChildren().size() == 2) {
            Expression timeUnit = getChildren().get(1);
            String unit = timeUnit.toString();
            switch (unit.toLowerCase()) {
                case "day":
                    return calculateLastDayOfDay(visitor, context);
                case "week":
                    return calculateLastDayOfWeek(visitor, context);
                case "quarter":
                    return calculateLastDayOfQuarter(visitor, context);
                case "year":
                    return calculateLastDayOfYear(visitor, context);
                case "month":
                    return calculateLastDayOfMonth(visitor, context);
            }
        } else {

            return calculateLastDayOfMonth(visitor, context);
        }
    }

    private <R, C> R calculateLastDayOfDay(ExpressionVisitor<R, C> visitor, C context) {
        LocalDate currentDate = toJavaDateType().toLocalDate();
        return (R) new DateLiteral(currentDate.getYear(), currentDate.getMonthValue(), currentDate.getDayOfMonth());
    }

    private <R, C> R calculateLastDayOfWeek(ExpressionVisitor<R, C> visitor, C context) {
        LocalDate currentDate = toJavaDateType().toLocalDate();
        int dayOfWeek = currentDate.getDayOfWeek().getValue();
        LocalDate lastDayOfWeek = currentDate.plusDays(7 - dayOfWeek);
        return (R) new DateLiteral(lastDayOfWeek.getYear(), lastDayOfWeek.getMonthValue(), lastDayOfWeek.getDayOfMonth());
    }

    private <R, C> R calculateLastDayOfMonth(ExpressionVisitor<R, C> visitor, C context) {
        LocalDate currentDate = toJavaDateType().toLocalDate();
        LocalDate lastDayOfMonth = currentDate.withDayOfMonth(currentDate.lengthOfMonth());
        return (R) new DateLiteral(lastDayOfMonth.getYear(), lastDayOfMonth.getMonthValue(), lastDayOfMonth.getDayOfMonth());
    }

    private <R, C> R calculateLastDayOfQuarter(ExpressionVisitor<R, C> visitor, C context) {
        LocalDate currentDate = toJavaDateType().toLocalDate();
        int month = currentDate.getMonthValue();
        int lastMonthOfQuarter = ((month - 1) / 3 + 1) * 3;
        LocalDate lastDayOfQuarter;
        if (lastMonthOfQuarter == 3) {
            lastDayOfQuarter = LocalDate.of(currentDate.getYear(), 3, 31);
        } else if (lastMonthOfQuarter == 6) {
            lastDayOfQuarter = LocalDate.of(currentDate.getYear(), 6, 30);
        } else if (lastMonthOfQuarter == 9) {
            lastDayOfQuarter = LocalDate.of(currentDate.getYear(), 9, 30);
        } else {
            lastDayOfQuarter = LocalDate.of(currentDate.getYear(), 12, 31);
        }
        return (R) new DateLiteral(lastDayOfQuarter.getYear(), lastDayOfQuarter.getMonthValue(), lastDayOfQuarter.getDayOfMonth());
    }

    private <R, C> R calculateLastDayOfYear(ExpressionVisitor<R, C> visitor, C context) {
        LocalDate currentDate = toJavaDateType().toLocalDate();
        LocalDate lastDayOfYear = LocalDate.of(currentDate.getYear(), 12, 31);
        return (R) new DateLiteral(lastDayOfYear.getYear(), lastDayOfYear.getMonthValue(), lastDayOfYear.getDayOfMonth());
    }

    @Override
    public List<FunctionSignature> getSignatures() {
        return SIGNATURES;
    }
}
