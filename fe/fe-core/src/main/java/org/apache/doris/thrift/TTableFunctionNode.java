/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-04-28")
public class TTableFunctionNode implements org.apache.thrift.TBase<TTableFunctionNode, TTableFunctionNode._Fields>, java.io.Serializable, Cloneable, Comparable<TTableFunctionNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTableFunctionNode");

  private static final org.apache.thrift.protocol.TField FN_CALL_EXPR_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("fnCallExprList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField OUTPUT_SLOT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("outputSlotIds", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTableFunctionNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTableFunctionNodeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TExpr> fnCallExprList; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> outputSlotIds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FN_CALL_EXPR_LIST((short)1, "fnCallExprList"),
    OUTPUT_SLOT_IDS((short)2, "outputSlotIds");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FN_CALL_EXPR_LIST
          return FN_CALL_EXPR_LIST;
        case 2: // OUTPUT_SLOT_IDS
          return OUTPUT_SLOT_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.FN_CALL_EXPR_LIST,_Fields.OUTPUT_SLOT_IDS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FN_CALL_EXPR_LIST, new org.apache.thrift.meta_data.FieldMetaData("fnCallExprList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TExpr.class))));
    tmpMap.put(_Fields.OUTPUT_SLOT_IDS, new org.apache.thrift.meta_data.FieldMetaData("outputSlotIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTableFunctionNode.class, metaDataMap);
  }

  public TTableFunctionNode() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTableFunctionNode(TTableFunctionNode other) {
    if (other.isSetFnCallExprList()) {
      java.util.List<org.apache.doris.thrift.TExpr> __this__fnCallExprList = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(other.fnCallExprList.size());
      for (org.apache.doris.thrift.TExpr other_element : other.fnCallExprList) {
        __this__fnCallExprList.add(new org.apache.doris.thrift.TExpr(other_element));
      }
      this.fnCallExprList = __this__fnCallExprList;
    }
    if (other.isSetOutputSlotIds()) {
      java.util.List<java.lang.Integer> __this__outputSlotIds = new java.util.ArrayList<java.lang.Integer>(other.outputSlotIds.size());
      for (java.lang.Integer other_element : other.outputSlotIds) {
        __this__outputSlotIds.add(other_element);
      }
      this.outputSlotIds = __this__outputSlotIds;
    }
  }

  public TTableFunctionNode deepCopy() {
    return new TTableFunctionNode(this);
  }

  @Override
  public void clear() {
    this.fnCallExprList = null;
    this.outputSlotIds = null;
  }

  public int getFnCallExprListSize() {
    return (this.fnCallExprList == null) ? 0 : this.fnCallExprList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TExpr> getFnCallExprListIterator() {
    return (this.fnCallExprList == null) ? null : this.fnCallExprList.iterator();
  }

  public void addToFnCallExprList(org.apache.doris.thrift.TExpr elem) {
    if (this.fnCallExprList == null) {
      this.fnCallExprList = new java.util.ArrayList<org.apache.doris.thrift.TExpr>();
    }
    this.fnCallExprList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TExpr> getFnCallExprList() {
    return this.fnCallExprList;
  }

  public TTableFunctionNode setFnCallExprList(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TExpr> fnCallExprList) {
    this.fnCallExprList = fnCallExprList;
    return this;
  }

  public void unsetFnCallExprList() {
    this.fnCallExprList = null;
  }

  /** Returns true if field fnCallExprList is set (has been assigned a value) and false otherwise */
  public boolean isSetFnCallExprList() {
    return this.fnCallExprList != null;
  }

  public void setFnCallExprListIsSet(boolean value) {
    if (!value) {
      this.fnCallExprList = null;
    }
  }

  public int getOutputSlotIdsSize() {
    return (this.outputSlotIds == null) ? 0 : this.outputSlotIds.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getOutputSlotIdsIterator() {
    return (this.outputSlotIds == null) ? null : this.outputSlotIds.iterator();
  }

  public void addToOutputSlotIds(int elem) {
    if (this.outputSlotIds == null) {
      this.outputSlotIds = new java.util.ArrayList<java.lang.Integer>();
    }
    this.outputSlotIds.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getOutputSlotIds() {
    return this.outputSlotIds;
  }

  public TTableFunctionNode setOutputSlotIds(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> outputSlotIds) {
    this.outputSlotIds = outputSlotIds;
    return this;
  }

  public void unsetOutputSlotIds() {
    this.outputSlotIds = null;
  }

  /** Returns true if field outputSlotIds is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputSlotIds() {
    return this.outputSlotIds != null;
  }

  public void setOutputSlotIdsIsSet(boolean value) {
    if (!value) {
      this.outputSlotIds = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FN_CALL_EXPR_LIST:
      if (value == null) {
        unsetFnCallExprList();
      } else {
        setFnCallExprList((java.util.List<org.apache.doris.thrift.TExpr>)value);
      }
      break;

    case OUTPUT_SLOT_IDS:
      if (value == null) {
        unsetOutputSlotIds();
      } else {
        setOutputSlotIds((java.util.List<java.lang.Integer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FN_CALL_EXPR_LIST:
      return getFnCallExprList();

    case OUTPUT_SLOT_IDS:
      return getOutputSlotIds();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FN_CALL_EXPR_LIST:
      return isSetFnCallExprList();
    case OUTPUT_SLOT_IDS:
      return isSetOutputSlotIds();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTableFunctionNode)
      return this.equals((TTableFunctionNode)that);
    return false;
  }

  public boolean equals(TTableFunctionNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fnCallExprList = true && this.isSetFnCallExprList();
    boolean that_present_fnCallExprList = true && that.isSetFnCallExprList();
    if (this_present_fnCallExprList || that_present_fnCallExprList) {
      if (!(this_present_fnCallExprList && that_present_fnCallExprList))
        return false;
      if (!this.fnCallExprList.equals(that.fnCallExprList))
        return false;
    }

    boolean this_present_outputSlotIds = true && this.isSetOutputSlotIds();
    boolean that_present_outputSlotIds = true && that.isSetOutputSlotIds();
    if (this_present_outputSlotIds || that_present_outputSlotIds) {
      if (!(this_present_outputSlotIds && that_present_outputSlotIds))
        return false;
      if (!this.outputSlotIds.equals(that.outputSlotIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFnCallExprList()) ? 131071 : 524287);
    if (isSetFnCallExprList())
      hashCode = hashCode * 8191 + fnCallExprList.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutputSlotIds()) ? 131071 : 524287);
    if (isSetOutputSlotIds())
      hashCode = hashCode * 8191 + outputSlotIds.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TTableFunctionNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFnCallExprList(), other.isSetFnCallExprList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFnCallExprList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fnCallExprList, other.fnCallExprList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOutputSlotIds(), other.isSetOutputSlotIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputSlotIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputSlotIds, other.outputSlotIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTableFunctionNode(");
    boolean first = true;

    if (isSetFnCallExprList()) {
      sb.append("fnCallExprList:");
      if (this.fnCallExprList == null) {
        sb.append("null");
      } else {
        sb.append(this.fnCallExprList);
      }
      first = false;
    }
    if (isSetOutputSlotIds()) {
      if (!first) sb.append(", ");
      sb.append("outputSlotIds:");
      if (this.outputSlotIds == null) {
        sb.append("null");
      } else {
        sb.append(this.outputSlotIds);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTableFunctionNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTableFunctionNodeStandardScheme getScheme() {
      return new TTableFunctionNodeStandardScheme();
    }
  }

  private static class TTableFunctionNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTableFunctionNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTableFunctionNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FN_CALL_EXPR_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list786 = iprot.readListBegin();
                struct.fnCallExprList = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(_list786.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _elem787;
                for (int _i788 = 0; _i788 < _list786.size; ++_i788)
                {
                  _elem787 = new org.apache.doris.thrift.TExpr();
                  _elem787.read(iprot);
                  struct.fnCallExprList.add(_elem787);
                }
                iprot.readListEnd();
              }
              struct.setFnCallExprListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OUTPUT_SLOT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list789 = iprot.readListBegin();
                struct.outputSlotIds = new java.util.ArrayList<java.lang.Integer>(_list789.size);
                int _elem790;
                for (int _i791 = 0; _i791 < _list789.size; ++_i791)
                {
                  _elem790 = iprot.readI32();
                  struct.outputSlotIds.add(_elem790);
                }
                iprot.readListEnd();
              }
              struct.setOutputSlotIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTableFunctionNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fnCallExprList != null) {
        if (struct.isSetFnCallExprList()) {
          oprot.writeFieldBegin(FN_CALL_EXPR_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fnCallExprList.size()));
            for (org.apache.doris.thrift.TExpr _iter792 : struct.fnCallExprList)
            {
              _iter792.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.outputSlotIds != null) {
        if (struct.isSetOutputSlotIds()) {
          oprot.writeFieldBegin(OUTPUT_SLOT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.outputSlotIds.size()));
            for (int _iter793 : struct.outputSlotIds)
            {
              oprot.writeI32(_iter793);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTableFunctionNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTableFunctionNodeTupleScheme getScheme() {
      return new TTableFunctionNodeTupleScheme();
    }
  }

  private static class TTableFunctionNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTableFunctionNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTableFunctionNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFnCallExprList()) {
        optionals.set(0);
      }
      if (struct.isSetOutputSlotIds()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFnCallExprList()) {
        {
          oprot.writeI32(struct.fnCallExprList.size());
          for (org.apache.doris.thrift.TExpr _iter794 : struct.fnCallExprList)
          {
            _iter794.write(oprot);
          }
        }
      }
      if (struct.isSetOutputSlotIds()) {
        {
          oprot.writeI32(struct.outputSlotIds.size());
          for (int _iter795 : struct.outputSlotIds)
          {
            oprot.writeI32(_iter795);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTableFunctionNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list796 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.fnCallExprList = new java.util.ArrayList<org.apache.doris.thrift.TExpr>(_list796.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TExpr _elem797;
          for (int _i798 = 0; _i798 < _list796.size; ++_i798)
          {
            _elem797 = new org.apache.doris.thrift.TExpr();
            _elem797.read(iprot);
            struct.fnCallExprList.add(_elem797);
          }
        }
        struct.setFnCallExprListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list799 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.outputSlotIds = new java.util.ArrayList<java.lang.Integer>(_list799.size);
          int _elem800;
          for (int _i801 = 0; _i801 < _list799.size; ++_i801)
          {
            _elem800 = iprot.readI32();
            struct.outputSlotIds.add(_elem800);
          }
        }
        struct.setOutputSlotIdsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

