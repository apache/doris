/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-04-28")
public class TTabletWriterAddBatchParams implements org.apache.thrift.TBase<TTabletWriterAddBatchParams, TTabletWriterAddBatchParams._Fields>, java.io.Serializable, Cloneable, Comparable<TTabletWriterAddBatchParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTabletWriterAddBatchParams");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField INDEX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("index_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PACKET_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("packet_seq", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TABLET_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_ids", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField ROW_BATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("row_batch", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField SENDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("sender_no", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTabletWriterAddBatchParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTabletWriterAddBatchParamsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId id; // required
  public long index_id; // required
  public long packet_seq; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> tablet_ids; // required
  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TRowBatch row_batch; // required
  public int sender_no; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    INDEX_ID((short)2, "index_id"),
    PACKET_SEQ((short)3, "packet_seq"),
    TABLET_IDS((short)4, "tablet_ids"),
    ROW_BATCH((short)5, "row_batch"),
    SENDER_NO((short)6, "sender_no");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // INDEX_ID
          return INDEX_ID;
        case 3: // PACKET_SEQ
          return PACKET_SEQ;
        case 4: // TABLET_IDS
          return TABLET_IDS;
        case 5: // ROW_BATCH
          return ROW_BATCH;
        case 6: // SENDER_NO
          return SENDER_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INDEX_ID_ISSET_ID = 0;
  private static final int __PACKET_SEQ_ISSET_ID = 1;
  private static final int __SENDER_NO_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TUniqueId.class)));
    tmpMap.put(_Fields.INDEX_ID, new org.apache.thrift.meta_data.FieldMetaData("index_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PACKET_SEQ, new org.apache.thrift.meta_data.FieldMetaData("packet_seq", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TABLET_IDS, new org.apache.thrift.meta_data.FieldMetaData("tablet_ids", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64            , "TTabletId"))));
    tmpMap.put(_Fields.ROW_BATCH, new org.apache.thrift.meta_data.FieldMetaData("row_batch", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TRowBatch.class)));
    tmpMap.put(_Fields.SENDER_NO, new org.apache.thrift.meta_data.FieldMetaData("sender_no", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTabletWriterAddBatchParams.class, metaDataMap);
  }

  public TTabletWriterAddBatchParams() {
  }

  public TTabletWriterAddBatchParams(
    org.apache.doris.thrift.TUniqueId id,
    long index_id,
    long packet_seq,
    java.util.List<java.lang.Long> tablet_ids,
    org.apache.doris.thrift.TRowBatch row_batch,
    int sender_no)
  {
    this();
    this.id = id;
    this.index_id = index_id;
    setIndexIdIsSet(true);
    this.packet_seq = packet_seq;
    setPacketSeqIsSet(true);
    this.tablet_ids = tablet_ids;
    this.row_batch = row_batch;
    this.sender_no = sender_no;
    setSenderNoIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTabletWriterAddBatchParams(TTabletWriterAddBatchParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = new org.apache.doris.thrift.TUniqueId(other.id);
    }
    this.index_id = other.index_id;
    this.packet_seq = other.packet_seq;
    if (other.isSetTabletIds()) {
      java.util.List<java.lang.Long> __this__tablet_ids = new java.util.ArrayList<java.lang.Long>(other.tablet_ids.size());
      for (java.lang.Long other_element : other.tablet_ids) {
        __this__tablet_ids.add(other_element);
      }
      this.tablet_ids = __this__tablet_ids;
    }
    if (other.isSetRowBatch()) {
      this.row_batch = new org.apache.doris.thrift.TRowBatch(other.row_batch);
    }
    this.sender_no = other.sender_no;
  }

  public TTabletWriterAddBatchParams deepCopy() {
    return new TTabletWriterAddBatchParams(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setIndexIdIsSet(false);
    this.index_id = 0;
    setPacketSeqIsSet(false);
    this.packet_seq = 0;
    this.tablet_ids = null;
    this.row_batch = null;
    setSenderNoIsSet(false);
    this.sender_no = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TUniqueId getId() {
    return this.id;
  }

  public TTabletWriterAddBatchParams setId(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TUniqueId id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public long getIndexId() {
    return this.index_id;
  }

  public TTabletWriterAddBatchParams setIndexId(long index_id) {
    this.index_id = index_id;
    setIndexIdIsSet(true);
    return this;
  }

  public void unsetIndexId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDEX_ID_ISSET_ID);
  }

  /** Returns true if field index_id is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDEX_ID_ISSET_ID);
  }

  public void setIndexIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDEX_ID_ISSET_ID, value);
  }

  public long getPacketSeq() {
    return this.packet_seq;
  }

  public TTabletWriterAddBatchParams setPacketSeq(long packet_seq) {
    this.packet_seq = packet_seq;
    setPacketSeqIsSet(true);
    return this;
  }

  public void unsetPacketSeq() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PACKET_SEQ_ISSET_ID);
  }

  /** Returns true if field packet_seq is set (has been assigned a value) and false otherwise */
  public boolean isSetPacketSeq() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PACKET_SEQ_ISSET_ID);
  }

  public void setPacketSeqIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PACKET_SEQ_ISSET_ID, value);
  }

  public int getTabletIdsSize() {
    return (this.tablet_ids == null) ? 0 : this.tablet_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getTabletIdsIterator() {
    return (this.tablet_ids == null) ? null : this.tablet_ids.iterator();
  }

  public void addToTabletIds(long elem) {
    if (this.tablet_ids == null) {
      this.tablet_ids = new java.util.ArrayList<java.lang.Long>();
    }
    this.tablet_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getTabletIds() {
    return this.tablet_ids;
  }

  public TTabletWriterAddBatchParams setTabletIds(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> tablet_ids) {
    this.tablet_ids = tablet_ids;
    return this;
  }

  public void unsetTabletIds() {
    this.tablet_ids = null;
  }

  /** Returns true if field tablet_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetTabletIds() {
    return this.tablet_ids != null;
  }

  public void setTabletIdsIsSet(boolean value) {
    if (!value) {
      this.tablet_ids = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TRowBatch getRowBatch() {
    return this.row_batch;
  }

  public TTabletWriterAddBatchParams setRowBatch(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TRowBatch row_batch) {
    this.row_batch = row_batch;
    return this;
  }

  public void unsetRowBatch() {
    this.row_batch = null;
  }

  /** Returns true if field row_batch is set (has been assigned a value) and false otherwise */
  public boolean isSetRowBatch() {
    return this.row_batch != null;
  }

  public void setRowBatchIsSet(boolean value) {
    if (!value) {
      this.row_batch = null;
    }
  }

  public int getSenderNo() {
    return this.sender_no;
  }

  public TTabletWriterAddBatchParams setSenderNo(int sender_no) {
    this.sender_no = sender_no;
    setSenderNoIsSet(true);
    return this;
  }

  public void unsetSenderNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SENDER_NO_ISSET_ID);
  }

  /** Returns true if field sender_no is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SENDER_NO_ISSET_ID);
  }

  public void setSenderNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SENDER_NO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((org.apache.doris.thrift.TUniqueId)value);
      }
      break;

    case INDEX_ID:
      if (value == null) {
        unsetIndexId();
      } else {
        setIndexId((java.lang.Long)value);
      }
      break;

    case PACKET_SEQ:
      if (value == null) {
        unsetPacketSeq();
      } else {
        setPacketSeq((java.lang.Long)value);
      }
      break;

    case TABLET_IDS:
      if (value == null) {
        unsetTabletIds();
      } else {
        setTabletIds((java.util.List<java.lang.Long>)value);
      }
      break;

    case ROW_BATCH:
      if (value == null) {
        unsetRowBatch();
      } else {
        setRowBatch((org.apache.doris.thrift.TRowBatch)value);
      }
      break;

    case SENDER_NO:
      if (value == null) {
        unsetSenderNo();
      } else {
        setSenderNo((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case INDEX_ID:
      return getIndexId();

    case PACKET_SEQ:
      return getPacketSeq();

    case TABLET_IDS:
      return getTabletIds();

    case ROW_BATCH:
      return getRowBatch();

    case SENDER_NO:
      return getSenderNo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case INDEX_ID:
      return isSetIndexId();
    case PACKET_SEQ:
      return isSetPacketSeq();
    case TABLET_IDS:
      return isSetTabletIds();
    case ROW_BATCH:
      return isSetRowBatch();
    case SENDER_NO:
      return isSetSenderNo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTabletWriterAddBatchParams)
      return this.equals((TTabletWriterAddBatchParams)that);
    return false;
  }

  public boolean equals(TTabletWriterAddBatchParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_index_id = true;
    boolean that_present_index_id = true;
    if (this_present_index_id || that_present_index_id) {
      if (!(this_present_index_id && that_present_index_id))
        return false;
      if (this.index_id != that.index_id)
        return false;
    }

    boolean this_present_packet_seq = true;
    boolean that_present_packet_seq = true;
    if (this_present_packet_seq || that_present_packet_seq) {
      if (!(this_present_packet_seq && that_present_packet_seq))
        return false;
      if (this.packet_seq != that.packet_seq)
        return false;
    }

    boolean this_present_tablet_ids = true && this.isSetTabletIds();
    boolean that_present_tablet_ids = true && that.isSetTabletIds();
    if (this_present_tablet_ids || that_present_tablet_ids) {
      if (!(this_present_tablet_ids && that_present_tablet_ids))
        return false;
      if (!this.tablet_ids.equals(that.tablet_ids))
        return false;
    }

    boolean this_present_row_batch = true && this.isSetRowBatch();
    boolean that_present_row_batch = true && that.isSetRowBatch();
    if (this_present_row_batch || that_present_row_batch) {
      if (!(this_present_row_batch && that_present_row_batch))
        return false;
      if (!this.row_batch.equals(that.row_batch))
        return false;
    }

    boolean this_present_sender_no = true;
    boolean that_present_sender_no = true;
    if (this_present_sender_no || that_present_sender_no) {
      if (!(this_present_sender_no && that_present_sender_no))
        return false;
      if (this.sender_no != that.sender_no)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(index_id);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(packet_seq);

    hashCode = hashCode * 8191 + ((isSetTabletIds()) ? 131071 : 524287);
    if (isSetTabletIds())
      hashCode = hashCode * 8191 + tablet_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetRowBatch()) ? 131071 : 524287);
    if (isSetRowBatch())
      hashCode = hashCode * 8191 + row_batch.hashCode();

    hashCode = hashCode * 8191 + sender_no;

    return hashCode;
  }

  @Override
  public int compareTo(TTabletWriterAddBatchParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIndexId(), other.isSetIndexId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index_id, other.index_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPacketSeq(), other.isSetPacketSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPacketSeq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packet_seq, other.packet_seq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTabletIds(), other.isSetTabletIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTabletIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_ids, other.tablet_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRowBatch(), other.isSetRowBatch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowBatch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row_batch, other.row_batch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSenderNo(), other.isSetSenderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sender_no, other.sender_no);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTabletWriterAddBatchParams(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("index_id:");
    sb.append(this.index_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("packet_seq:");
    sb.append(this.packet_seq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tablet_ids:");
    if (this.tablet_ids == null) {
      sb.append("null");
    } else {
      sb.append(this.tablet_ids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("row_batch:");
    if (this.row_batch == null) {
      sb.append("null");
    } else {
      sb.append(this.row_batch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sender_no:");
    sb.append(this.sender_no);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'index_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'packet_seq' because it's a primitive and you chose the non-beans generator.
    if (tablet_ids == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tablet_ids' was not present! Struct: " + toString());
    }
    if (row_batch == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'row_batch' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'sender_no' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (id != null) {
      id.validate();
    }
    if (row_batch != null) {
      row_batch.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTabletWriterAddBatchParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTabletWriterAddBatchParamsStandardScheme getScheme() {
      return new TTabletWriterAddBatchParamsStandardScheme();
    }
  }

  private static class TTabletWriterAddBatchParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTabletWriterAddBatchParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTabletWriterAddBatchParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new org.apache.doris.thrift.TUniqueId();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INDEX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.index_id = iprot.readI64();
              struct.setIndexIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PACKET_SEQ
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.packet_seq = iprot.readI64();
              struct.setPacketSeqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLET_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list166 = iprot.readListBegin();
                struct.tablet_ids = new java.util.ArrayList<java.lang.Long>(_list166.size);
                long _elem167;
                for (int _i168 = 0; _i168 < _list166.size; ++_i168)
                {
                  _elem167 = iprot.readI64();
                  struct.tablet_ids.add(_elem167);
                }
                iprot.readListEnd();
              }
              struct.setTabletIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROW_BATCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.row_batch = new org.apache.doris.thrift.TRowBatch();
              struct.row_batch.read(iprot);
              struct.setRowBatchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SENDER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sender_no = iprot.readI32();
              struct.setSenderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIndexId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'index_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPacketSeq()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'packet_seq' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSenderNo()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sender_no' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTabletWriterAddBatchParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        struct.id.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INDEX_ID_FIELD_DESC);
      oprot.writeI64(struct.index_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PACKET_SEQ_FIELD_DESC);
      oprot.writeI64(struct.packet_seq);
      oprot.writeFieldEnd();
      if (struct.tablet_ids != null) {
        oprot.writeFieldBegin(TABLET_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.tablet_ids.size()));
          for (long _iter169 : struct.tablet_ids)
          {
            oprot.writeI64(_iter169);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.row_batch != null) {
        oprot.writeFieldBegin(ROW_BATCH_FIELD_DESC);
        struct.row_batch.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SENDER_NO_FIELD_DESC);
      oprot.writeI32(struct.sender_no);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTabletWriterAddBatchParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTabletWriterAddBatchParamsTupleScheme getScheme() {
      return new TTabletWriterAddBatchParamsTupleScheme();
    }
  }

  private static class TTabletWriterAddBatchParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTabletWriterAddBatchParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTabletWriterAddBatchParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id.write(oprot);
      oprot.writeI64(struct.index_id);
      oprot.writeI64(struct.packet_seq);
      {
        oprot.writeI32(struct.tablet_ids.size());
        for (long _iter170 : struct.tablet_ids)
        {
          oprot.writeI64(_iter170);
        }
      }
      struct.row_batch.write(oprot);
      oprot.writeI32(struct.sender_no);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTabletWriterAddBatchParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id = new org.apache.doris.thrift.TUniqueId();
      struct.id.read(iprot);
      struct.setIdIsSet(true);
      struct.index_id = iprot.readI64();
      struct.setIndexIdIsSet(true);
      struct.packet_seq = iprot.readI64();
      struct.setPacketSeqIsSet(true);
      {
        org.apache.thrift.protocol.TList _list171 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
        struct.tablet_ids = new java.util.ArrayList<java.lang.Long>(_list171.size);
        long _elem172;
        for (int _i173 = 0; _i173 < _list171.size; ++_i173)
        {
          _elem172 = iprot.readI64();
          struct.tablet_ids.add(_elem172);
        }
      }
      struct.setTabletIdsIsSet(true);
      struct.row_batch = new org.apache.doris.thrift.TRowBatch();
      struct.row_batch.read(iprot);
      struct.setRowBatchIsSet(true);
      struct.sender_no = iprot.readI32();
      struct.setSenderNoIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

