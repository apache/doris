/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-04-28")
public class TDataSpecification implements org.apache.thrift.TBase<TDataSpecification, TDataSpecification._Fields>, java.io.Serializable, Cloneable, Comparable<TDataSpecification> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDataSpecification");

  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("file_path", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField COLUMN_SEPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("column_separator", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LINE_SEPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("line_separator", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IS_NEGATIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_negative", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDataSpecificationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDataSpecificationTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TTableName table_name; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> file_path; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> columns; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String column_separator; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String line_separator; // optional
  public boolean is_negative; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_NAME((short)1, "table_name"),
    FILE_PATH((short)3, "file_path"),
    COLUMNS((short)4, "columns"),
    COLUMN_SEPARATOR((short)5, "column_separator"),
    LINE_SEPARATOR((short)6, "line_separator"),
    IS_NEGATIVE((short)7, "is_negative");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_NAME
          return TABLE_NAME;
        case 3: // FILE_PATH
          return FILE_PATH;
        case 4: // COLUMNS
          return COLUMNS;
        case 5: // COLUMN_SEPARATOR
          return COLUMN_SEPARATOR;
        case 6: // LINE_SEPARATOR
          return LINE_SEPARATOR;
        case 7: // IS_NEGATIVE
          return IS_NEGATIVE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_NEGATIVE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COLUMNS,_Fields.COLUMN_SEPARATOR,_Fields.LINE_SEPARATOR,_Fields.IS_NEGATIVE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTableName.class)));
    tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("file_path", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COLUMN_SEPARATOR, new org.apache.thrift.meta_data.FieldMetaData("column_separator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINE_SEPARATOR, new org.apache.thrift.meta_data.FieldMetaData("line_separator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_NEGATIVE, new org.apache.thrift.meta_data.FieldMetaData("is_negative", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDataSpecification.class, metaDataMap);
  }

  public TDataSpecification() {
  }

  public TDataSpecification(
    TTableName table_name,
    java.util.List<java.lang.String> file_path)
  {
    this();
    this.table_name = table_name;
    this.file_path = file_path;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDataSpecification(TDataSpecification other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTableName()) {
      this.table_name = new TTableName(other.table_name);
    }
    if (other.isSetFilePath()) {
      java.util.List<java.lang.String> __this__file_path = new java.util.ArrayList<java.lang.String>(other.file_path);
      this.file_path = __this__file_path;
    }
    if (other.isSetColumns()) {
      java.util.List<java.lang.String> __this__columns = new java.util.ArrayList<java.lang.String>(other.columns);
      this.columns = __this__columns;
    }
    if (other.isSetColumnSeparator()) {
      this.column_separator = other.column_separator;
    }
    if (other.isSetLineSeparator()) {
      this.line_separator = other.line_separator;
    }
    this.is_negative = other.is_negative;
  }

  public TDataSpecification deepCopy() {
    return new TDataSpecification(this);
  }

  @Override
  public void clear() {
    this.table_name = null;
    this.file_path = null;
    this.columns = null;
    this.column_separator = null;
    this.line_separator = null;
    setIsNegativeIsSet(false);
    this.is_negative = false;
  }

  @org.apache.thrift.annotation.Nullable
  public TTableName getTableName() {
    return this.table_name;
  }

  public TDataSpecification setTableName(@org.apache.thrift.annotation.Nullable TTableName table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTableName() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.table_name != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  public int getFilePathSize() {
    return (this.file_path == null) ? 0 : this.file_path.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getFilePathIterator() {
    return (this.file_path == null) ? null : this.file_path.iterator();
  }

  public void addToFilePath(java.lang.String elem) {
    if (this.file_path == null) {
      this.file_path = new java.util.ArrayList<java.lang.String>();
    }
    this.file_path.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getFilePath() {
    return this.file_path;
  }

  public TDataSpecification setFilePath(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> file_path) {
    this.file_path = file_path;
    return this;
  }

  public void unsetFilePath() {
    this.file_path = null;
  }

  /** Returns true if field file_path is set (has been assigned a value) and false otherwise */
  public boolean isSetFilePath() {
    return this.file_path != null;
  }

  public void setFilePathIsSet(boolean value) {
    if (!value) {
      this.file_path = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(java.lang.String elem) {
    if (this.columns == null) {
      this.columns = new java.util.ArrayList<java.lang.String>();
    }
    this.columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getColumns() {
    return this.columns;
  }

  public TDataSpecification setColumns(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumnSeparator() {
    return this.column_separator;
  }

  public TDataSpecification setColumnSeparator(@org.apache.thrift.annotation.Nullable java.lang.String column_separator) {
    this.column_separator = column_separator;
    return this;
  }

  public void unsetColumnSeparator() {
    this.column_separator = null;
  }

  /** Returns true if field column_separator is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnSeparator() {
    return this.column_separator != null;
  }

  public void setColumnSeparatorIsSet(boolean value) {
    if (!value) {
      this.column_separator = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLineSeparator() {
    return this.line_separator;
  }

  public TDataSpecification setLineSeparator(@org.apache.thrift.annotation.Nullable java.lang.String line_separator) {
    this.line_separator = line_separator;
    return this;
  }

  public void unsetLineSeparator() {
    this.line_separator = null;
  }

  /** Returns true if field line_separator is set (has been assigned a value) and false otherwise */
  public boolean isSetLineSeparator() {
    return this.line_separator != null;
  }

  public void setLineSeparatorIsSet(boolean value) {
    if (!value) {
      this.line_separator = null;
    }
  }

  public boolean isIsNegative() {
    return this.is_negative;
  }

  public TDataSpecification setIsNegative(boolean is_negative) {
    this.is_negative = is_negative;
    setIsNegativeIsSet(true);
    return this;
  }

  public void unsetIsNegative() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_NEGATIVE_ISSET_ID);
  }

  /** Returns true if field is_negative is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNegative() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_NEGATIVE_ISSET_ID);
  }

  public void setIsNegativeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_NEGATIVE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        setTableName((TTableName)value);
      }
      break;

    case FILE_PATH:
      if (value == null) {
        unsetFilePath();
      } else {
        setFilePath((java.util.List<java.lang.String>)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((java.util.List<java.lang.String>)value);
      }
      break;

    case COLUMN_SEPARATOR:
      if (value == null) {
        unsetColumnSeparator();
      } else {
        setColumnSeparator((java.lang.String)value);
      }
      break;

    case LINE_SEPARATOR:
      if (value == null) {
        unsetLineSeparator();
      } else {
        setLineSeparator((java.lang.String)value);
      }
      break;

    case IS_NEGATIVE:
      if (value == null) {
        unsetIsNegative();
      } else {
        setIsNegative((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_NAME:
      return getTableName();

    case FILE_PATH:
      return getFilePath();

    case COLUMNS:
      return getColumns();

    case COLUMN_SEPARATOR:
      return getColumnSeparator();

    case LINE_SEPARATOR:
      return getLineSeparator();

    case IS_NEGATIVE:
      return isIsNegative();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLE_NAME:
      return isSetTableName();
    case FILE_PATH:
      return isSetFilePath();
    case COLUMNS:
      return isSetColumns();
    case COLUMN_SEPARATOR:
      return isSetColumnSeparator();
    case LINE_SEPARATOR:
      return isSetLineSeparator();
    case IS_NEGATIVE:
      return isSetIsNegative();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TDataSpecification)
      return this.equals((TDataSpecification)that);
    return false;
  }

  public boolean equals(TDataSpecification that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_table_name = true && this.isSetTableName();
    boolean that_present_table_name = true && that.isSetTableName();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_file_path = true && this.isSetFilePath();
    boolean that_present_file_path = true && that.isSetFilePath();
    if (this_present_file_path || that_present_file_path) {
      if (!(this_present_file_path && that_present_file_path))
        return false;
      if (!this.file_path.equals(that.file_path))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_column_separator = true && this.isSetColumnSeparator();
    boolean that_present_column_separator = true && that.isSetColumnSeparator();
    if (this_present_column_separator || that_present_column_separator) {
      if (!(this_present_column_separator && that_present_column_separator))
        return false;
      if (!this.column_separator.equals(that.column_separator))
        return false;
    }

    boolean this_present_line_separator = true && this.isSetLineSeparator();
    boolean that_present_line_separator = true && that.isSetLineSeparator();
    if (this_present_line_separator || that_present_line_separator) {
      if (!(this_present_line_separator && that_present_line_separator))
        return false;
      if (!this.line_separator.equals(that.line_separator))
        return false;
    }

    boolean this_present_is_negative = true && this.isSetIsNegative();
    boolean that_present_is_negative = true && that.isSetIsNegative();
    if (this_present_is_negative || that_present_is_negative) {
      if (!(this_present_is_negative && that_present_is_negative))
        return false;
      if (this.is_negative != that.is_negative)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTableName()) ? 131071 : 524287);
    if (isSetTableName())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetFilePath()) ? 131071 : 524287);
    if (isSetFilePath())
      hashCode = hashCode * 8191 + file_path.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumns()) ? 131071 : 524287);
    if (isSetColumns())
      hashCode = hashCode * 8191 + columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnSeparator()) ? 131071 : 524287);
    if (isSetColumnSeparator())
      hashCode = hashCode * 8191 + column_separator.hashCode();

    hashCode = hashCode * 8191 + ((isSetLineSeparator()) ? 131071 : 524287);
    if (isSetLineSeparator())
      hashCode = hashCode * 8191 + line_separator.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsNegative()) ? 131071 : 524287);
    if (isSetIsNegative())
      hashCode = hashCode * 8191 + ((is_negative) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TDataSpecification other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTableName(), other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFilePath(), other.isSetFilePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_path, other.file_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumns(), other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnSeparator(), other.isSetColumnSeparator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnSeparator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_separator, other.column_separator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLineSeparator(), other.isSetLineSeparator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineSeparator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line_separator, other.line_separator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsNegative(), other.isSetIsNegative());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNegative()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_negative, other.is_negative);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDataSpecification(");
    boolean first = true;

    sb.append("table_name:");
    if (this.table_name == null) {
      sb.append("null");
    } else {
      sb.append(this.table_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("file_path:");
    if (this.file_path == null) {
      sb.append("null");
    } else {
      sb.append(this.file_path);
    }
    first = false;
    if (isSetColumns()) {
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
    }
    if (isSetColumnSeparator()) {
      if (!first) sb.append(", ");
      sb.append("column_separator:");
      if (this.column_separator == null) {
        sb.append("null");
      } else {
        sb.append(this.column_separator);
      }
      first = false;
    }
    if (isSetLineSeparator()) {
      if (!first) sb.append(", ");
      sb.append("line_separator:");
      if (this.line_separator == null) {
        sb.append("null");
      } else {
        sb.append(this.line_separator);
      }
      first = false;
    }
    if (isSetIsNegative()) {
      if (!first) sb.append(", ");
      sb.append("is_negative:");
      sb.append(this.is_negative);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (table_name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table_name' was not present! Struct: " + toString());
    }
    if (file_path == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_path' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (table_name != null) {
      table_name.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDataSpecificationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDataSpecificationStandardScheme getScheme() {
      return new TDataSpecificationStandardScheme();
    }
  }

  private static class TDataSpecificationStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDataSpecification> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDataSpecification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.table_name = new TTableName();
              struct.table_name.read(iprot);
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                struct.file_path = new java.util.ArrayList<java.lang.String>(_list76.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem77;
                for (int _i78 = 0; _i78 < _list76.size; ++_i78)
                {
                  _elem77 = iprot.readString();
                  struct.file_path.add(_elem77);
                }
                iprot.readListEnd();
              }
              struct.setFilePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list79 = iprot.readListBegin();
                struct.columns = new java.util.ArrayList<java.lang.String>(_list79.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem80;
                for (int _i81 = 0; _i81 < _list79.size; ++_i81)
                {
                  _elem80 = iprot.readString();
                  struct.columns.add(_elem80);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLUMN_SEPARATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column_separator = iprot.readString();
              struct.setColumnSeparatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LINE_SEPARATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.line_separator = iprot.readString();
              struct.setLineSeparatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_NEGATIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_negative = iprot.readBool();
              struct.setIsNegativeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDataSpecification struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        struct.table_name.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.file_path != null) {
        oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.file_path.size()));
          for (java.lang.String _iter82 : struct.file_path)
          {
            oprot.writeString(_iter82);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.columns != null) {
        if (struct.isSetColumns()) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columns.size()));
            for (java.lang.String _iter83 : struct.columns)
            {
              oprot.writeString(_iter83);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_separator != null) {
        if (struct.isSetColumnSeparator()) {
          oprot.writeFieldBegin(COLUMN_SEPARATOR_FIELD_DESC);
          oprot.writeString(struct.column_separator);
          oprot.writeFieldEnd();
        }
      }
      if (struct.line_separator != null) {
        if (struct.isSetLineSeparator()) {
          oprot.writeFieldBegin(LINE_SEPARATOR_FIELD_DESC);
          oprot.writeString(struct.line_separator);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsNegative()) {
        oprot.writeFieldBegin(IS_NEGATIVE_FIELD_DESC);
        oprot.writeBool(struct.is_negative);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDataSpecificationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TDataSpecificationTupleScheme getScheme() {
      return new TDataSpecificationTupleScheme();
    }
  }

  private static class TDataSpecificationTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDataSpecification> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDataSpecification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.table_name.write(oprot);
      {
        oprot.writeI32(struct.file_path.size());
        for (java.lang.String _iter84 : struct.file_path)
        {
          oprot.writeString(_iter84);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetColumns()) {
        optionals.set(0);
      }
      if (struct.isSetColumnSeparator()) {
        optionals.set(1);
      }
      if (struct.isSetLineSeparator()) {
        optionals.set(2);
      }
      if (struct.isSetIsNegative()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetColumns()) {
        {
          oprot.writeI32(struct.columns.size());
          for (java.lang.String _iter85 : struct.columns)
          {
            oprot.writeString(_iter85);
          }
        }
      }
      if (struct.isSetColumnSeparator()) {
        oprot.writeString(struct.column_separator);
      }
      if (struct.isSetLineSeparator()) {
        oprot.writeString(struct.line_separator);
      }
      if (struct.isSetIsNegative()) {
        oprot.writeBool(struct.is_negative);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDataSpecification struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.table_name = new TTableName();
      struct.table_name.read(iprot);
      struct.setTableNameIsSet(true);
      {
        org.apache.thrift.protocol.TList _list86 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.file_path = new java.util.ArrayList<java.lang.String>(_list86.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem87;
        for (int _i88 = 0; _i88 < _list86.size; ++_i88)
        {
          _elem87 = iprot.readString();
          struct.file_path.add(_elem87);
        }
      }
      struct.setFilePathIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list89 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.columns = new java.util.ArrayList<java.lang.String>(_list89.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem90;
          for (int _i91 = 0; _i91 < _list89.size; ++_i91)
          {
            _elem90 = iprot.readString();
            struct.columns.add(_elem90);
          }
        }
        struct.setColumnsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.column_separator = iprot.readString();
        struct.setColumnSeparatorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.line_separator = iprot.readString();
        struct.setLineSeparatorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.is_negative = iprot.readBool();
        struct.setIsNegativeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

