/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-04-28")
public class TTypeNode implements org.apache.thrift.TBase<TTypeNode, TTypeNode._Fields>, java.io.Serializable, Cloneable, Comparable<TTypeNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTypeNode");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SCALAR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scalar_type", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField STRUCT_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("struct_fields", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CONTAINS_NULL_FIELD_DESC = new org.apache.thrift.protocol.TField("contains_null", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField CONTAINS_NULLS_FIELD_DESC = new org.apache.thrift.protocol.TField("contains_nulls", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTypeNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTypeNodeTupleSchemeFactory();

  /**
   * 
   * @see TTypeNodeType
   */
  public @org.apache.thrift.annotation.Nullable TTypeNodeType type; // required
  public @org.apache.thrift.annotation.Nullable TScalarType scalar_type; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TStructField> struct_fields; // optional
  public boolean contains_null; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> contains_nulls; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TTypeNodeType
     */
    TYPE((short)1, "type"),
    SCALAR_TYPE((short)2, "scalar_type"),
    STRUCT_FIELDS((short)3, "struct_fields"),
    CONTAINS_NULL((short)4, "contains_null"),
    CONTAINS_NULLS((short)5, "contains_nulls");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // SCALAR_TYPE
          return SCALAR_TYPE;
        case 3: // STRUCT_FIELDS
          return STRUCT_FIELDS;
        case 4: // CONTAINS_NULL
          return CONTAINS_NULL;
        case 5: // CONTAINS_NULLS
          return CONTAINS_NULLS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONTAINS_NULL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SCALAR_TYPE,_Fields.STRUCT_FIELDS,_Fields.CONTAINS_NULL,_Fields.CONTAINS_NULLS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTypeNodeType.class)));
    tmpMap.put(_Fields.SCALAR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("scalar_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TScalarType.class)));
    tmpMap.put(_Fields.STRUCT_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("struct_fields", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TStructField.class))));
    tmpMap.put(_Fields.CONTAINS_NULL, new org.apache.thrift.meta_data.FieldMetaData("contains_null", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CONTAINS_NULLS, new org.apache.thrift.meta_data.FieldMetaData("contains_nulls", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTypeNode.class, metaDataMap);
  }

  public TTypeNode() {
  }

  public TTypeNode(
    TTypeNodeType type)
  {
    this();
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTypeNode(TTypeNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetScalarType()) {
      this.scalar_type = new TScalarType(other.scalar_type);
    }
    if (other.isSetStructFields()) {
      java.util.List<TStructField> __this__struct_fields = new java.util.ArrayList<TStructField>(other.struct_fields.size());
      for (TStructField other_element : other.struct_fields) {
        __this__struct_fields.add(new TStructField(other_element));
      }
      this.struct_fields = __this__struct_fields;
    }
    this.contains_null = other.contains_null;
    if (other.isSetContainsNulls()) {
      java.util.List<java.lang.Boolean> __this__contains_nulls = new java.util.ArrayList<java.lang.Boolean>(other.contains_nulls);
      this.contains_nulls = __this__contains_nulls;
    }
  }

  public TTypeNode deepCopy() {
    return new TTypeNode(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.scalar_type = null;
    this.struct_fields = null;
    setContainsNullIsSet(false);
    this.contains_null = false;
    this.contains_nulls = null;
  }

  /**
   * 
   * @see TTypeNodeType
   */
  @org.apache.thrift.annotation.Nullable
  public TTypeNodeType getType() {
    return this.type;
  }

  /**
   * 
   * @see TTypeNodeType
   */
  public TTypeNode setType(@org.apache.thrift.annotation.Nullable TTypeNodeType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TScalarType getScalarType() {
    return this.scalar_type;
  }

  public TTypeNode setScalarType(@org.apache.thrift.annotation.Nullable TScalarType scalar_type) {
    this.scalar_type = scalar_type;
    return this;
  }

  public void unsetScalarType() {
    this.scalar_type = null;
  }

  /** Returns true if field scalar_type is set (has been assigned a value) and false otherwise */
  public boolean isSetScalarType() {
    return this.scalar_type != null;
  }

  public void setScalarTypeIsSet(boolean value) {
    if (!value) {
      this.scalar_type = null;
    }
  }

  public int getStructFieldsSize() {
    return (this.struct_fields == null) ? 0 : this.struct_fields.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TStructField> getStructFieldsIterator() {
    return (this.struct_fields == null) ? null : this.struct_fields.iterator();
  }

  public void addToStructFields(TStructField elem) {
    if (this.struct_fields == null) {
      this.struct_fields = new java.util.ArrayList<TStructField>();
    }
    this.struct_fields.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TStructField> getStructFields() {
    return this.struct_fields;
  }

  public TTypeNode setStructFields(@org.apache.thrift.annotation.Nullable java.util.List<TStructField> struct_fields) {
    this.struct_fields = struct_fields;
    return this;
  }

  public void unsetStructFields() {
    this.struct_fields = null;
  }

  /** Returns true if field struct_fields is set (has been assigned a value) and false otherwise */
  public boolean isSetStructFields() {
    return this.struct_fields != null;
  }

  public void setStructFieldsIsSet(boolean value) {
    if (!value) {
      this.struct_fields = null;
    }
  }

  public boolean isContainsNull() {
    return this.contains_null;
  }

  public TTypeNode setContainsNull(boolean contains_null) {
    this.contains_null = contains_null;
    setContainsNullIsSet(true);
    return this;
  }

  public void unsetContainsNull() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONTAINS_NULL_ISSET_ID);
  }

  /** Returns true if field contains_null is set (has been assigned a value) and false otherwise */
  public boolean isSetContainsNull() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONTAINS_NULL_ISSET_ID);
  }

  public void setContainsNullIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONTAINS_NULL_ISSET_ID, value);
  }

  public int getContainsNullsSize() {
    return (this.contains_nulls == null) ? 0 : this.contains_nulls.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Boolean> getContainsNullsIterator() {
    return (this.contains_nulls == null) ? null : this.contains_nulls.iterator();
  }

  public void addToContainsNulls(boolean elem) {
    if (this.contains_nulls == null) {
      this.contains_nulls = new java.util.ArrayList<java.lang.Boolean>();
    }
    this.contains_nulls.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Boolean> getContainsNulls() {
    return this.contains_nulls;
  }

  public TTypeNode setContainsNulls(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Boolean> contains_nulls) {
    this.contains_nulls = contains_nulls;
    return this;
  }

  public void unsetContainsNulls() {
    this.contains_nulls = null;
  }

  /** Returns true if field contains_nulls is set (has been assigned a value) and false otherwise */
  public boolean isSetContainsNulls() {
    return this.contains_nulls != null;
  }

  public void setContainsNullsIsSet(boolean value) {
    if (!value) {
      this.contains_nulls = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TTypeNodeType)value);
      }
      break;

    case SCALAR_TYPE:
      if (value == null) {
        unsetScalarType();
      } else {
        setScalarType((TScalarType)value);
      }
      break;

    case STRUCT_FIELDS:
      if (value == null) {
        unsetStructFields();
      } else {
        setStructFields((java.util.List<TStructField>)value);
      }
      break;

    case CONTAINS_NULL:
      if (value == null) {
        unsetContainsNull();
      } else {
        setContainsNull((java.lang.Boolean)value);
      }
      break;

    case CONTAINS_NULLS:
      if (value == null) {
        unsetContainsNulls();
      } else {
        setContainsNulls((java.util.List<java.lang.Boolean>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case SCALAR_TYPE:
      return getScalarType();

    case STRUCT_FIELDS:
      return getStructFields();

    case CONTAINS_NULL:
      return isContainsNull();

    case CONTAINS_NULLS:
      return getContainsNulls();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case SCALAR_TYPE:
      return isSetScalarType();
    case STRUCT_FIELDS:
      return isSetStructFields();
    case CONTAINS_NULL:
      return isSetContainsNull();
    case CONTAINS_NULLS:
      return isSetContainsNulls();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTypeNode)
      return this.equals((TTypeNode)that);
    return false;
  }

  public boolean equals(TTypeNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_scalar_type = true && this.isSetScalarType();
    boolean that_present_scalar_type = true && that.isSetScalarType();
    if (this_present_scalar_type || that_present_scalar_type) {
      if (!(this_present_scalar_type && that_present_scalar_type))
        return false;
      if (!this.scalar_type.equals(that.scalar_type))
        return false;
    }

    boolean this_present_struct_fields = true && this.isSetStructFields();
    boolean that_present_struct_fields = true && that.isSetStructFields();
    if (this_present_struct_fields || that_present_struct_fields) {
      if (!(this_present_struct_fields && that_present_struct_fields))
        return false;
      if (!this.struct_fields.equals(that.struct_fields))
        return false;
    }

    boolean this_present_contains_null = true && this.isSetContainsNull();
    boolean that_present_contains_null = true && that.isSetContainsNull();
    if (this_present_contains_null || that_present_contains_null) {
      if (!(this_present_contains_null && that_present_contains_null))
        return false;
      if (this.contains_null != that.contains_null)
        return false;
    }

    boolean this_present_contains_nulls = true && this.isSetContainsNulls();
    boolean that_present_contains_nulls = true && that.isSetContainsNulls();
    if (this_present_contains_nulls || that_present_contains_nulls) {
      if (!(this_present_contains_nulls && that_present_contains_nulls))
        return false;
      if (!this.contains_nulls.equals(that.contains_nulls))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetScalarType()) ? 131071 : 524287);
    if (isSetScalarType())
      hashCode = hashCode * 8191 + scalar_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetStructFields()) ? 131071 : 524287);
    if (isSetStructFields())
      hashCode = hashCode * 8191 + struct_fields.hashCode();

    hashCode = hashCode * 8191 + ((isSetContainsNull()) ? 131071 : 524287);
    if (isSetContainsNull())
      hashCode = hashCode * 8191 + ((contains_null) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetContainsNulls()) ? 131071 : 524287);
    if (isSetContainsNulls())
      hashCode = hashCode * 8191 + contains_nulls.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TTypeNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetScalarType(), other.isSetScalarType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScalarType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scalar_type, other.scalar_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStructFields(), other.isSetStructFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStructFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.struct_fields, other.struct_fields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetContainsNull(), other.isSetContainsNull());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContainsNull()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contains_null, other.contains_null);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetContainsNulls(), other.isSetContainsNulls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContainsNulls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contains_nulls, other.contains_nulls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTypeNode(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetScalarType()) {
      if (!first) sb.append(", ");
      sb.append("scalar_type:");
      if (this.scalar_type == null) {
        sb.append("null");
      } else {
        sb.append(this.scalar_type);
      }
      first = false;
    }
    if (isSetStructFields()) {
      if (!first) sb.append(", ");
      sb.append("struct_fields:");
      if (this.struct_fields == null) {
        sb.append("null");
      } else {
        sb.append(this.struct_fields);
      }
      first = false;
    }
    if (isSetContainsNull()) {
      if (!first) sb.append(", ");
      sb.append("contains_null:");
      sb.append(this.contains_null);
      first = false;
    }
    if (isSetContainsNulls()) {
      if (!first) sb.append(", ");
      sb.append("contains_nulls:");
      if (this.contains_nulls == null) {
        sb.append("null");
      } else {
        sb.append(this.contains_nulls);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (scalar_type != null) {
      scalar_type.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTypeNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTypeNodeStandardScheme getScheme() {
      return new TTypeNodeStandardScheme();
    }
  }

  private static class TTypeNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTypeNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTypeNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = org.apache.doris.thrift.TTypeNodeType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCALAR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.scalar_type = new TScalarType();
              struct.scalar_type.read(iprot);
              struct.setScalarTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRUCT_FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.struct_fields = new java.util.ArrayList<TStructField>(_list0.size);
                @org.apache.thrift.annotation.Nullable TStructField _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new TStructField();
                  _elem1.read(iprot);
                  struct.struct_fields.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setStructFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTAINS_NULL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.contains_null = iprot.readBool();
              struct.setContainsNullIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTAINS_NULLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.contains_nulls = new java.util.ArrayList<java.lang.Boolean>(_list3.size);
                boolean _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readBool();
                  struct.contains_nulls.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setContainsNullsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTypeNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.scalar_type != null) {
        if (struct.isSetScalarType()) {
          oprot.writeFieldBegin(SCALAR_TYPE_FIELD_DESC);
          struct.scalar_type.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.struct_fields != null) {
        if (struct.isSetStructFields()) {
          oprot.writeFieldBegin(STRUCT_FIELDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.struct_fields.size()));
            for (TStructField _iter6 : struct.struct_fields)
            {
              _iter6.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetContainsNull()) {
        oprot.writeFieldBegin(CONTAINS_NULL_FIELD_DESC);
        oprot.writeBool(struct.contains_null);
        oprot.writeFieldEnd();
      }
      if (struct.contains_nulls != null) {
        if (struct.isSetContainsNulls()) {
          oprot.writeFieldBegin(CONTAINS_NULLS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.contains_nulls.size()));
            for (boolean _iter7 : struct.contains_nulls)
            {
              oprot.writeBool(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTypeNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TTypeNodeTupleScheme getScheme() {
      return new TTypeNodeTupleScheme();
    }
  }

  private static class TTypeNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTypeNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTypeNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetScalarType()) {
        optionals.set(0);
      }
      if (struct.isSetStructFields()) {
        optionals.set(1);
      }
      if (struct.isSetContainsNull()) {
        optionals.set(2);
      }
      if (struct.isSetContainsNulls()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetScalarType()) {
        struct.scalar_type.write(oprot);
      }
      if (struct.isSetStructFields()) {
        {
          oprot.writeI32(struct.struct_fields.size());
          for (TStructField _iter8 : struct.struct_fields)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetContainsNull()) {
        oprot.writeBool(struct.contains_null);
      }
      if (struct.isSetContainsNulls()) {
        {
          oprot.writeI32(struct.contains_nulls.size());
          for (boolean _iter9 : struct.contains_nulls)
          {
            oprot.writeBool(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTypeNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.type = org.apache.doris.thrift.TTypeNodeType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.scalar_type = new TScalarType();
        struct.scalar_type.read(iprot);
        struct.setScalarTypeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list10 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.struct_fields = new java.util.ArrayList<TStructField>(_list10.size);
          @org.apache.thrift.annotation.Nullable TStructField _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = new TStructField();
            _elem11.read(iprot);
            struct.struct_fields.add(_elem11);
          }
        }
        struct.setStructFieldsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contains_null = iprot.readBool();
        struct.setContainsNullIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.BOOL);
          struct.contains_nulls = new java.util.ArrayList<java.lang.Boolean>(_list13.size);
          boolean _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readBool();
            struct.contains_nulls.add(_elem14);
          }
        }
        struct.setContainsNullsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

