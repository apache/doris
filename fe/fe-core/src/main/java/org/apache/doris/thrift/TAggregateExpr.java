/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-04-28")
public class TAggregateExpr implements org.apache.thrift.TBase<TAggregateExpr, TAggregateExpr._Fields>, java.io.Serializable, Cloneable, Comparable<TAggregateExpr> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAggregateExpr");

  private static final org.apache.thrift.protocol.TField IS_MERGE_AGG_FIELD_DESC = new org.apache.thrift.protocol.TField("is_merge_agg", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField PARAM_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("param_types", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAggregateExprStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAggregateExprTupleSchemeFactory();

  public boolean is_merge_agg; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TTypeDesc> param_types; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_MERGE_AGG((short)1, "is_merge_agg"),
    PARAM_TYPES((short)2, "param_types");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_MERGE_AGG
          return IS_MERGE_AGG;
        case 2: // PARAM_TYPES
          return PARAM_TYPES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_MERGE_AGG_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARAM_TYPES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_MERGE_AGG, new org.apache.thrift.meta_data.FieldMetaData("is_merge_agg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARAM_TYPES, new org.apache.thrift.meta_data.FieldMetaData("param_types", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TTypeDesc.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAggregateExpr.class, metaDataMap);
  }

  public TAggregateExpr() {
  }

  public TAggregateExpr(
    boolean is_merge_agg)
  {
    this();
    this.is_merge_agg = is_merge_agg;
    setIsMergeAggIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAggregateExpr(TAggregateExpr other) {
    __isset_bitfield = other.__isset_bitfield;
    this.is_merge_agg = other.is_merge_agg;
    if (other.isSetParamTypes()) {
      java.util.List<org.apache.doris.thrift.TTypeDesc> __this__param_types = new java.util.ArrayList<org.apache.doris.thrift.TTypeDesc>(other.param_types.size());
      for (org.apache.doris.thrift.TTypeDesc other_element : other.param_types) {
        __this__param_types.add(new org.apache.doris.thrift.TTypeDesc(other_element));
      }
      this.param_types = __this__param_types;
    }
  }

  public TAggregateExpr deepCopy() {
    return new TAggregateExpr(this);
  }

  @Override
  public void clear() {
    setIsMergeAggIsSet(false);
    this.is_merge_agg = false;
    this.param_types = null;
  }

  public boolean isIsMergeAgg() {
    return this.is_merge_agg;
  }

  public TAggregateExpr setIsMergeAgg(boolean is_merge_agg) {
    this.is_merge_agg = is_merge_agg;
    setIsMergeAggIsSet(true);
    return this;
  }

  public void unsetIsMergeAgg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_MERGE_AGG_ISSET_ID);
  }

  /** Returns true if field is_merge_agg is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMergeAgg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_MERGE_AGG_ISSET_ID);
  }

  public void setIsMergeAggIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_MERGE_AGG_ISSET_ID, value);
  }

  public int getParamTypesSize() {
    return (this.param_types == null) ? 0 : this.param_types.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<org.apache.doris.thrift.TTypeDesc> getParamTypesIterator() {
    return (this.param_types == null) ? null : this.param_types.iterator();
  }

  public void addToParamTypes(org.apache.doris.thrift.TTypeDesc elem) {
    if (this.param_types == null) {
      this.param_types = new java.util.ArrayList<org.apache.doris.thrift.TTypeDesc>();
    }
    this.param_types.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<org.apache.doris.thrift.TTypeDesc> getParamTypes() {
    return this.param_types;
  }

  public TAggregateExpr setParamTypes(@org.apache.thrift.annotation.Nullable java.util.List<org.apache.doris.thrift.TTypeDesc> param_types) {
    this.param_types = param_types;
    return this;
  }

  public void unsetParamTypes() {
    this.param_types = null;
  }

  /** Returns true if field param_types is set (has been assigned a value) and false otherwise */
  public boolean isSetParamTypes() {
    return this.param_types != null;
  }

  public void setParamTypesIsSet(boolean value) {
    if (!value) {
      this.param_types = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case IS_MERGE_AGG:
      if (value == null) {
        unsetIsMergeAgg();
      } else {
        setIsMergeAgg((java.lang.Boolean)value);
      }
      break;

    case PARAM_TYPES:
      if (value == null) {
        unsetParamTypes();
      } else {
        setParamTypes((java.util.List<org.apache.doris.thrift.TTypeDesc>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_MERGE_AGG:
      return isIsMergeAgg();

    case PARAM_TYPES:
      return getParamTypes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case IS_MERGE_AGG:
      return isSetIsMergeAgg();
    case PARAM_TYPES:
      return isSetParamTypes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TAggregateExpr)
      return this.equals((TAggregateExpr)that);
    return false;
  }

  public boolean equals(TAggregateExpr that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_is_merge_agg = true;
    boolean that_present_is_merge_agg = true;
    if (this_present_is_merge_agg || that_present_is_merge_agg) {
      if (!(this_present_is_merge_agg && that_present_is_merge_agg))
        return false;
      if (this.is_merge_agg != that.is_merge_agg)
        return false;
    }

    boolean this_present_param_types = true && this.isSetParamTypes();
    boolean that_present_param_types = true && that.isSetParamTypes();
    if (this_present_param_types || that_present_param_types) {
      if (!(this_present_param_types && that_present_param_types))
        return false;
      if (!this.param_types.equals(that.param_types))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((is_merge_agg) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetParamTypes()) ? 131071 : 524287);
    if (isSetParamTypes())
      hashCode = hashCode * 8191 + param_types.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TAggregateExpr other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetIsMergeAgg(), other.isSetIsMergeAgg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMergeAgg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_merge_agg, other.is_merge_agg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetParamTypes(), other.isSetParamTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParamTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param_types, other.param_types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TAggregateExpr(");
    boolean first = true;

    sb.append("is_merge_agg:");
    sb.append(this.is_merge_agg);
    first = false;
    if (isSetParamTypes()) {
      if (!first) sb.append(", ");
      sb.append("param_types:");
      if (this.param_types == null) {
        sb.append("null");
      } else {
        sb.append(this.param_types);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'is_merge_agg' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAggregateExprStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAggregateExprStandardScheme getScheme() {
      return new TAggregateExprStandardScheme();
    }
  }

  private static class TAggregateExprStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAggregateExpr> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAggregateExpr struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_MERGE_AGG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_merge_agg = iprot.readBool();
              struct.setIsMergeAggIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARAM_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.param_types = new java.util.ArrayList<org.apache.doris.thrift.TTypeDesc>(_list0.size);
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TTypeDesc _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new org.apache.doris.thrift.TTypeDesc();
                  _elem1.read(iprot);
                  struct.param_types.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setParamTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIsMergeAgg()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'is_merge_agg' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAggregateExpr struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_MERGE_AGG_FIELD_DESC);
      oprot.writeBool(struct.is_merge_agg);
      oprot.writeFieldEnd();
      if (struct.param_types != null) {
        if (struct.isSetParamTypes()) {
          oprot.writeFieldBegin(PARAM_TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.param_types.size()));
            for (org.apache.doris.thrift.TTypeDesc _iter3 : struct.param_types)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAggregateExprTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAggregateExprTupleScheme getScheme() {
      return new TAggregateExprTupleScheme();
    }
  }

  private static class TAggregateExprTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAggregateExpr> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAggregateExpr struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeBool(struct.is_merge_agg);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetParamTypes()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetParamTypes()) {
        {
          oprot.writeI32(struct.param_types.size());
          for (org.apache.doris.thrift.TTypeDesc _iter4 : struct.param_types)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAggregateExpr struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.is_merge_agg = iprot.readBool();
      struct.setIsMergeAggIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.param_types = new java.util.ArrayList<org.apache.doris.thrift.TTypeDesc>(_list5.size);
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TTypeDesc _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new org.apache.doris.thrift.TTypeDesc();
            _elem6.read(iprot);
            struct.param_types.add(_elem6);
          }
        }
        struct.setParamTypesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

