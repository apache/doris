// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package org.apache.doris.nereids.rules.expression.rewrite.rules;

import org.apache.doris.catalog.PrimitiveType;
import org.apache.doris.nereids.annotation.DependsRules;
import org.apache.doris.nereids.exceptions.AnalysisException;
import org.apache.doris.nereids.jobs.batch.CheckLegalityBeforeTypeCoercion;
import org.apache.doris.nereids.rules.expression.rewrite.AbstractExpressionRewriteRule;
import org.apache.doris.nereids.rules.expression.rewrite.ExpressionRewriteContext;
import org.apache.doris.nereids.trees.expressions.Between;
import org.apache.doris.nereids.trees.expressions.BinaryArithmetic;
import org.apache.doris.nereids.trees.expressions.BitNot;
import org.apache.doris.nereids.trees.expressions.CaseWhen;
import org.apache.doris.nereids.trees.expressions.Cast;
import org.apache.doris.nereids.trees.expressions.ComparisonPredicate;
import org.apache.doris.nereids.trees.expressions.CompoundPredicate;
import org.apache.doris.nereids.trees.expressions.Divide;
import org.apache.doris.nereids.trees.expressions.Expression;
import org.apache.doris.nereids.trees.expressions.InPredicate;
import org.apache.doris.nereids.trees.expressions.IntegralDivide;
import org.apache.doris.nereids.trees.expressions.Not;
import org.apache.doris.nereids.trees.expressions.TimestampArithmetic;
import org.apache.doris.nereids.trees.expressions.typecoercion.ImplicitCastInputTypes;
import org.apache.doris.nereids.types.BigIntType;
import org.apache.doris.nereids.types.coercion.AbstractDataType;
import org.apache.doris.nereids.util.TypeCoercionUtils;

import java.util.List;
import java.util.stream.Collectors;

/**
 * a rule to add implicit cast for expressions.
 * This class is inspired by spark's TypeCoercion.
 * only process expressions generated by unnest subquery. other expressions already process by FunctionBinder.
 */
@Deprecated
@DependsRules(CheckLegalityBeforeTypeCoercion.class)
public class TypeCoercion extends AbstractExpressionRewriteRule {

    public static final TypeCoercion INSTANCE = new TypeCoercion();

    @Override
    public Expression visit(Expression expr, ExpressionRewriteContext ctx) {
        if (expr instanceof ImplicitCastInputTypes) {
            List<AbstractDataType> expectedInputTypes = ((ImplicitCastInputTypes) expr).expectedInputTypes();
            if (!expectedInputTypes.isEmpty()) {
                return visitImplicitCastInputTypes(expr, expectedInputTypes, ctx);
            }
        }

        return super.visit(expr, ctx);
    }

    @Override
    public Expression visitBitNot(BitNot bitNot, ExpressionRewriteContext context) {
        Expression child = rewrite(bitNot.child(), context);
        if (child.getDataType().toCatalogDataType().getPrimitiveType().ordinal()
                > PrimitiveType.LARGEINT.ordinal()) {
            child = new Cast(child, BigIntType.INSTANCE);
        }
        return bitNot.withChildren(child);
    }

    @Override
    public Expression visitDivide(Divide divide, ExpressionRewriteContext context) {
        Expression left = rewrite(divide.left(), context);
        Expression right = rewrite(divide.right(), context);
        return divide.withChildren(left, right);
    }

    @Override
    public Expression visitIntegralDivide(IntegralDivide integralDivide, ExpressionRewriteContext context) {
        Expression left = rewrite(integralDivide.left(), context);
        Expression right = rewrite(integralDivide.right(), context);
        return integralDivide.withChildren(left, right);
    }

    @Override
    public Expression visitBinaryArithmetic(BinaryArithmetic binaryArithmetic, ExpressionRewriteContext context) {
        Expression left = rewrite(binaryArithmetic.left(), context);
        Expression right = rewrite(binaryArithmetic.right(), context);
        return binaryArithmetic.withChildren(left, right);
    }

    @Override
    public Expression visitNot(Not not, ExpressionRewriteContext context) {
        Expression child = rewrite(not.child(), context);
        if (!child.getDataType().isBooleanType() && !child.getDataType().isNullType()) {
            throw new AnalysisException(String.format(
                    "Operand '%s' part of predicate " + "'%s' should return type 'BOOLEAN' but "
                            + "returns type '%s'.",
                    child.toSql(), not.toSql(), child.getDataType()));
        }
        return not.withChildren(child);
    }

    @Override
    public Expression visitCompoundPredicate(CompoundPredicate compoundPredicate, ExpressionRewriteContext context) {
        Expression left = rewrite(compoundPredicate.left(), context);
        Expression right = rewrite(compoundPredicate.right(), context);
        CompoundPredicate ret = (CompoundPredicate) compoundPredicate.withChildren(left, right);
        return TypeCoercionUtils.processCompoundPredicate(ret);
    }

    @Override
    public Expression visitComparisonPredicate(ComparisonPredicate cp, ExpressionRewriteContext context) {
        Expression left = rewrite(cp.left(), context);
        Expression right = rewrite(cp.right(), context);
        return TypeCoercionUtils.processComparisonPredicate(cp, left, right);
    }

    @Override
    public Expression visitCaseWhen(CaseWhen caseWhen, ExpressionRewriteContext context) {
        List<Expression> rewrittenChildren = caseWhen.children().stream()
                .map(e -> rewrite(e, context)).collect(Collectors.toList());
        return caseWhen.withChildren(rewrittenChildren);
    }

    @Override
    public Expression visitInPredicate(InPredicate inPredicate, ExpressionRewriteContext context) {
        List<Expression> rewrittenChildren = inPredicate.children().stream()
                .map(e -> rewrite(e, context)).collect(Collectors.toList());
        return inPredicate.withChildren(rewrittenChildren);
    }

    @Override
    public Expression visitTimestampArithmetic(TimestampArithmetic arithmetic, ExpressionRewriteContext context) {
        Expression left = rewrite(arithmetic.left(), context);
        Expression right = rewrite(arithmetic.right(), context);
        return arithmetic.withChildren(left, right);
    }

    @Override
    public Expression visitBetween(Between between, ExpressionRewriteContext context) {
        List<Expression> rewrittenChildren = between.children().stream()
                .map(e -> rewrite(e, context)).collect(Collectors.toList());
        return between.withChildren(rewrittenChildren);
    }

    /**
     * Do implicit cast for expression's children.
     */
    private Expression visitImplicitCastInputTypes(Expression expr,
            List<AbstractDataType> expectedInputTypes, ExpressionRewriteContext ctx) {
        expr = expr.withChildren(child -> rewrite(child, ctx));
        return TypeCoercionUtils.implicitCastInputTypes(expr, expectedInputTypes);
    }
}
