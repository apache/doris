// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package org.apache.doris.nereids.trees.expressions.functions.scalar;

import org.apache.doris.catalog.FunctionSignature;
import org.apache.doris.nereids.exceptions.AnalysisException;
import org.apache.doris.nereids.trees.expressions.Expression;
import org.apache.doris.nereids.trees.expressions.functions.AlwaysNullable;
import org.apache.doris.nereids.trees.expressions.functions.ExplicitlyCastableSignature;
import org.apache.doris.nereids.trees.expressions.functions.PropagateNullLiteral;
import org.apache.doris.nereids.trees.expressions.literal.Literal;
import org.apache.doris.nereids.trees.expressions.shape.TernaryExpression;
import org.apache.doris.nereids.trees.expressions.shape.BinaryExpression;
import org.apache.doris.nereids.trees.expressions.visitor.ExpressionVisitor;
import org.apache.doris.nereids.types.BigIntType;
import org.apache.doris.nereids.types.DataType;
import org.apache.doris.nereids.types.StringType;
import org.apache.doris.nereids.types.VarcharType;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;

import java.util.List;

/**
 * ScalarFunction 'regexp_position'. This class is generated by hand.
 */
public class RegexpPosition extends ScalarFunction
        implements BinaryExpression, TernaryExpression, ExplicitlyCastableSignature, AlwaysNullable, PropagateNullLiteral {

    public static final List<FunctionSignature> SIGNATURES = ImmutableList.of(
            // Two-argument overloads: (str, pattern)
            FunctionSignature.ret(BigIntType.INSTANCE)
                    .args(VarcharType.SYSTEM_DEFAULT, VarcharType.SYSTEM_DEFAULT),
            FunctionSignature.ret(BigIntType.INSTANCE)
                    .args(StringType.INSTANCE, StringType.INSTANCE),
            // Three-argument overloads: (str, pattern, start)
            FunctionSignature.ret(BigIntType.INSTANCE)
                    .args(VarcharType.SYSTEM_DEFAULT, VarcharType.SYSTEM_DEFAULT, VarcharType.SYSTEM_DEFAULT),
            FunctionSignature.ret(BigIntType.INSTANCE)
                    .args(StringType.INSTANCE, StringType.INSTANCE, StringType.INSTANCE)
    );

    /**
     * Constructor for two arguments.
     */
    public RegexpPosition(Expression arg0, Expression arg1) {
        super("regexp_position", arg0, arg1);
    }

    /**
     * Constructor for three arguments.
     */
    public RegexpPosition(Expression arg0, Expression arg1, Expression arg2) {
        super("regexp_position", arg0, arg1, arg2);
    }

    @Override
    public RegexpPosition withChildren(List<Expression> children) {
        Preconditions.checkArgument(children.size() == 2 || children.size() == 3,
                "RegexpPosition should have 2 or 3 children, but got: " + children.size());
        if (children.size() == 2) {
            return new RegexpPosition(children.get(0), children.get(1));
        } else {
            return new RegexpPosition(children.get(0), children.get(1), children.get(2));
        }
    }

    @Override
    public void checkLegalityBeforeTypeCoercion() {
        if (children().size() == 2) {
            return;
        }
        // When there are 3 arguments, the third must be a string literal
        if (children().size() == 3) {
            Expression startExpr = child(2);
            DataType type = startExpr.getDataType();
            if (!type.isStringLikeType()) {
                throw new AnalysisException(
                        "The third param of regexp_position must be a string type: " + this.toSql());
            }
            if (!(startExpr instanceof Literal)) {
                throw new AnalysisException(
                        "The third param of regexp_position must be a constant value: " + this.toSql());
            }
        }
    }

    @Override
    public List<FunctionSignature> getSignatures() {
        return SIGNATURES;
    }

    @Override
    public <R, C> R accept(ExpressionVisitor<R, C> visitor, C context) {
        return visitor.visitRegexpPosition(this, context);
    }
}
