/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-04-28")
public class TCsvScanNode implements org.apache.thrift.TBase<TCsvScanNode, TCsvScanNode._Fields>, java.io.Serializable, Cloneable, Comparable<TCsvScanNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCsvScanNode");

  private static final org.apache.thrift.protocol.TField TUPLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_PATHS_FIELD_DESC = new org.apache.thrift.protocol.TField("file_paths", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_SEPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("column_separator", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LINE_DELIMITER_FIELD_DESC = new org.apache.thrift.protocol.TField("line_delimiter", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COLUMN_TYPE_MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("column_type_mapping", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField UNSPECIFIED_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("unspecified_columns", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField DEFAULT_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("default_values", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField MAX_FILTER_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("max_filter_ratio", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField COLUMN_FUNCTION_MAPPING_FIELD_DESC = new org.apache.thrift.protocol.TField("column_function_mapping", org.apache.thrift.protocol.TType.MAP, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TCsvScanNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TCsvScanNodeTupleSchemeFactory();

  public int tuple_id; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> file_paths; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String column_separator; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String line_delimiter; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,org.apache.doris.thrift.TColumnType> column_type_mapping; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> columns; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> unspecified_columns; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> default_values; // optional
  public double max_filter_ratio; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,TMiniLoadEtlFunction> column_function_mapping; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TUPLE_ID((short)1, "tuple_id"),
    FILE_PATHS((short)2, "file_paths"),
    COLUMN_SEPARATOR((short)3, "column_separator"),
    LINE_DELIMITER((short)4, "line_delimiter"),
    COLUMN_TYPE_MAPPING((short)5, "column_type_mapping"),
    COLUMNS((short)6, "columns"),
    UNSPECIFIED_COLUMNS((short)7, "unspecified_columns"),
    DEFAULT_VALUES((short)8, "default_values"),
    MAX_FILTER_RATIO((short)9, "max_filter_ratio"),
    COLUMN_FUNCTION_MAPPING((short)10, "column_function_mapping");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TUPLE_ID
          return TUPLE_ID;
        case 2: // FILE_PATHS
          return FILE_PATHS;
        case 3: // COLUMN_SEPARATOR
          return COLUMN_SEPARATOR;
        case 4: // LINE_DELIMITER
          return LINE_DELIMITER;
        case 5: // COLUMN_TYPE_MAPPING
          return COLUMN_TYPE_MAPPING;
        case 6: // COLUMNS
          return COLUMNS;
        case 7: // UNSPECIFIED_COLUMNS
          return UNSPECIFIED_COLUMNS;
        case 8: // DEFAULT_VALUES
          return DEFAULT_VALUES;
        case 9: // MAX_FILTER_RATIO
          return MAX_FILTER_RATIO;
        case 10: // COLUMN_FUNCTION_MAPPING
          return COLUMN_FUNCTION_MAPPING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TUPLE_ID_ISSET_ID = 0;
  private static final int __MAX_FILTER_RATIO_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COLUMN_SEPARATOR,_Fields.LINE_DELIMITER,_Fields.COLUMN_TYPE_MAPPING,_Fields.COLUMNS,_Fields.UNSPECIFIED_COLUMNS,_Fields.DEFAULT_VALUES,_Fields.MAX_FILTER_RATIO,_Fields.COLUMN_FUNCTION_MAPPING};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TUPLE_ID, new org.apache.thrift.meta_data.FieldMetaData("tuple_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TTupleId")));
    tmpMap.put(_Fields.FILE_PATHS, new org.apache.thrift.meta_data.FieldMetaData("file_paths", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COLUMN_SEPARATOR, new org.apache.thrift.meta_data.FieldMetaData("column_separator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LINE_DELIMITER, new org.apache.thrift.meta_data.FieldMetaData("line_delimiter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_TYPE_MAPPING, new org.apache.thrift.meta_data.FieldMetaData("column_type_mapping", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TColumnType.class))));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.UNSPECIFIED_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("unspecified_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DEFAULT_VALUES, new org.apache.thrift.meta_data.FieldMetaData("default_values", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAX_FILTER_RATIO, new org.apache.thrift.meta_data.FieldMetaData("max_filter_ratio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COLUMN_FUNCTION_MAPPING, new org.apache.thrift.meta_data.FieldMetaData("column_function_mapping", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMiniLoadEtlFunction.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCsvScanNode.class, metaDataMap);
  }

  public TCsvScanNode() {
  }

  public TCsvScanNode(
    int tuple_id,
    java.util.List<java.lang.String> file_paths)
  {
    this();
    this.tuple_id = tuple_id;
    setTupleIdIsSet(true);
    this.file_paths = file_paths;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCsvScanNode(TCsvScanNode other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tuple_id = other.tuple_id;
    if (other.isSetFilePaths()) {
      java.util.List<java.lang.String> __this__file_paths = new java.util.ArrayList<java.lang.String>(other.file_paths);
      this.file_paths = __this__file_paths;
    }
    if (other.isSetColumnSeparator()) {
      this.column_separator = other.column_separator;
    }
    if (other.isSetLineDelimiter()) {
      this.line_delimiter = other.line_delimiter;
    }
    if (other.isSetColumnTypeMapping()) {
      java.util.Map<java.lang.String,org.apache.doris.thrift.TColumnType> __this__column_type_mapping = new java.util.HashMap<java.lang.String,org.apache.doris.thrift.TColumnType>(other.column_type_mapping.size());
      for (java.util.Map.Entry<java.lang.String, org.apache.doris.thrift.TColumnType> other_element : other.column_type_mapping.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        org.apache.doris.thrift.TColumnType other_element_value = other_element.getValue();

        java.lang.String __this__column_type_mapping_copy_key = other_element_key;

        org.apache.doris.thrift.TColumnType __this__column_type_mapping_copy_value = new org.apache.doris.thrift.TColumnType(other_element_value);

        __this__column_type_mapping.put(__this__column_type_mapping_copy_key, __this__column_type_mapping_copy_value);
      }
      this.column_type_mapping = __this__column_type_mapping;
    }
    if (other.isSetColumns()) {
      java.util.List<java.lang.String> __this__columns = new java.util.ArrayList<java.lang.String>(other.columns);
      this.columns = __this__columns;
    }
    if (other.isSetUnspecifiedColumns()) {
      java.util.List<java.lang.String> __this__unspecified_columns = new java.util.ArrayList<java.lang.String>(other.unspecified_columns);
      this.unspecified_columns = __this__unspecified_columns;
    }
    if (other.isSetDefaultValues()) {
      java.util.List<java.lang.String> __this__default_values = new java.util.ArrayList<java.lang.String>(other.default_values);
      this.default_values = __this__default_values;
    }
    this.max_filter_ratio = other.max_filter_ratio;
    if (other.isSetColumnFunctionMapping()) {
      java.util.Map<java.lang.String,TMiniLoadEtlFunction> __this__column_function_mapping = new java.util.HashMap<java.lang.String,TMiniLoadEtlFunction>(other.column_function_mapping.size());
      for (java.util.Map.Entry<java.lang.String, TMiniLoadEtlFunction> other_element : other.column_function_mapping.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        TMiniLoadEtlFunction other_element_value = other_element.getValue();

        java.lang.String __this__column_function_mapping_copy_key = other_element_key;

        TMiniLoadEtlFunction __this__column_function_mapping_copy_value = new TMiniLoadEtlFunction(other_element_value);

        __this__column_function_mapping.put(__this__column_function_mapping_copy_key, __this__column_function_mapping_copy_value);
      }
      this.column_function_mapping = __this__column_function_mapping;
    }
  }

  public TCsvScanNode deepCopy() {
    return new TCsvScanNode(this);
  }

  @Override
  public void clear() {
    setTupleIdIsSet(false);
    this.tuple_id = 0;
    this.file_paths = null;
    this.column_separator = null;
    this.line_delimiter = null;
    this.column_type_mapping = null;
    this.columns = null;
    this.unspecified_columns = null;
    this.default_values = null;
    setMaxFilterRatioIsSet(false);
    this.max_filter_ratio = 0.0;
    this.column_function_mapping = null;
  }

  public int getTupleId() {
    return this.tuple_id;
  }

  public TCsvScanNode setTupleId(int tuple_id) {
    this.tuple_id = tuple_id;
    setTupleIdIsSet(true);
    return this;
  }

  public void unsetTupleId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  /** Returns true if field tuple_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTupleId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TUPLE_ID_ISSET_ID);
  }

  public void setTupleIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TUPLE_ID_ISSET_ID, value);
  }

  public int getFilePathsSize() {
    return (this.file_paths == null) ? 0 : this.file_paths.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getFilePathsIterator() {
    return (this.file_paths == null) ? null : this.file_paths.iterator();
  }

  public void addToFilePaths(java.lang.String elem) {
    if (this.file_paths == null) {
      this.file_paths = new java.util.ArrayList<java.lang.String>();
    }
    this.file_paths.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getFilePaths() {
    return this.file_paths;
  }

  public TCsvScanNode setFilePaths(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> file_paths) {
    this.file_paths = file_paths;
    return this;
  }

  public void unsetFilePaths() {
    this.file_paths = null;
  }

  /** Returns true if field file_paths is set (has been assigned a value) and false otherwise */
  public boolean isSetFilePaths() {
    return this.file_paths != null;
  }

  public void setFilePathsIsSet(boolean value) {
    if (!value) {
      this.file_paths = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumnSeparator() {
    return this.column_separator;
  }

  public TCsvScanNode setColumnSeparator(@org.apache.thrift.annotation.Nullable java.lang.String column_separator) {
    this.column_separator = column_separator;
    return this;
  }

  public void unsetColumnSeparator() {
    this.column_separator = null;
  }

  /** Returns true if field column_separator is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnSeparator() {
    return this.column_separator != null;
  }

  public void setColumnSeparatorIsSet(boolean value) {
    if (!value) {
      this.column_separator = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLineDelimiter() {
    return this.line_delimiter;
  }

  public TCsvScanNode setLineDelimiter(@org.apache.thrift.annotation.Nullable java.lang.String line_delimiter) {
    this.line_delimiter = line_delimiter;
    return this;
  }

  public void unsetLineDelimiter() {
    this.line_delimiter = null;
  }

  /** Returns true if field line_delimiter is set (has been assigned a value) and false otherwise */
  public boolean isSetLineDelimiter() {
    return this.line_delimiter != null;
  }

  public void setLineDelimiterIsSet(boolean value) {
    if (!value) {
      this.line_delimiter = null;
    }
  }

  public int getColumnTypeMappingSize() {
    return (this.column_type_mapping == null) ? 0 : this.column_type_mapping.size();
  }

  public void putToColumnTypeMapping(java.lang.String key, org.apache.doris.thrift.TColumnType val) {
    if (this.column_type_mapping == null) {
      this.column_type_mapping = new java.util.HashMap<java.lang.String,org.apache.doris.thrift.TColumnType>();
    }
    this.column_type_mapping.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,org.apache.doris.thrift.TColumnType> getColumnTypeMapping() {
    return this.column_type_mapping;
  }

  public TCsvScanNode setColumnTypeMapping(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,org.apache.doris.thrift.TColumnType> column_type_mapping) {
    this.column_type_mapping = column_type_mapping;
    return this;
  }

  public void unsetColumnTypeMapping() {
    this.column_type_mapping = null;
  }

  /** Returns true if field column_type_mapping is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnTypeMapping() {
    return this.column_type_mapping != null;
  }

  public void setColumnTypeMappingIsSet(boolean value) {
    if (!value) {
      this.column_type_mapping = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(java.lang.String elem) {
    if (this.columns == null) {
      this.columns = new java.util.ArrayList<java.lang.String>();
    }
    this.columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getColumns() {
    return this.columns;
  }

  public TCsvScanNode setColumns(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public int getUnspecifiedColumnsSize() {
    return (this.unspecified_columns == null) ? 0 : this.unspecified_columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getUnspecifiedColumnsIterator() {
    return (this.unspecified_columns == null) ? null : this.unspecified_columns.iterator();
  }

  public void addToUnspecifiedColumns(java.lang.String elem) {
    if (this.unspecified_columns == null) {
      this.unspecified_columns = new java.util.ArrayList<java.lang.String>();
    }
    this.unspecified_columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getUnspecifiedColumns() {
    return this.unspecified_columns;
  }

  public TCsvScanNode setUnspecifiedColumns(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> unspecified_columns) {
    this.unspecified_columns = unspecified_columns;
    return this;
  }

  public void unsetUnspecifiedColumns() {
    this.unspecified_columns = null;
  }

  /** Returns true if field unspecified_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetUnspecifiedColumns() {
    return this.unspecified_columns != null;
  }

  public void setUnspecifiedColumnsIsSet(boolean value) {
    if (!value) {
      this.unspecified_columns = null;
    }
  }

  public int getDefaultValuesSize() {
    return (this.default_values == null) ? 0 : this.default_values.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getDefaultValuesIterator() {
    return (this.default_values == null) ? null : this.default_values.iterator();
  }

  public void addToDefaultValues(java.lang.String elem) {
    if (this.default_values == null) {
      this.default_values = new java.util.ArrayList<java.lang.String>();
    }
    this.default_values.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getDefaultValues() {
    return this.default_values;
  }

  public TCsvScanNode setDefaultValues(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> default_values) {
    this.default_values = default_values;
    return this;
  }

  public void unsetDefaultValues() {
    this.default_values = null;
  }

  /** Returns true if field default_values is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultValues() {
    return this.default_values != null;
  }

  public void setDefaultValuesIsSet(boolean value) {
    if (!value) {
      this.default_values = null;
    }
  }

  public double getMaxFilterRatio() {
    return this.max_filter_ratio;
  }

  public TCsvScanNode setMaxFilterRatio(double max_filter_ratio) {
    this.max_filter_ratio = max_filter_ratio;
    setMaxFilterRatioIsSet(true);
    return this;
  }

  public void unsetMaxFilterRatio() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_FILTER_RATIO_ISSET_ID);
  }

  /** Returns true if field max_filter_ratio is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxFilterRatio() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_FILTER_RATIO_ISSET_ID);
  }

  public void setMaxFilterRatioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_FILTER_RATIO_ISSET_ID, value);
  }

  public int getColumnFunctionMappingSize() {
    return (this.column_function_mapping == null) ? 0 : this.column_function_mapping.size();
  }

  public void putToColumnFunctionMapping(java.lang.String key, TMiniLoadEtlFunction val) {
    if (this.column_function_mapping == null) {
      this.column_function_mapping = new java.util.HashMap<java.lang.String,TMiniLoadEtlFunction>();
    }
    this.column_function_mapping.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,TMiniLoadEtlFunction> getColumnFunctionMapping() {
    return this.column_function_mapping;
  }

  public TCsvScanNode setColumnFunctionMapping(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,TMiniLoadEtlFunction> column_function_mapping) {
    this.column_function_mapping = column_function_mapping;
    return this;
  }

  public void unsetColumnFunctionMapping() {
    this.column_function_mapping = null;
  }

  /** Returns true if field column_function_mapping is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnFunctionMapping() {
    return this.column_function_mapping != null;
  }

  public void setColumnFunctionMappingIsSet(boolean value) {
    if (!value) {
      this.column_function_mapping = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TUPLE_ID:
      if (value == null) {
        unsetTupleId();
      } else {
        setTupleId((java.lang.Integer)value);
      }
      break;

    case FILE_PATHS:
      if (value == null) {
        unsetFilePaths();
      } else {
        setFilePaths((java.util.List<java.lang.String>)value);
      }
      break;

    case COLUMN_SEPARATOR:
      if (value == null) {
        unsetColumnSeparator();
      } else {
        setColumnSeparator((java.lang.String)value);
      }
      break;

    case LINE_DELIMITER:
      if (value == null) {
        unsetLineDelimiter();
      } else {
        setLineDelimiter((java.lang.String)value);
      }
      break;

    case COLUMN_TYPE_MAPPING:
      if (value == null) {
        unsetColumnTypeMapping();
      } else {
        setColumnTypeMapping((java.util.Map<java.lang.String,org.apache.doris.thrift.TColumnType>)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((java.util.List<java.lang.String>)value);
      }
      break;

    case UNSPECIFIED_COLUMNS:
      if (value == null) {
        unsetUnspecifiedColumns();
      } else {
        setUnspecifiedColumns((java.util.List<java.lang.String>)value);
      }
      break;

    case DEFAULT_VALUES:
      if (value == null) {
        unsetDefaultValues();
      } else {
        setDefaultValues((java.util.List<java.lang.String>)value);
      }
      break;

    case MAX_FILTER_RATIO:
      if (value == null) {
        unsetMaxFilterRatio();
      } else {
        setMaxFilterRatio((java.lang.Double)value);
      }
      break;

    case COLUMN_FUNCTION_MAPPING:
      if (value == null) {
        unsetColumnFunctionMapping();
      } else {
        setColumnFunctionMapping((java.util.Map<java.lang.String,TMiniLoadEtlFunction>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TUPLE_ID:
      return getTupleId();

    case FILE_PATHS:
      return getFilePaths();

    case COLUMN_SEPARATOR:
      return getColumnSeparator();

    case LINE_DELIMITER:
      return getLineDelimiter();

    case COLUMN_TYPE_MAPPING:
      return getColumnTypeMapping();

    case COLUMNS:
      return getColumns();

    case UNSPECIFIED_COLUMNS:
      return getUnspecifiedColumns();

    case DEFAULT_VALUES:
      return getDefaultValues();

    case MAX_FILTER_RATIO:
      return getMaxFilterRatio();

    case COLUMN_FUNCTION_MAPPING:
      return getColumnFunctionMapping();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TUPLE_ID:
      return isSetTupleId();
    case FILE_PATHS:
      return isSetFilePaths();
    case COLUMN_SEPARATOR:
      return isSetColumnSeparator();
    case LINE_DELIMITER:
      return isSetLineDelimiter();
    case COLUMN_TYPE_MAPPING:
      return isSetColumnTypeMapping();
    case COLUMNS:
      return isSetColumns();
    case UNSPECIFIED_COLUMNS:
      return isSetUnspecifiedColumns();
    case DEFAULT_VALUES:
      return isSetDefaultValues();
    case MAX_FILTER_RATIO:
      return isSetMaxFilterRatio();
    case COLUMN_FUNCTION_MAPPING:
      return isSetColumnFunctionMapping();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TCsvScanNode)
      return this.equals((TCsvScanNode)that);
    return false;
  }

  public boolean equals(TCsvScanNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tuple_id = true;
    boolean that_present_tuple_id = true;
    if (this_present_tuple_id || that_present_tuple_id) {
      if (!(this_present_tuple_id && that_present_tuple_id))
        return false;
      if (this.tuple_id != that.tuple_id)
        return false;
    }

    boolean this_present_file_paths = true && this.isSetFilePaths();
    boolean that_present_file_paths = true && that.isSetFilePaths();
    if (this_present_file_paths || that_present_file_paths) {
      if (!(this_present_file_paths && that_present_file_paths))
        return false;
      if (!this.file_paths.equals(that.file_paths))
        return false;
    }

    boolean this_present_column_separator = true && this.isSetColumnSeparator();
    boolean that_present_column_separator = true && that.isSetColumnSeparator();
    if (this_present_column_separator || that_present_column_separator) {
      if (!(this_present_column_separator && that_present_column_separator))
        return false;
      if (!this.column_separator.equals(that.column_separator))
        return false;
    }

    boolean this_present_line_delimiter = true && this.isSetLineDelimiter();
    boolean that_present_line_delimiter = true && that.isSetLineDelimiter();
    if (this_present_line_delimiter || that_present_line_delimiter) {
      if (!(this_present_line_delimiter && that_present_line_delimiter))
        return false;
      if (!this.line_delimiter.equals(that.line_delimiter))
        return false;
    }

    boolean this_present_column_type_mapping = true && this.isSetColumnTypeMapping();
    boolean that_present_column_type_mapping = true && that.isSetColumnTypeMapping();
    if (this_present_column_type_mapping || that_present_column_type_mapping) {
      if (!(this_present_column_type_mapping && that_present_column_type_mapping))
        return false;
      if (!this.column_type_mapping.equals(that.column_type_mapping))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_unspecified_columns = true && this.isSetUnspecifiedColumns();
    boolean that_present_unspecified_columns = true && that.isSetUnspecifiedColumns();
    if (this_present_unspecified_columns || that_present_unspecified_columns) {
      if (!(this_present_unspecified_columns && that_present_unspecified_columns))
        return false;
      if (!this.unspecified_columns.equals(that.unspecified_columns))
        return false;
    }

    boolean this_present_default_values = true && this.isSetDefaultValues();
    boolean that_present_default_values = true && that.isSetDefaultValues();
    if (this_present_default_values || that_present_default_values) {
      if (!(this_present_default_values && that_present_default_values))
        return false;
      if (!this.default_values.equals(that.default_values))
        return false;
    }

    boolean this_present_max_filter_ratio = true && this.isSetMaxFilterRatio();
    boolean that_present_max_filter_ratio = true && that.isSetMaxFilterRatio();
    if (this_present_max_filter_ratio || that_present_max_filter_ratio) {
      if (!(this_present_max_filter_ratio && that_present_max_filter_ratio))
        return false;
      if (this.max_filter_ratio != that.max_filter_ratio)
        return false;
    }

    boolean this_present_column_function_mapping = true && this.isSetColumnFunctionMapping();
    boolean that_present_column_function_mapping = true && that.isSetColumnFunctionMapping();
    if (this_present_column_function_mapping || that_present_column_function_mapping) {
      if (!(this_present_column_function_mapping && that_present_column_function_mapping))
        return false;
      if (!this.column_function_mapping.equals(that.column_function_mapping))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + tuple_id;

    hashCode = hashCode * 8191 + ((isSetFilePaths()) ? 131071 : 524287);
    if (isSetFilePaths())
      hashCode = hashCode * 8191 + file_paths.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnSeparator()) ? 131071 : 524287);
    if (isSetColumnSeparator())
      hashCode = hashCode * 8191 + column_separator.hashCode();

    hashCode = hashCode * 8191 + ((isSetLineDelimiter()) ? 131071 : 524287);
    if (isSetLineDelimiter())
      hashCode = hashCode * 8191 + line_delimiter.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumnTypeMapping()) ? 131071 : 524287);
    if (isSetColumnTypeMapping())
      hashCode = hashCode * 8191 + column_type_mapping.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumns()) ? 131071 : 524287);
    if (isSetColumns())
      hashCode = hashCode * 8191 + columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetUnspecifiedColumns()) ? 131071 : 524287);
    if (isSetUnspecifiedColumns())
      hashCode = hashCode * 8191 + unspecified_columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefaultValues()) ? 131071 : 524287);
    if (isSetDefaultValues())
      hashCode = hashCode * 8191 + default_values.hashCode();

    hashCode = hashCode * 8191 + ((isSetMaxFilterRatio()) ? 131071 : 524287);
    if (isSetMaxFilterRatio())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_filter_ratio);

    hashCode = hashCode * 8191 + ((isSetColumnFunctionMapping()) ? 131071 : 524287);
    if (isSetColumnFunctionMapping())
      hashCode = hashCode * 8191 + column_function_mapping.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TCsvScanNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTupleId(), other.isSetTupleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTupleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple_id, other.tuple_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFilePaths(), other.isSetFilePaths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilePaths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_paths, other.file_paths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnSeparator(), other.isSetColumnSeparator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnSeparator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_separator, other.column_separator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLineDelimiter(), other.isSetLineDelimiter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineDelimiter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line_delimiter, other.line_delimiter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnTypeMapping(), other.isSetColumnTypeMapping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnTypeMapping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_type_mapping, other.column_type_mapping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumns(), other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUnspecifiedColumns(), other.isSetUnspecifiedColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnspecifiedColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unspecified_columns, other.unspecified_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDefaultValues(), other.isSetDefaultValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.default_values, other.default_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxFilterRatio(), other.isSetMaxFilterRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxFilterRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_filter_ratio, other.max_filter_ratio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumnFunctionMapping(), other.isSetColumnFunctionMapping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnFunctionMapping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_function_mapping, other.column_function_mapping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TCsvScanNode(");
    boolean first = true;

    sb.append("tuple_id:");
    sb.append(this.tuple_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("file_paths:");
    if (this.file_paths == null) {
      sb.append("null");
    } else {
      sb.append(this.file_paths);
    }
    first = false;
    if (isSetColumnSeparator()) {
      if (!first) sb.append(", ");
      sb.append("column_separator:");
      if (this.column_separator == null) {
        sb.append("null");
      } else {
        sb.append(this.column_separator);
      }
      first = false;
    }
    if (isSetLineDelimiter()) {
      if (!first) sb.append(", ");
      sb.append("line_delimiter:");
      if (this.line_delimiter == null) {
        sb.append("null");
      } else {
        sb.append(this.line_delimiter);
      }
      first = false;
    }
    if (isSetColumnTypeMapping()) {
      if (!first) sb.append(", ");
      sb.append("column_type_mapping:");
      if (this.column_type_mapping == null) {
        sb.append("null");
      } else {
        sb.append(this.column_type_mapping);
      }
      first = false;
    }
    if (isSetColumns()) {
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
    }
    if (isSetUnspecifiedColumns()) {
      if (!first) sb.append(", ");
      sb.append("unspecified_columns:");
      if (this.unspecified_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.unspecified_columns);
      }
      first = false;
    }
    if (isSetDefaultValues()) {
      if (!first) sb.append(", ");
      sb.append("default_values:");
      if (this.default_values == null) {
        sb.append("null");
      } else {
        sb.append(this.default_values);
      }
      first = false;
    }
    if (isSetMaxFilterRatio()) {
      if (!first) sb.append(", ");
      sb.append("max_filter_ratio:");
      sb.append(this.max_filter_ratio);
      first = false;
    }
    if (isSetColumnFunctionMapping()) {
      if (!first) sb.append(", ");
      sb.append("column_function_mapping:");
      if (this.column_function_mapping == null) {
        sb.append("null");
      } else {
        sb.append(this.column_function_mapping);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'tuple_id' because it's a primitive and you chose the non-beans generator.
    if (file_paths == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_paths' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCsvScanNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCsvScanNodeStandardScheme getScheme() {
      return new TCsvScanNodeStandardScheme();
    }
  }

  private static class TCsvScanNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TCsvScanNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCsvScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TUPLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tuple_id = iprot.readI32();
              struct.setTupleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_PATHS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list302 = iprot.readListBegin();
                struct.file_paths = new java.util.ArrayList<java.lang.String>(_list302.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem303;
                for (int _i304 = 0; _i304 < _list302.size; ++_i304)
                {
                  _elem303 = iprot.readString();
                  struct.file_paths.add(_elem303);
                }
                iprot.readListEnd();
              }
              struct.setFilePathsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMN_SEPARATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column_separator = iprot.readString();
              struct.setColumnSeparatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LINE_DELIMITER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.line_delimiter = iprot.readString();
              struct.setLineDelimiterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COLUMN_TYPE_MAPPING
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map305 = iprot.readMapBegin();
                struct.column_type_mapping = new java.util.HashMap<java.lang.String,org.apache.doris.thrift.TColumnType>(2*_map305.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key306;
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TColumnType _val307;
                for (int _i308 = 0; _i308 < _map305.size; ++_i308)
                {
                  _key306 = iprot.readString();
                  _val307 = new org.apache.doris.thrift.TColumnType();
                  _val307.read(iprot);
                  struct.column_type_mapping.put(_key306, _val307);
                }
                iprot.readMapEnd();
              }
              struct.setColumnTypeMappingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list309 = iprot.readListBegin();
                struct.columns = new java.util.ArrayList<java.lang.String>(_list309.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem310;
                for (int _i311 = 0; _i311 < _list309.size; ++_i311)
                {
                  _elem310 = iprot.readString();
                  struct.columns.add(_elem310);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UNSPECIFIED_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list312 = iprot.readListBegin();
                struct.unspecified_columns = new java.util.ArrayList<java.lang.String>(_list312.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem313;
                for (int _i314 = 0; _i314 < _list312.size; ++_i314)
                {
                  _elem313 = iprot.readString();
                  struct.unspecified_columns.add(_elem313);
                }
                iprot.readListEnd();
              }
              struct.setUnspecifiedColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEFAULT_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list315 = iprot.readListBegin();
                struct.default_values = new java.util.ArrayList<java.lang.String>(_list315.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem316;
                for (int _i317 = 0; _i317 < _list315.size; ++_i317)
                {
                  _elem316 = iprot.readString();
                  struct.default_values.add(_elem316);
                }
                iprot.readListEnd();
              }
              struct.setDefaultValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAX_FILTER_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.max_filter_ratio = iprot.readDouble();
              struct.setMaxFilterRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COLUMN_FUNCTION_MAPPING
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map318 = iprot.readMapBegin();
                struct.column_function_mapping = new java.util.HashMap<java.lang.String,TMiniLoadEtlFunction>(2*_map318.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key319;
                @org.apache.thrift.annotation.Nullable TMiniLoadEtlFunction _val320;
                for (int _i321 = 0; _i321 < _map318.size; ++_i321)
                {
                  _key319 = iprot.readString();
                  _val320 = new TMiniLoadEtlFunction();
                  _val320.read(iprot);
                  struct.column_function_mapping.put(_key319, _val320);
                }
                iprot.readMapEnd();
              }
              struct.setColumnFunctionMappingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTupleId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'tuple_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCsvScanNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TUPLE_ID_FIELD_DESC);
      oprot.writeI32(struct.tuple_id);
      oprot.writeFieldEnd();
      if (struct.file_paths != null) {
        oprot.writeFieldBegin(FILE_PATHS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.file_paths.size()));
          for (java.lang.String _iter322 : struct.file_paths)
          {
            oprot.writeString(_iter322);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.column_separator != null) {
        if (struct.isSetColumnSeparator()) {
          oprot.writeFieldBegin(COLUMN_SEPARATOR_FIELD_DESC);
          oprot.writeString(struct.column_separator);
          oprot.writeFieldEnd();
        }
      }
      if (struct.line_delimiter != null) {
        if (struct.isSetLineDelimiter()) {
          oprot.writeFieldBegin(LINE_DELIMITER_FIELD_DESC);
          oprot.writeString(struct.line_delimiter);
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_type_mapping != null) {
        if (struct.isSetColumnTypeMapping()) {
          oprot.writeFieldBegin(COLUMN_TYPE_MAPPING_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.column_type_mapping.size()));
            for (java.util.Map.Entry<java.lang.String, org.apache.doris.thrift.TColumnType> _iter323 : struct.column_type_mapping.entrySet())
            {
              oprot.writeString(_iter323.getKey());
              _iter323.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.columns != null) {
        if (struct.isSetColumns()) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.columns.size()));
            for (java.lang.String _iter324 : struct.columns)
            {
              oprot.writeString(_iter324);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.unspecified_columns != null) {
        if (struct.isSetUnspecifiedColumns()) {
          oprot.writeFieldBegin(UNSPECIFIED_COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.unspecified_columns.size()));
            for (java.lang.String _iter325 : struct.unspecified_columns)
            {
              oprot.writeString(_iter325);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.default_values != null) {
        if (struct.isSetDefaultValues()) {
          oprot.writeFieldBegin(DEFAULT_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.default_values.size()));
            for (java.lang.String _iter326 : struct.default_values)
            {
              oprot.writeString(_iter326);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMaxFilterRatio()) {
        oprot.writeFieldBegin(MAX_FILTER_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.max_filter_ratio);
        oprot.writeFieldEnd();
      }
      if (struct.column_function_mapping != null) {
        if (struct.isSetColumnFunctionMapping()) {
          oprot.writeFieldBegin(COLUMN_FUNCTION_MAPPING_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.column_function_mapping.size()));
            for (java.util.Map.Entry<java.lang.String, TMiniLoadEtlFunction> _iter327 : struct.column_function_mapping.entrySet())
            {
              oprot.writeString(_iter327.getKey());
              _iter327.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCsvScanNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TCsvScanNodeTupleScheme getScheme() {
      return new TCsvScanNodeTupleScheme();
    }
  }

  private static class TCsvScanNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TCsvScanNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCsvScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.tuple_id);
      {
        oprot.writeI32(struct.file_paths.size());
        for (java.lang.String _iter328 : struct.file_paths)
        {
          oprot.writeString(_iter328);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetColumnSeparator()) {
        optionals.set(0);
      }
      if (struct.isSetLineDelimiter()) {
        optionals.set(1);
      }
      if (struct.isSetColumnTypeMapping()) {
        optionals.set(2);
      }
      if (struct.isSetColumns()) {
        optionals.set(3);
      }
      if (struct.isSetUnspecifiedColumns()) {
        optionals.set(4);
      }
      if (struct.isSetDefaultValues()) {
        optionals.set(5);
      }
      if (struct.isSetMaxFilterRatio()) {
        optionals.set(6);
      }
      if (struct.isSetColumnFunctionMapping()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetColumnSeparator()) {
        oprot.writeString(struct.column_separator);
      }
      if (struct.isSetLineDelimiter()) {
        oprot.writeString(struct.line_delimiter);
      }
      if (struct.isSetColumnTypeMapping()) {
        {
          oprot.writeI32(struct.column_type_mapping.size());
          for (java.util.Map.Entry<java.lang.String, org.apache.doris.thrift.TColumnType> _iter329 : struct.column_type_mapping.entrySet())
          {
            oprot.writeString(_iter329.getKey());
            _iter329.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetColumns()) {
        {
          oprot.writeI32(struct.columns.size());
          for (java.lang.String _iter330 : struct.columns)
          {
            oprot.writeString(_iter330);
          }
        }
      }
      if (struct.isSetUnspecifiedColumns()) {
        {
          oprot.writeI32(struct.unspecified_columns.size());
          for (java.lang.String _iter331 : struct.unspecified_columns)
          {
            oprot.writeString(_iter331);
          }
        }
      }
      if (struct.isSetDefaultValues()) {
        {
          oprot.writeI32(struct.default_values.size());
          for (java.lang.String _iter332 : struct.default_values)
          {
            oprot.writeString(_iter332);
          }
        }
      }
      if (struct.isSetMaxFilterRatio()) {
        oprot.writeDouble(struct.max_filter_ratio);
      }
      if (struct.isSetColumnFunctionMapping()) {
        {
          oprot.writeI32(struct.column_function_mapping.size());
          for (java.util.Map.Entry<java.lang.String, TMiniLoadEtlFunction> _iter333 : struct.column_function_mapping.entrySet())
          {
            oprot.writeString(_iter333.getKey());
            _iter333.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCsvScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.tuple_id = iprot.readI32();
      struct.setTupleIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list334 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
        struct.file_paths = new java.util.ArrayList<java.lang.String>(_list334.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem335;
        for (int _i336 = 0; _i336 < _list334.size; ++_i336)
        {
          _elem335 = iprot.readString();
          struct.file_paths.add(_elem335);
        }
      }
      struct.setFilePathsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.column_separator = iprot.readString();
        struct.setColumnSeparatorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.line_delimiter = iprot.readString();
        struct.setLineDelimiterIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map337 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT); 
          struct.column_type_mapping = new java.util.HashMap<java.lang.String,org.apache.doris.thrift.TColumnType>(2*_map337.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key338;
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TColumnType _val339;
          for (int _i340 = 0; _i340 < _map337.size; ++_i340)
          {
            _key338 = iprot.readString();
            _val339 = new org.apache.doris.thrift.TColumnType();
            _val339.read(iprot);
            struct.column_type_mapping.put(_key338, _val339);
          }
        }
        struct.setColumnTypeMappingIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list341 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.columns = new java.util.ArrayList<java.lang.String>(_list341.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem342;
          for (int _i343 = 0; _i343 < _list341.size; ++_i343)
          {
            _elem342 = iprot.readString();
            struct.columns.add(_elem342);
          }
        }
        struct.setColumnsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list344 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.unspecified_columns = new java.util.ArrayList<java.lang.String>(_list344.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem345;
          for (int _i346 = 0; _i346 < _list344.size; ++_i346)
          {
            _elem345 = iprot.readString();
            struct.unspecified_columns.add(_elem345);
          }
        }
        struct.setUnspecifiedColumnsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list347 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.default_values = new java.util.ArrayList<java.lang.String>(_list347.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem348;
          for (int _i349 = 0; _i349 < _list347.size; ++_i349)
          {
            _elem348 = iprot.readString();
            struct.default_values.add(_elem348);
          }
        }
        struct.setDefaultValuesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.max_filter_ratio = iprot.readDouble();
        struct.setMaxFilterRatioIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map350 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT); 
          struct.column_function_mapping = new java.util.HashMap<java.lang.String,TMiniLoadEtlFunction>(2*_map350.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key351;
          @org.apache.thrift.annotation.Nullable TMiniLoadEtlFunction _val352;
          for (int _i353 = 0; _i353 < _map350.size; ++_i353)
          {
            _key351 = iprot.readString();
            _val352 = new TMiniLoadEtlFunction();
            _val352.read(iprot);
            struct.column_function_mapping.put(_key351, _val352);
          }
        }
        struct.setColumnFunctionMappingIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

