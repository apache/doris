/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-04-28")
public class TRuntimeFilterParams implements org.apache.thrift.TBase<TRuntimeFilterParams, TRuntimeFilterParams._Fields>, java.io.Serializable, Cloneable, Comparable<TRuntimeFilterParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRuntimeFilterParams");

  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_MERGE_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_merge_addr", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField RID_TO_TARGET_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("rid_to_target_param", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField RID_TO_RUNTIME_FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("rid_to_runtime_filter", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField RUNTIME_FILTER_BUILDER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("runtime_filter_builder_num", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRuntimeFilterParamsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRuntimeFilterParamsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TNetworkAddress runtime_filter_merge_addr; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<TRuntimeFilterTargetParams>> rid_to_target_param; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,org.apache.doris.thrift.TRuntimeFilterDesc> rid_to_runtime_filter; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> runtime_filter_builder_num; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RUNTIME_FILTER_MERGE_ADDR((short)1, "runtime_filter_merge_addr"),
    RID_TO_TARGET_PARAM((short)2, "rid_to_target_param"),
    RID_TO_RUNTIME_FILTER((short)3, "rid_to_runtime_filter"),
    RUNTIME_FILTER_BUILDER_NUM((short)4, "runtime_filter_builder_num");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RUNTIME_FILTER_MERGE_ADDR
          return RUNTIME_FILTER_MERGE_ADDR;
        case 2: // RID_TO_TARGET_PARAM
          return RID_TO_TARGET_PARAM;
        case 3: // RID_TO_RUNTIME_FILTER
          return RID_TO_RUNTIME_FILTER;
        case 4: // RUNTIME_FILTER_BUILDER_NUM
          return RUNTIME_FILTER_BUILDER_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.RUNTIME_FILTER_MERGE_ADDR,_Fields.RID_TO_TARGET_PARAM,_Fields.RID_TO_RUNTIME_FILTER,_Fields.RUNTIME_FILTER_BUILDER_NUM};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RUNTIME_FILTER_MERGE_ADDR, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_merge_addr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TNetworkAddress.class)));
    tmpMap.put(_Fields.RID_TO_TARGET_PARAM, new org.apache.thrift.meta_data.FieldMetaData("rid_to_target_param", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRuntimeFilterTargetParams.class)))));
    tmpMap.put(_Fields.RID_TO_RUNTIME_FILTER, new org.apache.thrift.meta_data.FieldMetaData("rid_to_runtime_filter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.doris.thrift.TRuntimeFilterDesc.class))));
    tmpMap.put(_Fields.RUNTIME_FILTER_BUILDER_NUM, new org.apache.thrift.meta_data.FieldMetaData("runtime_filter_builder_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRuntimeFilterParams.class, metaDataMap);
  }

  public TRuntimeFilterParams() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRuntimeFilterParams(TRuntimeFilterParams other) {
    if (other.isSetRuntimeFilterMergeAddr()) {
      this.runtime_filter_merge_addr = new org.apache.doris.thrift.TNetworkAddress(other.runtime_filter_merge_addr);
    }
    if (other.isSetRidToTargetParam()) {
      java.util.Map<java.lang.Integer,java.util.List<TRuntimeFilterTargetParams>> __this__rid_to_target_param = new java.util.HashMap<java.lang.Integer,java.util.List<TRuntimeFilterTargetParams>>(other.rid_to_target_param.size());
      for (java.util.Map.Entry<java.lang.Integer, java.util.List<TRuntimeFilterTargetParams>> other_element : other.rid_to_target_param.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        java.util.List<TRuntimeFilterTargetParams> other_element_value = other_element.getValue();

        java.lang.Integer __this__rid_to_target_param_copy_key = other_element_key;

        java.util.List<TRuntimeFilterTargetParams> __this__rid_to_target_param_copy_value = new java.util.ArrayList<TRuntimeFilterTargetParams>(other_element_value.size());
        for (TRuntimeFilterTargetParams other_element_value_element : other_element_value) {
          __this__rid_to_target_param_copy_value.add(new TRuntimeFilterTargetParams(other_element_value_element));
        }

        __this__rid_to_target_param.put(__this__rid_to_target_param_copy_key, __this__rid_to_target_param_copy_value);
      }
      this.rid_to_target_param = __this__rid_to_target_param;
    }
    if (other.isSetRidToRuntimeFilter()) {
      java.util.Map<java.lang.Integer,org.apache.doris.thrift.TRuntimeFilterDesc> __this__rid_to_runtime_filter = new java.util.HashMap<java.lang.Integer,org.apache.doris.thrift.TRuntimeFilterDesc>(other.rid_to_runtime_filter.size());
      for (java.util.Map.Entry<java.lang.Integer, org.apache.doris.thrift.TRuntimeFilterDesc> other_element : other.rid_to_runtime_filter.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        org.apache.doris.thrift.TRuntimeFilterDesc other_element_value = other_element.getValue();

        java.lang.Integer __this__rid_to_runtime_filter_copy_key = other_element_key;

        org.apache.doris.thrift.TRuntimeFilterDesc __this__rid_to_runtime_filter_copy_value = new org.apache.doris.thrift.TRuntimeFilterDesc(other_element_value);

        __this__rid_to_runtime_filter.put(__this__rid_to_runtime_filter_copy_key, __this__rid_to_runtime_filter_copy_value);
      }
      this.rid_to_runtime_filter = __this__rid_to_runtime_filter;
    }
    if (other.isSetRuntimeFilterBuilderNum()) {
      java.util.Map<java.lang.Integer,java.lang.Integer> __this__runtime_filter_builder_num = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other.runtime_filter_builder_num);
      this.runtime_filter_builder_num = __this__runtime_filter_builder_num;
    }
  }

  public TRuntimeFilterParams deepCopy() {
    return new TRuntimeFilterParams(this);
  }

  @Override
  public void clear() {
    this.runtime_filter_merge_addr = null;
    this.rid_to_target_param = null;
    this.rid_to_runtime_filter = null;
    this.runtime_filter_builder_num = null;
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.doris.thrift.TNetworkAddress getRuntimeFilterMergeAddr() {
    return this.runtime_filter_merge_addr;
  }

  public TRuntimeFilterParams setRuntimeFilterMergeAddr(@org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TNetworkAddress runtime_filter_merge_addr) {
    this.runtime_filter_merge_addr = runtime_filter_merge_addr;
    return this;
  }

  public void unsetRuntimeFilterMergeAddr() {
    this.runtime_filter_merge_addr = null;
  }

  /** Returns true if field runtime_filter_merge_addr is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntimeFilterMergeAddr() {
    return this.runtime_filter_merge_addr != null;
  }

  public void setRuntimeFilterMergeAddrIsSet(boolean value) {
    if (!value) {
      this.runtime_filter_merge_addr = null;
    }
  }

  public int getRidToTargetParamSize() {
    return (this.rid_to_target_param == null) ? 0 : this.rid_to_target_param.size();
  }

  public void putToRidToTargetParam(int key, java.util.List<TRuntimeFilterTargetParams> val) {
    if (this.rid_to_target_param == null) {
      this.rid_to_target_param = new java.util.HashMap<java.lang.Integer,java.util.List<TRuntimeFilterTargetParams>>();
    }
    this.rid_to_target_param.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.util.List<TRuntimeFilterTargetParams>> getRidToTargetParam() {
    return this.rid_to_target_param;
  }

  public TRuntimeFilterParams setRidToTargetParam(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<TRuntimeFilterTargetParams>> rid_to_target_param) {
    this.rid_to_target_param = rid_to_target_param;
    return this;
  }

  public void unsetRidToTargetParam() {
    this.rid_to_target_param = null;
  }

  /** Returns true if field rid_to_target_param is set (has been assigned a value) and false otherwise */
  public boolean isSetRidToTargetParam() {
    return this.rid_to_target_param != null;
  }

  public void setRidToTargetParamIsSet(boolean value) {
    if (!value) {
      this.rid_to_target_param = null;
    }
  }

  public int getRidToRuntimeFilterSize() {
    return (this.rid_to_runtime_filter == null) ? 0 : this.rid_to_runtime_filter.size();
  }

  public void putToRidToRuntimeFilter(int key, org.apache.doris.thrift.TRuntimeFilterDesc val) {
    if (this.rid_to_runtime_filter == null) {
      this.rid_to_runtime_filter = new java.util.HashMap<java.lang.Integer,org.apache.doris.thrift.TRuntimeFilterDesc>();
    }
    this.rid_to_runtime_filter.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,org.apache.doris.thrift.TRuntimeFilterDesc> getRidToRuntimeFilter() {
    return this.rid_to_runtime_filter;
  }

  public TRuntimeFilterParams setRidToRuntimeFilter(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,org.apache.doris.thrift.TRuntimeFilterDesc> rid_to_runtime_filter) {
    this.rid_to_runtime_filter = rid_to_runtime_filter;
    return this;
  }

  public void unsetRidToRuntimeFilter() {
    this.rid_to_runtime_filter = null;
  }

  /** Returns true if field rid_to_runtime_filter is set (has been assigned a value) and false otherwise */
  public boolean isSetRidToRuntimeFilter() {
    return this.rid_to_runtime_filter != null;
  }

  public void setRidToRuntimeFilterIsSet(boolean value) {
    if (!value) {
      this.rid_to_runtime_filter = null;
    }
  }

  public int getRuntimeFilterBuilderNumSize() {
    return (this.runtime_filter_builder_num == null) ? 0 : this.runtime_filter_builder_num.size();
  }

  public void putToRuntimeFilterBuilderNum(int key, int val) {
    if (this.runtime_filter_builder_num == null) {
      this.runtime_filter_builder_num = new java.util.HashMap<java.lang.Integer,java.lang.Integer>();
    }
    this.runtime_filter_builder_num.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Integer> getRuntimeFilterBuilderNum() {
    return this.runtime_filter_builder_num;
  }

  public TRuntimeFilterParams setRuntimeFilterBuilderNum(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> runtime_filter_builder_num) {
    this.runtime_filter_builder_num = runtime_filter_builder_num;
    return this;
  }

  public void unsetRuntimeFilterBuilderNum() {
    this.runtime_filter_builder_num = null;
  }

  /** Returns true if field runtime_filter_builder_num is set (has been assigned a value) and false otherwise */
  public boolean isSetRuntimeFilterBuilderNum() {
    return this.runtime_filter_builder_num != null;
  }

  public void setRuntimeFilterBuilderNumIsSet(boolean value) {
    if (!value) {
      this.runtime_filter_builder_num = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case RUNTIME_FILTER_MERGE_ADDR:
      if (value == null) {
        unsetRuntimeFilterMergeAddr();
      } else {
        setRuntimeFilterMergeAddr((org.apache.doris.thrift.TNetworkAddress)value);
      }
      break;

    case RID_TO_TARGET_PARAM:
      if (value == null) {
        unsetRidToTargetParam();
      } else {
        setRidToTargetParam((java.util.Map<java.lang.Integer,java.util.List<TRuntimeFilterTargetParams>>)value);
      }
      break;

    case RID_TO_RUNTIME_FILTER:
      if (value == null) {
        unsetRidToRuntimeFilter();
      } else {
        setRidToRuntimeFilter((java.util.Map<java.lang.Integer,org.apache.doris.thrift.TRuntimeFilterDesc>)value);
      }
      break;

    case RUNTIME_FILTER_BUILDER_NUM:
      if (value == null) {
        unsetRuntimeFilterBuilderNum();
      } else {
        setRuntimeFilterBuilderNum((java.util.Map<java.lang.Integer,java.lang.Integer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RUNTIME_FILTER_MERGE_ADDR:
      return getRuntimeFilterMergeAddr();

    case RID_TO_TARGET_PARAM:
      return getRidToTargetParam();

    case RID_TO_RUNTIME_FILTER:
      return getRidToRuntimeFilter();

    case RUNTIME_FILTER_BUILDER_NUM:
      return getRuntimeFilterBuilderNum();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RUNTIME_FILTER_MERGE_ADDR:
      return isSetRuntimeFilterMergeAddr();
    case RID_TO_TARGET_PARAM:
      return isSetRidToTargetParam();
    case RID_TO_RUNTIME_FILTER:
      return isSetRidToRuntimeFilter();
    case RUNTIME_FILTER_BUILDER_NUM:
      return isSetRuntimeFilterBuilderNum();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TRuntimeFilterParams)
      return this.equals((TRuntimeFilterParams)that);
    return false;
  }

  public boolean equals(TRuntimeFilterParams that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_runtime_filter_merge_addr = true && this.isSetRuntimeFilterMergeAddr();
    boolean that_present_runtime_filter_merge_addr = true && that.isSetRuntimeFilterMergeAddr();
    if (this_present_runtime_filter_merge_addr || that_present_runtime_filter_merge_addr) {
      if (!(this_present_runtime_filter_merge_addr && that_present_runtime_filter_merge_addr))
        return false;
      if (!this.runtime_filter_merge_addr.equals(that.runtime_filter_merge_addr))
        return false;
    }

    boolean this_present_rid_to_target_param = true && this.isSetRidToTargetParam();
    boolean that_present_rid_to_target_param = true && that.isSetRidToTargetParam();
    if (this_present_rid_to_target_param || that_present_rid_to_target_param) {
      if (!(this_present_rid_to_target_param && that_present_rid_to_target_param))
        return false;
      if (!this.rid_to_target_param.equals(that.rid_to_target_param))
        return false;
    }

    boolean this_present_rid_to_runtime_filter = true && this.isSetRidToRuntimeFilter();
    boolean that_present_rid_to_runtime_filter = true && that.isSetRidToRuntimeFilter();
    if (this_present_rid_to_runtime_filter || that_present_rid_to_runtime_filter) {
      if (!(this_present_rid_to_runtime_filter && that_present_rid_to_runtime_filter))
        return false;
      if (!this.rid_to_runtime_filter.equals(that.rid_to_runtime_filter))
        return false;
    }

    boolean this_present_runtime_filter_builder_num = true && this.isSetRuntimeFilterBuilderNum();
    boolean that_present_runtime_filter_builder_num = true && that.isSetRuntimeFilterBuilderNum();
    if (this_present_runtime_filter_builder_num || that_present_runtime_filter_builder_num) {
      if (!(this_present_runtime_filter_builder_num && that_present_runtime_filter_builder_num))
        return false;
      if (!this.runtime_filter_builder_num.equals(that.runtime_filter_builder_num))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRuntimeFilterMergeAddr()) ? 131071 : 524287);
    if (isSetRuntimeFilterMergeAddr())
      hashCode = hashCode * 8191 + runtime_filter_merge_addr.hashCode();

    hashCode = hashCode * 8191 + ((isSetRidToTargetParam()) ? 131071 : 524287);
    if (isSetRidToTargetParam())
      hashCode = hashCode * 8191 + rid_to_target_param.hashCode();

    hashCode = hashCode * 8191 + ((isSetRidToRuntimeFilter()) ? 131071 : 524287);
    if (isSetRidToRuntimeFilter())
      hashCode = hashCode * 8191 + rid_to_runtime_filter.hashCode();

    hashCode = hashCode * 8191 + ((isSetRuntimeFilterBuilderNum()) ? 131071 : 524287);
    if (isSetRuntimeFilterBuilderNum())
      hashCode = hashCode * 8191 + runtime_filter_builder_num.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TRuntimeFilterParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetRuntimeFilterMergeAddr(), other.isSetRuntimeFilterMergeAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntimeFilterMergeAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_merge_addr, other.runtime_filter_merge_addr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRidToTargetParam(), other.isSetRidToTargetParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRidToTargetParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rid_to_target_param, other.rid_to_target_param);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRidToRuntimeFilter(), other.isSetRidToRuntimeFilter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRidToRuntimeFilter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rid_to_runtime_filter, other.rid_to_runtime_filter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRuntimeFilterBuilderNum(), other.isSetRuntimeFilterBuilderNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuntimeFilterBuilderNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runtime_filter_builder_num, other.runtime_filter_builder_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRuntimeFilterParams(");
    boolean first = true;

    if (isSetRuntimeFilterMergeAddr()) {
      sb.append("runtime_filter_merge_addr:");
      if (this.runtime_filter_merge_addr == null) {
        sb.append("null");
      } else {
        sb.append(this.runtime_filter_merge_addr);
      }
      first = false;
    }
    if (isSetRidToTargetParam()) {
      if (!first) sb.append(", ");
      sb.append("rid_to_target_param:");
      if (this.rid_to_target_param == null) {
        sb.append("null");
      } else {
        sb.append(this.rid_to_target_param);
      }
      first = false;
    }
    if (isSetRidToRuntimeFilter()) {
      if (!first) sb.append(", ");
      sb.append("rid_to_runtime_filter:");
      if (this.rid_to_runtime_filter == null) {
        sb.append("null");
      } else {
        sb.append(this.rid_to_runtime_filter);
      }
      first = false;
    }
    if (isSetRuntimeFilterBuilderNum()) {
      if (!first) sb.append(", ");
      sb.append("runtime_filter_builder_num:");
      if (this.runtime_filter_builder_num == null) {
        sb.append("null");
      } else {
        sb.append(this.runtime_filter_builder_num);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (runtime_filter_merge_addr != null) {
      runtime_filter_merge_addr.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRuntimeFilterParamsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TRuntimeFilterParamsStandardScheme getScheme() {
      return new TRuntimeFilterParamsStandardScheme();
    }
  }

  private static class TRuntimeFilterParamsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRuntimeFilterParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRuntimeFilterParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RUNTIME_FILTER_MERGE_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.runtime_filter_merge_addr = new org.apache.doris.thrift.TNetworkAddress();
              struct.runtime_filter_merge_addr.read(iprot);
              struct.setRuntimeFilterMergeAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RID_TO_TARGET_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.rid_to_target_param = new java.util.HashMap<java.lang.Integer,java.util.List<TRuntimeFilterTargetParams>>(2*_map10.size);
                int _key11;
                @org.apache.thrift.annotation.Nullable java.util.List<TRuntimeFilterTargetParams> _val12;
                for (int _i13 = 0; _i13 < _map10.size; ++_i13)
                {
                  _key11 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                    _val12 = new java.util.ArrayList<TRuntimeFilterTargetParams>(_list14.size);
                    @org.apache.thrift.annotation.Nullable TRuntimeFilterTargetParams _elem15;
                    for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                    {
                      _elem15 = new TRuntimeFilterTargetParams();
                      _elem15.read(iprot);
                      _val12.add(_elem15);
                    }
                    iprot.readListEnd();
                  }
                  struct.rid_to_target_param.put(_key11, _val12);
                }
                iprot.readMapEnd();
              }
              struct.setRidToTargetParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RID_TO_RUNTIME_FILTER
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map17 = iprot.readMapBegin();
                struct.rid_to_runtime_filter = new java.util.HashMap<java.lang.Integer,org.apache.doris.thrift.TRuntimeFilterDesc>(2*_map17.size);
                int _key18;
                @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TRuntimeFilterDesc _val19;
                for (int _i20 = 0; _i20 < _map17.size; ++_i20)
                {
                  _key18 = iprot.readI32();
                  _val19 = new org.apache.doris.thrift.TRuntimeFilterDesc();
                  _val19.read(iprot);
                  struct.rid_to_runtime_filter.put(_key18, _val19);
                }
                iprot.readMapEnd();
              }
              struct.setRidToRuntimeFilterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RUNTIME_FILTER_BUILDER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map21 = iprot.readMapBegin();
                struct.runtime_filter_builder_num = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map21.size);
                int _key22;
                int _val23;
                for (int _i24 = 0; _i24 < _map21.size; ++_i24)
                {
                  _key22 = iprot.readI32();
                  _val23 = iprot.readI32();
                  struct.runtime_filter_builder_num.put(_key22, _val23);
                }
                iprot.readMapEnd();
              }
              struct.setRuntimeFilterBuilderNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRuntimeFilterParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.runtime_filter_merge_addr != null) {
        if (struct.isSetRuntimeFilterMergeAddr()) {
          oprot.writeFieldBegin(RUNTIME_FILTER_MERGE_ADDR_FIELD_DESC);
          struct.runtime_filter_merge_addr.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rid_to_target_param != null) {
        if (struct.isSetRidToTargetParam()) {
          oprot.writeFieldBegin(RID_TO_TARGET_PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.rid_to_target_param.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.util.List<TRuntimeFilterTargetParams>> _iter25 : struct.rid_to_target_param.entrySet())
            {
              oprot.writeI32(_iter25.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter25.getValue().size()));
                for (TRuntimeFilterTargetParams _iter26 : _iter25.getValue())
                {
                  _iter26.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.rid_to_runtime_filter != null) {
        if (struct.isSetRidToRuntimeFilter()) {
          oprot.writeFieldBegin(RID_TO_RUNTIME_FILTER_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.rid_to_runtime_filter.size()));
            for (java.util.Map.Entry<java.lang.Integer, org.apache.doris.thrift.TRuntimeFilterDesc> _iter27 : struct.rid_to_runtime_filter.entrySet())
            {
              oprot.writeI32(_iter27.getKey());
              _iter27.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.runtime_filter_builder_num != null) {
        if (struct.isSetRuntimeFilterBuilderNum()) {
          oprot.writeFieldBegin(RUNTIME_FILTER_BUILDER_NUM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.runtime_filter_builder_num.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter28 : struct.runtime_filter_builder_num.entrySet())
            {
              oprot.writeI32(_iter28.getKey());
              oprot.writeI32(_iter28.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRuntimeFilterParamsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TRuntimeFilterParamsTupleScheme getScheme() {
      return new TRuntimeFilterParamsTupleScheme();
    }
  }

  private static class TRuntimeFilterParamsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRuntimeFilterParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRuntimeFilterParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRuntimeFilterMergeAddr()) {
        optionals.set(0);
      }
      if (struct.isSetRidToTargetParam()) {
        optionals.set(1);
      }
      if (struct.isSetRidToRuntimeFilter()) {
        optionals.set(2);
      }
      if (struct.isSetRuntimeFilterBuilderNum()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetRuntimeFilterMergeAddr()) {
        struct.runtime_filter_merge_addr.write(oprot);
      }
      if (struct.isSetRidToTargetParam()) {
        {
          oprot.writeI32(struct.rid_to_target_param.size());
          for (java.util.Map.Entry<java.lang.Integer, java.util.List<TRuntimeFilterTargetParams>> _iter29 : struct.rid_to_target_param.entrySet())
          {
            oprot.writeI32(_iter29.getKey());
            {
              oprot.writeI32(_iter29.getValue().size());
              for (TRuntimeFilterTargetParams _iter30 : _iter29.getValue())
              {
                _iter30.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetRidToRuntimeFilter()) {
        {
          oprot.writeI32(struct.rid_to_runtime_filter.size());
          for (java.util.Map.Entry<java.lang.Integer, org.apache.doris.thrift.TRuntimeFilterDesc> _iter31 : struct.rid_to_runtime_filter.entrySet())
          {
            oprot.writeI32(_iter31.getKey());
            _iter31.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetRuntimeFilterBuilderNum()) {
        {
          oprot.writeI32(struct.runtime_filter_builder_num.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter32 : struct.runtime_filter_builder_num.entrySet())
          {
            oprot.writeI32(_iter32.getKey());
            oprot.writeI32(_iter32.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRuntimeFilterParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.runtime_filter_merge_addr = new org.apache.doris.thrift.TNetworkAddress();
        struct.runtime_filter_merge_addr.read(iprot);
        struct.setRuntimeFilterMergeAddrIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map33 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST); 
          struct.rid_to_target_param = new java.util.HashMap<java.lang.Integer,java.util.List<TRuntimeFilterTargetParams>>(2*_map33.size);
          int _key34;
          @org.apache.thrift.annotation.Nullable java.util.List<TRuntimeFilterTargetParams> _val35;
          for (int _i36 = 0; _i36 < _map33.size; ++_i36)
          {
            _key34 = iprot.readI32();
            {
              org.apache.thrift.protocol.TList _list37 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
              _val35 = new java.util.ArrayList<TRuntimeFilterTargetParams>(_list37.size);
              @org.apache.thrift.annotation.Nullable TRuntimeFilterTargetParams _elem38;
              for (int _i39 = 0; _i39 < _list37.size; ++_i39)
              {
                _elem38 = new TRuntimeFilterTargetParams();
                _elem38.read(iprot);
                _val35.add(_elem38);
              }
            }
            struct.rid_to_target_param.put(_key34, _val35);
          }
        }
        struct.setRidToTargetParamIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT); 
          struct.rid_to_runtime_filter = new java.util.HashMap<java.lang.Integer,org.apache.doris.thrift.TRuntimeFilterDesc>(2*_map40.size);
          int _key41;
          @org.apache.thrift.annotation.Nullable org.apache.doris.thrift.TRuntimeFilterDesc _val42;
          for (int _i43 = 0; _i43 < _map40.size; ++_i43)
          {
            _key41 = iprot.readI32();
            _val42 = new org.apache.doris.thrift.TRuntimeFilterDesc();
            _val42.read(iprot);
            struct.rid_to_runtime_filter.put(_key41, _val42);
          }
        }
        struct.setRidToRuntimeFilterIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map44 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32); 
          struct.runtime_filter_builder_num = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map44.size);
          int _key45;
          int _val46;
          for (int _i47 = 0; _i47 < _map44.size; ++_i47)
          {
            _key45 = iprot.readI32();
            _val46 = iprot.readI32();
            struct.runtime_filter_builder_num.put(_key45, _val46);
          }
        }
        struct.setRuntimeFilterBuilderNumIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

