/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.doris.thrift;


@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-04-28")
public enum TJoinOp implements org.apache.thrift.TEnum {
  INNER_JOIN(0),
  LEFT_OUTER_JOIN(1),
  LEFT_SEMI_JOIN(2),
  RIGHT_OUTER_JOIN(3),
  FULL_OUTER_JOIN(4),
  CROSS_JOIN(5),
  MERGE_JOIN(6),
  RIGHT_SEMI_JOIN(7),
  LEFT_ANTI_JOIN(8),
  RIGHT_ANTI_JOIN(9),
  NULL_AWARE_LEFT_ANTI_JOIN(10);

  private final int value;

  private TJoinOp(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  @org.apache.thrift.annotation.Nullable
  public static TJoinOp findByValue(int value) { 
    switch (value) {
      case 0:
        return INNER_JOIN;
      case 1:
        return LEFT_OUTER_JOIN;
      case 2:
        return LEFT_SEMI_JOIN;
      case 3:
        return RIGHT_OUTER_JOIN;
      case 4:
        return FULL_OUTER_JOIN;
      case 5:
        return CROSS_JOIN;
      case 6:
        return MERGE_JOIN;
      case 7:
        return RIGHT_SEMI_JOIN;
      case 8:
        return LEFT_ANTI_JOIN;
      case 9:
        return RIGHT_ANTI_JOIN;
      case 10:
        return NULL_AWARE_LEFT_ANTI_JOIN;
      default:
        return null;
    }
  }
}
