// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package org.apache.doris.nereids.trees.expressions.functions.scalar;

import org.apache.doris.catalog.FunctionSignature;
import org.apache.doris.nereids.exceptions.AnalysisException;
import org.apache.doris.nereids.trees.expressions.Expression;
import org.apache.doris.nereids.trees.expressions.functions.AlwaysNullable;
import org.apache.doris.nereids.trees.expressions.functions.CustomSignature;
import org.apache.doris.nereids.trees.expressions.functions.Monotonic;
import org.apache.doris.nereids.trees.expressions.literal.VarcharLiteral;
import org.apache.doris.nereids.trees.expressions.shape.BinaryExpression;
import org.apache.doris.nereids.trees.expressions.visitor.ExpressionVisitor;
import org.apache.doris.nereids.types.DateTimeType;
import org.apache.doris.nereids.types.DateTimeV2Type;
import org.apache.doris.nereids.types.DateType;
import org.apache.doris.nereids.types.DateV2Type;
import org.apache.doris.nereids.types.VarcharType;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;

import java.util.List;

/**
 * ScalarFunction 'date_trunc'. This class is generated by GenerateFunction.
 */
public class DateTrunc extends ScalarFunction
        implements BinaryExpression, AlwaysNullable, Monotonic, CustomSignature {

    public static final List<FunctionSignature> SIGNATURES = ImmutableList.of(
            FunctionSignature.ret(DateTimeV2Type.SYSTEM_DEFAULT)
                    .args(DateTimeV2Type.SYSTEM_DEFAULT, VarcharType.SYSTEM_DEFAULT),
            FunctionSignature.ret(DateTimeType.INSTANCE).args(DateTimeType.INSTANCE, VarcharType.SYSTEM_DEFAULT),
            FunctionSignature.ret(DateV2Type.INSTANCE)
                    .args(DateV2Type.INSTANCE, VarcharType.SYSTEM_DEFAULT),
            FunctionSignature.ret(DateType.INSTANCE).args(DateType.INSTANCE, VarcharType.SYSTEM_DEFAULT),
            FunctionSignature.ret(DateTimeV2Type.SYSTEM_DEFAULT)
                    .args(VarcharType.SYSTEM_DEFAULT, DateTimeV2Type.SYSTEM_DEFAULT),
            FunctionSignature.ret(DateTimeType.INSTANCE).args(VarcharType.SYSTEM_DEFAULT, DateTimeType.INSTANCE),
            FunctionSignature.ret(DateV2Type.INSTANCE).args(VarcharType.SYSTEM_DEFAULT, DateV2Type.INSTANCE),
            FunctionSignature.ret(DateType.INSTANCE).args(VarcharType.SYSTEM_DEFAULT, DateType.INSTANCE)
    );

    private static List<String> legalTimeUint =
            Lists.newArrayList("year", "quarter", "month", "week", "day", "hour", "minute", "second");

    /**
     * constructor with 2 arguments.
     */
    public DateTrunc(Expression arg0, Expression arg1) {
        super("date_trunc", arg0, arg1);
    }

    @Override
    public void checkLegalityBeforeTypeCoercion() {
        boolean firstArgIsStringLiteral =
                getArgument(0).isConstant() && getArgument(0) instanceof VarcharLiteral;
        boolean secondArgIsStringLiteral =
                getArgument(1).isConstant() && getArgument(1) instanceof VarcharLiteral;
        if (!firstArgIsStringLiteral && !secondArgIsStringLiteral) {
            throw new AnalysisException("the time unit parameter of "
                    + getName() + " function must be a string constant: " + toSql());
        } else if (firstArgIsStringLiteral && secondArgIsStringLiteral) {
            if (!legalTimeUint.contains(((VarcharLiteral) getArgument(0)).getStringValue().toLowerCase())
                    && !legalTimeUint.contains(((VarcharLiteral) getArgument(1)).getStringValue().toLowerCase())) {
                throw new AnalysisException("date_trunc function time unit param only support argument is "
                        + "year|quarter|month|week|day|hour|minute|second");
            }
        } else {
            final String constParam = ((VarcharLiteral) getArgument(firstArgIsStringLiteral ? 0 : 1))
                    .getStringValue().toLowerCase();
            if (!legalTimeUint.contains(constParam)) {
                throw new AnalysisException("date_trunc function time unit param only support argument is "
                        + "year|quarter|month|week|day|hour|minute|second");
            }
        }
    }

    /**
     * withChildren.
     */
    @Override
    public DateTrunc withChildren(List<Expression> children) {
        Preconditions.checkArgument(children.size() == 2);
        return new DateTrunc(children.get(0), children.get(1));
    }

    @Override
    public FunctionSignature customSignature() {
        if (getArgument(0).getDataType().isDateTimeV2Type()) {
            return FunctionSignature.ret(DateTimeV2Type.SYSTEM_DEFAULT)
                    .args(DateTimeV2Type.SYSTEM_DEFAULT, VarcharType.SYSTEM_DEFAULT);
        } else if (getArgument(0).getDataType().isDateV2Type()) {
            return FunctionSignature.ret(DateV2Type.INSTANCE).args(DateV2Type.INSTANCE, VarcharType.SYSTEM_DEFAULT);
        } else if (getArgument(0).getDataType().isDateTimeType()) {
            return FunctionSignature.ret(DateTimeType.INSTANCE)
                    .args(DateTimeType.INSTANCE, VarcharType.SYSTEM_DEFAULT);
        } else if (getArgument(0).getDataType().isDateType()) {
            return FunctionSignature.ret(DateType.INSTANCE)
                    .args(DateType.INSTANCE, VarcharType.SYSTEM_DEFAULT);
        } else if (getArgument(1).getDataType().isDateTimeV2Type()) {
            return FunctionSignature.ret(DateTimeV2Type.SYSTEM_DEFAULT)
                    .args(VarcharType.SYSTEM_DEFAULT, DateTimeV2Type.SYSTEM_DEFAULT);
        } else if (getArgument(1).getDataType().isDateV2Type()) {
            return FunctionSignature.ret(DateV2Type.INSTANCE).args(VarcharType.SYSTEM_DEFAULT, DateV2Type.INSTANCE);
        } else if (getArgument(1).getDataType().isDateTimeType()) {
            return FunctionSignature.ret(DateTimeType.INSTANCE)
                    .args(VarcharType.SYSTEM_DEFAULT, DateTimeType.INSTANCE);
        } else if (getArgument(1).getDataType().isDateType()) {
            return FunctionSignature.ret(DateType.INSTANCE).args(VarcharType.SYSTEM_DEFAULT, DateType.INSTANCE);
        }
        boolean firstArgIsStringLiteral =
                getArgument(0).isConstant() && getArgument(0) instanceof VarcharLiteral;
        boolean secondArgIsStringLiteral =
                getArgument(1).isConstant() && getArgument(1) instanceof VarcharLiteral;
        if (firstArgIsStringLiteral && !secondArgIsStringLiteral) {
            return FunctionSignature.ret(DateTimeV2Type.SYSTEM_DEFAULT)
                    .args(VarcharType.SYSTEM_DEFAULT, DateTimeV2Type.SYSTEM_DEFAULT);
        } else if (!firstArgIsStringLiteral && secondArgIsStringLiteral) {
            return FunctionSignature.ret(DateTimeV2Type.SYSTEM_DEFAULT)
                    .args(DateTimeV2Type.SYSTEM_DEFAULT, VarcharType.SYSTEM_DEFAULT);
        } else if (firstArgIsStringLiteral && secondArgIsStringLiteral) {
            boolean timeUnitIsFirst = legalTimeUint.contains(((VarcharLiteral) getArgument(0))
                    .getStringValue().toLowerCase());
            return timeUnitIsFirst ? FunctionSignature.ret(DateTimeV2Type.SYSTEM_DEFAULT)
                    .args(VarcharType.SYSTEM_DEFAULT, DateTimeV2Type.SYSTEM_DEFAULT)
                    : FunctionSignature.ret(DateTimeV2Type.SYSTEM_DEFAULT)
                            .args(DateTimeV2Type.SYSTEM_DEFAULT, VarcharType.SYSTEM_DEFAULT);
        }
        // if both of args are not constant, `checkLegalityBeforeTypeCoercion` will throw exception so just return
        // a signature here.
        return FunctionSignature.ret(DateTimeV2Type.SYSTEM_DEFAULT)
                .args(VarcharType.SYSTEM_DEFAULT, DateTimeV2Type.SYSTEM_DEFAULT);
    }

    @Override
    public <R, C> R accept(ExpressionVisitor<R, C> visitor, C context) {
        return visitor.visitDateTrunc(this, context);
    }

    @Override
    public boolean isPositive() {
        return true;
    }

    @Override
    public int getMonotonicFunctionChildIndex() {
        if (getArgument(0).getDataType().isDateLikeType()) {
            return 0;
        } else if (getArgument(1).getDataType().isDateLikeType()) {
            return 1;
        }
        boolean firstArgIsStringLiteral =
                getArgument(0).isConstant() && getArgument(0) instanceof VarcharLiteral;
        boolean secondArgIsStringLiteral =
                getArgument(1).isConstant() && getArgument(1) instanceof VarcharLiteral;
        if (firstArgIsStringLiteral && !secondArgIsStringLiteral) {
            return 1;
        } else if (!firstArgIsStringLiteral && secondArgIsStringLiteral) {
            return 0;
        } else if (firstArgIsStringLiteral && secondArgIsStringLiteral) {
            boolean timeUnitIsFirst = legalTimeUint.contains(((VarcharLiteral) getArgument(0))
                    .getStringValue().toLowerCase());
            return timeUnitIsFirst ? 1 : 0;
        }
        return 0;
    }

    @Override
    public Expression withConstantArgs(Expression literal) {
        boolean firstArgIsStringLiteral =
                getArgument(0).isConstant() && getArgument(0) instanceof VarcharLiteral;
        boolean secondArgIsStringLiteral =
                getArgument(1).isConstant() && getArgument(1) instanceof VarcharLiteral;
        if (firstArgIsStringLiteral && secondArgIsStringLiteral) {
            if (legalTimeUint.contains(((VarcharLiteral) getArgument(0)).getStringValue().toLowerCase())) {
                return new DateTrunc(child(0), literal);
            } else {
                return new DateTrunc(literal, child(1));
            }
        }
        return firstArgIsStringLiteral
                ? new DateTrunc(child(0), literal) : new DateTrunc(literal, child(1));
    }
}
