// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package org.apache.doris.analysis;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import org.apache.doris.analysis.AlterDatabaseQuotaStmt.QuotaType;
import org.apache.doris.analysis.SetOperationStmt.Qualifier;
import org.apache.doris.analysis.SetOperationStmt.Operation;
import org.apache.doris.analysis.SetOperationStmt.SetOperand;
import org.apache.doris.catalog.AccessPrivilege;
import org.apache.doris.catalog.AggregateType;
import org.apache.doris.catalog.KeysType;
import org.apache.doris.catalog.PrimitiveType;
import org.apache.doris.catalog.ScalarType;
import org.apache.doris.catalog.Type;
import org.apache.doris.catalog.View;
import org.apache.doris.common.AnalysisException;
import org.apache.doris.common.Version;
import org.apache.doris.mysql.MysqlPassword;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

import java_cup.runtime.Symbol;

// Commented by Zhao Chun
// Now we have 2 shift/reduce conflict
// between TIMESTAMP "20100101" and TIMESTAMP "alias"
// between DATE "20100101" and DATE "alias"

parser code {:
    private Symbol errorToken;
    public boolean isVerbose = false;
    public String wild;
    public Expr where;

    // List of expected tokens ids from current parsing state for generating syntax error message
    private final List<Integer> expectedTokenIds = Lists.newArrayList();

    // To avoid reporting trivial tokens as expected tokens in error messages
    private boolean reportExpectedToken(Integer tokenId) {
        if (SqlScanner.isKeyword(tokenId) ||
                tokenId.intValue() == SqlParserSymbols.COMMA ||
                tokenId.intValue() == SqlParserSymbols.IDENT) {
            return true;
        } else {
            return false;
        }
    }

    private String getErrorTypeMessage(int lastTokenId) {
        String msg = null;
        switch(lastTokenId) {
            case SqlParserSymbols.UNMATCHED_STRING_LITERAL:
                msg = "Unmatched string literal";
                break;
            case SqlParserSymbols.NUMERIC_OVERFLOW:
                msg = "Numeric overflow";
                break;
            default:
                msg = "Syntax error";
                break;
        }
        return msg;
    }

    // Override to save error token, just update error information.
    @Override
    public void syntax_error(Symbol token) {
        errorToken = token;

        // derive expected tokens from current parsing state
        expectedTokenIds.clear();
        int state = ((Symbol)stack.peek()).parse_state;
        // get row of actions table corresponding to current parsing state
        // the row consists of pairs of <tokenId, actionId>
        // a pair is stored as row[i] (tokenId) and row[i+1] (actionId)
        // the last pair is a special error action
        short[] row = action_tab[state];
        short tokenId;
        // the expected tokens are all the symbols with a
        // corresponding action from the current parsing state
        for (int i = 0; i < row.length-2; ++i) {
            // Get tokenId and skip actionId
            tokenId = row[i++];
            expectedTokenIds.add(Integer.valueOf(tokenId));
        }
    }

    // Override to keep it from calling report_fatal_error()
    // This exception is not AnalysisException because we don't want this report to client.
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws AnalysisException {
        throw new AnalysisException(getErrorTypeMessage(cur_token.sym));
    }


    // Manually throw a parse error on a given symbol for special circumstances.
    public void parseError(String symbolName, int symbolId) throws AnalysisException {
        Symbol errorToken = getSymbolFactory().newSymbol(symbolName, symbolId,
                ((Symbol) stack.peek()), ((Symbol) stack.peek()), null);
        // Call syntax error to gather information about expected tokens, etc.
        // syntax_error does not throw an exception
        syntax_error(errorToken);

        unrecovered_syntax_error(errorToken);
    }

    // Returns error string, consisting of the original
    // stmt with a '^' under the offending token. Assumes
    // that parse() has been called and threw an exception
    public String getErrorMsg(String stmt) {
        if (errorToken == null || stmt == null) {
            return null;
        }
        String[] lines = stmt.split("\n", -1);
        StringBuffer result = new StringBuffer();
        result.append(getErrorTypeMessage(errorToken.sym) + " in line ");
        result.append(errorToken.left);
        result.append(":\n");

        // errorToken_.left is the line number of error.
        // errorToken_.right is the column number of the error.
        // index is start from 0, so "minus 1" is the real error line idx
        String errorLine = lines[errorToken.left - 1];
        // If the error is that additional tokens are expected past the end,
        // errorToken_.right will be past the end of the string.
        int lastCharIndex = Math.min(errorLine.length(), errorToken.right);
        int maxPrintLength = 60;
        int errorLoc = 0;
        if (errorLine.length() <= maxPrintLength) {
            // The line is short. Print the entire line.
            result.append(errorLine);
            result.append('\n');
            errorLoc = errorToken.right;
        } else {
            // The line is too long. Print maxPrintLength/2 characters before the error and
            // after the error.
            int contextLength = maxPrintLength / 2 - 3;
            String leftSubStr;
            if (errorToken.right > maxPrintLength / 2) {
                leftSubStr = "..." + errorLine.substring(errorToken.right - contextLength,
                        lastCharIndex);
            } else {
                leftSubStr = errorLine.substring(0, errorToken.right);
            }
            errorLoc = leftSubStr.length();
            result.append(leftSubStr);
            if (errorLine.length() - errorToken.right > maxPrintLength / 2) {
                result.append(errorLine.substring(errorToken.right,
                            errorToken.right + contextLength) + "...");
            } else {
                result.append(errorLine.substring(lastCharIndex));
            }
            result.append("\n");
        }

        // print error indicator
        for (int i = 0; i < errorLoc - 1; ++i) {
            result.append(' ');
        }
        result.append("^\n");

        // only report encountered and expected tokens for syntax errors
        if (errorToken.sym == SqlParserSymbols.UNMATCHED_STRING_LITERAL ||
                errorToken.sym == SqlParserSymbols.NUMERIC_OVERFLOW) {
            return result.toString();
        }

        // append last encountered token
        result.append("Encountered: ");
        String lastToken = SqlScanner.tokenIdMap.get(Integer.valueOf(errorToken.sym));
        if (lastToken != null) {
            result.append(lastToken);
        } else if (SqlScanner.isKeyword((String) errorToken.value)) {
            result.append("A reserved word cannot be used as an identifier: ").append((String) errorToken.value);
        } else {
            result.append("Unknown last token with id: " + errorToken.sym);
        }

        // Append expected tokens
        result.append('\n');
        result.append("Expected: ");
        String expectedToken = null;
        Integer tokenId = null;
        for (int i = 0; i < expectedTokenIds.size(); ++i) {
            tokenId = expectedTokenIds.get(i);
            // keywords hints
            if (SqlScanner.isKeyword(lastToken) && tokenId.intValue() == SqlParserSymbols.IDENT) {
                result.append(String.format("%s is keyword, maybe `%s`", lastToken, lastToken) + ", ");
                continue;
            }

            if (reportExpectedToken(tokenId)) {
                expectedToken = SqlScanner.tokenIdMap.get(tokenId);
                result.append(expectedToken + ", ");
            }
        }
        // remove trailing ", "
        result.delete(result.length() - 2, result.length());
        result.append('\n');

        return result.toString();
    }

:};

// Total keywords of doris
terminal String KW_ADD, KW_ADMIN, KW_AFTER, KW_AGGREGATE, KW_ALL, KW_ALTER, KW_AND, KW_ANTI, KW_AS, KW_ASC, KW_AUTHORS,
    KW_BACKEND, KW_BACKUP, KW_BETWEEN, KW_BEGIN, KW_BIGINT, KW_BITMAP, KW_BITMAP_UNION, KW_BOOLEAN, KW_BOTH, KW_BROKER, KW_BACKENDS, KW_BY, KW_BUILTIN,
    KW_CANCEL, KW_CASE, KW_CAST, KW_CHAIN, KW_CHAR, KW_CHARSET, KW_CHECK, KW_CLUSTER, KW_CLUSTERS,
    KW_COLLATE, KW_COLLATION, KW_COLUMN, KW_COLUMNS, KW_COMMENT, KW_COMMIT, KW_COMMITTED,
    KW_CONFIG, KW_CONNECTION, KW_CONNECTION_ID, KW_CONSISTENT, KW_COUNT, KW_CREATE, KW_CROSS, KW_CUBE, KW_CURRENT, KW_CURRENT_USER,
    KW_DATA, KW_DATABASE, KW_DATABASES, KW_DATE, KW_DATETIME, KW_DAY, KW_DECIMAL, KW_DECOMMISSION, KW_DEFAULT, KW_DESC, KW_DESCRIBE,
    KW_DELETE, KW_DISTINCT, KW_DISTINCTPC, KW_DISTINCTPCSA, KW_DISTRIBUTED, KW_DISTRIBUTION, KW_DYNAMIC, KW_BUCKETS, KW_DIV, KW_DOUBLE, KW_DROP, KW_DROPP, KW_DUPLICATE,
    KW_ELSE, KW_END, KW_ENGINE, KW_ENGINES, KW_ENTER, KW_ERRORS, KW_EVENTS, KW_EXCEPT, KW_EXISTS, KW_EXPORT,
    KW_EXTERNAL, KW_EXTRACT,
    KW_FALSE, KW_FOLLOWER, KW_FOLLOWING, KW_FREE, KW_FROM, KW_FILE, KW_FIRST, KW_FLOAT, KW_FOR, KW_FORMAT, KW_FRONTEND, KW_FRONTENDS, KW_FULL, KW_FUNCTION, KW_FUNCTIONS,
    KW_GLOBAL, KW_GRANT, KW_GRANTS, KW_GROUP, KW_GROUPING,
    KW_HASH, KW_HAVING, KW_HELP,KW_HLL, KW_HLL_UNION, KW_HOUR, KW_HUB,
    KW_IDENTIFIED, KW_IF, KW_IN, KW_INDEX, KW_INDEXES, KW_INFILE, KW_INSTALL,
    KW_INNER, KW_INSERT, KW_INT, KW_INTERMEDIATE, KW_INTERSECT, KW_INTERVAL, KW_INTO, KW_IS, KW_ISNULL, KW_ISOLATION,
    KW_JOIN,
    KW_KEY, KW_KEYS, KW_KILL,
    KW_LABEL, KW_LARGEINT, KW_LAST, KW_LEFT, KW_LESS, KW_LEVEL, KW_LIKE, KW_LIMIT, KW_LINK, KW_LOAD,
    KW_LOCAL, KW_LOCATION,
    KW_MATERIALIZED, KW_MAX, KW_MAX_VALUE, KW_MERGE, KW_MIN, KW_MINUTE, KW_MINUS, KW_MIGRATE, KW_MIGRATIONS, KW_MODIFY, KW_MONTH,
    KW_NAME, KW_NAMES, KW_NEGATIVE, KW_NO, KW_NOT, KW_NULL, KW_NULLS,
    KW_OBSERVER, KW_OFFSET, KW_ON, KW_ONLY, KW_OPEN, KW_OR, KW_ORDER, KW_OUTER, KW_OUTFILE, KW_OVER,
    KW_PARTITION, KW_PARTITIONS, KW_PASSWORD, KW_PATH, KW_PAUSE, KW_PIPE, KW_PRECEDING,
    KW_PLUGIN, KW_PLUGINS,
    KW_PRIMARY,
    KW_PROC, KW_PROCEDURE, KW_PROCESSLIST, KW_PROPERTIES, KW_PROPERTY,
    KW_QUERY, KW_QUOTA,
    KW_RANDOM, KW_RANGE, KW_READ, KW_RECOVER, KW_REGEXP, KW_RELEASE, KW_RENAME,
    KW_REPAIR, KW_REPEATABLE, KW_REPOSITORY, KW_REPOSITORIES, KW_REPLACE, KW_REPLACE_IF_NOT_NULL, KW_REPLICA, KW_RESOURCE, KW_RESOURCES, KW_RESTORE, KW_RETURNS, KW_RESUME, KW_REVOKE,
    KW_RIGHT, KW_ROLE, KW_ROLES, KW_ROLLBACK, KW_ROLLUP, KW_ROUTINE, KW_ROW, KW_ROWS,
    KW_SCHEMA, KW_SCHEMAS, KW_SECOND, KW_SELECT, KW_SEMI, KW_SERIALIZABLE, KW_SESSION, KW_SET, KW_SETS, KW_SHOW,
    KW_SMALLINT, KW_SNAPSHOT, KW_SONAME, KW_SPLIT, KW_START, KW_STATUS, KW_STOP, KW_STORAGE, KW_STRING,
    KW_SUM, KW_SUPERUSER, KW_SYNC, KW_SYSTEM,
    KW_TABLE, KW_TABLES, KW_TABLET, KW_TASK, KW_TEMPORARY, KW_TERMINATED, KW_THAN, KW_TIME, KW_THEN, KW_TIMESTAMP, KW_TINYINT,
    KW_TO, KW_TRANSACTION, KW_TRIGGERS, KW_TRIM, KW_TRUE, KW_TRUNCATE, KW_TYPE, KW_TYPES,
    KW_UNCOMMITTED, KW_UNBOUNDED, KW_UNION, KW_UNIQUE, KW_UNSIGNED, KW_USE, KW_USER, KW_USING, KW_UNINSTALL,
    KW_VALUE, KW_VALUES, KW_VARCHAR, KW_VARIABLES, KW_VERBOSE, KW_VIEW,
    KW_WARNINGS, KW_WEEK, KW_WHEN, KW_WHITELIST, KW_WHERE, KW_WITH, KW_WORK, KW_WRITE,
    KW_YEAR;

terminal COMMA, DOT, DOTDOTDOT, AT, STAR, LPAREN, RPAREN, SEMICOLON, LBRACKET, RBRACKET, DIVIDE, MOD, ADD, SUBTRACT;
terminal BITAND, BITOR, BITXOR, BITNOT;
terminal EQUAL, NOT, LESSTHAN, GREATERTHAN, SET_VAR;
terminal COMMENTED_PLAN_HINT_START, COMMENTED_PLAN_HINT_END;
terminal String IDENT;
terminal String NUMERIC_OVERFLOW;
terminal Long INTEGER_LITERAL;
terminal String LARGE_INTEGER_LITERAL;
terminal Double FLOATINGPOINT_LITERAL;
terminal BigDecimal DECIMAL_LITERAL;
terminal String STRING_LITERAL;
terminal String UNMATCHED_STRING_LITERAL;
terminal String COMMENTED_PLAN_HINTS;

// Statement that the result of this parser.
nonterminal List<StatementBase> stmts;
nonterminal StatementBase stmt, show_stmt, show_param, help_stmt, load_stmt,
    create_routine_load_stmt, pause_routine_load_stmt, resume_routine_load_stmt, stop_routine_load_stmt,
    show_routine_load_stmt, show_routine_load_task_stmt,
    describe_stmt, alter_stmt,
    use_stmt, kill_stmt, drop_stmt, recover_stmt, grant_stmt, revoke_stmt, create_stmt, set_stmt, sync_stmt, cancel_stmt, cancel_param, delete_stmt,
    link_stmt, migrate_stmt, enter_stmt, unsupported_stmt, export_stmt, admin_stmt, truncate_stmt,
    import_columns_stmt, import_where_stmt, install_plugin_stmt, uninstall_plugin_stmt;

nonterminal ImportColumnDesc import_column_desc;
nonterminal List<ImportColumnDesc> import_column_descs;

// unsupported statement
nonterminal opt_with_consistent_snapshot, opt_work, opt_chain, opt_release;

// Single select statement.
nonterminal SelectStmt select_stmt;
nonterminal ValueList value_clause;

// No return.
nonterminal describe_command, opt_full, opt_inner, opt_outer, from_or_in, keys_or_index, opt_storage, opt_wild_where,
            charset, opt_charset_name, equal, transaction_characteristics, isolation_level,
            transaction_access_mode, isolation_types;

// String
nonterminal String user, opt_user;
nonterminal UserIdentity user_identity;
nonterminal String quantity;

// Description of user
nonterminal UserDesc grant_user;

// Select or set operation(union/intersect/except) statement.
nonterminal QueryStmt query_stmt;
// Single select_stmt or parenthesized query_stmt.
nonterminal QueryStmt set_operand;
// List of select or set operation(union/intersect/except) blocks connected by  set operators or a single select block.
nonterminal List<SetOperand> set_operand_list;
// List of select blocks connected by set operators, with order by or limit.
nonterminal QueryStmt set_operation_with_order_by_or_limit;
nonterminal InsertStmt insert_stmt;
nonterminal InsertTarget insert_target;
nonterminal InsertSource insert_source;

nonterminal BackupStmt backup_stmt;
nonterminal RestoreStmt restore_stmt;

nonterminal SelectList select_clause, select_list, select_sublist;
nonterminal SelectListItem select_list_item, star_expr;
nonterminal Expr expr, non_pred_expr, arithmetic_expr, timestamp_arithmetic_expr, expr_or_default;
nonterminal Expr set_expr_or_default;
nonterminal ArrayList<Expr> expr_list, values, row_value, opt_values;
nonterminal ArrayList<Expr> func_arg_list;
nonterminal ArrayList<Expr> expr_pipe_list;
nonterminal String select_alias, opt_table_alias;
nonterminal ArrayList<String> ident_list;
nonterminal PartitionNames opt_partition_names, partition_names;
nonterminal ClusterName cluster_name;
nonterminal ClusterName des_cluster_name;
nonterminal TableName table_name;
nonterminal FunctionName function_name;
nonterminal Expr where_clause;
nonterminal Expr where_clause_without_null;
nonterminal Predicate predicate, between_predicate, comparison_predicate,
  compound_predicate, in_predicate, like_predicate, exists_predicate;
nonterminal ArrayList<Expr> opt_partition_by_clause;
nonterminal Expr having_clause;
nonterminal ArrayList<OrderByElement> order_by_elements, order_by_clause;
nonterminal OrderByElement order_by_element;
nonterminal Boolean opt_order_param;
nonterminal Boolean opt_nulls_order_param;
nonterminal LimitElement limit_clause;
nonterminal TypeDef type_def, opt_intermediate_type;
nonterminal List<TypeDef> type_def_list;
nonterminal FunctionArgsDef func_args_def;
nonterminal Type type;
nonterminal Expr cast_expr, case_else_clause, analytic_expr;
nonterminal LiteralExpr literal;
nonterminal CaseExpr case_expr;
nonterminal ArrayList<CaseWhenClause> case_when_clause_list;
nonterminal FunctionParams function_params;
nonterminal Expr function_call_expr;
nonterminal AnalyticWindow opt_window_clause;
nonterminal AnalyticWindow.Type window_type;
nonterminal AnalyticWindow.Boundary window_boundary;
nonterminal SlotRef column_ref;
nonterminal ArrayList<TableRef> table_ref_list, base_table_ref_list;
nonterminal FromClause from_clause;
nonterminal TableRef table_ref;
nonterminal TableRef base_table_ref;
nonterminal WithClause opt_with_clause;
nonterminal ArrayList<View> with_view_def_list;
nonterminal View with_view_def;
nonterminal Subquery subquery;
nonterminal InlineViewRef inline_view_ref;
nonterminal JoinOperator join_operator;
nonterminal ArrayList<String> opt_plan_hints;
nonterminal ArrayList<String> opt_sort_hints;
nonterminal Expr sign_chain_expr;
nonterminal Qualifier opt_set_qualifier;
nonterminal Operation set_op;
nonterminal ArrayList<String> opt_common_hints;

// Set type
nonterminal SetType option_type, opt_var_type, var_ident_type;

// Set variable
nonterminal SetVar option_value, option_value_follow_option_type, option_value_no_option_type,
        user_property;

// List of set variable
nonterminal List<SetVar> option_value_list, option_value_list_continued, start_option_value_list,
        start_option_value_list_following_option_type, user_property_list;

nonterminal Map<String, String> key_value_map, opt_key_value_map, opt_properties, opt_ext_properties;
nonterminal ColumnDef column_definition;
nonterminal IndexDef index_definition;
nonterminal ArrayList<ColumnDef> column_definition_list;
nonterminal ArrayList<IndexDef> index_definition_list;
nonterminal AggregateType opt_agg_type;
nonterminal PartitionDesc opt_partition;
nonterminal DistributionDesc opt_distribution;
nonterminal Integer opt_distribution_number;
nonterminal Long opt_field_length;
nonterminal KeysDesc opt_keys;

nonterminal PartitionKeyDesc partition_key_desc;
nonterminal PartitionKeyDesc fixed_partition_key_desc;
nonterminal List<PartitionValue> partition_key_list;
nonterminal SingleRangePartitionDesc single_range_partition_desc;
nonterminal List<SingleRangePartitionDesc> opt_single_range_partition_desc_list;
nonterminal List<SingleRangePartitionDesc> single_range_partition_desc_list;

nonterminal List<AccessPrivilege> privilege_list;
nonterminal List<String> string_list;
nonterminal List<Long> integer_list, cancel_rollup_job_id_list;
nonterminal AccessPrivilege privilege_type;

nonterminal DataDescription data_desc;
nonterminal List<DataDescription> data_desc_list;
nonterminal LabelName job_label;
nonterminal String opt_with_label;
nonterminal String opt_system;
nonterminal BrokerDesc opt_broker;
nonterminal ResourceDesc resource_desc;
nonterminal List<String> opt_col_list, col_list, opt_dup_keys, opt_columns_from_path;
nonterminal List<ColWithComment> opt_col_with_comment_list, col_with_comment_list;
nonterminal ColWithComment col_with_comment;
nonterminal List<Expr> opt_col_mapping_list;
nonterminal ColumnSeparator opt_field_term, column_separator;
nonterminal String opt_user_role;
nonterminal TablePattern tbl_pattern;
nonterminal ResourcePattern resource_pattern;
nonterminal String ident_or_star;

// Routine load
nonterminal ParseNode load_property;
nonterminal List<ParseNode> opt_load_property_list;

// Boolean
nonterminal Boolean opt_negative, opt_is_allow_null, opt_is_key, opt_read_only, opt_aggregate;
nonterminal String opt_from_rollup, opt_to_rollup;
nonterminal ColumnPosition opt_col_pos;

// Alter statement
nonterminal AlterClause alter_system_clause, alter_cluster_clause, alter_table_clause;
nonterminal List<AlterClause> alter_table_clause_list, opt_rollup, add_rollup_clause_list, drop_rollup_clause_list;
nonterminal AddRollupClause add_rollup_clause;
nonterminal DropRollupClause drop_rollup_clause;

// grouping sets
nonterminal List<ArrayList<Expr>> grouping_set_list;
nonterminal ArrayList<Expr> grouping_set;
nonterminal GroupByClause group_by_clause, grouping_elements;
//
nonterminal String keyword, ident, ident_or_text, variable_name, text_or_password,
        charset_name_or_default, old_or_new_charset_name_or_default, opt_collate,
        collation_name_or_default, type_func_name_keyword, type_function_name, opt_file_format, time_unit;

nonterminal String opt_db, procedure_or_function, opt_comment, opt_engine;
nonterminal ColumnDef.DefaultValue opt_default_value;
nonterminal Boolean opt_if_exists, opt_if_not_exists;
nonterminal Boolean opt_external;
nonterminal IndexDef.IndexType opt_index_type;

nonterminal ShowAlterStmt.AlterType opt_alter_type;
nonterminal Boolean opt_builtin;
nonterminal Boolean opt_verbose;

nonterminal Boolean opt_tmp;

nonterminal OutFileClause opt_outfile;

precedence nonassoc COMMA;
precedence nonassoc STRING_LITERAL;
precedence nonassoc KW_COLUMNS;
precedence nonassoc KW_WITH;
precedence left KW_FULL, KW_MERGE;
precedence left DOT;
precedence left SET_VAR;
precedence left KW_OR;
precedence left KW_AND;
precedence left KW_NOT, NOT;
precedence left KW_BETWEEN, KW_IN, KW_IS, KW_EXISTS;
precedence left KW_LIKE, KW_REGEXP;
precedence left EQUAL, LESSTHAN, GREATERTHAN;
precedence left ADD, SUBTRACT;
precedence left AT, STAR, DIVIDE, MOD, KW_DIV;
precedence left BITAND, BITOR, BITXOR;
precedence left KW_PIPE;
precedence left BITNOT;
precedence left KW_ORDER, KW_BY, KW_LIMIT;
precedence right KW_PROPERTIES;
precedence left LPAREN, RPAREN;
// Support chaining of timestamp arithmetic exprs.
precedence left KW_INTERVAL;
precedence left KW_OVER;
precedence left KW_PARTITION;
precedence left KW_PARTITIONS;
precedence right KW_TEMPORARY;
precedence right LBRACKET;

start with stmts;

stmts ::=
    stmt:stmt
    {:
        RESULT = Lists.newArrayList(stmt);
    :}
    | stmts:stmts SEMICOLON stmt:stmt
    {:
        stmts.add(stmt);
        RESULT = stmts;
    :}
    | import_columns_stmt:stmt
    {:
        RESULT = Lists.newArrayList(stmt);
    :}
    | import_where_stmt:stmt
    {:
        RESULT = Lists.newArrayList(stmt);
    :}
    ;

import_columns_stmt ::=
    KW_COLUMNS LPAREN import_column_descs:columns RPAREN
    {:
        RESULT = new ImportColumnsStmt(columns);
    :}
    ;

import_column_descs ::=
    import_column_desc:column
    {:
        RESULT = Lists.newArrayList(column);
    :}
    | import_column_descs:columns COMMA import_column_desc:column
    {:
        columns.add(column);
        RESULT = columns;
    :}
    ;

import_column_desc ::=
    ident:name
    {:
        RESULT = new ImportColumnDesc(name, null);
    :}
    | ident:name EQUAL expr:expr
    {:
        RESULT = new ImportColumnDesc(name, expr);
    :}
    ;

import_where_stmt ::=
    KW_WHERE expr:expr
    {:
        RESULT = new ImportWhereStmt(expr);
    :}
    ;

stmt ::=
     alter_stmt:stmt
    {: RESULT = stmt; :}
    | create_stmt:query
    {: RESULT = query; :}
    | link_stmt:query
    {: RESULT = query; :}
    | migrate_stmt:query
    {: RESULT = query; :}
    | enter_stmt:enter
    {: RESULT = enter; :}
    | query_stmt:query
    {: RESULT = query; :}
    | drop_stmt:stmt
    {: RESULT = stmt; :}
    | recover_stmt:stmt
    {: RESULT = stmt; :}
    | use_stmt:use
    {: RESULT = use; :}
    | set_stmt:set
    {: RESULT = set; :}
    | kill_stmt:kill
    {: RESULT = kill; :}
    | describe_stmt:describe
    {: RESULT = describe; :}
    | show_stmt:show
    {: RESULT = show; :}
    | grant_stmt:grant
    {: RESULT = grant; :}
    | revoke_stmt:revoke
    {: RESULT = revoke; :}
    | help_stmt : stmt
    {: RESULT = stmt; :}
    | load_stmt : stmt
    {: RESULT = stmt; :}
    | create_routine_load_stmt : stmt
    {: RESULT = stmt; :}
    | pause_routine_load_stmt : stmt
    {: RESULT = stmt; :}
    | resume_routine_load_stmt : stmt
    {: RESULT = stmt; :}
    | stop_routine_load_stmt : stmt
    {: RESULT = stmt; :}
    | show_routine_load_stmt : stmt
    {: RESULT = stmt; :}
    | show_routine_load_task_stmt : stmt
    {: RESULT = stmt; :}
    | cancel_stmt : stmt
    {: RESULT = stmt; :}
    | delete_stmt : stmt
    {: RESULT = stmt; :}
    | sync_stmt : stmt
    {: RESULT = stmt; :}
    | insert_stmt : stmt
    {: RESULT = stmt; :}
    | backup_stmt : stmt
    {: RESULT = stmt; :}
	| restore_stmt : stmt
    {: RESULT = stmt; :}
    | unsupported_stmt : stmt
    {: RESULT = stmt; :}
    | export_stmt : stmt
    {: RESULT = stmt; :}
    | admin_stmt : stmt
    {: RESULT = stmt; :}
    | truncate_stmt : stmt
    {: RESULT = stmt; :}
    | install_plugin_stmt : stmt
    {: RESULT = stmt; :}
    | uninstall_plugin_stmt : stmt
    {: RESULT = stmt; :}
    | /* empty: query only has comments */
    {:
        RESULT = new EmptyStmt();
    :}
    ;

cluster_name ::=
    ident:cluster
    {:
        RESULT = new ClusterName(cluster, "");
	:}
    | ident:cluster DOT ident:db
    {:
        RESULT = new ClusterName(cluster, db);
    :}
    ;

des_cluster_name ::=
    ident:cluster
    {:
        RESULT = new ClusterName(cluster, "");
    :}
    | ident:cluster DOT ident:db
    {:
        RESULT = new ClusterName(cluster, db);
    :}
    ;

// plugin statement
install_plugin_stmt ::=
    KW_INSTALL KW_PLUGIN KW_FROM ident_or_text:source
    {:
        RESULT = new InstallPluginStmt(source);
    :}
    ;

uninstall_plugin_stmt ::=
    KW_UNINSTALL KW_PLUGIN ident_or_text:name
    {:
        RESULT = new UninstallPluginStmt(name);
    :}
    ;

// link statement
link_stmt ::=
    KW_LINK KW_DATABASE cluster_name:src_name des_cluster_name:des_name
    {:
        RESULT = new LinkDbStmt(src_name, des_name);
    :}
    ;

// migrate statement
migrate_stmt ::=
    KW_MIGRATE KW_DATABASE cluster_name:src_name des_cluster_name:des_name
    {:
        RESULT = new MigrateDbStmt(src_name, des_name);
    :}
    ;

// Alter Statement
alter_stmt ::=
    KW_ALTER KW_TABLE table_name:tbl
    alter_table_clause_list:clauses
    {:
        RESULT = new AlterTableStmt(tbl, clauses);
    :}
    | KW_ALTER KW_TABLE table_name:tbl KW_ADD KW_ROLLUP add_rollup_clause_list:clauses
    {:
        RESULT = new AlterTableStmt(tbl, clauses);
    :}
    | KW_ALTER KW_TABLE table_name:tbl KW_DROP KW_ROLLUP drop_rollup_clause_list:clauses
    {:
        RESULT = new AlterTableStmt(tbl, clauses);
    :}
    | KW_ALTER KW_VIEW table_name:tbl
    opt_col_with_comment_list:columns KW_AS query_stmt:view_def
    {:
        RESULT = new AlterViewStmt(tbl, columns, view_def);
    :}
    | KW_ALTER KW_SYSTEM alter_system_clause:clause
    {:
        RESULT = new AlterSystemStmt(clause);
    :}
    | KW_ALTER KW_CLUSTER ident:name opt_properties:properties
    {:
        RESULT = new AlterClusterStmt(name, properties);
    :}
    | KW_ALTER KW_DATABASE ident:dbName KW_SET KW_DATA KW_QUOTA quantity:quota_quantity
    {:
        RESULT = new AlterDatabaseQuotaStmt(dbName, QuotaType.DATA, quota_quantity);
    :}
    | KW_ALTER KW_DATABASE ident:dbName KW_SET KW_REPLICA KW_QUOTA INTEGER_LITERAL:number
    {:
        RESULT = new AlterDatabaseQuotaStmt(dbName, QuotaType.REPLICA, String.valueOf(number));
    :}

    | KW_ALTER KW_DATABASE ident:dbName KW_RENAME ident:newDbName
    {:
        RESULT = new AlterDatabaseRename(dbName, newDbName);
    :}
    ;

quantity ::=
    INTEGER_LITERAL:number
    {:
        RESULT = number.toString();
    :}
    | ident:number_unit
    {:
        RESULT = number_unit;
    :}
    ;

opt_user ::=
    /* empty */
    | KW_FOR user:user

    {:
        RESULT = user;

    :}
    ;

add_rollup_clause ::=
    ident:rollupName LPAREN ident_list:cols RPAREN opt_dup_keys:dup_keys opt_from_rollup:baseRollup opt_properties:properties
    {:
        RESULT = new AddRollupClause(rollupName, cols, dup_keys, baseRollup, properties);
    :}
    ;

add_rollup_clause_list ::=
    add_rollup_clause:clause
    {:
        RESULT = Lists.newArrayList(clause);
    :}
    | add_rollup_clause_list:list COMMA add_rollup_clause:clause
    {:
        list.add(clause);
        RESULT = list;
    :}
    ;

drop_rollup_clause ::=
    ident:rollupName opt_properties:properties
    {:
        RESULT = new DropRollupClause(rollupName, properties);
    :}
    ;

drop_rollup_clause_list ::=
    drop_rollup_clause:clause
    {:
        RESULT = Lists.newArrayList(clause);
    :}
    | drop_rollup_clause_list:list COMMA drop_rollup_clause:clause
    {:
        list.add(clause);
        RESULT = list;
    :}
    ;

alter_table_clause_list ::=
    alter_table_clause:clause
    {:
        RESULT = Lists.newArrayList(clause);
    :}
    | alter_table_clause_list:list COMMA alter_table_clause:clause
    {:
        list.add(clause);
        RESULT = list;
    :}
    ;

opt_to_rollup ::=
    {:
        RESULT = null;
    :}
    | KW_TO ident:rollup
    {:
        RESULT = rollup;
    :}
    | KW_IN ident:rollup
    {:
        RESULT = rollup;
    :}
    ;

opt_from_rollup ::=
    {:
        RESULT = null;
    :}
    | KW_FROM ident:rollup
    {:
        RESULT = rollup;
    :}
    ;

opt_col_pos ::=
    {:
        RESULT = null;
    :}
    | KW_FIRST
    {:
        RESULT = ColumnPosition.FIRST;
    :}
    | KW_AFTER ident:col
    {:
        RESULT = new ColumnPosition(col);
    :}
    ;

opt_dup_keys ::=
    {:
        RESULT = null;
    :}
    | KW_DUPLICATE KW_KEY LPAREN ident_list:cols RPAREN
    {:
        RESULT = cols;
    :}
    ;

alter_table_clause ::=
    KW_ADD KW_COLUMN column_definition:col opt_col_pos:col_pos opt_to_rollup:rollup opt_properties:properties
    {:
        RESULT = new AddColumnClause(col, col_pos, rollup, properties);
    :}
    | KW_ADD KW_COLUMN LPAREN column_definition_list:cols RPAREN opt_to_rollup:rollup opt_properties:properties
    {:
        RESULT = new AddColumnsClause(cols, rollup, properties);
    :}
    | KW_DROP KW_COLUMN ident:col opt_from_rollup:rollup opt_properties:properties
    {:
        RESULT = new DropColumnClause(col, rollup, properties);
    :}
    | KW_MODIFY KW_COLUMN column_definition:col opt_col_pos:col_pos opt_from_rollup:rollup opt_properties:properties
    {:
        RESULT = new ModifyColumnClause(col, col_pos, rollup, properties);
    :}
    | KW_ORDER KW_BY LPAREN ident_list:cols RPAREN opt_from_rollup:rollup opt_properties:properties
    {:
        RESULT = new ReorderColumnsClause(cols, rollup, properties);
    :}
    | KW_SET LPAREN key_value_map:properties RPAREN
    {:
        RESULT = new ModifyTablePropertiesClause(properties);
    :}
    | KW_ADD opt_tmp:isTempPartition single_range_partition_desc:desc opt_distribution:distribution opt_properties:properties
    {:
        RESULT = new AddPartitionClause(desc, distribution, properties, isTempPartition);
    :}
    | KW_DROP opt_tmp:isTempPartition KW_PARTITION opt_if_exists:ifExists ident:partitionName
    {:
        RESULT = new DropPartitionClause(ifExists, partitionName, isTempPartition);
    :}
    | KW_MODIFY KW_PARTITION ident:partitionName KW_SET LPAREN key_value_map:properties RPAREN
    {:
        ArrayList<String> partitions = new ArrayList<String>();
        partitions.add(partitionName);
        RESULT = new ModifyPartitionClause(partitions, properties);
    :}
    | KW_MODIFY KW_PARTITION LPAREN ident_list:partitions RPAREN KW_SET LPAREN key_value_map:properties RPAREN
    {:
        RESULT = new ModifyPartitionClause(partitions, properties);
    :}
    | KW_MODIFY KW_PARTITION LPAREN STAR RPAREN KW_SET LPAREN key_value_map:properties RPAREN
    {:
        RESULT = ModifyPartitionClause.createStarClause(properties);
    :}
    | KW_REPLACE opt_partition_names:partitions KW_WITH opt_partition_names:tempPartitions opt_properties:properties
    {:
        RESULT = new ReplacePartitionClause(partitions, tempPartitions, properties);
    :}
    | KW_RENAME ident:newTableName
    {:
        RESULT = new TableRenameClause(newTableName);
    :}
    | KW_RENAME KW_ROLLUP ident:rollupName ident:newRollupName
    {:
        RESULT = new RollupRenameClause(rollupName, newRollupName);
    :}
    | KW_RENAME KW_PARTITION ident:partitionName ident:newPartitionName
    {:
        RESULT = new PartitionRenameClause(partitionName, newPartitionName);
    :}
    | KW_RENAME KW_COLUMN ident:colName ident:newColName
    {:
        RESULT = new ColumnRenameClause(colName, newColName);
    :}
    | KW_ADD index_definition:indexDef
    {:
        RESULT = new CreateIndexClause(null, indexDef, true);
    :}
    | KW_DROP KW_INDEX ident:indexName
    {:
        RESULT = new DropIndexClause(indexName, null, true);
    :}
    ;

alter_system_clause ::=
    KW_ADD KW_BACKEND string_list:hostPorts
    {:
        RESULT = new AddBackendClause(hostPorts, false);
    :}
    | KW_ADD KW_FREE KW_BACKEND string_list:hostPorts
    {:
        RESULT = new AddBackendClause(hostPorts, true);
    :}
    | KW_ADD KW_BACKEND KW_TO ident:clusterName string_list:hostPorts
    {:
        RESULT = new AddBackendClause(hostPorts, clusterName);
    :}
    | KW_DROP KW_BACKEND string_list:hostPorts
    {:
        RESULT = new DropBackendClause(hostPorts, false);
    :}
    | KW_DROPP KW_BACKEND string_list:hostPorts
    {:
        RESULT = new DropBackendClause(hostPorts, true);
    :}
    | KW_DECOMMISSION KW_BACKEND string_list:hostPorts
    {:
        RESULT = new DecommissionBackendClause(hostPorts);
    :}
    | KW_ADD KW_OBSERVER STRING_LITERAL:hostPort
    {:
        RESULT = new AddObserverClause(hostPort);
    :}
    | KW_DROP KW_OBSERVER STRING_LITERAL:hostPort
    {:
        RESULT = new DropObserverClause(hostPort);
    :}
    | KW_ADD KW_FOLLOWER STRING_LITERAL:hostPort
    {:
        RESULT = new AddFollowerClause(hostPort);
    :}
    | KW_DROP KW_FOLLOWER STRING_LITERAL:hostPort
    {:
        RESULT = new DropFollowerClause(hostPort);
    :}
    /* Broker manipulation */
    | KW_ADD KW_BROKER ident_or_text:brokerName string_list:hostPorts
    {:
        RESULT = ModifyBrokerClause.createAddBrokerClause(brokerName, hostPorts);
    :}
    | KW_DROP KW_BROKER ident_or_text:brokerName string_list:hostPorts
    {:
        RESULT = ModifyBrokerClause.createDropBrokerClause(brokerName, hostPorts);
    :}
    | KW_DROP KW_ALL KW_BROKER ident_or_text:brokerName
    {:
        RESULT = ModifyBrokerClause.createDropAllBrokerClause(brokerName);
    :}
    // set load errors hub
    | KW_SET KW_LOAD KW_ERRORS KW_HUB opt_properties:properties
    {:
        RESULT = new AlterLoadErrorUrlClause(properties);
    :} 
    ;

alter_cluster_clause ::=
    KW_MODIFY opt_properties:properties
    {:
        RESULT = new AlterClusterClause(AlterClusterType.ALTER_CLUSTER_PROPERTIES, properties);
    :}
    ;

// Sync Stmt
sync_stmt ::=
    KW_SYNC
    {:
        RESULT = new SyncStmt();
    :}
    ;

opt_intermediate_type ::=
    {:
        RESULT = null;
    :}
    | KW_INTERMEDIATE type_def:intermediateType
    {:
        RESULT = intermediateType;
    :}
    ;

// Create Statement
create_stmt ::=
    /* Database */
    KW_CREATE KW_DATABASE opt_if_not_exists:ifNotExists ident:db
    {:
        RESULT = new CreateDbStmt(ifNotExists, db);
    :}
    | KW_CREATE KW_SCHEMA opt_if_not_exists:ifNotExists ident:db
    {:
        RESULT = new CreateDbStmt(ifNotExists, db);
    :}
    /* cluster */
   /* KW_CREATE KW_CLUSTER ident:name  opt_properties:properties KW_IDENTIFIED KW_BY STRING_LITERAL:password
    {:
        RESULT = new CreateClusterStmt(name, properties, password);
    :}*/
    /* Function */
    | KW_CREATE opt_aggregate:isAggregate KW_FUNCTION function_name:functionName LPAREN func_args_def:args RPAREN
            KW_RETURNS type_def:retrunType opt_intermediate_type:intermediateType opt_properties:properties
    {:
        RESULT = new CreateFunctionStmt(isAggregate, functionName, args, retrunType, intermediateType, properties);
    :}
    /* Table */
    | KW_CREATE opt_external:isExternal KW_TABLE opt_if_not_exists:ifNotExists table_name:name
            LPAREN column_definition_list:columns RPAREN opt_engine:engineName
            opt_keys:keys
            opt_comment:tableComment
            opt_partition:partition
            opt_distribution:distribution
            opt_rollup:index
            opt_properties:tblProperties
            opt_ext_properties:extProperties
    {:
        RESULT = new CreateTableStmt(ifNotExists, isExternal, name, columns, engineName, keys, partition,
        distribution, tblProperties, extProperties, tableComment, index);
    :}
    | KW_CREATE opt_external:isExternal KW_TABLE opt_if_not_exists:ifNotExists table_name:name
            LPAREN column_definition_list:columns COMMA index_definition_list:indexes RPAREN opt_engine:engineName
            opt_keys:keys
            opt_comment:tableComment
            opt_partition:partition
            opt_distribution:distribution
            opt_rollup:index
            opt_properties:tblProperties
            opt_ext_properties:extProperties
    {:
        RESULT = new CreateTableStmt(ifNotExists, isExternal, name, columns, indexes, engineName, keys, partition,
        distribution, tblProperties, extProperties, tableComment, index);
    :}
    /* User */
    | KW_CREATE KW_USER opt_if_not_exists:ifNotExists grant_user:user opt_user_role:userRole
    {:
        RESULT = new CreateUserStmt(ifNotExists, user, userRole);
    :}
    | KW_CREATE KW_VIEW opt_if_not_exists:ifNotExists table_name:viewName
        opt_col_with_comment_list:columns opt_comment:comment KW_AS query_stmt:view_def
    {:
        RESULT = new CreateViewStmt(ifNotExists, viewName, columns, comment, view_def);
    :}
    /* cluster */
    | KW_CREATE KW_CLUSTER ident:name opt_properties:properties KW_IDENTIFIED KW_BY STRING_LITERAL:password
    {:
        RESULT = new CreateClusterStmt(name, properties, password);
    :}
    | KW_CREATE opt_read_only:isReadOnly KW_REPOSITORY ident:repoName KW_WITH KW_BROKER ident:brokerName
      KW_ON KW_LOCATION STRING_LITERAL:location
      opt_properties:properties
    {:
        RESULT = new CreateRepositoryStmt(isReadOnly, repoName, brokerName, location, properties);
    :}
    | KW_CREATE KW_ROLE ident:role
    {:
        RESULT = new CreateRoleStmt(role);
    :}
    | KW_CREATE KW_FILE STRING_LITERAL:fileName opt_db:db KW_PROPERTIES LPAREN key_value_map:properties RPAREN
    {:
        RESULT = new CreateFileStmt(fileName, db, properties);
    :}
    | KW_CREATE KW_MATERIALIZED KW_VIEW ident:mvName KW_AS select_stmt:selectStmt opt_properties:properties
    {:
        RESULT = new CreateMaterializedViewStmt(mvName, selectStmt, properties);
    :}
    | KW_CREATE KW_INDEX ident:indexName KW_ON table_name:tableName LPAREN ident_list:cols RPAREN opt_index_type:indexType opt_comment:comment
    {:
        RESULT = new AlterTableStmt(tableName, Lists.newArrayList(new CreateIndexClause(tableName, new IndexDef(indexName, cols, indexType, comment), false)));
    :}
    /* resource */
    | KW_CREATE opt_external:isExternal KW_RESOURCE ident_or_text:resourceName opt_properties:properties
    {:
        RESULT = new CreateResourceStmt(isExternal, resourceName, properties);
    :}
    ;

opt_aggregate ::=
    {:
        RESULT = false;
    :}
    | KW_AGGREGATE
    {:
        RESULT = true;
    :}
    ;

opt_read_only ::=
    {:
        RESULT = false;
    :}
    | KW_READ KW_ONLY
    {:
        RESULT = true;
    :}
    ;

grant_user ::=
    user_identity:user_id
    {:
        /* No password */
        RESULT = new UserDesc(user_id);
    :}
    | user_identity:user_id KW_IDENTIFIED KW_BY STRING_LITERAL:password
    {:
        /* plain text password */
        RESULT = new UserDesc(user_id, password, true);
    :}
    | user_identity:user_id KW_IDENTIFIED KW_BY KW_PASSWORD STRING_LITERAL:password
    {:
        /* hashed password */
        RESULT = new UserDesc(user_id, password, false);
    :}
    ;

opt_user_role ::=
    /* Empty */
    {:
        RESULT = null;
    :}
    | KW_SUPERUSER /* for forward compatibility*/
    {:
        RESULT = "superuser";
    :}
    | KW_DEFAULT KW_ROLE STRING_LITERAL:role
    {:
        RESULT = role;
    :}
    ;

user ::=
    ident_or_text:user
    {:
        RESULT = user;
    :}
    ;

user_identity ::=
    ident_or_text:user
    {:
        RESULT = new UserIdentity(user, "%", false);
    :}
    | ident_or_text:user AT ident_or_text:host
    {:
        RESULT = new UserIdentity(user, host, false);
    :}
    | ident_or_text:user AT LBRACKET ident_or_text:host RBRACKET
    {:
        RESULT = new UserIdentity(user, host, true);
    :}
    ;

// Help statement
help_stmt ::=
    KW_HELP ident_or_text:mark
    {:
        RESULT = new HelpStmt(mark);
    :}
    ;

// Export statement
export_stmt ::=
    KW_EXPORT KW_TABLE base_table_ref:tblRef
    KW_TO STRING_LITERAL:path
    opt_properties:properties
    opt_broker:broker
    {:
        RESULT = new ExportStmt(tblRef, path, properties, broker);
    :}
    ;

// Load
load_stmt ::=
    KW_LOAD KW_LABEL job_label:label
    LPAREN data_desc_list:dataDescList RPAREN
    opt_broker:broker
    opt_system:system
    opt_properties:properties
    {:
        RESULT = new LoadStmt(label, dataDescList, broker, system, properties);
    :}
    | KW_LOAD KW_LABEL job_label:label
    LPAREN data_desc_list:dataDescList RPAREN
    resource_desc:resource
    opt_properties:properties
    {:
        RESULT = new LoadStmt(label, dataDescList, resource, properties);
    :}
    ;

job_label ::=
    ident:label
    {:
        RESULT = new LabelName("", label);
    :}
    | ident:db DOT ident:label
    {:
        RESULT = new LabelName(db, label);
    :}
    ;

data_desc_list ::=
    data_desc:desc
    {:
        RESULT = Lists.newArrayList(desc);
    :}
    | data_desc_list:list COMMA data_desc:desc
    {:
        list.add(desc);
        RESULT = list;
    :}
    ;

data_desc ::=
    KW_DATA KW_INFILE LPAREN string_list:files RPAREN
    opt_negative:isNeg
    KW_INTO KW_TABLE ident:tableName
    opt_partition_names:partitionNames
    opt_field_term:colSep
    opt_file_format:fileFormat
    opt_col_list:colList
    opt_columns_from_path:columnsFromPath
    opt_col_mapping_list:colMappingList
    where_clause:whereExpr
    {:
        RESULT = new DataDescription(tableName, partitionNames, files, colList, colSep, fileFormat,
        columnsFromPath, isNeg, colMappingList, whereExpr);
    :}
    | KW_DATA KW_FROM KW_TABLE ident:srcTableName
    opt_negative:isNeg
    KW_INTO KW_TABLE ident:tableName
    opt_partition_names:partitionNames
    opt_col_mapping_list:colMappingList
    where_clause:whereExpr
    {:
        RESULT = new DataDescription(tableName, partitionNames, srcTableName, isNeg, colMappingList, whereExpr);
    :}
    ;

opt_negative ::=
    {:
        RESULT = false;
    :}
    | KW_NEGATIVE
    {:
        RESULT = true;
    :}
    ;

opt_field_term ::=
    /* Empty */
    {:
        RESULT = null;
    :}
    | KW_COLUMNS KW_TERMINATED KW_BY STRING_LITERAL:sep
    {:
        RESULT = new ColumnSeparator(sep);
    :}
    ;

column_separator ::=
    KW_COLUMNS KW_TERMINATED KW_BY STRING_LITERAL:sep
    {:
        RESULT = new ColumnSeparator(sep);
    :}
    ;

opt_file_format ::=
    /* Empty */
    {: RESULT = null; :}
    | KW_FORMAT KW_AS ident_or_text:format
    {: RESULT = format; :}
    ;

opt_columns_from_path ::=
    /* Empty */
    {: RESULT = null; :}
    | KW_COLUMNS KW_FROM KW_PATH KW_AS LPAREN ident_list:columnsFromPath RPAREN
    {: RESULT = columnsFromPath; :}
    ;

opt_col_list ::=
    {:
        RESULT = null;
    :}
    | LPAREN ident_list:colList RPAREN
    {:
        RESULT = colList;
    :}
    ;

opt_col_with_comment_list ::=
    {:
        RESULT = null;
    :}
    | LPAREN col_with_comment_list:colList RPAREN
    {:
        RESULT = colList;
    :}
    ;

col_with_comment_list ::=
    col_with_comment:col
    {:
        ArrayList<ColWithComment> list = new ArrayList<ColWithComment>();
        list.add(col);
        RESULT = list;
    :}
    | col_with_comment_list:list COMMA col_with_comment:col
    {:
        list.add(col);
        RESULT = list;
    :}
    ;

col_with_comment ::=
    ident:col opt_comment:comment
    {:
        RESULT = new ColWithComment(col, comment);
    :}
    ;

col_list ::=
    KW_COLUMNS LPAREN ident_list:colList RPAREN
    {:
        RESULT = colList;
    :}
    ;

opt_col_mapping_list ::=
    /* Empty */
    {:
        RESULT = null;
    :}
    | KW_SET LPAREN expr_list:list RPAREN
    {:
    	RESULT = list;
    :}
    ;

opt_system ::=
    {:
        RESULT = null;
    :}
    | KW_BY ident_or_text:system
    {:
        RESULT = system;
    :}
    ;

opt_broker ::=
    {:
        RESULT = null;
    :}
    | KW_WITH KW_BROKER ident_or_text:name
    {:
        RESULT = new BrokerDesc(name, null);
    :}
    | KW_WITH KW_BROKER ident_or_text:name LPAREN key_value_map:properties RPAREN
    {:
        RESULT = new BrokerDesc(name, properties);
    :}
    ;

resource_desc ::=                                                               
    KW_WITH KW_RESOURCE ident_or_text:resourceName                                 
    {:                                                                               
        RESULT = new ResourceDesc(resourceName, null);                               
    :}                                                                               
    | KW_WITH KW_RESOURCE ident_or_text:resourceName LPAREN key_value_map:properties RPAREN
    {:                                                                               
        RESULT = new ResourceDesc(resourceName, properties);                         
    :}                                                                               
    ; 

// Routine load statement
create_routine_load_stmt ::=
    KW_CREATE KW_ROUTINE KW_LOAD job_label:jobLabel KW_ON ident:tableName
    opt_load_property_list:loadPropertyList
    opt_properties:properties
    KW_FROM ident:type LPAREN key_value_map:customProperties RPAREN
    {:
        RESULT = new CreateRoutineLoadStmt(jobLabel, tableName, loadPropertyList, properties, type, customProperties);
    :}
    ;

opt_load_property_list ::=
    {:
        RESULT = null;
    :}
    | load_property:loadProperty
    {:
        RESULT = Lists.newArrayList(loadProperty);
    :}
    | opt_load_property_list:list COMMA load_property:loadProperty
    {:
        list.add(loadProperty);
        RESULT = list;
    :}
    ;

load_property ::=
    column_separator:colSep
    {:
        RESULT = colSep;
    :}
    | import_columns_stmt:columnsInfo
    {:
        RESULT = columnsInfo;
    :}
    | import_where_stmt:wherePredicate
    {:
        RESULT = wherePredicate;
    :}
    | partition_names:partitionNames
    {:
        RESULT = partitionNames;
    :}
    ;

pause_routine_load_stmt ::=
    KW_PAUSE KW_ROUTINE KW_LOAD KW_FOR job_label:jobLabel
    {:
        RESULT = new PauseRoutineLoadStmt(jobLabel);
    :}
    ;

resume_routine_load_stmt ::=
    KW_RESUME KW_ROUTINE KW_LOAD KW_FOR job_label:jobLabel
    {:
        RESULT = new ResumeRoutineLoadStmt(jobLabel);
    :}
    ;

stop_routine_load_stmt ::=
    KW_STOP KW_ROUTINE KW_LOAD KW_FOR job_label:jobLabel
    {:
        RESULT = new StopRoutineLoadStmt(jobLabel);
    :}
    ;

show_routine_load_stmt ::=
    KW_SHOW KW_ROUTINE KW_LOAD KW_FOR job_label:jobLabel
    {:
        RESULT = new ShowRoutineLoadStmt(jobLabel, false);
    :}
    | KW_SHOW KW_ALL KW_ROUTINE KW_LOAD KW_FOR job_label:jobLabel
    {:
        RESULT = new ShowRoutineLoadStmt(jobLabel, true);
    :}
    | KW_SHOW KW_ROUTINE KW_LOAD
    {:
        RESULT = new ShowRoutineLoadStmt(null, false);
    :}
    | KW_SHOW KW_ALL KW_ROUTINE KW_LOAD
    {:
        RESULT = new ShowRoutineLoadStmt(null, true);
    :}
    ;

show_routine_load_task_stmt ::=
    KW_SHOW KW_ROUTINE KW_LOAD KW_TASK opt_db:dbName opt_wild_where
    {:
        RESULT = new ShowRoutineLoadTaskStmt(dbName, parser.where);
    :}
    ;

// Grant statement
grant_stmt ::=
    KW_GRANT privilege_list:privs KW_ON tbl_pattern:tblPattern KW_TO user_identity:userId
    {:
        RESULT = new GrantStmt(userId, null, tblPattern, privs);
    :}
    | KW_GRANT privilege_list:privs KW_ON tbl_pattern:tblPattern KW_TO KW_ROLE STRING_LITERAL:role
    {:
        RESULT = new GrantStmt(null, role, tblPattern, privs);
    :}
    | KW_GRANT privilege_list:privs KW_ON KW_RESOURCE resource_pattern:resourcePattern KW_TO user_identity:userId
    {:
        RESULT = new GrantStmt(userId, null, resourcePattern, privs);
    :}
    | KW_GRANT privilege_list:privs KW_ON KW_RESOURCE resource_pattern:resourcePattern KW_TO KW_ROLE STRING_LITERAL:role
    {:
        RESULT = new GrantStmt(null, role, resourcePattern, privs);
    :}
    ;

tbl_pattern ::=
    ident_or_star:db
    {:
        RESULT = new TablePattern(db, "*");
    :}
    | ident_or_star:db DOT ident_or_star:tbl
    {:
        RESULT = new TablePattern(db, tbl);
    :}
    ;

resource_pattern ::=
    ident_or_star:resourceName
    {:
        RESULT = new ResourcePattern(resourceName);
    :}
    | STRING_LITERAL:resourceName
    {:
        RESULT = new ResourcePattern(resourceName);
    :}
    ;

ident_or_star ::=
    STAR
    {:
        RESULT = "*";
    :}
    | ident:ident
    {:
        RESULT = ident;
    :}
    ;

// Revoke statement
revoke_stmt ::=
    KW_REVOKE privilege_list:privs KW_ON tbl_pattern:tblPattern KW_FROM user_identity:userId
    {:
        RESULT = new RevokeStmt(userId, null, tblPattern, privs);
    :}
    | KW_REVOKE privilege_list:privs KW_ON tbl_pattern:tblPattern KW_FROM KW_ROLE STRING_LITERAL:role
    {:
        RESULT = new RevokeStmt(null, role, tblPattern, privs);
    :}
    | KW_REVOKE privilege_list:privs KW_ON KW_RESOURCE resource_pattern:resourcePattern KW_FROM user_identity:userId
    {:
        RESULT = new RevokeStmt(userId, null, resourcePattern, privs);
    :}
    | KW_REVOKE privilege_list:privs KW_ON KW_RESOURCE resource_pattern:resourcePattern KW_FROM KW_ROLE STRING_LITERAL:role
    {:
        RESULT = new RevokeStmt(null, role, resourcePattern, privs);
    :}
    ;

// Drop statement
drop_stmt ::=
    /* Database */
    KW_DROP KW_DATABASE opt_if_exists:ifExists ident:db
    {:
        RESULT = new DropDbStmt(ifExists, db);
    :}
    | KW_DROP KW_SCHEMA opt_if_exists:ifExists ident:db
    {:
        RESULT = new DropDbStmt(ifExists, db);
    :}
    /* cluster */
    | KW_DROP KW_CLUSTER opt_if_exists:ifExists ident:cluster
    {:
        RESULT = new DropClusterStmt(ifExists, cluster);
    :}
    /* Function */
    | KW_DROP KW_FUNCTION function_name:functionName LPAREN func_args_def:args RPAREN
    {:
        RESULT = new DropFunctionStmt(functionName, args);
    :}
    /* Table */
    | KW_DROP KW_TABLE opt_if_exists:ifExists table_name:name
    {:
        RESULT = new DropTableStmt(ifExists, name);
    :}
    /* User */
    | KW_DROP KW_USER user_identity:userId
    {:
        RESULT = new DropUserStmt(userId);
    :}
    /* View */
    | KW_DROP KW_VIEW opt_if_exists:ifExists table_name:name
    {:
        RESULT = new DropTableStmt(ifExists, name, true);
    :}
    | KW_DROP KW_REPOSITORY ident:repoName
    {:
        RESULT = new DropRepositoryStmt(repoName);
    :}
    | KW_DROP KW_ROLE ident:role
    {:
        RESULT = new DropRoleStmt(role);
    :}
    | KW_DROP KW_FILE STRING_LITERAL:fileName opt_db:dbName KW_PROPERTIES LPAREN key_value_map:properties RPAREN
    {:
        RESULT = new DropFileStmt(fileName, dbName, properties);
    :}
    | KW_DROP KW_INDEX ident:indexName KW_ON table_name:tableName
    {:
        RESULT = new AlterTableStmt(tableName, Lists.newArrayList(new DropIndexClause(indexName, tableName, false)));
    :}
    | KW_DROP KW_MATERIALIZED KW_VIEW opt_if_exists:ifExists ident:mvName KW_ON table_name:tableName
    {:
        RESULT = new DropMaterializedViewStmt(ifExists, mvName, tableName);
    :}
    | KW_DROP KW_RESOURCE ident_or_text:resourceName
    {:
        RESULT = new DropResourceStmt(resourceName);
    :}
    ;

// Recover statement
recover_stmt ::=
    KW_RECOVER KW_DATABASE ident:dbName
    {:
        RESULT = new RecoverDbStmt(dbName);
    :}
    | KW_RECOVER KW_TABLE table_name:dbTblName
    {:
        RESULT = new RecoverTableStmt(dbTblName);
    :}
    | KW_RECOVER KW_PARTITION ident:partitionName KW_FROM table_name:dbTblName
    {:
        RESULT = new RecoverPartitionStmt(dbTblName, partitionName);
    :}
    ;

opt_agg_type ::=
    /* not set */
    {: RESULT = null; :}
    | KW_SUM
    {:
    RESULT = AggregateType.SUM;
    :}
    | KW_MAX
    {:
    RESULT = AggregateType.MAX;
    :}
    | KW_MIN
    {:
    RESULT = AggregateType.MIN;
    :}
    | KW_REPLACE
    {:
    RESULT = AggregateType.REPLACE;
    :}
    | KW_REPLACE_IF_NOT_NULL
    {:
    RESULT = AggregateType.REPLACE_IF_NOT_NULL;
    :}
    | KW_HLL_UNION
    {:
    RESULT = AggregateType.HLL_UNION;
    :}
    | KW_BITMAP_UNION
    {:
    RESULT = AggregateType.BITMAP_UNION;
    :}
    ;

opt_partition ::=
    /* Empty: no partition */
    {:
        RESULT = null;
    :}
    /* Range partition */
    | KW_PARTITION KW_BY KW_RANGE LPAREN ident_list:columns RPAREN
            LPAREN opt_single_range_partition_desc_list:list RPAREN
    {:
        RESULT = new RangePartitionDesc(columns, list);
    :}
    ;

opt_distribution ::=
    /* Empty: no distributed */
    {:
        RESULT = null;
    :}
    /* Hash distributed */
    | KW_DISTRIBUTED KW_BY KW_HASH LPAREN ident_list:columns RPAREN opt_distribution_number:numDistribution
    {:
        RESULT = new HashDistributionDesc(numDistribution, columns);
    :}
    /* Random distributed */
    | KW_DISTRIBUTED KW_BY KW_RANDOM opt_distribution_number:numDistribution
    {:
        RESULT = new RandomDistributionDesc(numDistribution);
    :}
    ;

opt_rollup ::=
    /* Empty: no rollup */
    {:
        RESULT = new ArrayList<>();
    :}
    | KW_ROLLUP LPAREN add_rollup_clause_list:list RPAREN
    {:
        RESULT = list;
    :}
    ;

opt_distribution_number ::=
    /* Empty */
    {:
        /* If distribution number is null, default distribution number is 10. */
        RESULT = 10;
    :}
    | KW_BUCKETS INTEGER_LITERAL:numDistribution
    {:
        RESULT = numDistribution.intValue();
    :}
    ;

opt_keys ::=
    /* Empty */
    {:
        RESULT = null;
    :}
    /* primary_keys */
    | KW_PRIMARY KW_KEY LPAREN ident_list:keys RPAREN
    {:
        RESULT = new KeysDesc(KeysType.PRIMARY_KEYS, keys);
    :}
    /* dup_keys */
    | KW_DUPLICATE KW_KEY LPAREN ident_list:keys RPAREN
    {:
        RESULT = new KeysDesc(KeysType.DUP_KEYS, keys);
    :}
    /* unique_keys */
    | KW_UNIQUE KW_KEY LPAREN ident_list:keys RPAREN
    {:
        RESULT = new KeysDesc(KeysType.UNIQUE_KEYS, keys);
    :}
    /* agg_keys */
    | KW_AGGREGATE KW_KEY LPAREN ident_list:keys RPAREN
    {:
        RESULT = new KeysDesc(KeysType.AGG_KEYS, keys);
    :}
    ;

opt_single_range_partition_desc_list ::=
	/* Empty */
    {:
        RESULT = null;
    :}
	| single_range_partition_desc_list:list
	{:
		RESULT = list;
	:}
	;

single_range_partition_desc_list ::=
    single_range_partition_desc_list:list COMMA single_range_partition_desc:desc
    {:
        list.add(desc);
        RESULT = list;
    :}
    | single_range_partition_desc:desc
    {:
        RESULT = Lists.newArrayList(desc);
    :}
    ;

single_range_partition_desc ::=
    KW_PARTITION opt_if_not_exists:ifNotExists ident:partName KW_VALUES KW_LESS KW_THAN partition_key_desc:desc
        opt_key_value_map:properties
    {:
        RESULT = new SingleRangePartitionDesc(ifNotExists, partName, desc, properties);
    :}
    | KW_PARTITION opt_if_not_exists:ifNotExists ident:partName KW_VALUES fixed_partition_key_desc:desc
        opt_key_value_map:properties
    {:
        RESULT = new SingleRangePartitionDesc(ifNotExists, partName, desc, properties);
    :}
    ;

partition_key_desc ::=
    KW_MAX_VALUE
    {:
        RESULT = PartitionKeyDesc.createMaxKeyDesc();
    :}
    | LPAREN partition_key_list:keys RPAREN
    {:
        RESULT = new PartitionKeyDesc(keys);
    :}
    ;

partition_key_list ::=
    /* empty */
    {:
        List<PartitionValue> l = new ArrayList<PartitionValue>();
        RESULT = l;
    :}
    | partition_key_list:l COMMA STRING_LITERAL:item
    {:
        l.add(new PartitionValue(item));
        RESULT = l;
    :}
    | partition_key_list:l COMMA KW_MAX_VALUE
    {:
        l.add(PartitionValue.MAX_VALUE);
        RESULT = l;
    :}
    | STRING_LITERAL:item
    {:
        RESULT = Lists.newArrayList(new PartitionValue(item));
    :}
    | KW_MAX_VALUE
    {:
        RESULT = Lists.newArrayList(PartitionValue.MAX_VALUE);
    :}
    ;

fixed_partition_key_desc ::=
    /* format: [(lower), (upper))*/
    LBRACKET LPAREN partition_key_list:lower RPAREN COMMA LPAREN partition_key_list:upper RPAREN RPAREN
    {:
        RESULT = new PartitionKeyDesc(lower, upper);
    :}
    ;

opt_engine ::=
    {: RESULT = null; :}
    | KW_ENGINE EQUAL ident:engineName
    {: RESULT = engineName; :}
    ;

opt_key_value_map ::=
    {:
    RESULT = Maps.newHashMap();
    :}
    | LPAREN key_value_map:map RPAREN
    {:
    RESULT = map;
    :}
    ;

key_value_map ::=
    STRING_LITERAL:name EQUAL STRING_LITERAL:value
    {:
    RESULT = Maps.newHashMap();
    RESULT.put(name, value);
    :}
    | key_value_map:map COMMA STRING_LITERAL:name EQUAL STRING_LITERAL:value
    {:
    map.put(name, value);
    RESULT = map;
    :}
    ;

opt_properties ::=
    {:
    RESULT = null;
    :}
    | KW_PROPERTIES LPAREN key_value_map:map RPAREN
    {:
    RESULT = map;
    :}
    ;

opt_ext_properties ::=
    {:
    RESULT = null;
    :}
    | KW_BROKER KW_PROPERTIES LPAREN key_value_map:map RPAREN
    {:
    RESULT = map;
    :}
    ;

column_definition_list ::=
    column_definition:column
    {:
    RESULT = Lists.newArrayList();
    RESULT.add(column);
    :}
    | column_definition_list:list COMMA column_definition:column
    {:
    list.add(column);
    RESULT = list;
    :}
    ;

index_definition_list ::=
    index_definition:index
    {:
        RESULT = Lists.newArrayList();
        RESULT.add(index);
    :}
    | index_definition_list:list COMMA index_definition:index
    {:
        list.add(index);
        RESULT = list;
    :}
    ;

opt_default_value ::=
    /* Empty */
    {:
        RESULT = ColumnDef.DefaultValue.NOT_SET;
    :}
    | KW_DEFAULT STRING_LITERAL:value
    {:
        RESULT = new ColumnDef.DefaultValue(true, value);
    :}
    | KW_DEFAULT KW_NULL
    {:
        RESULT = ColumnDef.DefaultValue.NULL_DEFAULT_VALUE;
    :}
    ;

opt_is_key ::=
	{:
		RESULT = false;
	:}
	| KW_KEY:key
	{:
		RESULT = true;
	:}
	;

column_definition ::=
    ident:columnName type_def:typeDef opt_is_key:isKey opt_agg_type:aggType opt_is_allow_null:isAllowNull opt_default_value:defaultValue opt_comment:comment
    {:
        ColumnDef columnDef = new ColumnDef(columnName, typeDef, isKey, aggType, isAllowNull, defaultValue, comment);
        RESULT = columnDef;
    :}
    ;

index_definition ::=
    KW_INDEX ident:indexName LPAREN ident_list:cols RPAREN opt_index_type:indexType opt_comment:comment
    {:
        RESULT = new IndexDef(indexName, cols, indexType, comment);
    :}
    ;

opt_is_allow_null ::=
    {:
        RESULT = true;
    :}
    | KW_NULL
    {:
        RESULT = true;
    :}
    | KW_NOT KW_NULL
    {:
        RESULT = false;
    :}
    ;

opt_comment ::=
    /* empty */
    {:
        RESULT = "";
    :}
    | KW_COMMENT STRING_LITERAL:comment
    {:
        RESULT = comment;
    :}
    ;

opt_index_type ::=
    {:
        RESULT = null;
    :}
    | KW_USING KW_BITMAP
    {:
        RESULT = IndexDef.IndexType.BITMAP;
    :}
    ;

opt_if_exists ::=
    {:
        RESULT = false;
    :}
    | KW_IF KW_EXISTS
    {:
        RESULT = true;
    :}
    ;

opt_if_not_exists ::=
    {:
        RESULT = false;
    :}
    | KW_IF KW_NOT KW_EXISTS
    {:
        RESULT = true;
    :}
    ;

opt_external ::=
    /* empty */
    {:
        RESULT = false;
    :}
    | KW_EXTERNAL
    {:
        RESULT = true;
    :}
    ;

// Show statement
show_stmt ::=
    KW_SHOW show_param:stmt
    {:
        RESULT = stmt;
    :}
    ;

show_param ::=
	KW_WHITELIST
	{:
		RESULT = new ShowWhiteListStmt();
	:}
    /* show variables */
    | opt_var_type:type KW_VARIABLES opt_wild_where
    {:
        RESULT = new ShowVariablesStmt(type, parser.wild, parser.where);
    :}
    /* show open tables */
    | KW_OPEN KW_TABLES opt_db:db opt_wild_where
    {:
        RESULT = new ShowOpenTableStmt();
    :}
    /* show table status */
    | KW_TABLE KW_STATUS opt_db:db opt_wild_where
    {:
        RESULT = new ShowTableStatusStmt(db, parser.wild, parser.where);
    :}
    /* show table status */
    | opt_full KW_TABLES opt_db:db opt_wild_where
    {:
        RESULT = new ShowTableStmt(db, parser.isVerbose, parser.wild, parser.where);
    :}
    /* show processlist */
    | opt_full KW_PROCESSLIST
    {:
        RESULT = new ShowProcesslistStmt();
    :}
    /* routine */
    | procedure_or_function KW_STATUS opt_wild_where
    {:
        RESULT = new ShowProcedureStmt();
    :}
    /* status */
    | opt_var_type KW_STATUS opt_wild_where
    {:
        RESULT = new ShowStatusStmt();
    :}
    /* triggers */
    | opt_full KW_TRIGGERS opt_db:db opt_wild_where
    {:
        RESULT = new ShowTriggersStmt();
    :}
    /* events */
    | KW_EVENTS opt_db:db opt_wild_where
    {:
        RESULT = new ShowEventsStmt();
    :}
    /* plugins */
    | KW_PLUGINS
    {:
        RESULT = new ShowPluginsStmt();
    :}
    /* engines */
    | opt_storage KW_ENGINES
    {:
        RESULT = new ShowEnginesStmt();
    :}
    /* Authors */
    | KW_AUTHORS
    {:
        RESULT = new ShowAuthorStmt();
    :}
    /* Create table */
    | KW_CREATE KW_TABLE table_name:table
    {:
        RESULT = new ShowCreateTableStmt(table);
    :}
    | KW_CREATE KW_VIEW table_name:table
    {:
        RESULT = new ShowCreateTableStmt(table, true);
    :}
    /* Create database */
    | KW_CREATE KW_DATABASE ident:db
    {:
        RESULT = new ShowCreateDbStmt(db);
    :}
    | KW_CREATE KW_SCHEMA ident:db
    {:
        RESULT = new ShowCreateDbStmt(db);
    :}
    /* Cluster */
    | KW_CLUSTERS
    {:
        RESULT = new ShowClusterStmt();
    :}
    | KW_MIGRATIONS
    {:
        RESULT = new ShowMigrationsStmt();
    :}
    /* Database */
    | KW_DATABASES opt_wild_where
    {:
        RESULT = new ShowDbStmt(parser.wild, parser.where);
    :}
    | KW_SCHEMAS opt_wild_where
    {:
        RESULT = new ShowDbStmt(parser.wild, parser.where);
    :}
    /* Dynamic Partition */
    | KW_DYNAMIC KW_PARTITION KW_TABLES opt_db:db
    {:
        RESULT = new ShowDynamicPartitionStmt(db);
    :}
    /* Columns */
    | opt_full KW_COLUMNS from_or_in table_name:table opt_db:db opt_wild_where
    {:
        RESULT = new ShowColumnStmt(table, db, parser.wild, parser.isVerbose, parser.where);
    :}
    /* collation */
    | KW_COLLATION opt_wild_where
    {:
        RESULT = new ShowCollationStmt(parser.wild);
    :}
    /* Show charset */
    | charset opt_wild_where
    {:
        RESULT = new ShowCharsetStmt(parser.wild);
    :}
    /* Show proc */
    | KW_PROC STRING_LITERAL:path
    {:
        RESULT = new ShowProcStmt(path);
    :}
    /* Show Warnings */
    | KW_COUNT LPAREN STAR RPAREN KW_WARNINGS
    {:
        SelectList list = new SelectList();
        list.addItem(new SelectListItem(new IntLiteral((long)0), null));
        RESULT = new SelectStmt(list, null, null, null, null, null, null);
    :}
    | KW_COUNT LPAREN STAR RPAREN KW_ERRORS
    {:
        SelectList list = new SelectList();
        list.addItem(new SelectListItem(new IntLiteral((long)0), null));
        RESULT = new SelectStmt(list, null, null, null, null, null, null);
    :}
    | KW_WARNINGS limit_clause
    {:
        RESULT = new ShowWarningStmt();
    :}
    | KW_ERRORS limit_clause
    {:
        RESULT = new ShowWarningStmt();
    :}
    // show load warnings
    | KW_LOAD KW_WARNINGS opt_db:db opt_wild_where limit_clause:limitClause
    {:
        RESULT = new ShowLoadWarningsStmt(db, null, parser.where, limitClause);
    :}
    | KW_LOAD KW_WARNINGS KW_ON STRING_LITERAL:url
    {:
        RESULT = new ShowLoadWarningsStmt(null, url, null, null);
    :}
    /* Show load statement */
    | KW_LOAD opt_db:db opt_wild_where order_by_clause:orderByClause limit_clause:limitClause
    {:
        RESULT = new ShowLoadStmt(db, parser.where, orderByClause, limitClause);
    :}
    /* Show export statement */
    | KW_EXPORT opt_db:db opt_wild_where order_by_clause:orderByClause limit_clause:limitClause
    {:
        RESULT = new ShowExportStmt(db, parser.where, orderByClause, limitClause);
    :}
    /* Show delete statement */
    | KW_DELETE opt_db:db
    {:
        RESULT = new ShowDeleteStmt(db);
    :}
    /* Show alter table statement: used to show process of alter table statement */
    | KW_ALTER KW_TABLE opt_alter_type:type opt_db:db opt_wild_where order_by_clause:orderByClause limit_clause:limitClause
    {:
        RESULT = new ShowAlterStmt(type, db, parser.where, orderByClause, limitClause);
    :}
    /* Show data statement: used to show data size of specified range */
    | KW_DATA
    {:
        RESULT = new ShowDataStmt(null, null);
    :}
    | KW_DATA KW_FROM table_name:dbTblName
    {:
        RESULT = new ShowDataStmt(dbTblName.getDb(), dbTblName.getTbl());
    :}
	| opt_tmp:tmp KW_PARTITIONS KW_FROM table_name:tblName opt_wild_where order_by_clause:orderByClause limit_clause: limitClause
    {:
        RESULT = new ShowPartitionsStmt(tblName, parser.where, orderByClause, limitClause, tmp);
    :}
    | KW_TABLET INTEGER_LITERAL:tabletId
    {:
        RESULT = new ShowTabletStmt(null, tabletId);
    :}
    | KW_TABLET KW_FROM table_name:dbTblName opt_partition_names:partitionNames opt_wild_where order_by_clause:orderByClause limit_clause:limitClause
    {:
        RESULT = new ShowTabletStmt(dbTblName, -1L, partitionNames, parser.where, orderByClause, limitClause);
    :}
    | KW_PROPERTY opt_user:user opt_wild_where
    {:
        RESULT = new ShowUserPropertyStmt(user, parser.wild);
    :}
    | KW_BACKUP opt_db:db
    {:
        RESULT = new ShowBackupStmt(db);
    :}
    | KW_RESTORE opt_db:db opt_wild_where
    {:
        RESULT = new ShowRestoreStmt(db, parser.where);
    :}
    | KW_BROKER
    {:
        RESULT = new ShowBrokerStmt();
    :}
    | KW_RESOURCES
    {:
        RESULT = new ShowResourcesStmt();
    :}
    | KW_BACKENDS
    {:
        RESULT = new ShowBackendsStmt();
    :}
    | KW_FRONTENDS
    {:
        RESULT = new ShowFrontendsStmt();
    :}
    | KW_USER
    {:
        RESULT = new ShowUserStmt();
    :}
    | KW_REPOSITORIES
    {:
       RESULT = new ShowRepositoriesStmt();
    :}
    | KW_SNAPSHOT KW_ON ident:repo opt_wild_where
    {:
        RESULT = new ShowSnapshotStmt(repo, parser.where);
    :}
    | KW_ALL KW_GRANTS
    {:
        RESULT = new ShowGrantsStmt(null, true);
    :}
    | KW_GRANTS
    {:
        RESULT = new ShowGrantsStmt(null, false);
    :}
    | KW_GRANTS KW_FOR user_identity:userIdent
    {:
        RESULT = new ShowGrantsStmt(userIdent, false);
    :}
    | KW_ROLES
    {:
        RESULT = new ShowRolesStmt();
    :}
    | opt_full opt_builtin:isBuiltin KW_FUNCTIONS opt_db:dbName opt_wild_where
    {:
        RESULT = new ShowFunctionsStmt(dbName, isBuiltin, parser.isVerbose, parser.wild, parser.where);
    :}
    | KW_FILE opt_db:dbName
    {:
        RESULT = new ShowSmallFilesStmt(dbName);
    :}
    | keys_or_index from_or_in table_name:dbTblName opt_db:dbName
    {:
        RESULT = new ShowIndexStmt(dbName, dbTblName);
    :}
    | KW_TRANSACTION opt_db:dbName opt_wild_where
    {:
        RESULT = new ShowTransactionStmt(dbName, parser.where);
    :}
    ;

opt_tmp ::=
    /* empty */
    {:
        RESULT = false;
    :}
    | KW_TEMPORARY
    {:
        RESULT = true;
    :}
    ;

keys_or_index ::=
    KW_KEY
    | KW_KEYS
    | KW_INDEX
    | KW_INDEXES
    ;

opt_db ::=
    /* empty */
    {:
        RESULT = null;
    :}
    | from_or_in ident:db
    {:
        RESULT = db;
    :}
    ;

charset ::=
    KW_CHAR KW_SET
    | KW_CHARSET
    ;

charset_name_or_default ::=
    ident_or_text:id
    {:
        RESULT = id;
    :}
    | KW_DEFAULT
    {:
        RESULT = null;
    :}
    ;

old_or_new_charset_name_or_default ::=
    ident_or_text:id
    {:
        RESULT = id;
    :}
    | KW_DEFAULT
    {:
        RESULT = null;
    :}
    ;

opt_charset_name ::=
    /* empty */
    | charset old_or_new_charset_name_or_default
    ;

opt_collate ::=
    /* Empty */
    {:
        RESULT = null;
    :}
    | KW_COLLATE collation_name_or_default:collate
    {:
        RESULT = collate;
    :}
    ;

collation_name_or_default ::=
    ident_or_text:id
    {:
        RESULT = id;
    :}
    | KW_DEFAULT
    {:
        RESULT = null;
    :}
    ;

opt_storage ::=
    /* Empty */
    | KW_STORAGE
    ;

procedure_or_function ::=
    KW_PROCEDURE
    | KW_FUNCTION
    ;

from_or_in ::=
    KW_FROM
    | KW_IN
    ;

opt_full ::=
    /* empty */
    {:
        parser.isVerbose = false;
    :}
    | KW_FULL
    {:
        parser.isVerbose = true;
    :}
    ;

opt_wild_where ::=
    /* empty */
    | KW_LIKE STRING_LITERAL:wild
    {:
        parser.wild = wild;
    :}
    | KW_WHERE expr:where
    {:
        parser.where = where;
    :}
    ;

opt_alter_type ::=
    KW_ROLLUP
    {:
        RESULT = ShowAlterStmt.AlterType.ROLLUP;
    :}
    | KW_COLUMN
    {:
        RESULT = ShowAlterStmt.AlterType.COLUMN;
    :}
    ;

opt_builtin ::=
    {:
        RESULT = false;
    :}
    | KW_BUILTIN
    {:
        RESULT = true;
    :}
    ;

opt_verbose ::=
    {:
        RESULT = false;
    :}
    | KW_VERBOSE
    {:
        RESULT = true;
    :}
    ;

// Describe statement
describe_stmt ::=
    describe_command table_name:table
    {:
        RESULT = new DescribeStmt(table, false);
    :}
    | describe_command table_name:table KW_ALL
    {:
        RESULT = new DescribeStmt(table, true);
    :}
    | describe_command opt_verbose:isVerbose query_stmt:query
    {:
        query.setIsExplain(true, isVerbose);
        RESULT = query;
    :}   
    | describe_command insert_stmt:stmt
    {:
        stmt.getQueryStmt().setIsExplain(true);
        RESULT = stmt;
    :}
    ;

describe_command ::=
    KW_DESCRIBE
    | KW_DESC
    ;

// Cancel statement
cancel_stmt ::=
    KW_CANCEL cancel_param:stmt
    {:
        RESULT = stmt;
    :}
    ;

cancel_rollup_job_id_list ::=
    {:
        RESULT = null;
    :}
    | LPAREN integer_list:list RPAREN
    {:
        RESULT = list;
    :}
    ;

cancel_param ::=
    KW_LOAD opt_db:db opt_wild_where
    {:
        RESULT = new CancelLoadStmt(db, parser.where);
    :}
    | KW_ALTER KW_TABLE opt_alter_type:type KW_FROM table_name:table cancel_rollup_job_id_list:list
    {:
        RESULT = new CancelAlterTableStmt(type, table, list);
    :}
    | KW_DECOMMISSION KW_BACKEND string_list:hostPorts
    {:
        RESULT = new CancelAlterSystemStmt(hostPorts);
    :}
    | KW_BACKUP opt_db:db
    {:
        RESULT = new CancelBackupStmt(db, false);
    :}
    | KW_RESTORE opt_db:db
    {:
        RESULT = new CancelBackupStmt(db, true);
    :}
    ;

// Delete stmt
delete_stmt ::=
    KW_DELETE KW_FROM table_name:table opt_partition_names:partitionNames where_clause:wherePredicate
    {:
        RESULT = new DeleteStmt(table, partitionNames, wherePredicate);
    :}
    ;

// Our parsing of UNION is slightly different from MySQL's:
// http://dev.mysql.com/doc/refman/5.5/en/union.html
//
// Imo, MySQL's parsing of union is not very clear.
// For example, MySQL cannot parse this query:
// select 3 order by 1 limit 1 union all select 1;
//
// On the other hand, MySQL does parse this query, but associates
// the order by and limit with the union, not the select:
// select 3 as g union all select 1 order by 1 limit 2;
//
// MySQL also allows some combinations of select blocks
// with and without parenthesis, but also disallows others.
//
// Our parsing:
// Select blocks may or may not be in parenthesis,
// even if the union has order by and limit.
// ORDER BY and LIMIT bind to the preceding select statement by default.
query_stmt ::=
    opt_with_clause:w set_operand_list:operands opt_outfile:outfile
    {:
        QueryStmt queryStmt = null;
        if (operands.size() == 1) {
          queryStmt = operands.get(0).getQueryStmt();
        } else {
          queryStmt = new SetOperationStmt(operands, null, LimitElement.NO_LIMIT);
        }
        queryStmt.setWithClause(w);
        queryStmt.setOutFileClause(outfile);
        RESULT = queryStmt;
    :}
    | opt_with_clause:w set_operation_with_order_by_or_limit:set_operation opt_outfile:outfile
    {:
        set_operation.setWithClause(w);
        set_operation.setOutFileClause(outfile);
        RESULT = set_operation;
    :}
    ;

opt_outfile ::=
    {:
        RESULT = null;
    :}
    | KW_INTO KW_OUTFILE STRING_LITERAL:file opt_file_format:fileFormat opt_properties:properties
    {:
        RESULT = new OutFileClause(file, fileFormat, properties);
    :}
    ;

opt_with_clause ::=
    KW_WITH with_view_def_list:list
    {: RESULT = new WithClause(list); :}
    | /* empty */
    {: RESULT = null; :}
    ;

with_view_def ::=
    ident:alias KW_AS LPAREN query_stmt:query RPAREN
    {: RESULT = new View(alias, query, null); :}
    | STRING_LITERAL:alias KW_AS LPAREN query_stmt:query RPAREN
    {: RESULT = new View(alias, query, null); :}
    | ident:alias LPAREN ident_list:col_names RPAREN KW_AS LPAREN
      query_stmt:query RPAREN
    {: RESULT = new View(alias, query, col_names); :}
    | STRING_LITERAL:alias LPAREN ident_list:col_names RPAREN
      KW_AS LPAREN query_stmt:query RPAREN
    {: RESULT = new View(alias, query, col_names); :}
    ;

with_view_def_list ::=
    with_view_def:v
    {:
        ArrayList<View> list = new ArrayList<View>();
        list.add(v);
        RESULT = list;
    :}
    | with_view_def_list:list COMMA with_view_def:v
    {:
        list.add(v);
        RESULT = list;
    :}
    ;

// We must have a non-empty order by or limit for them to bind to the union.
// We cannot reuse the existing order_by_clause or
// limit_clause because they would introduce conflicts with EOF,
// which, unfortunately, cannot be accessed in the parser as a nonterminal
// making this issue unresolvable.
// We rely on the left precedence of KW_ORDER, KW_BY, and KW_LIMIT,
// to resolve the ambiguity with select_stmt in favor of select_stmt
// (i.e., ORDER BY and LIMIT bind to the select_stmt by default, and not the set operation).
// There must be at least two set operands for ORDER BY or LIMIT to bind to a set operation,
// and we manually throw a parse error if we reach this production
// with only a single operand.
set_operation_with_order_by_or_limit ::=
    set_operand_list:operands
    KW_LIMIT INTEGER_LITERAL:limit
  {:
    if (operands.size() == 1) {
      parser.parseError("limit", SqlParserSymbols.KW_LIMIT);
    }
    RESULT = new SetOperationStmt(operands, null, new LimitElement(limit.longValue()));
  :}
  |
    set_operand_list:operands
    KW_LIMIT INTEGER_LITERAL:offset COMMA INTEGER_LITERAL:limit
  {:
    if (operands.size() == 1) {
      parser.parseError("limit", SqlParserSymbols.KW_LIMIT);
    }
    RESULT = new SetOperationStmt(operands, null, new LimitElement(offset.longValue(), limit.longValue()));
  :}
  |
    set_operand_list:operands
    KW_LIMIT INTEGER_LITERAL:limit KW_OFFSET INTEGER_LITERAL:offset
  {:
    if (operands.size() == 1) {
      parser.parseError("limit", SqlParserSymbols.KW_LIMIT);
    }
    RESULT = new SetOperationStmt(operands, null, new LimitElement(offset.longValue(), limit.longValue()));
  :}
  |
    set_operand_list:operands
    KW_ORDER KW_BY order_by_elements:orderByClause
  {:
    if (operands.size() == 1) {
      parser.parseError("order", SqlParserSymbols.KW_ORDER);
    }
    RESULT = new SetOperationStmt(operands, orderByClause, LimitElement.NO_LIMIT);
  :}
  |
    set_operand_list:operands
    KW_ORDER KW_BY order_by_elements:orderByClause
    KW_LIMIT INTEGER_LITERAL:limit
  {:
    if (operands.size() == 1) {
      parser.parseError("order", SqlParserSymbols.KW_ORDER);
    }
    RESULT = new SetOperationStmt(operands, orderByClause, new LimitElement(limit.longValue()));
  :}
  |
    set_operand_list:operands
    KW_ORDER KW_BY order_by_elements:orderByClause
    KW_LIMIT INTEGER_LITERAL:offset COMMA INTEGER_LITERAL:limit
  {:
    if (operands.size() == 1) {
      parser.parseError("order", SqlParserSymbols.KW_ORDER);
    }
    RESULT = new SetOperationStmt(operands, orderByClause, new LimitElement(offset.longValue(), limit.longValue()));
  :}
  |
    set_operand_list:operands
    KW_ORDER KW_BY order_by_elements:orderByClause
    KW_LIMIT INTEGER_LITERAL:limit KW_OFFSET INTEGER_LITERAL:offset
  {:
    if (operands.size() == 1) {
      parser.parseError("order", SqlParserSymbols.KW_ORDER);
    }
    RESULT = new SetOperationStmt(operands, orderByClause, new LimitElement(offset.longValue(), limit.longValue()));
  :}
  ;


set_operand ::=
  select_stmt:select
  {:
    RESULT = select;
  :}
  | LPAREN query_stmt:query RPAREN
  {:
    RESULT = query;
  :}
  ;

set_operand_list ::=
  set_operand:operand
  {:
    List<SetOperand> operands = new ArrayList<SetOperand>();
    operands.add(new SetOperand(operand, null, null));
    RESULT = operands;
  :}
  | set_operand_list:operands set_op:op opt_set_qualifier:qualifier set_operand:operand
  {:
    operands.add(new SetOperand(operand, op, qualifier));
    RESULT = operands;
  :}
  ;

set_op ::=
  KW_UNION
  {: RESULT = Operation.UNION; :}
  | KW_INTERSECT
  {: RESULT = Operation.INTERSECT; :}
  | KW_EXCEPT
  {: RESULT = Operation.EXCEPT; :}
  | KW_MINUS
  {: RESULT = Operation.EXCEPT; :}
  ;

opt_set_qualifier ::=
  {: RESULT = Qualifier.DISTINCT; :}
  | KW_DISTINCT
  {: RESULT = Qualifier.DISTINCT; :}
  | KW_ALL
  {: RESULT = Qualifier.ALL; :}
  ;

// Change cluster
enter_stmt ::=
    KW_ENTER ident:cluster
    {:
        RESULT = new EnterStmt(cluster);
    :}
    ;
// Change database
use_stmt ::=
    KW_USE ident:db
    {:
        RESULT = new UseStmt(db);
    :}
    ;

// Insert statement
insert_stmt ::=
    KW_INSERT KW_INTO insert_target:target opt_with_label:label opt_col_list:cols opt_plan_hints:hints insert_source:source
    {:
        RESULT = new InsertStmt(target, label, cols, source, hints);
    :}
    // TODO(zc) add default value for SQL-2003
    // | KW_INSERT KW_INTO insert_target:target KW_DEFAULT KW_VALUES
    ;

insert_target ::=
    table_name:tbl opt_partition_names:partitionNames
    {:
        RESULT = new InsertTarget(tbl, partitionNames);
    :}
    ;

opt_with_label ::=
    /* empty */
    {:
        RESULT = null;
    :}
    | KW_WITH KW_LABEL ident:label
    {:
        RESULT = label;
    :}
    ;

insert_source ::=
    query_stmt:query
    {:
        RESULT = new InsertSource(query);
    :}
    ;

// backup stmt
backup_stmt ::=
    KW_BACKUP KW_SNAPSHOT job_label:label
    KW_TO ident:repoName
	KW_ON LPAREN base_table_ref_list:tbls RPAREN
    opt_properties:properties
    {:
        RESULT = new BackupStmt(label, repoName, tbls, properties);
    :}
    ;

// Restore statement
restore_stmt ::=
    KW_RESTORE KW_SNAPSHOT job_label:label
    KW_FROM ident:repoName
	KW_ON LPAREN base_table_ref_list:tbls RPAREN
    opt_properties:properties
    {:
        RESULT = new RestoreStmt(label, repoName, tbls, properties);
    :}
    ;

// Kill statement
kill_stmt ::=
    KW_KILL INTEGER_LITERAL:value
    {:
        RESULT = new KillStmt(true, value.longValue());
    :}
    | KW_KILL KW_CONNECTION INTEGER_LITERAL:value
    {:
        RESULT = new KillStmt(true, value.longValue());
    :}
    | KW_KILL KW_QUERY INTEGER_LITERAL:value
    {:
        RESULT = new KillStmt(false, value.longValue());
    :}
    ;

// TODO(zhaochun): stolen from MySQL. Why not use value list, maybe avoid shift/reduce conflict
// Set statement
set_stmt ::=
    KW_SET start_option_value_list:list
    {:
        RESULT = new SetStmt(list);
    :}
    | KW_SET KW_PROPERTY opt_user:user user_property_list:property_list
    {:
        RESULT = new SetUserPropertyStmt(user, property_list);
    :}
    ;

user_property_list ::=
    user_property:property
    {:
        RESULT = Lists.newArrayList(property);
    :}
    | user_property_list:list COMMA user_property:property
    {:
        list.add(property);
        RESULT = list;
    :}
    ;

user_property ::=
    STRING_LITERAL:key equal STRING_LITERAL:value
    {:
        RESULT = new SetUserPropertyVar(key, value);
    :}
    | STRING_LITERAL:key equal KW_NULL
    {:
        RESULT = new SetUserPropertyVar(key, null);
    :}
    ;

// Start of set value list
start_option_value_list ::=
    /* Variable starts with keyword and have no option */
    option_value_no_option_type:value option_value_list_continued:list
    {:
        if (list == null) {
            list = Lists.newArrayList(value);
        } else {
            list.add(value);
        }
        RESULT = list;
    :}
    /* Do not support transaction, return null */
    | KW_TRANSACTION transaction_characteristics
    {:
        RESULT = Lists.newArrayList((SetVar) new SetTransaction());
    :}
    | option_type:type start_option_value_list_following_option_type:list
    {:
        if (list == null || list.isEmpty()) {
        } else {
            list.get(0).setType(type);
        }
        RESULT = list;
    :}
    ;

// Following the start of value list with option
start_option_value_list_following_option_type ::=
    option_value_follow_option_type:var option_value_list_continued:list
    {:
        list.add(var);
        RESULT = list;
    :}
    | KW_TRANSACTION transaction_characteristics
    {:
        RESULT = Lists.newArrayList((SetVar) new SetTransaction());
    :}
    ;

// option values after first value;
option_value_list_continued ::=
    /* empty */
    {:
        RESULT = Lists.newArrayList();
    :}
    | COMMA option_value_list:list
    {:
        RESULT = list;
    :}
    ;

option_value_list ::=
    option_value:var
    {:
        RESULT = Lists.newArrayList(var);
    :}
    | option_value_list:list COMMA option_value:item
    {:
        list.add(item);
        RESULT = list;
    :}
    ;

option_value ::=
    option_type:type option_value_follow_option_type:var
    {:
        var.setType(type);
        RESULT = var;
    :}
    | option_value_no_option_type:var
    {:
        RESULT = var;
    :}
    ;

option_value_follow_option_type ::=
    variable_name:variable equal set_expr_or_default:expr
    {:
        RESULT = new SetVar(variable, expr);
    :}
    ;

option_value_no_option_type ::=
    /* Normal set value */
    variable_name:variable equal set_expr_or_default:expr
    {:
        RESULT = new SetVar(variable, expr);
    :}
    | AT ident_or_text:var equal literal:expr
    {:
        RESULT = new SetVar(var, expr);
    :}
    /* Ident */
    | AT AT variable_name:variable equal set_expr_or_default:expr
    {:
        RESULT = new SetVar(variable, expr);
    :}
    | AT AT var_ident_type:type variable_name:variable equal set_expr_or_default:expr
    {:
        RESULT = new SetVar(type, variable, expr);
    :}
    /* charset */
    | charset old_or_new_charset_name_or_default:charset
    {:
        RESULT = new SetNamesVar(charset);
    :}
    | KW_NAMES equal expr
    {:
        parser.parseError("names", SqlParserSymbols.KW_NAMES);
    :}
    | KW_NAMES charset_name_or_default:charset opt_collate:collate
    {:
        RESULT = new SetNamesVar(charset, collate);
    :}
    /* Password */
    | KW_PASSWORD equal text_or_password:passwd
    {:
        RESULT = new SetPassVar(null, passwd);
    :}
    | KW_PASSWORD KW_FOR user_identity:userId equal text_or_password:passwd
    {:
        RESULT = new SetPassVar(userId, passwd);
    :}
    ;

variable_name ::=
    ident:name
    {:
        RESULT = name;
    :}
    ;

text_or_password ::=
    STRING_LITERAL:text
    {:
        // This is hashed text
        RESULT = text;
    :}
    | KW_PASSWORD LPAREN STRING_LITERAL:passwd RPAREN
    {:
        // This is plain text
        RESULT = new String(MysqlPassword.makeScrambledPassword(passwd));
    :}
    ;

option_type ::=
    KW_GLOBAL
    {:
        RESULT = SetType.GLOBAL;
    :}
    | KW_LOCAL
    {:
        RESULT = SetType.SESSION;
    :}
    | KW_SESSION
    {:
        RESULT = SetType.SESSION;
    :}
    ;

opt_var_type ::=
    /* empty */
    {: RESULT = SetType.DEFAULT; :}
    | KW_GLOBAL
    {: RESULT = SetType.GLOBAL; :}
    | KW_LOCAL
    {: RESULT = SetType.SESSION; :}
    | KW_SESSION
    {: RESULT = SetType.SESSION; :}
    ;

var_ident_type ::=
    KW_GLOBAL DOT
    {:
        RESULT = SetType.GLOBAL;
    :}
    | KW_LOCAL DOT
    {:
        RESULT = SetType.SESSION;
    :}
    | KW_SESSION DOT
    {:
        RESULT = SetType.SESSION;
    :}
    ;

equal ::=
    EQUAL
    | SET_VAR
    ;

transaction_characteristics ::=
    transaction_access_mode
    | isolation_level
    | transaction_access_mode COMMA isolation_level
    | isolation_level COMMA transaction_access_mode
    ;

transaction_access_mode ::=
    KW_READ KW_ONLY
    | KW_READ KW_WRITE
    ;

isolation_level ::=
    KW_ISOLATION KW_LEVEL isolation_types
    ;

isolation_types ::=
    KW_READ KW_UNCOMMITTED
    | KW_READ KW_COMMITTED
    | KW_REPEATABLE KW_READ
    | KW_SERIALIZABLE
    ;

set_expr_or_default ::=
    KW_DEFAULT
    {:
        RESULT = null;
    :}
    | KW_ON
    {:
        RESULT = new StringLiteral("ON");
    :}
    | KW_ALL
    {:
        RESULT = new StringLiteral("ALL");
    :}
    | expr:expr
    {:
        RESULT = expr;
    :}
    ;

select_stmt ::=
  select_clause:selectList
    limit_clause:limitClause
  {: RESULT = new SelectStmt(selectList, null, null, null, null, null, limitClause); :}
  | select_clause:selectList
    from_clause:fromClause
    where_clause:wherePredicate
    group_by_clause:groupByClause
    having_clause:havingPredicate
    order_by_clause:orderByClause
    limit_clause:limitClause
  {:
    RESULT = new SelectStmt(selectList, fromClause, wherePredicate,
                            groupByClause, havingPredicate, orderByClause,
                            limitClause);
  :}
  | value_clause:valueClause order_by_clause:orderByClause limit_clause:limitClause
  {:
      RESULT = new SelectStmt(valueClause, orderByClause, limitClause);
  :}
  ;

value_clause ::=
    KW_VALUES row_value:value
    {:
        RESULT = new ValueList(value);
    :}
    | value_clause:valueClause COMMA row_value:value
    {:
        valueClause.addRow(value);
        RESULT = valueClause;
    :}
    ;

row_value ::=
    LPAREN opt_values:values RPAREN
    {:
        RESULT = values;
    :}
    ;

opt_values ::=
    values:valueList
    {:
        RESULT = valueList;
    :}
    |
    {:
        RESULT = Lists.newArrayList();
    :}
    ;

values ::=
    expr_or_default:value
    {:
        RESULT = Lists.newArrayList(value);
    :}
    | values:valueList COMMA expr_or_default:value
    {:
        valueList.add(value);
        RESULT = valueList;
    :}
    ;

expr_or_default ::=
    expr:expr
    {:
        RESULT = expr;
    :}
    | KW_DEFAULT
    {:
        RESULT = new DefaultValueExpr();
    :}
    ;

select_clause ::=
    KW_SELECT select_list:l
    {:
        RESULT = l;
    :}
    | KW_SELECT KW_ALL select_list:l
    {:
        RESULT = l;
    :}
    | KW_SELECT KW_DISTINCT select_list:l
    {:
        l.setIsDistinct(true);
        RESULT = l;
    :}
    ;

select_list ::=
    select_sublist:list
    {:
        RESULT = list;
    :}
    | STAR
    {:
        SelectList list = new SelectList();
        list.addItem(SelectListItem.createStarItem(null));
        RESULT = list;
    :}
    ;

select_sublist ::=
    select_sublist:list COMMA select_list_item:item
    {:
        list.addItem(item);
        RESULT = list;
    :}
    | select_sublist:list COMMA STAR
    {:
        list.addItem(SelectListItem.createStarItem(null));
        RESULT = list;
    :}
    // why not use "STAR COMMA select_sublist",for we analyze from left to right
    | STAR COMMA select_list_item:item
    {:
        SelectList list = new SelectList();
        list.addItem(SelectListItem.createStarItem(null));
        list.addItem(item);
        RESULT = list;
    :}
    | select_list_item:item
    {:
        SelectList list = new SelectList();
        list.addItem(item);
        RESULT = list;
    :}
    ;

select_list_item ::=
    expr:expr opt_collate:collate select_alias:alias
    {:
        RESULT = new SelectListItem(expr, alias);
    :}
    | star_expr:expr
    {:
        RESULT = expr;
    :}
    ;

select_alias ::=
    /* empty */
    {:
        RESULT = null;
    :}
    | KW_AS ident:ident
    {:
        RESULT = ident;
    :}
    | ident:ident
    {:
        RESULT = ident;
    :}
    | KW_AS STRING_LITERAL:l
    {:
        RESULT = l;
    :}
    | STRING_LITERAL:l
    {:
        RESULT = l;
    :}
    ;

star_expr ::=
    // table_name DOT STAR doesn't work because of a reduce-reduce conflict
    // on IDENT [DOT]
    ident:tbl DOT STAR
    {:
        RESULT = SelectListItem.createStarItem(new TableName(null, tbl));
    :}
    | ident:db DOT ident:tbl DOT STAR
    {:
        RESULT = SelectListItem.createStarItem(new TableName(db, tbl));
    :}
    ;

table_name ::=
    ident:tbl
    {: RESULT = new TableName(null, tbl); :}
    | ident:db DOT ident:tbl
    {: RESULT = new TableName(db, tbl); :}
    ;

function_name ::=
    type_function_name:fn
    {: RESULT = new FunctionName(null, fn); :}
    | ident:db DOT type_function_name:fn
    {: RESULT = new FunctionName(db, fn); :}
    ;

type_function_name ::=
    ident:id
    {: RESULT = id; :}
    | type_func_name_keyword:id
    {: RESULT = id; :}
    ;

from_clause ::=
    KW_FROM table_ref_list:l
    {: RESULT = new FromClause(l); :}
    ;

table_ref_list ::=
  table_ref:t opt_sort_hints:h
  {:
    ArrayList<TableRef> list = new ArrayList<TableRef>();
    t.setSortHints(h);
    list.add(t);
    RESULT = list;
  :}
  | table_ref_list:list COMMA table_ref:table opt_sort_hints:h
  {:
    table.setSortHints(h);
    list.add(table);
    RESULT = list;
  :}
  | table_ref_list:list join_operator:op opt_plan_hints:hints table_ref:table opt_sort_hints:h
  {:
    table.setJoinOp((JoinOperator) op);
    table.setJoinHints(hints);
    table.setSortHints(h);
    list.add(table);
    RESULT = list;
  :}
  | table_ref_list:list join_operator:op opt_plan_hints:hints table_ref:table opt_sort_hints:h
    KW_ON expr:e
  {:
    table.setJoinOp((JoinOperator) op);
    table.setJoinHints(hints);
    table.setOnClause(e);
    table.setSortHints(h);
    list.add(table);
    RESULT = list;
  :}
  | table_ref_list:list join_operator:op opt_plan_hints:hints table_ref:table opt_sort_hints:h
    KW_USING LPAREN ident_list:colNames RPAREN
  {:
    table.setJoinOp((JoinOperator) op);
    table.setJoinHints(hints);
    table.setUsingClause(colNames);
    table.setSortHints(h);
    list.add(table);
    RESULT = list;
  :}
  ;

table_ref ::=
  base_table_ref:b
  {: RESULT = b; :}
  | inline_view_ref:s
  {: RESULT = s; :}
  ;

inline_view_ref ::=
    LPAREN query_stmt:query RPAREN opt_table_alias:alias
    {:
        RESULT = new InlineViewRef(alias, query);
    :}
    ;

base_table_ref_list ::=
  base_table_ref:tbl
  {:
    ArrayList<TableRef> list = new ArrayList<TableRef>();
    list.add(tbl);
    RESULT = list;
  :}
  | base_table_ref_list:list COMMA base_table_ref:tbl
  {:
    list.add(tbl);
    RESULT = list;
  :}
  ;

base_table_ref ::=
    table_name:name opt_partition_names:partitionNames opt_table_alias:alias opt_common_hints:commonHints
    {:
        RESULT = new TableRef(name, alias, partitionNames, commonHints);
    :}
    ;

opt_common_hints ::=
    COMMENTED_PLAN_HINT_START ident_list:l COMMENTED_PLAN_HINT_END
    {:
        RESULT = l;
    :}
    | LBRACKET ident_list:l RBRACKET
    {:
        RESULT = l;
    :}
    |
    {:
        RESULT = null;
    :}
    ;

opt_table_alias ::=
    /* empty */
    {:
        RESULT = null;
    :}
    | ident:alias
    {:
        RESULT = alias;
    :}
    | KW_AS ident:alias
    {:
        RESULT = alias;
    :}
    | EQUAL ident:alias
    {:
        RESULT = alias;
    :}
    ;

opt_partition_names ::=
    /* empty */
    {:
        RESULT = null;
    :}
    | partition_names:partitionNames
    {:
        RESULT = partitionNames;
    :}
    ;

partition_names ::=
    KW_PARTITION LPAREN ident_list:partitions RPAREN
    {:
        RESULT = new PartitionNames(false, partitions);  
    :}
    | KW_TEMPORARY KW_PARTITION LPAREN ident_list:partitions RPAREN
    {:
        RESULT = new PartitionNames(true, partitions);  
    :}
    | KW_PARTITIONS LPAREN ident_list:partitions RPAREN
    {:
        RESULT = new PartitionNames(false, partitions);  
    :}
    | KW_TEMPORARY KW_PARTITIONS LPAREN ident_list:partitions RPAREN
    {:
        RESULT = new PartitionNames(true, partitions);  
    :}
    | KW_PARTITION ident:partName
    {:
        RESULT = new PartitionNames(false, Lists.newArrayList(partName));
    :}
    | KW_TEMPORARY KW_PARTITION ident:partName
    {:
        RESULT = new PartitionNames(true, Lists.newArrayList(partName));
    :}
    ;

join_operator ::=
  opt_inner KW_JOIN
  {: RESULT = JoinOperator.INNER_JOIN; :}
  | KW_LEFT opt_outer KW_JOIN
  {: RESULT = JoinOperator.LEFT_OUTER_JOIN; :}
  | KW_MERGE KW_JOIN
  {: RESULT = JoinOperator.MERGE_JOIN; :}
  | KW_RIGHT opt_outer KW_JOIN
  {: RESULT = JoinOperator.RIGHT_OUTER_JOIN; :}
  | KW_FULL opt_outer KW_JOIN
  {: RESULT = JoinOperator.FULL_OUTER_JOIN; :}
  | KW_LEFT KW_SEMI KW_JOIN
  {: RESULT = JoinOperator.LEFT_SEMI_JOIN; :}
  | KW_RIGHT KW_SEMI KW_JOIN
  {: RESULT = JoinOperator.RIGHT_SEMI_JOIN; :}
  | KW_LEFT KW_ANTI KW_JOIN
  {: RESULT = JoinOperator.LEFT_ANTI_JOIN; :}
  | KW_RIGHT KW_ANTI KW_JOIN
  {: RESULT = JoinOperator.RIGHT_ANTI_JOIN; :}
  | KW_CROSS KW_JOIN
  {: RESULT = JoinOperator.CROSS_JOIN; :}
  ;

opt_inner ::=
  KW_INNER
  |
  ;

opt_outer ::=
  KW_OUTER
  |
  ;

opt_plan_hints ::=
    COMMENTED_PLAN_HINTS:l
    {:
        ArrayList<String> hints = Lists.newArrayList();
        String[] tokens = l.split(",");
        for (String token: tokens) {
            String trimmedToken = token.trim();
            if (trimmedToken.length() > 0) {
                hints.add(trimmedToken);
            }
        }
        RESULT = hints;
    :}
    | COMMENTED_PLAN_HINT_START ident_list:l COMMENTED_PLAN_HINT_END
    {:
        RESULT = l;
    :}
    | LBRACKET ident_list:l RBRACKET
    {:
        RESULT = l;
    :}
    | /* empty */
    {:
        RESULT = null;
    :}
    ;

opt_sort_hints ::=
  LBRACKET ident_list:l RBRACKET
  {: RESULT = l; :}
  |
  {: RESULT = null; :}
  ;

ident_list ::=
    ident:ident
    {:
      ArrayList<String> list = new ArrayList<String>();
      list.add(ident);
      RESULT = list;
    :}
    | ident_list:list COMMA ident:ident
    {:
      list.add(ident);
      RESULT = list;
    :}
    ;

expr_list ::=
  expr:e
  {:
    ArrayList<Expr> list = new ArrayList<Expr>();
    list.add(e);
    RESULT = list;
  :}
  | expr_list:list COMMA expr:e
  {:
    list.add(e);
    RESULT = list;
  :}
  ;

where_clause ::=
   /* empty */
  {: RESULT = null; :}
  | KW_WHERE expr:e
  {: RESULT = e; :}
  ;

where_clause_without_null ::=
  KW_WHERE expr:e
  {: RESULT = e; :}
  ;

grouping_set ::=
  LPAREN RPAREN
  {:
    ArrayList<Expr> list = Lists.newArrayList();
    RESULT = list;
  :}
  | LPAREN expr_list:l RPAREN
  {: RESULT = l; :}
  ;

grouping_set_list ::=
  grouping_set:l
  {:
    List<ArrayList<Expr>> list = Lists.newArrayList();
    list.add(l);
    RESULT = list;
  :}
  | grouping_set_list:list COMMA grouping_set:l
  {:
    list.add(l);
    RESULT = list;
  :}
  ;

grouping_elements ::=
  expr_list:l
  {:
    RESULT = new GroupByClause(l, GroupByClause.GroupingType.GROUP_BY);
  :}
  | KW_GROUPING KW_SETS LPAREN grouping_set_list:ls RPAREN
  {:
    RESULT = new GroupByClause(ls, GroupByClause.GroupingType.GROUPING_SETS);
  :}
  | KW_CUBE LPAREN expr_list:l RPAREN
  {:
    RESULT = new GroupByClause(l, GroupByClause.GroupingType.CUBE);
  :}
  | KW_ROLLUP LPAREN expr_list:l RPAREN
  {:
    RESULT = new GroupByClause(l, GroupByClause.GroupingType.ROLLUP);
  :}
  ;

group_by_clause ::=
  KW_GROUP KW_BY grouping_elements:e
  {: RESULT = e; :}
  | /* empty */
  {: RESULT = null; :}
  ;

having_clause ::=
  KW_HAVING expr:e
  {: RESULT = e; :}
  | /* empty */
  {: RESULT = null; :}
  ;

order_by_clause ::=
  KW_ORDER KW_BY order_by_elements:l
  {: RESULT = l; :}
  | /* empty */
  {: RESULT = null; :}
  ;

order_by_elements ::=
  order_by_element:e
  {:
    ArrayList<OrderByElement> list = new ArrayList<OrderByElement>();
    list.add(e);
    RESULT = list;
  :}
  | order_by_elements:list COMMA order_by_element:e
  {:
    list.add(e);
    RESULT = list;
  :}
  ;

order_by_element ::=
  expr:e opt_order_param:o opt_nulls_order_param:n
  {: RESULT = new OrderByElement(e, o, n); :}
  ;

opt_order_param ::=
  KW_ASC
  {: RESULT = true; :}
  | KW_DESC
  {: RESULT = false; :}
  | /* empty */
  {: RESULT = true; :}
  ;

opt_nulls_order_param ::=
  KW_NULLS KW_FIRST
  {: RESULT = true; :}
  | KW_NULLS KW_LAST
  {: RESULT = false; :}
  | /* empty */
  {: RESULT = null; :}
  ;

limit_clause ::=
  KW_LIMIT INTEGER_LITERAL:limit
  {: RESULT = new LimitElement(limit.longValue()); :}
  | /* empty */
  {: RESULT = LimitElement.NO_LIMIT; :}
  | KW_LIMIT INTEGER_LITERAL:offset COMMA INTEGER_LITERAL:limit
  {: RESULT = new LimitElement(offset.longValue(), limit.longValue()); :}
  | KW_LIMIT INTEGER_LITERAL:limit KW_OFFSET INTEGER_LITERAL:offset
  {: RESULT = new LimitElement(offset.longValue(), limit.longValue()); :}
  ;

type ::=
  KW_TINYINT opt_field_length
  {: RESULT = Type.TINYINT; :}
  | KW_SMALLINT opt_field_length
  {: RESULT = Type.SMALLINT; :}
  | KW_INT opt_field_length
  {: RESULT = Type.INT; :}
  | KW_BIGINT opt_field_length
  {: RESULT = Type.BIGINT; :}
  | KW_LARGEINT opt_field_length
  {: RESULT = Type.LARGEINT; :}
  | KW_BOOLEAN
  {: RESULT = Type.BOOLEAN; :}
  | KW_FLOAT
  {: RESULT = Type.FLOAT; :}
  | KW_DOUBLE
  {: RESULT = Type.DOUBLE; :}
  | KW_DATE
  {: RESULT = Type.DATE; :}
  | KW_DATETIME
  {: RESULT = Type.DATETIME; :}
  | KW_TIME
  {: RESULT = Type.TIME; :}
  | KW_BITMAP
  {: RESULT = Type.BITMAP; :}
  | KW_STRING
  {: RESULT = ScalarType.createVarcharType(-1); :}
  | KW_VARCHAR LPAREN INTEGER_LITERAL:len RPAREN
  {: ScalarType type = ScalarType.createVarcharType(len.intValue());
     type.setAssignedStrLenInColDefinition();
     RESULT = type;
  :}
  | KW_VARCHAR
  {: RESULT = ScalarType.createVarcharType(-1); :}
  | KW_CHAR LPAREN INTEGER_LITERAL:len RPAREN
  {: ScalarType type = ScalarType.createCharType(len.intValue());
     type.setAssignedStrLenInColDefinition();
     RESULT = type;
  :}
  | KW_CHAR
  {: RESULT = ScalarType.createCharType(-1); :}
  | KW_DECIMAL LPAREN INTEGER_LITERAL:precision RPAREN
  {: RESULT = ScalarType.createDecimalV2Type(precision.intValue()); :}
  | KW_DECIMAL LPAREN INTEGER_LITERAL:precision COMMA INTEGER_LITERAL:scale RPAREN
  {: RESULT = ScalarType.createDecimalV2Type(precision.intValue(), scale.intValue()); :}
  | KW_DECIMAL
  {: RESULT = ScalarType.createDecimalV2Type(); :}
  | KW_HLL
  {: ScalarType type = ScalarType.createHllType();
     type.setAssignedStrLenInColDefinition();
     RESULT = type;
  :}
  ;

opt_field_length ::=
  LPAREN INTEGER_LITERAL:length RPAREN
  {: RESULT = length; :}
  |
  {: RESULT = null; :}
  ;

type_def ::=
  type:t
  {: RESULT = new TypeDef(t); :}
  ;

type_def_list ::=
  type_def:typeDef
  {:
    RESULT = Lists.newArrayList(typeDef);
  :}
  | type_def_list:types COMMA type_def:typeDef
  {:
    types.add(typeDef);
    RESULT = types;
  :}
  ;

func_args_def ::=
  type_def_list:argTypes
  {:
    RESULT = new FunctionArgsDef(argTypes, false);
  :}
  | DOTDOTDOT
  {:
    RESULT = new FunctionArgsDef(Lists.newArrayList(), true);
  :}
  | type_def_list:argTypes COMMA DOTDOTDOT
  {:
    RESULT = new FunctionArgsDef(argTypes, true);
  :}
  ;

cast_expr ::=
  KW_CAST LPAREN expr:e KW_AS type_def:targetType RPAREN
  {: RESULT = new CastExpr(targetType, e); :}
  ;

case_expr ::=
  KW_CASE expr:caseExpr
    case_when_clause_list:whenClauseList
    case_else_clause:elseExpr
    KW_END
  {: RESULT = new CaseExpr(caseExpr, whenClauseList, elseExpr); :}
  | KW_CASE
    case_when_clause_list:whenClauseList
    case_else_clause:elseExpr
    KW_END
  {: RESULT = new CaseExpr(null, whenClauseList, elseExpr); :}
  ;

case_when_clause_list ::=
  KW_WHEN expr:whenExpr KW_THEN expr:thenExpr
  {:
    ArrayList<CaseWhenClause> list = new ArrayList<CaseWhenClause>();
    list.add(new CaseWhenClause(whenExpr, thenExpr));
    RESULT = list;
  :}
  | case_when_clause_list:list KW_WHEN expr:whenExpr
    KW_THEN expr:thenExpr
  {:
    list.add(new CaseWhenClause(whenExpr, thenExpr));
    RESULT = list;
  :}
  ;

case_else_clause ::=
  KW_ELSE expr:e
  {: RESULT = e; :}
  | /* emtpy */
  {: RESULT = null; :}
  ;

sign_chain_expr ::=
  SUBTRACT expr:e
  {:
    // integrate signs into literals
    if (e.isLiteral() && e.getType().isNumericType()) {
      ((LiteralExpr)e).swapSign();
      RESULT = e;
    } else {
      RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MULTIPLY, new IntLiteral((long)-1), e);
    }
  :}
  | ADD expr:e
  {: RESULT = e; :}
  ;

expr ::=
  non_pred_expr:e
  {: RESULT = e; :}
  | predicate:p
  {: RESULT = p; :}
  ;

function_call_expr ::=
  function_name:fn_name LPAREN RPAREN
  {: RESULT = new FunctionCallExpr(fn_name, new ArrayList<Expr>()); :}
  | function_name:fn_name LPAREN function_params:params RPAREN
  {:
    if ("grouping".equalsIgnoreCase(fn_name.getFunction())) {
      if (params.exprs().size() > 1) {
        throw new AnalysisException("GROUPING requires exactly one column parameter.");
      }
      RESULT = new GroupingFunctionCallExpr(fn_name, params);
    } else if ("grouping_id".equalsIgnoreCase(fn_name.getFunction())) {
      RESULT = new GroupingFunctionCallExpr(fn_name, params);
    } else {
      RESULT = new FunctionCallExpr(fn_name, params);
    }
  :}
  ;

exists_predicate ::=
  KW_EXISTS subquery:s
  {: RESULT = new ExistsPredicate(s, false); :}
  ;

non_pred_expr ::=
  sign_chain_expr:e
  {: RESULT = e; :}
  | AT AT ident:l
  {:
    RESULT = new SysVariableDesc(l);
  :}
  | AT AT var_ident_type:type ident:l
  {:
    RESULT = new SysVariableDesc(l, type);
  :}
  | literal:l
  {: RESULT = l; :}
  | function_call_expr:e
  {: RESULT = e; :}
  | KW_DATE STRING_LITERAL:l
  {: RESULT = new StringLiteral(l); :}
  | KW_TIMESTAMP STRING_LITERAL:l
  {: RESULT = new StringLiteral(l); :}
  | KW_EXTRACT LPAREN function_name:fn_name KW_FROM func_arg_list:exprs RPAREN
  {: RESULT = new FunctionCallExpr(fn_name, exprs); :}
  //| function_name:fn_name LPAREN RPAREN
  //{: RESULT = new FunctionCallExpr(fn_name, new ArrayList<Expr>()); :}
  //| function_name:fn_name LPAREN function_params:params RPAREN
  //{: RESULT = new FunctionCallExpr(fn_name, params); :}
  | analytic_expr:e
  {: RESULT = e; :}
  /* Since "IF" is a keyword, need to special case this function */
  | KW_IF LPAREN expr_list:exprs RPAREN
  {: RESULT = new FunctionCallExpr("if", exprs); :}
  /* For the case like e1 || e2 || e3 ... */
  | expr_pipe_list:exprs
  {:
    RESULT = new FunctionCallExpr("concat", exprs);
  :}
  | cast_expr:c
  {: RESULT = c; :}
  | case_expr:c
  {: RESULT = c; :}
  | column_ref:c
  {: RESULT = c; :}
  | timestamp_arithmetic_expr:e
  {: RESULT = e; :}
  | arithmetic_expr:e
  {: RESULT = e; :}
  | LPAREN non_pred_expr:e RPAREN
  {:
    e.setPrintSqlInParens(true);
    RESULT = e;
  :}
  /* TODO(zc): add other trim function */
  | KW_TRIM:id LPAREN function_params:params RPAREN
  {: RESULT = new FunctionCallExpr(new FunctionName(null, id), params); :}
  | KW_DATABASE LPAREN RPAREN
  {: RESULT = new InformationFunction("DATABASE"); :}
  | KW_USER LPAREN RPAREN
  {: RESULT = new InformationFunction("USER"); :}
  | KW_CURRENT_USER LPAREN RPAREN
  {: RESULT = new InformationFunction("CURRENT_USER"); :}
  | KW_CONNECTION_ID LPAREN RPAREN
  {: RESULT = new InformationFunction("CONNECTION_ID"); :}
  | KW_PASSWORD LPAREN STRING_LITERAL:text RPAREN
  {:
    RESULT = new StringLiteral(new String(MysqlPassword.makeScrambledPassword(text)));
  :}
  | subquery:s
  {: RESULT = s; :}
  |  KW_NULL KW_IS KW_NULL
  {: RESULT = new BoolLiteral(true); :}
  | KW_NULL KW_IS KW_NOT KW_NULL
  {: RESULT = new BoolLiteral(false); :}
  ;

expr_pipe_list ::=
  expr:e1 KW_PIPE expr:e2
  {:
    ArrayList<Expr> list = new ArrayList<Expr>();
    list.add(e1);
    list.add(e2);
    RESULT = list;
  :}
  | expr_pipe_list:list KW_PIPE expr:e
  {:
    list.add(e);
    RESULT = list;
  :}
  ;

func_arg_list ::=
  expr:item
  {:
    ArrayList<Expr> list = new ArrayList<Expr>();
    list.add(item);
    RESULT = list;
  :}
  | func_arg_list:list COMMA expr:item
  {:
    list.add(item);
    RESULT = list;
  :}
  ;

analytic_expr ::=
  function_call_expr:e KW_OVER LPAREN opt_partition_by_clause:p order_by_clause:o opt_window_clause:w RPAREN
  {:
    // Handle cases where function_call_expr resulted in a plain Expr
    if (!(e instanceof FunctionCallExpr)) {
      parser.parseError("over", SqlParserSymbols.KW_OVER);
    }
    FunctionCallExpr f = (FunctionCallExpr)e;
    f.setIsAnalyticFnCall(true);
    RESULT = new AnalyticExpr(f, p, o, w);
  :}
  %prec KW_OVER
  ;

opt_partition_by_clause ::=
  KW_PARTITION KW_BY expr_list:l
  {: RESULT = l; :}
  | /* empty */
  {: RESULT = null; :}
  ;

opt_window_clause ::=
  window_type:t window_boundary:b
  {: RESULT = new AnalyticWindow(t, b); :}
  | window_type:t KW_BETWEEN window_boundary:l KW_AND window_boundary:r
  {: RESULT = new AnalyticWindow(t, l, r); :}
  | /* empty */
  {: RESULT = null; :}
  ;

window_type ::=
  KW_ROWS
  {: RESULT = AnalyticWindow.Type.ROWS; :}
  | KW_RANGE
  {: RESULT = AnalyticWindow.Type.RANGE; :}
  ;

window_boundary ::=
  KW_UNBOUNDED KW_PRECEDING
  {:
    RESULT = new AnalyticWindow.Boundary(
        AnalyticWindow.BoundaryType.UNBOUNDED_PRECEDING, null);
  :}
  | KW_UNBOUNDED KW_FOLLOWING
  {:
    RESULT = new AnalyticWindow.Boundary(
        AnalyticWindow.BoundaryType.UNBOUNDED_FOLLOWING, null);
  :}
  | KW_CURRENT KW_ROW
  {:
    RESULT = new AnalyticWindow.Boundary(AnalyticWindow.BoundaryType.CURRENT_ROW, null);
  :}
  | expr:e KW_PRECEDING
  {: RESULT = new AnalyticWindow.Boundary(AnalyticWindow.BoundaryType.PRECEDING, e); :}
  | expr:e KW_FOLLOWING
  {: RESULT = new AnalyticWindow.Boundary(AnalyticWindow.BoundaryType.FOLLOWING, e); :}
  ;

arithmetic_expr ::=
  expr:e1 STAR expr:e2
  {: RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MULTIPLY, e1, e2); :}
  | expr:e1 DIVIDE expr:e2
  {: RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.DIVIDE, e1, e2); :}
  | expr:e1 MOD expr:e2
  {: RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.MOD, e1, e2); :}
  | expr:e1 KW_DIV expr:e2
  {: RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.INT_DIVIDE, e1, e2); :}
  | expr:e1 ADD expr:e2
  {: RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.ADD, e1, e2); :}
  | expr:e1 SUBTRACT expr:e2
  {: RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.SUBTRACT, e1, e2); :}
  | expr:e1 BITAND expr:e2
  {: RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITAND, e1, e2); :}
  | expr:e1 BITOR expr:e2
  {: RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITOR, e1, e2); :}
  | expr:e1 BITXOR expr:e2
  {: RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITXOR, e1, e2); :}
  | BITNOT expr:e
  {: RESULT = new ArithmeticExpr(ArithmeticExpr.Operator.BITNOT, e, null); :}
  ;

// We use IDENT for the temporal unit to avoid making DAY, YEAR, etc. keywords.
// This way we do not need to change existing uses of IDENT.
// We chose not to make DATE_ADD and DATE_SUB keywords for the same reason.
timestamp_arithmetic_expr ::=
  KW_INTERVAL expr:v ident:u ADD expr:t
  {: RESULT = new TimestampArithmeticExpr(ArithmeticExpr.Operator.ADD, t, v, u, true); :}
  | expr:t ADD KW_INTERVAL expr:v ident:u
  {:
    RESULT = new TimestampArithmeticExpr(ArithmeticExpr.Operator.ADD, t, v, u, false);
  :}
  // Set precedence to KW_INTERVAL (which is higher than ADD) for chaining.
  %prec KW_INTERVAL
  | expr:t SUBTRACT KW_INTERVAL expr:v ident:u
  {:
    RESULT =
        new TimestampArithmeticExpr(ArithmeticExpr.Operator.SUBTRACT, t, v, u, false);
  :}
  // Set precedence to KW_INTERVAL (which is higher than ADD) for chaining.
  %prec KW_INTERVAL
  // Timestamp arithmetic expr that looks like a function call.
  // We use func_arg_list instead of expr to avoid a shift/reduce conflict with
  // func_arg_list on COMMA, and report an error if the list contains more than one expr.
  // Although we don't want to accept function names as the expr, we can't parse it
  // it as just an IDENT due to the precedence conflict with function_name.
  | function_name:functionName LPAREN expr_list:l COMMA
    KW_INTERVAL expr:v ident:u RPAREN
  {:
    if (l.size() > 1) {
      // Report parsing failure on keyword interval.
      parser.parseError("interval", SqlParserSymbols.KW_INTERVAL);
    }
    if (functionName.getDb() != null) {
      // This function should not fully qualified
      throw new Exception("interval should not be qualified by database name");
    }

    RESULT = new TimestampArithmeticExpr(functionName.getFunction(), l.get(0), v, u);
  :}
  | function_name:functionName LPAREN time_unit:u COMMA expr:e1 COMMA expr:e2 RPAREN
  {:
    RESULT = new TimestampArithmeticExpr(functionName.getFunction(), e2, e1, u);
  :}
  ;

literal ::=
  INTEGER_LITERAL:l
  {: RESULT = new IntLiteral(l); :}
  | LARGE_INTEGER_LITERAL:l
  {: RESULT = new LargeIntLiteral(l); :}
  | FLOATINGPOINT_LITERAL:l
  {: RESULT = new FloatLiteral(l); :}
  | DECIMAL_LITERAL:l
  {: RESULT = new DecimalLiteral(l); :}
  | STRING_LITERAL:l
  {: RESULT = new StringLiteral(l); :}
  | KW_TRUE
  {: RESULT = new BoolLiteral(true); :}
  | KW_FALSE
  {: RESULT = new BoolLiteral(false); :}
  | KW_NULL
  {: RESULT = new NullLiteral(); :}
  | UNMATCHED_STRING_LITERAL:l expr:e
  {:
    // we have an unmatched string literal.
    // to correctly report the root cause of this syntax error
    // we must force parsing to fail at this point,
    // and generate an unmatched string literal symbol
    // to be passed as the last seen token in the
    // error handling routine (otherwise some other token could be reported)
    parser.parseError("literal", SqlParserSymbols.UNMATCHED_STRING_LITERAL);
  :}
  | NUMERIC_OVERFLOW:l
  {:
    // similar to the unmatched string literal case
    // we must terminate parsing at this point
    // and generate a corresponding symbol to be reported
    parser.parseError("literal", SqlParserSymbols.NUMERIC_OVERFLOW);
  :}
  ;

function_params ::=
  STAR
  {: RESULT = FunctionParams.createStarParam(); :}
  | KW_ALL STAR
  {: RESULT = FunctionParams.createStarParam(); :}
  | expr_list:exprs
  {: RESULT = new FunctionParams(false, exprs); :}
  | KW_ALL expr_list:exprs
  {: RESULT = new FunctionParams(false, exprs); :}
  | KW_DISTINCT:distinct expr_list:exprs
  {: RESULT = new FunctionParams(true, exprs); :}
  ;

predicate ::=
  expr:e KW_IS KW_NULL
  {: RESULT = new IsNullPredicate(e, false); :}
  | KW_ISNULL LPAREN expr:e RPAREN
  {: RESULT = new IsNullPredicate(e, false); :}
  | expr:e KW_IS KW_NOT KW_NULL
  {: RESULT = new IsNullPredicate(e, true); :}
  | between_predicate:p
  {: RESULT = p; :}
  | comparison_predicate:p
  {: RESULT = p; :}
  | compound_predicate:p
  {: RESULT = p; :}
  | in_predicate:p
  {: RESULT = p; :}
  | exists_predicate:p
  {: RESULT = p; :}
  | like_predicate:p
  {: RESULT = p; :}
  | LPAREN predicate:p RPAREN
  {:
    p.setPrintSqlInParens(true);
    RESULT = p;
  :}
  ;

comparison_predicate ::=
  expr:e1 EQUAL:op expr:e2
  {: RESULT = new BinaryPredicate(BinaryPredicate.Operator.EQ, e1, e2); :}
  | expr:e1 NOT EQUAL:op expr:e2
  {: RESULT = new BinaryPredicate(BinaryPredicate.Operator.NE, e1, e2); :}
  | expr:e1 LESSTHAN GREATERTHAN:op expr:e2
  {: RESULT = new BinaryPredicate(BinaryPredicate.Operator.NE, e1, e2); :}
  | expr:e1 LESSTHAN EQUAL:op expr:e2
  {: RESULT = new BinaryPredicate(BinaryPredicate.Operator.LE, e1, e2); :}
  | expr:e1 GREATERTHAN EQUAL:op expr:e2
  {: RESULT = new BinaryPredicate(BinaryPredicate.Operator.GE, e1, e2); :}
  | expr:e1 LESSTHAN:op expr:e2
  {: RESULT = new BinaryPredicate(BinaryPredicate.Operator.LT, e1, e2); :}
  | expr:e1 GREATERTHAN:op expr:e2
  {: RESULT = new BinaryPredicate(BinaryPredicate.Operator.GT, e1, e2); :}
  | expr:e1 LESSTHAN EQUAL GREATERTHAN:op expr:e2
  {: RESULT = new BinaryPredicate(BinaryPredicate.Operator.EQ_FOR_NULL, e1, e2); :}
  ;

like_predicate ::=
  expr:e1 KW_LIKE expr:e2
  {: RESULT = new LikePredicate(LikePredicate.Operator.LIKE, e1, e2); :}
  | expr:e1 KW_REGEXP expr:e2
  {: RESULT = new LikePredicate(LikePredicate.Operator.REGEXP, e1, e2); :}
  | expr:e1 KW_NOT KW_LIKE expr:e2
  {: RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT,
    new LikePredicate(LikePredicate.Operator.LIKE, e1, e2), null); :}
  | expr:e1 KW_NOT KW_REGEXP expr:e2
  {: RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT,
    new LikePredicate(LikePredicate.Operator.REGEXP, e1, e2), null); :}
  ;

// Avoid a reduce/reduce conflict with compound_predicate by explicitly
// using non_pred_expr and predicate separately instead of expr.
between_predicate ::=
  expr:e1 KW_BETWEEN non_pred_expr:e2 KW_AND expr:e3
  {: RESULT = new BetweenPredicate(e1, e2, e3, false); :}
  | expr:e1 KW_BETWEEN predicate:e2 KW_AND expr:e3
  {: RESULT = new BetweenPredicate(e1, e2, e3, false); :}
  | expr:e1 KW_NOT KW_BETWEEN non_pred_expr:e2 KW_AND expr:e3
  {: RESULT = new BetweenPredicate(e1, e2, e3, true); :}
  | expr:e1 KW_NOT KW_BETWEEN predicate:e2 KW_AND expr:e3
  {: RESULT = new BetweenPredicate(e1, e2, e3, true); :}
  ;

in_predicate ::=
  expr:e KW_IN LPAREN expr_list:l RPAREN
  {: RESULT = new InPredicate(e, l, false); :}
  | expr:e KW_NOT KW_IN LPAREN expr_list:l RPAREN
  {: RESULT = new InPredicate(e, l, true); :}
  | expr:e KW_IN subquery:s
  {: RESULT = new InPredicate(e, s, false); :}
  | expr:e KW_NOT KW_IN subquery:s
  {: RESULT = new InPredicate(e, s, true); :}
  ;

subquery ::=
  LPAREN subquery:query RPAREN
  {: RESULT = query; :}
  | LPAREN query_stmt:query RPAREN
  {: RESULT = new Subquery(query); :}
  ;

compound_predicate ::=
  expr:e1 KW_AND expr:e2
  {: RESULT = new CompoundPredicate(CompoundPredicate.Operator.AND, e1, e2); :}
  | expr:e1 KW_OR expr:e2
  {: RESULT = new CompoundPredicate(CompoundPredicate.Operator.OR, e1, e2); :}
  | KW_NOT expr:e
  {: RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT, e, null); :}
  | NOT expr:e
  {: RESULT = new CompoundPredicate(CompoundPredicate.Operator.NOT, e, null); :}
  ;

column_ref ::=
  ident:col
  {: RESULT = new SlotRef(null, col); :}
  // table_name:tblName DOT IDENT:col causes reduce/reduce conflicts
  | ident:tbl DOT ident:col
  {: RESULT = new SlotRef(new TableName(null, tbl), col); :}
  | ident:db DOT ident:tbl DOT ident:col
  {: RESULT = new SlotRef(new TableName(db, tbl), col); :}
  ;

privilege_type ::=
    ident:name
    {:
        RESULT = AccessPrivilege.fromName(name);
        if (RESULT == null) {
            throw new AnalysisException("Unknown privilege type " + name);
        }
    :}
    | KW_ALL:id
    {:
        RESULT = AccessPrivilege.ALL;
    :}
    ;

privilege_list ::=
    privilege_list:l COMMA privilege_type:priv
    {:
        l.add(priv);
        RESULT = l;
    :}
    | privilege_type:priv
    {:
        RESULT = Lists.newArrayList(priv);
    :}
    ;

string_list ::=
    string_list:l COMMA STRING_LITERAL:item
    {:
        l.add(item);
        RESULT = l;
    :}
    | STRING_LITERAL:item
    {:
        RESULT = Lists.newArrayList(item);
    :}
    ;

integer_list ::=
    integer_list:l COMMA INTEGER_LITERAL:item
    {:
        l.add(item);
        RESULT = l;
    :}
    | INTEGER_LITERAL:item
    {:
        RESULT = Lists.newArrayList(item);
    :}
    ;

admin_stmt ::=
    KW_ADMIN KW_SHOW KW_REPLICA KW_STATUS KW_FROM base_table_ref:table_ref opt_wild_where
    {:
        RESULT = new AdminShowReplicaStatusStmt(table_ref, parser.where);
    :}
    | KW_ADMIN KW_SHOW KW_REPLICA KW_DISTRIBUTION KW_FROM base_table_ref:table_ref
    {:
        RESULT = new AdminShowReplicaDistributionStmt(table_ref);
    :}
    | KW_ADMIN KW_SET KW_REPLICA KW_STATUS KW_PROPERTIES LPAREN key_value_map:prop RPAREN
    {:
        RESULT = new AdminSetReplicaStatusStmt(prop);
    :}
    | KW_ADMIN KW_REPAIR KW_TABLE base_table_ref:table_ref
    {:
        RESULT = new AdminRepairTableStmt(table_ref);
    :}
    | KW_ADMIN KW_CANCEL KW_REPAIR KW_TABLE base_table_ref:table_ref
    {:
        RESULT = new AdminCancelRepairTableStmt(table_ref);
    :}
    | KW_ADMIN KW_SET KW_FRONTEND KW_CONFIG opt_key_value_map:configs
    {:
        RESULT = new AdminSetConfigStmt(AdminSetConfigStmt.ConfigType.FRONTEND, configs);
    :}
    | KW_ADMIN KW_SHOW KW_FRONTEND KW_CONFIG opt_wild_where
    {:
        RESULT = new AdminShowConfigStmt(AdminSetConfigStmt.ConfigType.FRONTEND, parser.wild);
    :}
    | KW_ADMIN KW_CHECK KW_TABLET LPAREN integer_list:tabletIds RPAREN opt_properties:properties
    {:
        RESULT = new AdminCheckTabletsStmt(tabletIds, properties);
    :}
    ;

truncate_stmt ::=
    KW_TRUNCATE KW_TABLE base_table_ref:tblRef
    {:
        RESULT = new TruncateTableStmt(tblRef);
    :}
    ;

unsupported_stmt ::=
    KW_START KW_TRANSACTION opt_with_consistent_snapshot:v
    {:
        RESULT = new UnsupportedStmt();
    :}
    | KW_BEGIN opt_work:work
    {:
        RESULT = new UnsupportedStmt();
    :}
    | KW_COMMIT opt_work opt_chain opt_release
    {:
        RESULT = new UnsupportedStmt();
    :}
    | KW_ROLLBACK opt_work opt_chain opt_release
    {:
        RESULT = new UnsupportedStmt();
    :}
    ;

opt_with_consistent_snapshot ::=
    {:
        RESULT = null;
    :}
    | KW_WITH KW_CONSISTENT KW_SNAPSHOT
    {:
        RESULT = null;
    :}
    ;

opt_work ::=
    {:
        RESULT = null;
    :}
    | KW_WORK
    {:
        RESULT = null;
    :}
    ;

opt_chain ::=
    {:
        RESULT = null;
    :}
    | KW_AND KW_NO KW_CHAIN
    {:
        RESULT = null;
    :}
    | KW_AND KW_CHAIN
    {:
        RESULT = null;
    :}
    ;

opt_release ::=
    {:
        RESULT = null;
    :}
    | KW_RELEASE
    {:
        RESULT = null;
    :}
    | KW_NO KW_RELEASE
    {:
        RESULT = null;
    :}
    ;

type_func_name_keyword ::=
    KW_LEFT:id
    {: RESULT = id; :}
    | KW_RIGHT:id
    {: RESULT = id; :}
    ;

// Keyword that we allow for identifiers
keyword ::=
    KW_AFTER:id
    {: RESULT = id; :}
    | KW_AGGREGATE:id
    {: RESULT = id; :}
    | KW_AUTHORS:id
    {: RESULT = id; :}
    | KW_BACKUP:id
    {: RESULT = id; :}
    | KW_BEGIN:id
    {: RESULT = id; :}
    | KW_BITMAP:id
    {: RESULT = id; :}
    | KW_BITMAP_UNION:id
    {: RESULT = id; :}
    | KW_BOOLEAN:id
    {: RESULT = id; :}
    | KW_BROKER:id
    {: RESULT = id; :}
    | KW_BACKENDS:id
    {: RESULT = id; :}
    | KW_BUILTIN:id
    {: RESULT = id; :}
    | KW_CHAIN:id
    {: RESULT = id; :}
    | KW_CHARSET:id
    {: RESULT = id; :}
    | KW_CHECK:id
    {: RESULT = id; :}
    | KW_COLUMNS:id
    {: RESULT = id; :}
    | KW_COMMENT:id
    {: RESULT = id; :}
    | KW_COMMITTED:id
    {: RESULT = id; :}
    | KW_CONSISTENT:id
    {: RESULT = id; :}
    | KW_COLLATION:id
    {: RESULT = id; :}
    | KW_COMMIT:id
    {: RESULT = id; :}
    | KW_CONFIG:id
    {: RESULT = id; :}
    | KW_CONNECTION:id
    {: RESULT = id; :}
    | KW_CONNECTION_ID:id
    {: RESULT = id; :}
    | KW_DATA:id
    {: RESULT = id; :}
    | KW_DATE:id
    {: RESULT = id; :}
    | KW_DATETIME:id
    {: RESULT = id; :}
    | KW_DISTINCTPC:id
    {: RESULT = id; :}
    | KW_DISTINCTPCSA:id
    {: RESULT = id; :}
    | KW_BUCKETS:id
    {: RESULT = id; :}
    | KW_FILE:id
    {: RESULT = id; :}
    | KW_FIRST:id
    {: RESULT = id; :}
    | KW_FORMAT:id
    {: RESULT = id; :}
    | KW_HLL_UNION:id
    {: RESULT = id; :}
    | KW_PATH:id
    {: RESULT = id; :}
    | KW_FUNCTION:id
    {: RESULT = id; :}
    | KW_END:id
    {: RESULT = id; :}
    | KW_ENGINE:id
    {: RESULT = id; :}
    | KW_ENGINES:id
    {: RESULT = id; :}
    | KW_ERRORS:id
    {: RESULT = id; :}
    | KW_EVENTS:id
    {: RESULT = id; :}
    | KW_EXTERNAL:id
    {: RESULT = id; :}
    | KW_GLOBAL:id
    {: RESULT = id; :}
    | KW_HASH:id
    {: RESULT = id; :}
    | KW_HELP:id
    {: RESULT = id; :}
    | KW_HUB:id
    {: RESULT = id; :}
    | KW_IDENTIFIED:id
    {: RESULT = id; :}
    | KW_INDEXES:id
    {: RESULT = id; :}
    | KW_ISNULL:id
    {: RESULT = id; :}
    | KW_ISOLATION:id
    {: RESULT = id; :}
    | KW_LABEL:id
    {: RESULT = id; :}
    | KW_LAST:id
    {: RESULT = id; :}
    | KW_LESS:id
    {: RESULT = id; :}
    | KW_LEVEL:id
    {: RESULT = id; :}
    | KW_LOCAL:id
    {: RESULT = id; :}
    | KW_LOCATION:id
    {: RESULT = id; :}
    | KW_MATERIALIZED:id
    {: RESULT = id; :}
    | KW_MERGE:id
    {: RESULT = id; :}
    | KW_MODIFY:id
    {: RESULT = id; :}
    | KW_NAME:id
    {: RESULT = id; :}
    | KW_NAMES:id
    {: RESULT = id; :}
    | KW_NEGATIVE:id
    {: RESULT = id; :}
    | KW_NO:id
    {: RESULT = id; :}
    | KW_NULLS:id
    {: RESULT = id; :}
    | KW_OFFSET:id
    {: RESULT = id; :}
    | KW_ONLY:id
    {: RESULT = id; :}
    | KW_OPEN:id
    {: RESULT = id; :}
    | KW_PARTITIONS:id
    {: RESULT = id; :}
    | KW_PASSWORD:id
    {: RESULT = id; :}
    | KW_PLUGIN:id
    {: RESULT = id; :}
    | KW_PLUGINS:id
    {: RESULT = id; :}
    | KW_PROC:id
    {: RESULT = id; :}
    | KW_PROCESSLIST:id
    {: RESULT = id; :}
    | KW_PROPERTIES:id
    {: RESULT = id; :}
    | KW_PROPERTY:id
    {: RESULT = id; :}
    | KW_QUERY:id
    {: RESULT = id; :}
    | KW_QUOTA:id
    {: RESULT = id; :}
    | KW_RANDOM:id
    {: RESULT = id; :}
    | KW_RECOVER:id
    {: RESULT = id; :}
    | KW_REPEATABLE:id
    {: RESULT = id; :}
    | KW_REPLACE_IF_NOT_NULL:id
    {: RESULT = id; :}
    | KW_REPOSITORY:id
    {: RESULT = id; :}
    | KW_REPOSITORIES:id
    {: RESULT = id; :}
    | KW_RESOURCE:id
    {: RESULT = id; :}
    | KW_RESOURCES:id
    {: RESULT = id; :}
    | KW_RESTORE:id
    {: RESULT = id; :}
    | KW_RETURNS:id
    {: RESULT = id; :}
    | KW_ROLLBACK:id
    {: RESULT = id; :}
    | KW_ROLLUP:id
    {: RESULT = id; :}
    | KW_SCHEMA:id
    {: RESULT = id; :}
    | KW_SERIALIZABLE:id
    {: RESULT = id; :}
    | KW_SESSION:id
    {: RESULT = id; :}
    | KW_SNAPSHOT:id
    {: RESULT = id; :}
    | KW_SONAME:id
    {: RESULT = id; :}
    | KW_SPLIT:id
    {: RESULT = id; :}
    | KW_START:id
    {: RESULT = id; :}
    | KW_STATUS:id
    {: RESULT = id; :}
    | KW_STORAGE:id
    {: RESULT = id; :}
    | KW_STRING:id
    {: RESULT = id; :}
    | KW_TABLES:id
    {: RESULT = id; :}
    | KW_TEMPORARY:id
    {: RESULT = id; :}
    | KW_THAN:id
    {: RESULT = id; :}
    | KW_TIMESTAMP:id
    {: RESULT = id; :}
    | KW_TRANSACTION:id
    {: RESULT = id; :}
    | KW_TRIGGERS:id
    {: RESULT = id; :}
    | KW_TRUNCATE:id
    {: RESULT = id; :}
    | KW_TYPE:id
    {: RESULT = id; :}
    | KW_TYPES:id
    {: RESULT = id; :}
    | KW_UNCOMMITTED:id
    {: RESULT = id; :}
    | KW_USER:id
    {: RESULT = id; :}
    | KW_VARIABLES:id
    {: RESULT = id; :}
    | KW_VALUE:id
    {: RESULT = id; :}
    | KW_VERBOSE:id
    {: RESULT = id; :}
    | KW_VIEW:id
    {: RESULT = id; :}
    | KW_WARNINGS:id
    {: RESULT = id; :}
    | KW_WORK:id
    {: RESULT = id; :}
    | KW_CLUSTER:id
    {: RESULT = id; :}
    | KW_CLUSTERS:id
    {: RESULT = id; :}
    | KW_LINK:id
    {: RESULT = id; :}
    | KW_MIGRATE:id
    {: RESULT = id; :}
    | KW_MIGRATIONS:id
    {: RESULT = id; :}
    | KW_COUNT:id
    {: RESULT = id; :}
    | KW_SUM:id
    {: RESULT = id; :}
    | KW_MIN:id
    {: RESULT = id; :}
    | KW_MAX:id
    {: RESULT = id; :}
    | KW_FREE:id
    {: RESULT = id; :}
    | KW_TASK:id
    {: RESULT = id; :}
    | KW_ROUTINE:id
    {: RESULT = id; :}
    | KW_PAUSE:id
    {: RESULT = id; :}
    | KW_RESUME:id
    {: RESULT = id; :}
    | KW_STOP:id
    {: RESULT = id; :}
    | KW_GROUPING:id
    {: RESULT = id; :}
    | KW_DYNAMIC:id
    {: RESULT = id; :}
    | time_unit:id
    {: RESULT = id; :}
    ;

// Identifier that contain keyword
ident ::=
    IDENT:id
    {:
        RESULT = id;
    :}
    | keyword:id
    {:
        RESULT = id;
    :}
    ;

// Identifier or text
ident_or_text ::=
    ident:id
    {:
        RESULT = id;
    :}
    | STRING_LITERAL:text
    {:
        RESULT = text;
    :}
    ;

time_unit ::=
    KW_YEAR:id
    {: RESULT = id; :}
    | KW_MONTH:id
    {: RESULT = id; :}
    | KW_WEEK:id
    {: RESULT = id; :}
    | KW_DAY:id
    {: RESULT = id; :}
    | KW_HOUR:id
    {: RESULT = id; :}
    | KW_MINUTE:id
    {: RESULT = id; :}
    | KW_SECOND:id
    {: RESULT = id; :}
    ;

// TODO(zhaochun): Select for SQL-2003 (http://savage.net.au/SQL/sql-2003-2.bnf.html)

// Specify a table derived from the result of a <table expression>.
// query_spec ::=
//     KW_SELECT opt_set_quantifier select_list table_expr
//
// opt_set_quantifier ::=
//     KW_DISTINCT
//     | KW_ALL
//     ;
//
// select_list ::=
//     STAR
//     | select_sublist
//     ;
//
// select_sublist ::=
//     derived_column
//     | qualified_star
//     ;
//
// table_expr ::=
//     from_clause where_clause group_by_clause having_clause order_by_clause limit_clause
//     ;
//
// // Specify a table derived from one or more tables.
// from_clause ::=
//     table_ref_list
//     ;
//
// table_ref_list ::=
//     table_ref
//     | table_ref_list COMMA table_ref
//     ;
//
// // Reference a table.
// table_ref ::=
//     table_primary
//     | joined_table
//     ;
//
// table_primary ::=
//     table_name
//     | subquery opt_as ident
//     | LPAREN joined_table RPAREN
//     ;
//
// opt_as ::=
//     /* Empty */
//     | KW_AS
//     ;
//
// // Specify a table.
// // TODO(zhaochun): Do not support EXCEPT INTERSECT and joined table
// query_expr_body ::=
//     query_term
//     | query_expr_body KW_UNION opt_set_quantifier query_term;
//     ;
//
// query_term ::=
//     query_spec
//     | LPAREN query_expr_body RPAREN
//     ;
//
// // Specify a scalar value, a row, or a table derived from a <query expression>.
// subquery ::=
//     LPAREN query_expr_body RPAREN;
