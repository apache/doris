// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

#pragma once
#include <brpc/controller.h>
#include <bthread/types.h>
#include <butil/errno.h>
#include <fmt/format.h>
#include <gen_cpp/PaloInternalService_types.h>
#include <gen_cpp/Types_types.h>
#include <gen_cpp/internal_service.pb.h>
#include <gen_cpp/types.pb.h>
#include <glog/logging.h>
#include <google/protobuf/stubs/callback.h>
#include <stddef.h>
#include <stdint.h>

#include <atomic>
// IWYU pragma: no_include <bits/chrono.h>
#include <chrono> // IWYU pragma: keep
#include <functional>
#include <initializer_list>
#include <map>
#include <memory>
#include <mutex>
#include <ostream>
#include <queue>
#include <set>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

#include "common/config.h"
#include "common/status.h"
#include "exec/data_sink.h"
#include "exec/tablet_info.h"
#include "gutil/ref_counted.h"
#include "runtime/exec_env.h"
#include "runtime/memory/mem_tracker.h"
#include "runtime/thread_context.h"
#include "runtime/types.h"
#include "util/countdown_latch.h"
#include "util/runtime_profile.h"
#include "util/stopwatch.hpp"
#include "vec/columns/column.h"
#include "vec/common/allocator.h"
#include "vec/core/block.h"
#include "vec/data_types/data_type.h"
#include "vec/exprs/vexpr_fwd.h"

namespace doris {
class DeltaWriterV2;
class ObjectPool;
class RowDescriptor;
class RuntimeState;
class TDataSink;
class TExpr;
class TabletSchema;
class TupleDescriptor;

namespace stream_load {

class OlapTableBlockConvertor;
class OlapTabletFinder;
class VOlapTableSinkV2;

using DeltaWriterForTablet = std::unordered_map<int64_t, std::unique_ptr<DeltaWriterV2>>;
using StreamPool = std::vector<brpc::StreamId>;
using StreamPoolForNode = std::unordered_map<int64_t, StreamPool>;
using NodeIdForStream = std::unordered_map<brpc::StreamId, int64_t>;
using NodePartitionTabletMapping =
        std::unordered_map<int64_t, std::unordered_map<int64_t, std::unordered_set<int64_t>>>;

class StreamSinkHandler : public brpc::StreamInputHandler {
public:
    StreamSinkHandler(VOlapTableSinkV2* sink) : _sink(sink) {}

    int on_received_messages(brpc::StreamId id, butil::IOBuf* const messages[],
                             size_t size) override;

    void on_idle_timeout(brpc::StreamId id) override {}

    void on_closed(brpc::StreamId id) override;

private:
    VOlapTableSinkV2* _sink;
};

struct Rows {
    int64_t partition_id;
    int64_t index_id;
    std::vector<int32_t> row_idxes;
};

using RowsForTablet = std::unordered_map<int64_t, Rows>;

// Write block data to Olap Table.
// When OlapTableSink::open() called, there will be a consumer thread running in the background.
// When you call VOlapTableSinkV2::send(), you will be the producer who products pending batches.
// Join the consumer thread in close().
class VOlapTableSinkV2 final : public DataSink {
public:
    // Construct from thrift struct which is generated by FE.
    VOlapTableSinkV2(ObjectPool* pool, const RowDescriptor& row_desc,
                     const std::vector<TExpr>& texprs, Status* status);

    ~VOlapTableSinkV2() override;

    Status init(const TDataSink& sink) override;
    // TODO: unify the code of prepare/open/close with result sink
    Status prepare(RuntimeState* state) override;

    Status open(RuntimeState* state) override;

    Status close(RuntimeState* state, Status close_status) override;
    Status send(RuntimeState* state, vectorized::Block* block, bool eos = false) override;

    // Returns the runtime profile for the sink.
    RuntimeProfile* profile() override { return _profile; }

private:
    Status _init_stream_pool(const NodeInfo& node_info, StreamPool& stream_pool);

    Status _init_stream_pools();

    void _build_tablet_node_mapping();

    void _generate_rows_for_tablet(RowsForTablet& rows_for_tablet,
                                   const VOlapTablePartition* partition, uint32_t tablet_index,
                                   int row_idx);

    Status _write_memtable(std::shared_ptr<vectorized::Block> block, int64_t tablet_id,
                           const Rows& rows, const std::vector<brpc::StreamId>& streams);

    Status _select_streams(int64_t tablet_id, std::vector<brpc::StreamId>& streams);

    Status _close_load(brpc::StreamId stream);

    Status _cancel(Status status);

    std::shared_ptr<MemTracker> _mem_tracker;

    ObjectPool* _pool;

    // unique load id
    PUniqueId _load_id;
    int64_t _txn_id = -1;
    int _num_replicas = -1;
    int _tuple_desc_id = -1;

    // this is tuple descriptor of destination OLAP table
    TupleDescriptor* _output_tuple_desc = nullptr;

    // number of senders used to insert into OlapTable, if we only support single node insert,
    // all data from select should collectted and then send to OlapTable.
    // To support multiple senders, we maintain a channel for each sender.
    int _sender_id = -1;
    int _num_senders = -1;
    bool _is_high_priority = false;

    // TODO(zc): think about cache this data
    std::shared_ptr<OlapTableSchemaParam> _schema;
    std::unordered_map<int64_t, std::shared_ptr<TabletSchema>> _tablet_schema_for_index;
    std::unordered_map<int64_t, bool> _enable_unique_mow_for_index;
    OlapTableLocationParam* _location = nullptr;
    DorisNodesInfo* _nodes_info = nullptr;

    RuntimeProfile* _profile = nullptr;

    std::unique_ptr<OlapTabletFinder> _tablet_finder;

    std::unique_ptr<OlapTableBlockConvertor> _block_convertor;

    // Stats for this
    int64_t _send_data_ns = 0;
    int64_t _number_input_rows = 0;
    int64_t _number_output_rows = 0;

    MonotonicStopWatch _row_distribution_watch;

    RuntimeProfile::Counter* _input_rows_counter = nullptr;
    RuntimeProfile::Counter* _output_rows_counter = nullptr;
    RuntimeProfile::Counter* _filtered_rows_counter = nullptr;
    RuntimeProfile::Counter* _send_data_timer = nullptr;
    RuntimeProfile::Counter* _row_distribution_timer = nullptr;
    RuntimeProfile::Counter* _write_memtable_timer = nullptr;
    RuntimeProfile::Counter* _wait_mem_limit_timer = nullptr;
    RuntimeProfile::Counter* _validate_data_timer = nullptr;
    RuntimeProfile::Counter* _open_timer = nullptr;
    RuntimeProfile::Counter* _close_timer = nullptr;
    RuntimeProfile::Counter* _close_writer_timer = nullptr;
    RuntimeProfile::Counter* _close_load_timer = nullptr;
    RuntimeProfile::Counter* _close_stream_timer = nullptr;

    // Save the status of close() method
    Status _close_status;

    VOlapTablePartitionParam* _vpartition = nullptr;
    vectorized::VExprContextSPtrs _output_vexpr_ctxs;

    RuntimeState* _state = nullptr;

    std::unordered_set<int64_t> _opened_partitions;

    std::unordered_map<int64_t, std::vector<PTabletID>> _tablets_for_node;
    std::unordered_map<int64_t, std::vector<PTabletID>> _indexes_from_node;
    std::unordered_map<int64_t, std::unordered_set<int64_t>> _send_partitions_recorder;

    std::shared_ptr<StreamPoolForNode> _stream_pool_for_node;
    std::shared_ptr<NodeIdForStream> _node_id_for_stream;
    size_t _stream_index = 0;
    std::shared_ptr<DeltaWriterForTablet> _delta_writer_for_tablet;

    std::atomic<int> _pending_reports {0};

    std::unordered_map<int64_t, std::vector<int64_t>> _tablet_success_map;
    std::unordered_map<int64_t, std::vector<int64_t>> _tablet_failure_map;
    bthread::Mutex _tablet_success_map_mutex;
    bthread::Mutex _tablet_failure_map_mutex;

    friend class StreamSinkHandler;
};

} // namespace stream_load
} // namespace doris
