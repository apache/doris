// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

#pragma once

#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <common/status.h>
#include <vec/columns/column.h>
#include <vec/data_types/data_type.h>

namespace doris::pyudf {
/**
 * {@link DataTypeConverter} class is responsible for converting between column data and Python objects.
 */
class DataTypeConverter {
public:
    virtual ~DataTypeConverter() = default;

    /**
     * Converts the specific element of a column to a Python object.
     *
     * @param column the input column.
     * @param type the type of input column.
     * @param row_index the row index of the specific element.
     * @param py_object the Python object result.
     * @return status.
     */
    virtual Status convert_to_python_object(const vectorized::ColumnPtr& column,
                                            const vectorized::DataTypePtr& type, size_t row_index,
                                            PyObject*& py_object) const = 0;

    /**
     * Converts a Python object to a column element and insert it to column.
     *
     * @param py_object the python object.
     * @param type the type of the column.
     * @param column the input column.
     * @return status.
     */
    virtual Status convert_to_column_data(PyObject* py_object, const vectorized::DataTypePtr& type,
                                          vectorized::ColumnPtr& column) const = 0;

    /**
     * Create a column based on the given data type.
     *
     * @param type the type of the column.
     * @param column the input column.
     * @return status.
     */
    virtual Status create_column(const vectorized::DataTypePtr& type,
                                 vectorized::ColumnPtr& column) const = 0;
    /**
     * Insert a default value to column.
     *
     * @param type the type of the column.
     * @param column the input column.
     * @return status.
     */
    virtual Status insert_column_default_data(const vectorized::DataTypePtr& type,
                                              vectorized::ColumnPtr& column) const = 0;

    /**
     * Flattens the elements of a list Python object and inserts them into the specified column.
     *
     * @param py_object the Python list object containing the elements to be flattened and inserted.
     * @param type the type of the column.
     * @param column the input column.
     * @return status.
     */
    virtual Status flatten_to_column_data(PyObject* py_object, const vectorized::DataTypePtr& type,
                                          vectorized::ColumnPtr& column) const = 0;

    /**
     * Replicate a single value from the source column to the result column multiple times.
     *
     * This function is used in the context of Table Functions (UTF) to copy data generated by user code
     * into the result column. It is particularly useful when multiple table functions are in effect,
     * as it avoids the overhead of multiple extra executions.
     *
     * @param source_column the source column containing the value to replicate.
     * @param result_column the result column where the value will be replicated.
     * @param index the index in the source column from which to take the value.
     * @param repeat_time the number of times to replicate.
     * @return status.
     */
    virtual Status replicate_value_to_result_column(vectorized::ColumnPtr& source_column,
                                                    vectorized::MutableColumnPtr& result_column,
                                                    size_t index, size_t repeat_time) const = 0;

    /**
     * Copy the data from the specific range of the source column to result column.
     *
     * This function is used in the context of Table Functions (UTF) to copy data generated by user code
     * into the result column.
     *
     * @param source_column the source column.
     * @param result_column the result column.
     * @param start_index the start index.
     * @param range_size the range size.
     * @return status.
     */
    virtual Status copy_range_to_result_column(vectorized::ColumnPtr& source_column,
                                               vectorized::MutableColumnPtr& result_column,
                                               size_t start_index, size_t range_size) const = 0;
};

} // namespace doris::pyudf