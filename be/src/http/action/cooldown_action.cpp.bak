// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

#include "http/action/cooldown_action.h"

#include <string_view>

#include "common/status.h"
#include "http/http_channel.h"
#include "http/http_headers.h"
#include "http/http_request.h"
#include "http/http_status.h"
#include "olap/tablet_manager.h"

namespace doris {

/// retrieve specific id from req
static Status check_param(HttpRequest* req, uint64_t* id_param, const std::string param_name) {
    const auto& req_id_param = req->param(param_name);
    if (!req_id_param.empty()) {
        try {
            *id_param = std::stoull(req_id_param);
        } catch (const std::exception& e) {
            return Status::InternalError("convert {} failed, {}", param_name, e.what());
        }
    }

    return Status::OK();
}

void CooldownAction::handle(HttpRequest* req) {
    req->add_output_header(HttpHeaders::CONTENT_TYPE, "application/json");

    std::string json_result;
    Status st = _handle_show_cooldown(req, &json_result);
    if (!st.ok()) {
        HttpChannel::send_reply(req, HttpStatus::OK, st.to_json());
    } else {
        HttpChannel::send_reply(req, HttpStatus::OK, json_result);
    }
}

Status CooldownAction::_handle_show_cooldown(HttpRequest* req, std::string* json_result) {
    uint64_t tablet_id = 0;
    // check & retrieve tablet_id from req if it contains
    RETURN_NOT_OK_STATUS_WITH_WARN(check_param(req, &tablet_id, TABLET_ID_KEY),
                                   "check param failed");
    if (tablet_id == 0) {
        return Status::InternalError("check param failed: missing tablet_id");
    }

    TabletSharedPtr tablet = _engine.tablet_manager()->get_tablet(tablet_id);
    if (tablet == nullptr) {
        return Status::NotFound("Tablet not found. tablet_id={}", tablet_id);
    }

    tablet->get_cooldown_status(json_result);
    return Status::OK();
}

} // namespace doris
